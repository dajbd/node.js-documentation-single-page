<!DOCTYPE html>
<!-- saved from url=(0031)https://nodejs.org/api/all.html -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <title>About this Documentation Node.js v6.2.2 Manual &amp; Documentation</title>
  <!-- <link rel="stylesheet" href="./About this Documentation Node.js v6.2.2 Manual & Documentation_files/css?__inline"> -->
  <style>/*--------------------- Layout and Typography ----------------------------*/
html {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-variant-ligatures: none;
          font-variant-ligatures: none;
}

body {
  font-family: "Lato", "Lucida Grande", "Lucida Sans Unicode", "Lucida Sans", Verdana, Tahoma, sans-serif;
  font-size: 62.5%;
  margin: 0;
  padding: 0;
  color: #333;
  background: #fff;
}

pre, tt, code, .pre, span.type, a.type {
  font-family: Monaco, Consolas, "Lucida Console", monospace;
}

#content {
  font-size: 1.8em;
  position: relative;
}

a, a:link, a:active {
  color: #43853d;
  text-decoration: none;
  border-radius: 2px;
  padding: .1em .2em;
  margin: -.1em;
}

a:hover, a:focus {
  color: #fff;
  background-color: #43853d;
  outline: none;
}

strong {
  font-weight: 700;
}

code a:hover {
  background: none;
}

em code {
  font-style: normal;
}

#changelog #gtoc {
  display: none;
}

#gtoc {
  font-size: .8em;
}

.line {
  width: calc(100% - 1em);
  display: block;
  padding-bottom: 1px;
}

.api_stability {
  color: white !important;
  margin: 0 0 1em 0;
  font-family: "Lato", "Lucida Grande", "Lucida Sans Unicode", "Lucida Sans", Verdana, Tahoma, sans-serif;
  font-weight: 700;
}

.api_stability * {
  color: white !important;
}

.api_stability a {
  text-decoration: underline;
}

.api_stability a:hover, .api_stability a:active, .api_stability a:focus {
  background: rgba(255, 255, 255, .4);
}

.api_stability a code {
  background: none;
}

.api_stability_0 {
  background-color: #D60027;
}

.api_stability_1 {
  background-color: #EC5315;
}

.api_stability_2 {
  background-color: #4EBA0F;
}

.api_stability_3 {
  background-color: #0084B6;
}

.api_metadata {
  font-size: .75em;
  margin-bottom: 1em;
}

.api_metadata span {
  margin-right: 1em;
}

.api_metadata span:last-child {
  margin-right: 0px;
}

ul.plain {
  list-style: none;
}

abbr {
  border-bottom: 1px dotted #454545;
}

p {
  position: relative;
  text-rendering: optimizeLegibility;
  margin: 0 0 1em 0;
  line-height: 1.5em;
}

#apicontent > *:last-child {
  margin-bottom: 0;
  padding-bottom: 2em;
}

table {
  border-collapse: collapse;
  margin: 0 0 1.5em 0;
}

th, td {
  border: 1px solid #aaa;
}

th {
  text-align:left;
}

ol, ul, dl {
  margin: 0 0 .6em 0;
  padding: 0;
}

ol ul, ol ol, ol dl, ul ul, ul ol, ul dl, dl ul, dl ol, dl dl {
  margin-bottom: 0;
}

ul, ol {
  margin-left: 2em;
}

dl dt {
  position: relative;
  margin: 1.5em 0 0;
}

dl dd {
  position: relative;
  margin: 0 1em 0;
}

dd + dt.pre {
  margin-top: 1.6em;
}

h1, h2, h3, h4, h5, h6 {
  text-rendering: optimizeLegibility;
  font-weight: 700;
  position: relative;
  margin-bottom: .5em;
}

header h1 {
  line-height: 2em;
  margin: 0;
}

#apicontent {
  padding-top: 1em;
}

#apicontent .line {
  width: calc(50% - 1em);
  margin: 1em 1em .95em;
  background-color: #ccc;
}

#toc + h1 {
  margin-top: 1em;
  padding-top: 0;
}

h2 {
  font-size: 1.5em;
  margin: 1em 0 .5em;
}

h2 + h2 {
  margin: 0 0 .5em;
}

h3 {
  font-size: 1em;
  margin: 1.5em 0 .5em;
}

h3 + h3 {
  margin: 0 0 .5em;
}

h2, h3, h4 {
  position: relative;
  padding-right: 40px;
}

h1 span, h2 span, h3 span, h4 span {
  position: absolute;
  display: block;
  top: 0;
  right: 0;
}

h1 span:hover, h2 span:hover, h3 span:hover, h4 span:hover {
  opacity: 1;
}

h1 span a, h2 span a, h3 span a, h4 span a {
  font-size: .8em;
  color: #000;
  text-decoration: none;
  font-weight: bold;
}

h5 {
  font-size: 1.125em;
  line-height: 1.4em;
}

h6 {
  font-size: 1em;
  line-height: 1.4667em;
}

pre, tt, code {
  line-height: 1.5em;
  margin: 0; padding: 0;
}

.pre {
  line-height: 1.5em;
  font-size: 1.2em;
}

pre {
  padding: 1em;
  vertical-align: top;
  background: #f2f2f2;
  margin: 1em;
  overflow-x: auto;
}

pre > code {
  font-size: .8em;
}

pre + h3 {
  margin-top: 2.225em;
}

code.pre {
  white-space: pre;
}

#intro {
  margin-top: 1.25em;
  margin-left: 1em;
}

#intro a {
  color: #ddd;
  font-size: 1.25em;
  font-weight: bold;
}

hr {
  background: none;
  border: medium none;
  border-bottom: 1px solid #7a7a7a;
  margin: 0 0 1em 0;
}

#toc h2 {
  margin-top: 0;
  font-size: 1em;
  line-height: 0;
  margin: 1.5em 0;
}

#toc ul {
  font-size: .8125em;
}

#toc ul ul {
  font-size: 1em;
}

#toc ul a {
  text-decoration:none;
}

#toc ul li {
  margin-bottom: .666em;
  list-style: square outside;
}

#toc li > ul {
  margin-top: .666em;
}

#apicontent li {
  margin-bottom: .5em;
}

#apicontent li:last-child {
  margin-bottom: 0;
}

p tt, p code, li code {
  font-size: .9em;
  color: #040404;
  background-color: #f2f2f2;
  border-radius: 2px;
  padding: .1em .3em;
}

a code {
  color: inherit;
  background: inherit;
  padding: 0;
}

.type {
  font-size: .9em;
  line-height: 1.5em;
}

#column1.interior {
  margin-left: 234px;
  padding: 0 2em;
  -webkit-padding-start: 1.5em;
}

#column2.interior {
  width: 234px;
  background: #333;
  position: fixed;
  left: 0;
  top: 0;
  bottom: 0;
  overflow-x: hidden;
  overflow-y: scroll;
}

#column2 ul {
  list-style: none;
  margin: .9em 0 .5em;
  background: #333;
}

#column2 > :first-child {
  margin: 1.25em 1em;
}

#column2 > ul:nth-child(2) {
  margin: 1.25em 0 .5em;
}

#column2 > ul:last-child {
  margin: .9em 0 1.25em;
}

#column2 ul li {
  padding-left: 1.4em;
  margin-bottom: .5em;
  padding-bottom: .5em;
  font-size: .8em;
}

#column2 .line {
  margin: 0 .5em;
  background-color: #707070;
}

#column2 ul li:last-child {
  margin-bottom: 0;
}

#column2 ul li a {
  color: #ccc;
  border-radius: 0;
}

#column2 ul li a.active, #column2 ul li a.active:hover,
#column2 ul li a.active:focus {
  color: #43853d;
  border-radius: 0;
  border-bottom: 1px solid #43853d;
  background: none;
}

#intro a:hover, #intro a:focus,
#column2 ul li a:hover, #column2 ul li a:focus {
  color: #fff;
  background: none;
}

span > .mark, span > .mark:visited {
  font-size: 1em;
  color: #707070;
  position: absolute;
  top: 0px;
  right: 0px;
}

span > .mark:hover, span > .mark:focus, span > .mark:active {
  color: #43853d;
  background: none;
}

th, td {
  padding: .75em 1em .75em 1em;
  vertical-align: top;
}

th > *:last-child, td > *:last-child {
  margin-bottom: 0;
}

/* simpler clearfix */
.clearfix:after {
  content: ".";
  display: block;
  height: 0;
  clear: both;
  visibility: hidden;
}

@media only screen and (max-width: 1024px) {
  #content {
    font-size: 2.5em;
    overflow: visible;
  }
  #column1.interior {
    margin-left: 0;
    padding-left: .5em;
    padding-right: .5em;
    width: auto;
    overflow-y: visible;
  }
  #column2 {
    display: none;
  }
}

@media only screen and (max-width: 1024px) and (orientation: portrait) {
  #content {
    font-size: 3.5em;
  }
}

@media print {
  html {
    height: auto;
  }
  #column2.interior {
    display: none;
  }
  #column1.interior {
    margin-left: auto;
    overflow-y: auto;
  }
}
</style>
  <style>.sh_sourceCode {
  font-weight: normal;
  font-style: normal;
}

.sh_sourceCode .sh_symbol,
.sh_sourceCode .sh_cbracket {
  color: #333;
}

.sh_sourceCode .sh_keyword {
  color: #338;
}

.sh_sourceCode .sh_string,
.sh_sourceCode .sh_regexp,
.sh_sourceCode .sh_number,
.sh_sourceCode .sh_specialchar {
  color: #E54305;
}

.sh_sourceCode .sh_comment {
  color: #666;
  font-weight: lighter;
}
</style>
  <link rel="canonical" href="https://nodejs.org/api/all.html">
<style type="text/css">:root #content > #right > .dose > .dosesingle,
:root #content > #center > .dose > .dosesingle
{display:none !important;}</style></head>
<body class="alt apidoc" id="api-section-all" youdao="bind">
  <div id="content" class="clearfix">
    <div id="column2" class="interior">
      <div id="intro" class="interior">
        <a href="https://nodejs.org/" title="Go back to the home page">
          Node.js
        </a>
      </div>
      <ul>
<li><a class="nav-documentation" href="https://nodejs.org/api/documentation.html">About these Docs</a></li>
<li><a class="nav-synopsis" href="https://nodejs.org/api/synopsis.html">Usage &amp; Example</a></li>
</ul>
<div class="line"></div>

<ul>
<li><a class="nav-assert" href="#assert_assert">Assertion Testing</a></li>
<li><a class="nav-buffer" href="#buffer_buffer">Buffer</a></li>
<li><a class="nav-addons" href="#addons_addons">C/C++ Addons</a></li>
<li><a class="nav-child_process" href="#child_process_child_process">Child Processes</a></li>
<li><a class="nav-cluster" href="#cluster_cluster">Cluster</a></li>
<li><a class="nav-cli" href="#cli_cli">Command Line Options</a></li>
<li><a class="nav-console" href="#console_console">Console</a></li>
<li><a class="nav-crypto" href="#crypto_crypto">Crypto</a></li>
<li><a class="nav-debugger" href="#debugger_debugger">Debugger</a></li>
<li><a class="nav-dns" href="#dns_dns">DNS</a></li>
<li><a class="nav-domain" href="#domain_domain">Domain</a></li>
<li><a class="nav-errors" href="#errors_errors">Errors</a></li>
<li><a class="nav-events" href="#events_events">Events</a></li>
<li><a class="nav-fs" href="#fs_file_system">File System</a></li>
<li><a class="nav-globals" href="#globals_globals">Globals</a></li>
<li><a class="nav-http" href="#http_http">HTTP</a></li>
<li><a class="nav-https" href="#https_https">HTTPS</a></li>
<li><a class="nav-modules" href="#modules_modules">Modules</a></li>
<li><a class="nav-net" href="#net_net">Net</a></li>
<li><a class="nav-os" href="#os_os">OS</a></li>
<li><a class="nav-path" href="#path_path">Path</a></li>
<li><a class="nav-process" href="#process_process">Process</a></li>
<li><a class="nav-punycode" href="#punycode_punycode">Punycode</a></li>
<li><a class="nav-querystring" href="#querystring_query_string">Query Strings</a></li>
<li><a class="nav-readline" href="#readline_readline">Readline</a></li>
<li><a class="nav-repl" href="#repl_repl">REPL</a></li>
<li><a class="nav-stream" href="#stream_stream">Stream</a></li>
<li><a class="nav-string_decoder" href="#string_decoder_string_decoder">String Decoder</a></li>
<li><a class="nav-timers" href="#timers_timers">Timers</a></li>
<li><a class="nav-tls" href="#tls_tls">TLS/SSL</a></li>
<li><a class="nav-tty" href="#tty_tty">TTY</a></li>
<li><a class="nav-dgram" href="#dgram_dgram">UDP/Datagram</a></li>
<li><a class="nav-url" href="#url_url">URL</a></li>
<li><a class="nav-util" href="#util_util">Utilities</a></li>
<li><a class="nav-v8" href="#v8_v8">V8</a></li>
<li><a class="nav-vm" href="#vm_vm">VM</a></li>
<li><a class="nav-zlib" href="#zlib_zlib">ZLIB</a></li>
</ul>
<div class="line"></div>

<ul>
<li><a class="nav-https-github-com-nodejs-node" href="https://github.com/nodejs/node">GitHub Repo &amp; Issue Tracker</a></li>
<li><a class="nav-http-groups-google-com-group-nodejs" href="http://groups.google.com/group/nodejs">Mailing List</a></li>
</ul>

    </div>

    <div id="column1" data-id="all" class="interior">
      <header>
        <h1>Node.js v6.2.2 Documentation</h1>
        <div id="gtoc">
          <p>
            <a href="https://nodejs.org/api/index.html" name="toc">Index</a> |
            <a href="https://nodejs.org/api/all.html">View on single page</a> |
            <a href="https://nodejs.org/api/all.json">View as JSON</a>
          </p>
        </div>
        <hr>
      </header>

      <div id="toc">
        <h2>Table of Contents</h2>
        <ul>
<li><a href="#documentation_about_this_documentation">About this Documentation</a><ul>
<li><a href="#documentation_stability_index">Stability Index</a></li>
<li><a href="#documentation_json_output">JSON Output</a></li>
<li><a href="#documentation_syscalls_and_man_pages">Syscalls and man pages</a></li>
</ul>
</li>
<li><a href="#synopsis_usage">Usage</a><ul>
<li><a href="#synopsis_example">Example</a></li>
</ul>
</li>
<li><a href="#addons_addons">Addons</a><ul>
<li><a href="#addons_hello_world">Hello world</a><ul>
<li><a href="#addons_building">Building</a></li>
<li><a href="#addons_linking_to_node_js_own_dependencies">Linking to Node.js' own dependencies</a></li>
<li><a href="#addons_loading_addons_using_require">Loading Addons using require()</a></li>
</ul>
</li>
<li><a href="#addons_native_abstractions_for_node_js">Native Abstractions for Node.js</a></li>
<li><a href="#addons_addon_examples">Addon examples</a><ul>
<li><a href="#addons_function_arguments">Function arguments</a></li>
<li><a href="#addons_callbacks">Callbacks</a></li>
<li><a href="#addons_object_factory">Object factory</a></li>
<li><a href="#addons_function_factory">Function factory</a></li>
<li><a href="#addons_wrapping_c_objects">Wrapping C++ objects</a></li>
<li><a href="#addons_factory_of_wrapped_objects">Factory of wrapped objects</a></li>
<li><a href="#addons_passing_wrapped_objects_around">Passing wrapped objects around</a></li>
<li><a href="#addons_atexit_hooks">AtExit hooks</a><ul>
<li><a href="#addons_void_atexit_callback_args">void AtExit(callback, args)</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><a href="#assert_assert">Assert</a><ul>
<li><a href="#assert_assert_value_message">assert(value[, message])</a></li>
<li><a href="#assert_assert_deepequal_actual_expected_message">assert.deepEqual(actual, expected[, message])</a></li>
<li><a href="#assert_assert_deepstrictequal_actual_expected_message">assert.deepStrictEqual(actual, expected[, message])</a></li>
<li><a href="#assert_assert_doesnotthrow_block_error_message">assert.doesNotThrow(block[, error][, message])</a></li>
<li><a href="#assert_assert_equal_actual_expected_message">assert.equal(actual, expected[, message])</a></li>
<li><a href="#assert_assert_fail_actual_expected_message_operator">assert.fail(actual, expected, message, operator)</a></li>
<li><a href="#assert_assert_iferror_value">assert.ifError(value)</a></li>
<li><a href="#assert_assert_notdeepequal_actual_expected_message">assert.notDeepEqual(actual, expected[, message])</a></li>
<li><a href="#assert_assert_notdeepstrictequal_actual_expected_message">assert.notDeepStrictEqual(actual, expected[, message])</a></li>
<li><a href="#assert_assert_notequal_actual_expected_message">assert.notEqual(actual, expected[, message])</a></li>
<li><a href="#assert_assert_notstrictequal_actual_expected_message">assert.notStrictEqual(actual, expected[, message])</a></li>
<li><a href="#assert_assert_ok_value_message">assert.ok(value[, message])</a></li>
<li><a href="#assert_assert_strictequal_actual_expected_message">assert.strictEqual(actual, expected[, message])</a></li>
<li><a href="#assert_assert_throws_block_error_message">assert.throws(block[, error][, message])</a></li>
</ul>
</li>
<li><a href="#buffer_buffer">Buffer</a><ul>
<li><a href="#buffer_buffer_from_buffer_alloc_and_buffer_allocunsafe"><code>Buffer.from()</code>, <code>Buffer.alloc()</code>, and <code>Buffer.allocUnsafe()</code></a><ul>
<li><a href="#buffer_the_zero_fill_buffers_command_line_option">The <code>--zero-fill-buffers</code> command line option</a></li>
<li><a href="#buffer_what_makes_buffer_allocunsafe_size_and_buffer_allocunsafeslow_size_unsafe">What makes <code>Buffer.allocUnsafe(size)</code> and <code>Buffer.allocUnsafeSlow(size)</code> "unsafe"?</a></li>
</ul>
</li>
<li><a href="#buffer_buffers_and_character_encodings">Buffers and Character Encodings</a></li>
<li><a href="#buffer_buffers_and_typedarray">Buffers and TypedArray</a></li>
<li><a href="#buffer_buffers_and_es6_iteration">Buffers and ES6 iteration</a></li>
<li><a href="#buffer_class_buffer">Class: Buffer</a><ul>
<li><a href="#buffer_new_buffer_array">new Buffer(array)</a></li>
<li><a href="#buffer_new_buffer_buffer">new Buffer(buffer)</a></li>
<li><a href="#buffer_new_buffer_arraybuffer_byteoffset_length">new Buffer(arrayBuffer[, byteOffset [, length]])</a></li>
<li><a href="#buffer_new_buffer_size">new Buffer(size)</a></li>
<li><a href="#buffer_new_buffer_str_encoding">new Buffer(str[, encoding])</a></li>
<li><a href="#buffer_class_method_buffer_alloc_size_fill_encoding">Class Method: Buffer.alloc(size[, fill[, encoding]])</a></li>
<li><a href="#buffer_class_method_buffer_allocunsafe_size">Class Method: Buffer.allocUnsafe(size)</a></li>
<li><a href="#buffer_class_method_buffer_allocunsafeslow_size">Class Method: Buffer.allocUnsafeSlow(size)</a></li>
<li><a href="#buffer_class_method_buffer_bytelength_string_encoding">Class Method: Buffer.byteLength(string[, encoding])</a></li>
<li><a href="#buffer_class_method_buffer_compare_buf1_buf2">Class Method: Buffer.compare(buf1, buf2)</a></li>
<li><a href="#buffer_class_method_buffer_concat_list_totallength">Class Method: Buffer.concat(list[, totalLength])</a></li>
<li><a href="#buffer_class_method_buffer_from_array">Class Method: Buffer.from(array)</a></li>
<li><a href="#buffer_class_method_buffer_from_arraybuffer_byteoffset_length">Class Method: Buffer.from(arrayBuffer[, byteOffset[, length]])</a></li>
<li><a href="#buffer_class_method_buffer_from_buffer">Class Method: Buffer.from(buffer)</a></li>
<li><a href="#buffer_class_method_buffer_from_str_encoding">Class Method: Buffer.from(str[, encoding])</a></li>
<li><a href="#buffer_class_method_buffer_isbuffer_obj">Class Method: Buffer.isBuffer(obj)</a></li>
<li><a href="#buffer_class_method_buffer_isencoding_encoding">Class Method: Buffer.isEncoding(encoding)</a></li>
<li><a href="#buffer_buf_index">buf[index]</a></li>
<li><a href="#buffer_buf_compare_target_targetstart_targetend_sourcestart_sourceend">buf.compare(target[, targetStart[, targetEnd[, sourceStart[, sourceEnd]]]])</a></li>
<li><a href="#buffer_buf_copy_targetbuffer_targetstart_sourcestart_sourceend">buf.copy(targetBuffer[, targetStart[, sourceStart[, sourceEnd]]])</a></li>
<li><a href="#buffer_buf_entries">buf.entries()</a></li>
<li><a href="#buffer_buf_equals_otherbuffer">buf.equals(otherBuffer)</a></li>
<li><a href="#buffer_buf_fill_value_offset_end_encoding">buf.fill(value[, offset[, end]][, encoding])</a></li>
<li><a href="#buffer_buf_indexof_value_byteoffset_encoding">buf.indexOf(value[, byteOffset][, encoding])</a></li>
<li><a href="#buffer_buf_includes_value_byteoffset_encoding">buf.includes(value[, byteOffset][, encoding])</a></li>
<li><a href="#buffer_buf_keys">buf.keys()</a></li>
<li><a href="#buffer_buf_lastindexof_value_byteoffset_encoding">buf.lastIndexOf(value[, byteOffset][, encoding])</a></li>
<li><a href="#buffer_buf_length">buf.length</a></li>
<li><a href="#buffer_buf_readdoublebe_offset_noassert">buf.readDoubleBE(offset[, noAssert])</a></li>
<li><a href="#buffer_buf_readdoublele_offset_noassert">buf.readDoubleLE(offset[, noAssert])</a></li>
<li><a href="#buffer_buf_readfloatbe_offset_noassert">buf.readFloatBE(offset[, noAssert])</a></li>
<li><a href="#buffer_buf_readfloatle_offset_noassert">buf.readFloatLE(offset[, noAssert])</a></li>
<li><a href="#buffer_buf_readint8_offset_noassert">buf.readInt8(offset[, noAssert])</a></li>
<li><a href="#buffer_buf_readint16be_offset_noassert">buf.readInt16BE(offset[, noAssert])</a></li>
<li><a href="#buffer_buf_readint16le_offset_noassert">buf.readInt16LE(offset[, noAssert])</a></li>
<li><a href="#buffer_buf_readint32be_offset_noassert">buf.readInt32BE(offset[, noAssert])</a></li>
<li><a href="#buffer_buf_readint32le_offset_noassert">buf.readInt32LE(offset[, noAssert])</a></li>
<li><a href="#buffer_buf_readintbe_offset_bytelength_noassert">buf.readIntBE(offset, byteLength[, noAssert])</a></li>
<li><a href="#buffer_buf_readintle_offset_bytelength_noassert">buf.readIntLE(offset, byteLength[, noAssert])</a></li>
<li><a href="#buffer_buf_readuint8_offset_noassert">buf.readUInt8(offset[, noAssert])</a></li>
<li><a href="#buffer_buf_readuint16be_offset_noassert">buf.readUInt16BE(offset[, noAssert])</a></li>
<li><a href="#buffer_buf_readuint16le_offset_noassert">buf.readUInt16LE(offset[, noAssert])</a></li>
<li><a href="#buffer_buf_readuint32be_offset_noassert">buf.readUInt32BE(offset[, noAssert])</a></li>
<li><a href="#buffer_buf_readuint32le_offset_noassert">buf.readUInt32LE(offset[, noAssert])</a></li>
<li><a href="#buffer_buf_readuintbe_offset_bytelength_noassert">buf.readUIntBE(offset, byteLength[, noAssert])</a></li>
<li><a href="#buffer_buf_readuintle_offset_bytelength_noassert">buf.readUIntLE(offset, byteLength[, noAssert])</a></li>
<li><a href="#buffer_buf_slice_start_end">buf.slice([start[, end]])</a></li>
<li><a href="#buffer_buf_swap16">buf.swap16()</a></li>
<li><a href="#buffer_buf_swap32">buf.swap32()</a></li>
<li><a href="#buffer_buf_tostring_encoding_start_end">buf.toString([encoding[, start[, end]]])</a></li>
<li><a href="#buffer_buf_tojson">buf.toJSON()</a></li>
<li><a href="#buffer_buf_values">buf.values()</a></li>
<li><a href="#buffer_buf_write_string_offset_length_encoding">buf.write(string[, offset[, length]][, encoding])</a></li>
<li><a href="#buffer_buf_writedoublebe_value_offset_noassert">buf.writeDoubleBE(value, offset[, noAssert])</a></li>
<li><a href="#buffer_buf_writedoublele_value_offset_noassert">buf.writeDoubleLE(value, offset[, noAssert])</a></li>
<li><a href="#buffer_buf_writefloatbe_value_offset_noassert">buf.writeFloatBE(value, offset[, noAssert])</a></li>
<li><a href="#buffer_buf_writefloatle_value_offset_noassert">buf.writeFloatLE(value, offset[, noAssert])</a></li>
<li><a href="#buffer_buf_writeint8_value_offset_noassert">buf.writeInt8(value, offset[, noAssert])</a></li>
<li><a href="#buffer_buf_writeint16be_value_offset_noassert">buf.writeInt16BE(value, offset[, noAssert])</a></li>
<li><a href="#buffer_buf_writeint16le_value_offset_noassert">buf.writeInt16LE(value, offset[, noAssert])</a></li>
<li><a href="#buffer_buf_writeint32be_value_offset_noassert">buf.writeInt32BE(value, offset[, noAssert])</a></li>
<li><a href="#buffer_buf_writeint32le_value_offset_noassert">buf.writeInt32LE(value, offset[, noAssert])</a></li>
<li><a href="#buffer_buf_writeintbe_value_offset_bytelength_noassert">buf.writeIntBE(value, offset, byteLength[, noAssert])</a></li>
<li><a href="#buffer_buf_writeintle_value_offset_bytelength_noassert">buf.writeIntLE(value, offset, byteLength[, noAssert])</a></li>
<li><a href="#buffer_buf_writeuint8_value_offset_noassert">buf.writeUInt8(value, offset[, noAssert])</a></li>
<li><a href="#buffer_buf_writeuint16be_value_offset_noassert">buf.writeUInt16BE(value, offset[, noAssert])</a></li>
<li><a href="#buffer_buf_writeuint16le_value_offset_noassert">buf.writeUInt16LE(value, offset[, noAssert])</a></li>
<li><a href="#buffer_buf_writeuint32be_value_offset_noassert">buf.writeUInt32BE(value, offset[, noAssert])</a></li>
<li><a href="#buffer_buf_writeuint32le_value_offset_noassert">buf.writeUInt32LE(value, offset[, noAssert])</a></li>
<li><a href="#buffer_buf_writeuintbe_value_offset_bytelength_noassert">buf.writeUIntBE(value, offset, byteLength[, noAssert])</a></li>
<li><a href="#buffer_buf_writeuintle_value_offset_bytelength_noassert">buf.writeUIntLE(value, offset, byteLength[, noAssert])</a></li>
</ul>
</li>
<li><a href="#buffer_buffer_inspect_max_bytes">buffer.INSPECT_MAX_BYTES</a></li>
<li><a href="#buffer_class_slowbuffer">Class: SlowBuffer</a><ul>
<li><a href="#buffer_new_slowbuffer_size">new SlowBuffer(size)</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#child_process_child_process">Child Process</a><ul>
<li><a href="#child_process_asynchronous_process_creation">Asynchronous Process Creation</a><ul>
<li><a href="#child_process_spawning_bat_and_cmd_files_on_windows">Spawning <code>.bat</code> and <code>.cmd</code> files on Windows</a></li>
<li><a href="#child_process_child_process_exec_command_options_callback">child_process.exec(command[, options][, callback])</a></li>
<li><a href="#child_process_child_process_execfile_file_args_options_callback">child_process.execFile(file[, args][, options][, callback])</a></li>
<li><a href="#child_process_child_process_fork_modulepath_args_options">child_process.fork(modulePath[, args][, options])</a></li>
<li><a href="#child_process_child_process_spawn_command_args_options">child_process.spawn(command[, args][, options])</a><ul>
<li><a href="#child_process_options_detached">options.detached</a></li>
<li><a href="#child_process_options_stdio">options.stdio</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#child_process_synchronous_process_creation">Synchronous Process Creation</a><ul>
<li><a href="#child_process_child_process_execfilesync_file_args_options">child_process.execFileSync(file[, args][, options])</a></li>
<li><a href="#child_process_child_process_execsync_command_options">child_process.execSync(command[, options])</a></li>
<li><a href="#child_process_child_process_spawnsync_command_args_options">child_process.spawnSync(command[, args][, options])</a></li>
</ul>
</li>
<li><a href="#child_process_class_childprocess">Class: ChildProcess</a><ul>
<li><a href="#child_process_event_close">Event: 'close'</a></li>
<li><a href="#child_process_event_disconnect">Event: 'disconnect'</a></li>
<li><a href="#child_process_event_error">Event: 'error'</a></li>
<li><a href="#child_process_event_exit">Event: 'exit'</a></li>
<li><a href="#child_process_event_message">Event: 'message'</a></li>
<li><a href="#child_process_child_connected">child.connected</a></li>
<li><a href="#child_process_child_disconnect">child.disconnect()</a></li>
<li><a href="#child_process_child_kill_signal">child.kill([signal])</a></li>
<li><a href="#child_process_child_pid">child.pid</a></li>
<li><a href="#child_process_child_send_message_sendhandle_options_callback">child.send(message[, sendHandle[, options]][, callback])</a><ul>
<li><a href="#child_process_example_sending_a_server_object">Example: sending a server object</a></li>
<li><a href="#child_process_example_sending_a_socket_object">Example: sending a socket object</a></li>
</ul>
</li>
<li><a href="#child_process_child_stderr">child.stderr</a></li>
<li><a href="#child_process_child_stdin">child.stdin</a></li>
<li><a href="#child_process_child_stdio">child.stdio</a></li>
<li><a href="#child_process_child_stdout">child.stdout</a></li>
</ul>
</li>
<li><a href="#child_process_maxbuffer_and_unicode"><code>maxBuffer</code> and Unicode</a></li>
</ul>
</li>
<li><a href="#cluster_cluster">Cluster</a><ul>
<li><a href="#cluster_how_it_works">How It Works</a></li>
<li><a href="#cluster_class_worker">Class: Worker</a><ul>
<li><a href="#cluster_event_disconnect">Event: 'disconnect'</a></li>
<li><a href="#cluster_event_error">Event: 'error'</a></li>
<li><a href="#cluster_event_exit">Event: 'exit'</a></li>
<li><a href="#cluster_event_listening">Event: 'listening'</a></li>
<li><a href="#cluster_event_message">Event: 'message'</a></li>
<li><a href="#cluster_event_online">Event: 'online'</a></li>
<li><a href="#cluster_worker_disconnect">worker.disconnect()</a></li>
<li><a href="#cluster_worker_exitedafterdisconnect">worker.exitedAfterDisconnect</a></li>
<li><a href="#cluster_worker_id">worker.id</a></li>
<li><a href="#cluster_worker_isconnected">worker.isConnected()</a></li>
<li><a href="#cluster_worker_isdead">worker.isDead()</a></li>
<li><a href="#cluster_worker_kill_signal_sigterm">worker.kill([signal='SIGTERM'])</a></li>
<li><a href="#cluster_worker_process">worker.process</a></li>
<li><a href="#cluster_worker_send_message_sendhandle_callback">worker.send(message[, sendHandle][, callback])</a></li>
<li><a href="#cluster_worker_suicide">worker.suicide</a></li>
</ul>
</li>
<li><a href="#cluster_event_disconnect_1">Event: 'disconnect'</a></li>
<li><a href="#cluster_event_exit_1">Event: 'exit'</a></li>
<li><a href="#cluster_event_fork">Event: 'fork'</a></li>
<li><a href="#cluster_event_listening_1">Event: 'listening'</a></li>
<li><a href="#cluster_event_message_1">Event: 'message'</a></li>
<li><a href="#cluster_event_online_1">Event: 'online'</a></li>
<li><a href="#cluster_event_setup">Event: 'setup'</a></li>
<li><a href="#cluster_cluster_disconnect_callback">cluster.disconnect([callback])</a></li>
<li><a href="#cluster_cluster_fork_env">cluster.fork([env])</a></li>
<li><a href="#cluster_cluster_ismaster">cluster.isMaster</a></li>
<li><a href="#cluster_cluster_isworker">cluster.isWorker</a></li>
<li><a href="#cluster_cluster_schedulingpolicy">cluster.schedulingPolicy</a></li>
<li><a href="#cluster_cluster_settings">cluster.settings</a></li>
<li><a href="#cluster_cluster_setupmaster_settings">cluster.setupMaster([settings])</a></li>
<li><a href="#cluster_cluster_worker">cluster.worker</a></li>
<li><a href="#cluster_cluster_workers">cluster.workers</a></li>
</ul>
</li>
<li><a href="#cli_command_line_options">Command Line Options</a><ul>
<li><a href="#cli_synopsis">Synopsis</a></li>
<li><a href="#cli_options">Options</a><ul>
<li><a href="#cli_v_version"><code>-v</code>, <code>--version</code></a></li>
<li><a href="#cli_h_help"><code>-h</code>, <code>--help</code></a></li>
<li><a href="#cli_e_eval_script"><code>-e</code>, <code>--eval "script"</code></a></li>
<li><a href="#cli_p_print_script"><code>-p</code>, <code>--print "script"</code></a></li>
<li><a href="#cli_c_check"><code>-c</code>, <code>--check</code></a></li>
<li><a href="#cli_i_interactive"><code>-i</code>, <code>--interactive</code></a></li>
<li><a href="#cli_r_require_module"><code>-r</code>, <code>--require module</code></a></li>
<li><a href="#cli_no_deprecation"><code>--no-deprecation</code></a></li>
<li><a href="#cli_trace_deprecation"><code>--trace-deprecation</code></a></li>
<li><a href="#cli_throw_deprecation"><code>--throw-deprecation</code></a></li>
<li><a href="#cli_no_warnings"><code>--no-warnings</code></a></li>
<li><a href="#cli_trace_warnings"><code>--trace-warnings</code></a></li>
<li><a href="#cli_trace_sync_io"><code>--trace-sync-io</code></a></li>
<li><a href="#cli_zero_fill_buffers"><code>--zero-fill-buffers</code></a></li>
<li><a href="#cli_preserve_symlinks"><code>--preserve-symlinks</code></a></li>
<li><a href="#cli_track_heap_objects"><code>--track-heap-objects</code></a></li>
<li><a href="#cli_prof_process"><code>--prof-process</code></a></li>
<li><a href="#cli_v8_options"><code>--v8-options</code></a></li>
<li><a href="#cli_tls_cipher_list_list"><code>--tls-cipher-list=list</code></a></li>
<li><a href="#cli_enable_fips"><code>--enable-fips</code></a></li>
<li><a href="#cli_force_fips"><code>--force-fips</code></a></li>
<li><a href="#cli_icu_data_dir_file"><code>--icu-data-dir=file</code></a></li>
</ul>
</li>
<li><a href="#cli_environment_variables">Environment Variables</a><ul>
<li><a href="#cli_node_debug_module"><code>NODE_DEBUG=module[,…]</code></a></li>
<li><a href="#cli_node_path_path"><code>NODE_PATH=path[:…]</code></a></li>
<li><a href="#cli_node_disable_colors_1"><code>NODE_DISABLE_COLORS=1</code></a></li>
<li><a href="#cli_node_icu_data_file"><code>NODE_ICU_DATA=file</code></a></li>
<li><a href="#cli_node_repl_history_file"><code>NODE_REPL_HISTORY=file</code></a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#console_console">Console</a><ul>
<li><a href="#console_asynchronous_vs_synchronous_consoles">Asynchronous vs Synchronous Consoles</a></li>
<li><a href="#console_class_console">Class: Console</a><ul>
<li><a href="#console_new_console_stdout_stderr">new Console(stdout[, stderr])</a></li>
<li><a href="#console_console_assert_value_message">console.assert(value[, message][, ...])</a></li>
<li><a href="#console_console_dir_obj_options">console.dir(obj[, options])</a></li>
<li><a href="#console_console_error_data">console.error([data][, ...])</a></li>
<li><a href="#console_console_info_data">console.info([data][, ...])</a></li>
<li><a href="#console_console_log_data">console.log([data][, ...])</a></li>
<li><a href="#console_console_time_label">console.time(label)</a></li>
<li><a href="#console_console_timeend_label">console.timeEnd(label)</a></li>
<li><a href="#console_console_trace_message">console.trace(message[, ...])</a></li>
<li><a href="#console_console_warn_data">console.warn([data][, ...])</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#crypto_crypto">Crypto</a><ul>
<li><a href="#crypto_determining_if_crypto_support_is_unavailable">Determining if crypto support is unavailable</a></li>
<li><a href="#crypto_class_certificate">Class: Certificate</a><ul>
<li><a href="#crypto_new_crypto_certificate">new crypto.Certificate()</a></li>
<li><a href="#crypto_certificate_exportchallenge_spkac">certificate.exportChallenge(spkac)</a></li>
<li><a href="#crypto_certificate_exportpublickey_spkac">certificate.exportPublicKey(spkac)</a></li>
<li><a href="#crypto_certificate_verifyspkac_spkac">certificate.verifySpkac(spkac)</a></li>
</ul>
</li>
<li><a href="#crypto_class_cipher">Class: Cipher</a><ul>
<li><a href="#crypto_cipher_final_output_encoding">cipher.final([output_encoding])</a></li>
<li><a href="#crypto_cipher_setaad_buffer">cipher.setAAD(buffer)</a></li>
<li><a href="#crypto_cipher_getauthtag">cipher.getAuthTag()</a></li>
<li><a href="#crypto_cipher_setautopadding_auto_padding_true">cipher.setAutoPadding(auto_padding=true)</a></li>
<li><a href="#crypto_cipher_update_data_input_encoding_output_encoding">cipher.update(data[, input_encoding][, output_encoding])</a></li>
</ul>
</li>
<li><a href="#crypto_class_decipher">Class: Decipher</a><ul>
<li><a href="#crypto_decipher_final_output_encoding">decipher.final([output_encoding])</a></li>
<li><a href="#crypto_decipher_setaad_buffer">decipher.setAAD(buffer)</a></li>
<li><a href="#crypto_decipher_setauthtag_buffer">decipher.setAuthTag(buffer)</a></li>
<li><a href="#crypto_decipher_setautopadding_auto_padding_true">decipher.setAutoPadding(auto_padding=true)</a></li>
<li><a href="#crypto_decipher_update_data_input_encoding_output_encoding">decipher.update(data[, input_encoding][, output_encoding])</a></li>
</ul>
</li>
<li><a href="#crypto_class_diffiehellman">Class: DiffieHellman</a><ul>
<li><a href="#crypto_diffiehellman_computesecret_other_public_key_input_encoding_output_encoding">diffieHellman.computeSecret(other_public_key[, input_encoding][, output_encoding])</a></li>
<li><a href="#crypto_diffiehellman_generatekeys_encoding">diffieHellman.generateKeys([encoding])</a></li>
<li><a href="#crypto_diffiehellman_getgenerator_encoding">diffieHellman.getGenerator([encoding])</a></li>
<li><a href="#crypto_diffiehellman_getprime_encoding">diffieHellman.getPrime([encoding])</a></li>
<li><a href="#crypto_diffiehellman_getprivatekey_encoding">diffieHellman.getPrivateKey([encoding])</a></li>
<li><a href="#crypto_diffiehellman_getpublickey_encoding">diffieHellman.getPublicKey([encoding])</a></li>
<li><a href="#crypto_diffiehellman_setprivatekey_private_key_encoding">diffieHellman.setPrivateKey(private_key[, encoding])</a></li>
<li><a href="#crypto_diffiehellman_setpublickey_public_key_encoding">diffieHellman.setPublicKey(public_key[, encoding])</a></li>
<li><a href="#crypto_diffiehellman_verifyerror">diffieHellman.verifyError</a></li>
</ul>
</li>
<li><a href="#crypto_class_ecdh">Class: ECDH</a><ul>
<li><a href="#crypto_ecdh_computesecret_other_public_key_input_encoding_output_encoding">ecdh.computeSecret(other_public_key[, input_encoding][, output_encoding])</a></li>
<li><a href="#crypto_ecdh_generatekeys_encoding_format">ecdh.generateKeys([encoding[, format]])</a></li>
<li><a href="#crypto_ecdh_getprivatekey_encoding">ecdh.getPrivateKey([encoding])</a></li>
<li><a href="#crypto_ecdh_getpublickey_encoding_format">ecdh.getPublicKey([encoding[, format]])</a></li>
<li><a href="#crypto_ecdh_setprivatekey_private_key_encoding">ecdh.setPrivateKey(private_key[, encoding])</a></li>
<li><a href="#crypto_ecdh_setpublickey_public_key_encoding">ecdh.setPublicKey(public_key[, encoding])</a></li>
</ul>
</li>
<li><a href="#crypto_class_hash">Class: Hash</a><ul>
<li><a href="#crypto_hash_digest_encoding">hash.digest([encoding])</a></li>
<li><a href="#crypto_hash_update_data_input_encoding">hash.update(data[, input_encoding])</a></li>
</ul>
</li>
<li><a href="#crypto_class_hmac">Class: Hmac</a><ul>
<li><a href="#crypto_hmac_digest_encoding">hmac.digest([encoding])</a></li>
<li><a href="#crypto_hmac_update_data_input_encoding">hmac.update(data[, input_encoding])</a></li>
</ul>
</li>
<li><a href="#crypto_class_sign">Class: Sign</a><ul>
<li><a href="#crypto_sign_sign_private_key_output_format">sign.sign(private_key[, output_format])</a></li>
<li><a href="#crypto_sign_update_data_input_encoding">sign.update(data[, input_encoding])</a></li>
</ul>
</li>
<li><a href="#crypto_class_verify">Class: Verify</a><ul>
<li><a href="#crypto_verifier_update_data_input_encoding">verifier.update(data[, input_encoding])</a></li>
<li><a href="#crypto_verifier_verify_object_signature_signature_format">verifier.verify(object, signature[, signature_format])</a></li>
</ul>
</li>
<li><a href="#crypto_crypto_module_methods_and_properties"><code>crypto</code> module methods and properties</a><ul>
<li><a href="#crypto_crypto_default_encoding">crypto.DEFAULT_ENCODING</a></li>
<li><a href="#crypto_crypto_fips">crypto.fips</a></li>
<li><a href="#crypto_crypto_createcipher_algorithm_password">crypto.createCipher(algorithm, password)</a></li>
<li><a href="#crypto_crypto_createcipheriv_algorithm_key_iv">crypto.createCipheriv(algorithm, key, iv)</a></li>
<li><a href="#crypto_crypto_createcredentials_details">crypto.createCredentials(details)</a></li>
<li><a href="#crypto_crypto_createdecipher_algorithm_password">crypto.createDecipher(algorithm, password)</a></li>
<li><a href="#crypto_crypto_createdecipheriv_algorithm_key_iv">crypto.createDecipheriv(algorithm, key, iv)</a></li>
<li><a href="#crypto_crypto_creatediffiehellman_prime_prime_encoding_generator_generator_encoding">crypto.createDiffieHellman(prime[, prime_encoding][, generator][, generator_encoding])</a></li>
<li><a href="#crypto_crypto_creatediffiehellman_prime_length_generator">crypto.createDiffieHellman(prime_length[, generator])</a></li>
<li><a href="#crypto_crypto_createecdh_curve_name">crypto.createECDH(curve_name)</a></li>
<li><a href="#crypto_crypto_createhash_algorithm">crypto.createHash(algorithm)</a></li>
<li><a href="#crypto_crypto_createhmac_algorithm_key">crypto.createHmac(algorithm, key)</a></li>
<li><a href="#crypto_crypto_createsign_algorithm">crypto.createSign(algorithm)</a></li>
<li><a href="#crypto_crypto_createverify_algorithm">crypto.createVerify(algorithm)</a></li>
<li><a href="#crypto_crypto_getciphers">crypto.getCiphers()</a></li>
<li><a href="#crypto_crypto_getcurves">crypto.getCurves()</a></li>
<li><a href="#crypto_crypto_getdiffiehellman_group_name">crypto.getDiffieHellman(group_name)</a></li>
<li><a href="#crypto_crypto_gethashes">crypto.getHashes()</a></li>
<li><a href="#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback">crypto.pbkdf2(password, salt, iterations, keylen, digest, callback)</a></li>
<li><a href="#crypto_crypto_pbkdf2sync_password_salt_iterations_keylen_digest">crypto.pbkdf2Sync(password, salt, iterations, keylen, digest)</a></li>
<li><a href="#crypto_crypto_privatedecrypt_private_key_buffer">crypto.privateDecrypt(private_key, buffer)</a></li>
<li><a href="#crypto_crypto_privateencrypt_private_key_buffer">crypto.privateEncrypt(private_key, buffer)</a></li>
<li><a href="#crypto_crypto_publicdecrypt_public_key_buffer">crypto.publicDecrypt(public_key, buffer)</a></li>
<li><a href="#crypto_crypto_publicencrypt_public_key_buffer">crypto.publicEncrypt(public_key, buffer)</a></li>
<li><a href="#crypto_crypto_randombytes_size_callback">crypto.randomBytes(size[, callback])</a></li>
<li><a href="#crypto_crypto_setengine_engine_flags">crypto.setEngine(engine[, flags])</a></li>
</ul>
</li>
<li><a href="#crypto_notes">Notes</a><ul>
<li><a href="#crypto_legacy_streams_api_pre_node_js_v0_10">Legacy Streams API (pre Node.js v0.10)</a></li>
<li><a href="#crypto_recent_ecdh_changes">Recent ECDH Changes</a></li>
<li><a href="#crypto_support_for_weak_or_compromised_algorithms">Support for weak or compromised algorithms</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#debugger_debugger">Debugger</a><ul>
<li><a href="#debugger_watchers">Watchers</a></li>
<li><a href="#debugger_command_reference">Command reference</a><ul>
<li><a href="#debugger_stepping">Stepping</a></li>
<li><a href="#debugger_breakpoints">Breakpoints</a></li>
<li><a href="#debugger_information">Information</a></li>
<li><a href="#debugger_execution_control">Execution control</a></li>
<li><a href="#debugger_various">Various</a></li>
</ul>
</li>
<li><a href="#debugger_advanced_usage">Advanced Usage</a></li>
</ul>
</li>
<li><a href="#dgram_udp_datagram_sockets">UDP / Datagram Sockets</a><ul>
<li><a href="#dgram_class_dgram_socket">Class: dgram.Socket</a><ul>
<li><a href="#dgram_event_close">Event: 'close'</a></li>
<li><a href="#dgram_event_error">Event: 'error'</a></li>
<li><a href="#dgram_event_listening">Event: 'listening'</a></li>
<li><a href="#dgram_event_message">Event: 'message'</a></li>
<li><a href="#dgram_socket_addmembership_multicastaddress_multicastinterface">socket.addMembership(multicastAddress[, multicastInterface])</a></li>
<li><a href="#dgram_socket_address">socket.address()</a></li>
<li><a href="#dgram_socket_bind_port_address_callback">socket.bind([port][, address][, callback])</a></li>
<li><a href="#dgram_socket_bind_options_callback">socket.bind(options[, callback])</a></li>
<li><a href="#dgram_socket_close_callback">socket.close([callback])</a></li>
<li><a href="#dgram_socket_dropmembership_multicastaddress_multicastinterface">socket.dropMembership(multicastAddress[, multicastInterface])</a></li>
<li><a href="#dgram_socket_send_msg_offset_length_port_address_callback">socket.send(msg, [offset, length,] port, address[, callback])</a></li>
<li><a href="#dgram_socket_setbroadcast_flag">socket.setBroadcast(flag)</a></li>
<li><a href="#dgram_socket_setmulticastloopback_flag">socket.setMulticastLoopback(flag)</a></li>
<li><a href="#dgram_socket_setmulticastttl_ttl">socket.setMulticastTTL(ttl)</a></li>
<li><a href="#dgram_socket_setttl_ttl">socket.setTTL(ttl)</a></li>
<li><a href="#dgram_socket_ref">socket.ref()</a></li>
<li><a href="#dgram_socket_unref">socket.unref()</a></li>
<li><a href="#dgram_change_to_asynchronous_socket_bind_behavior">Change to asynchronous <code>socket.bind()</code> behavior</a></li>
</ul>
</li>
<li><a href="#dgram_dgram_module_functions"><code>dgram</code> module functions</a><ul>
<li><a href="#dgram_dgram_createsocket_options_callback">dgram.createSocket(options[, callback])</a></li>
<li><a href="#dgram_dgram_createsocket_type_callback">dgram.createSocket(type[, callback])</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#dns_dns">DNS</a><ul>
<li><a href="#dns_dns_getservers">dns.getServers()</a></li>
<li><a href="#dns_dns_lookup_hostname_options_callback">dns.lookup(hostname[, options], callback)</a><ul>
<li><a href="#dns_supported_getaddrinfo_flags">Supported getaddrinfo flags</a></li>
</ul>
</li>
<li><a href="#dns_dns_lookupservice_address_port_callback">dns.lookupService(address, port, callback)</a></li>
<li><a href="#dns_dns_resolve_hostname_rrtype_callback">dns.resolve(hostname[, rrtype], callback)</a></li>
<li><a href="#dns_dns_resolve4_hostname_callback">dns.resolve4(hostname, callback)</a></li>
<li><a href="#dns_dns_resolve6_hostname_callback">dns.resolve6(hostname, callback)</a></li>
<li><a href="#dns_dns_resolvecname_hostname_callback">dns.resolveCname(hostname, callback)</a></li>
<li><a href="#dns_dns_resolvemx_hostname_callback">dns.resolveMx(hostname, callback)</a></li>
<li><a href="#dns_dns_resolvenaptr_hostname_callback">dns.resolveNaptr(hostname, callback)</a></li>
<li><a href="#dns_dns_resolvens_hostname_callback">dns.resolveNs(hostname, callback)</a></li>
<li><a href="#dns_dns_resolvesoa_hostname_callback">dns.resolveSoa(hostname, callback)</a></li>
<li><a href="#dns_dns_resolvesrv_hostname_callback">dns.resolveSrv(hostname, callback)</a></li>
<li><a href="#dns_dns_resolveptr_hostname_callback">dns.resolvePtr(hostname, callback)</a></li>
<li><a href="#dns_dns_resolvetxt_hostname_callback">dns.resolveTxt(hostname, callback)</a></li>
<li><a href="#dns_dns_reverse_ip_callback">dns.reverse(ip, callback)</a></li>
<li><a href="#dns_dns_setservers_servers">dns.setServers(servers)</a></li>
<li><a href="#dns_error_codes">Error codes</a></li>
<li><a href="#dns_implementation_considerations">Implementation considerations</a><ul>
<li><a href="#dns_dns_lookup"><code>dns.lookup()</code></a></li>
<li><a href="#dns_dns_resolve_dns_resolve_and_dns_reverse"><code>dns.resolve()</code>, <code>dns.resolve*()</code> and <code>dns.reverse()</code></a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#domain_domain">Domain</a><ul>
<li><a href="#domain_warning_don_t_ignore_errors">Warning: Don't Ignore Errors!</a></li>
<li><a href="#domain_additions_to_error_objects">Additions to Error objects</a></li>
<li><a href="#domain_implicit_binding">Implicit Binding</a></li>
<li><a href="#domain_explicit_binding">Explicit Binding</a></li>
<li><a href="#domain_domain_create">domain.create()</a></li>
<li><a href="#domain_class_domain">Class: Domain</a><ul>
<li><a href="#domain_domain_run_fn_arg">domain.run(fn[, arg][, ...])</a></li>
<li><a href="#domain_domain_members">domain.members</a></li>
<li><a href="#domain_domain_add_emitter">domain.add(emitter)</a></li>
<li><a href="#domain_domain_remove_emitter">domain.remove(emitter)</a></li>
<li><a href="#domain_domain_bind_callback">domain.bind(callback)</a><ul>
<li><a href="#domain_example">Example</a></li>
</ul>
</li>
<li><a href="#domain_domain_intercept_callback">domain.intercept(callback)</a><ul>
<li><a href="#domain_example_1">Example</a></li>
</ul>
</li>
<li><a href="#domain_domain_enter">domain.enter()</a></li>
<li><a href="#domain_domain_exit">domain.exit()</a></li>
<li><a href="#domain_domain_dispose">domain.dispose()</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#errors_errors">Errors</a><ul>
<li><a href="#errors_error_propagation_and_interception">Error Propagation and Interception</a><ul>
<li><a href="#errors_node_js_style_callbacks">Node.js style callbacks</a></li>
</ul>
</li>
<li><a href="#errors_class_error">Class: Error</a><ul>
<li><a href="#errors_new_error_message">new Error(message)</a></li>
<li><a href="#errors_error_capturestacktrace_targetobject_constructoropt">Error.captureStackTrace(targetObject[, constructorOpt])</a></li>
<li><a href="#errors_error_stacktracelimit">Error.stackTraceLimit</a><ul>
<li><a href="#errors_error_message">error.message</a></li>
<li><a href="#errors_error_stack">error.stack</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#errors_class_rangeerror">Class: RangeError</a></li>
<li><a href="#errors_class_referenceerror">Class: ReferenceError</a></li>
<li><a href="#errors_class_syntaxerror">Class: SyntaxError</a></li>
<li><a href="#errors_class_typeerror">Class: TypeError</a></li>
<li><a href="#errors_exceptions_vs_errors">Exceptions vs. Errors</a></li>
<li><a href="#errors_system_errors">System Errors</a><ul>
<li><a href="#errors_class_system_error">Class: System Error</a><ul>
<li><a href="#errors_error_code">error.code</a></li>
<li><a href="#errors_error_errno">error.errno</a></li>
<li><a href="#errors_error_syscall">error.syscall</a></li>
</ul>
</li>
<li><a href="#errors_common_system_errors">Common System Errors</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#events_events">Events</a><ul>
<li><a href="#events_passing_arguments_and_this_to_listeners">Passing arguments and <code>this</code> to listeners</a></li>
<li><a href="#events_asynchronous_vs_synchronous">Asynchronous vs. Synchronous</a></li>
<li><a href="#events_handling_events_only_once">Handling events only once</a></li>
<li><a href="#events_error_events">Error events</a></li>
<li><a href="#events_class_eventemitter">Class: EventEmitter</a><ul>
<li><a href="#events_event_newlistener">Event: 'newListener'</a></li>
<li><a href="#events_event_removelistener">Event: 'removeListener'</a></li>
<li><a href="#events_eventemitter_listenercount_emitter_eventname">EventEmitter.listenerCount(emitter, eventName)</a></li>
<li><a href="#events_eventemitter_defaultmaxlisteners">EventEmitter.defaultMaxListeners</a></li>
<li><a href="#events_emitter_addlistener_eventname_listener">emitter.addListener(eventName, listener)</a></li>
<li><a href="#events_emitter_emit_eventname_arg1_arg2">emitter.emit(eventName[, arg1][, arg2][, ...])</a></li>
<li><a href="#events_emitter_eventnames">emitter.eventNames()</a></li>
<li><a href="#events_emitter_getmaxlisteners">emitter.getMaxListeners()</a></li>
<li><a href="#events_emitter_listenercount_eventname">emitter.listenerCount(eventName)</a></li>
<li><a href="#events_emitter_listeners_eventname">emitter.listeners(eventName)</a></li>
<li><a href="#events_emitter_on_eventname_listener">emitter.on(eventName, listener)</a></li>
<li><a href="#events_emitter_once_eventname_listener">emitter.once(eventName, listener)</a></li>
<li><a href="#events_emitter_prependlistener_eventname_listener">emitter.prependListener(eventName, listener)</a></li>
<li><a href="#events_emitter_prependoncelistener_eventname_listener">emitter.prependOnceListener(eventName, listener)</a></li>
<li><a href="#events_emitter_removealllisteners_eventname">emitter.removeAllListeners([eventName])</a></li>
<li><a href="#events_emitter_removelistener_eventname_listener">emitter.removeListener(eventName, listener)</a></li>
<li><a href="#events_emitter_setmaxlisteners_n">emitter.setMaxListeners(n)</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#fs_file_system">File System</a><ul>
<li><a href="#fs_buffer_api">Buffer API</a></li>
<li><a href="#fs_class_fs_fswatcher">Class: fs.FSWatcher</a><ul>
<li><a href="#fs_event_change">Event: 'change'</a></li>
<li><a href="#fs_event_error">Event: 'error'</a></li>
<li><a href="#fs_watcher_close">watcher.close()</a></li>
</ul>
</li>
<li><a href="#fs_class_fs_readstream">Class: fs.ReadStream</a><ul>
<li><a href="#fs_event_open">Event: 'open'</a></li>
<li><a href="#fs_event_close">Event: 'close'</a></li>
<li><a href="#fs_readstream_path">readStream.path</a></li>
</ul>
</li>
<li><a href="#fs_class_fs_stats">Class: fs.Stats</a><ul>
<li><a href="#fs_stat_time_values">Stat Time Values</a></li>
</ul>
</li>
<li><a href="#fs_class_fs_writestream">Class: fs.WriteStream</a><ul>
<li><a href="#fs_event_open_1">Event: 'open'</a></li>
<li><a href="#fs_event_close_1">Event: 'close'</a></li>
<li><a href="#fs_writestream_byteswritten">writeStream.bytesWritten</a></li>
<li><a href="#fs_writestream_path">writeStream.path</a></li>
</ul>
</li>
<li><a href="#fs_fs_access_path_mode_callback">fs.access(path[, mode], callback)</a></li>
<li><a href="#fs_fs_accesssync_path_mode">fs.accessSync(path[, mode])</a></li>
<li><a href="#fs_fs_appendfile_file_data_options_callback">fs.appendFile(file, data[, options], callback)</a></li>
<li><a href="#fs_fs_appendfilesync_file_data_options">fs.appendFileSync(file, data[, options])</a></li>
<li><a href="#fs_fs_chmod_path_mode_callback">fs.chmod(path, mode, callback)</a></li>
<li><a href="#fs_fs_chmodsync_path_mode">fs.chmodSync(path, mode)</a></li>
<li><a href="#fs_fs_chown_path_uid_gid_callback">fs.chown(path, uid, gid, callback)</a></li>
<li><a href="#fs_fs_chownsync_path_uid_gid">fs.chownSync(path, uid, gid)</a></li>
<li><a href="#fs_fs_close_fd_callback">fs.close(fd, callback)</a></li>
<li><a href="#fs_fs_closesync_fd">fs.closeSync(fd)</a></li>
<li><a href="#fs_fs_createreadstream_path_options">fs.createReadStream(path[, options])</a></li>
<li><a href="#fs_fs_createwritestream_path_options">fs.createWriteStream(path[, options])</a></li>
<li><a href="#fs_fs_exists_path_callback">fs.exists(path, callback)</a></li>
<li><a href="#fs_fs_existssync_path">fs.existsSync(path)</a></li>
<li><a href="#fs_fs_fchmod_fd_mode_callback">fs.fchmod(fd, mode, callback)</a></li>
<li><a href="#fs_fs_fchmodsync_fd_mode">fs.fchmodSync(fd, mode)</a></li>
<li><a href="#fs_fs_fchown_fd_uid_gid_callback">fs.fchown(fd, uid, gid, callback)</a></li>
<li><a href="#fs_fs_fchownsync_fd_uid_gid">fs.fchownSync(fd, uid, gid)</a></li>
<li><a href="#fs_fs_fdatasync_fd_callback">fs.fdatasync(fd, callback)</a></li>
<li><a href="#fs_fs_fdatasyncsync_fd">fs.fdatasyncSync(fd)</a></li>
<li><a href="#fs_fs_fstat_fd_callback">fs.fstat(fd, callback)</a></li>
<li><a href="#fs_fs_fstatsync_fd">fs.fstatSync(fd)</a></li>
<li><a href="#fs_fs_fsync_fd_callback">fs.fsync(fd, callback)</a></li>
<li><a href="#fs_fs_fsyncsync_fd">fs.fsyncSync(fd)</a></li>
<li><a href="#fs_fs_ftruncate_fd_len_callback">fs.ftruncate(fd, len, callback)</a></li>
<li><a href="#fs_fs_ftruncatesync_fd_len">fs.ftruncateSync(fd, len)</a></li>
<li><a href="#fs_fs_futimes_fd_atime_mtime_callback">fs.futimes(fd, atime, mtime, callback)</a></li>
<li><a href="#fs_fs_futimessync_fd_atime_mtime">fs.futimesSync(fd, atime, mtime)</a></li>
<li><a href="#fs_fs_lchmod_path_mode_callback">fs.lchmod(path, mode, callback)</a></li>
<li><a href="#fs_fs_lchmodsync_path_mode">fs.lchmodSync(path, mode)</a></li>
<li><a href="#fs_fs_lchown_path_uid_gid_callback">fs.lchown(path, uid, gid, callback)</a></li>
<li><a href="#fs_fs_lchownsync_path_uid_gid">fs.lchownSync(path, uid, gid)</a></li>
<li><a href="#fs_fs_link_srcpath_dstpath_callback">fs.link(srcpath, dstpath, callback)</a></li>
<li><a href="#fs_fs_linksync_srcpath_dstpath">fs.linkSync(srcpath, dstpath)</a></li>
<li><a href="#fs_fs_lstat_path_callback">fs.lstat(path, callback)</a></li>
<li><a href="#fs_fs_lstatsync_path">fs.lstatSync(path)</a></li>
<li><a href="#fs_fs_mkdir_path_mode_callback">fs.mkdir(path[, mode], callback)</a></li>
<li><a href="#fs_fs_mkdirsync_path_mode">fs.mkdirSync(path[, mode])</a></li>
<li><a href="#fs_fs_mkdtemp_prefix_callback">fs.mkdtemp(prefix, callback)</a></li>
<li><a href="#fs_fs_mkdtempsync_prefix">fs.mkdtempSync(prefix)</a></li>
<li><a href="#fs_fs_open_path_flags_mode_callback">fs.open(path, flags[, mode], callback)</a></li>
<li><a href="#fs_fs_opensync_path_flags_mode">fs.openSync(path, flags[, mode])</a></li>
<li><a href="#fs_fs_read_fd_buffer_offset_length_position_callback">fs.read(fd, buffer, offset, length, position, callback)</a></li>
<li><a href="#fs_fs_readdir_path_options_callback">fs.readdir(path[, options], callback)</a></li>
<li><a href="#fs_fs_readdirsync_path_options">fs.readdirSync(path[, options])</a></li>
<li><a href="#fs_fs_readfile_file_options_callback">fs.readFile(file[, options], callback)</a></li>
<li><a href="#fs_fs_readfilesync_file_options">fs.readFileSync(file[, options])</a></li>
<li><a href="#fs_fs_readlink_path_options_callback">fs.readlink(path[, options], callback)</a></li>
<li><a href="#fs_fs_readlinksync_path_options">fs.readlinkSync(path[, options])</a></li>
<li><a href="#fs_fs_readsync_fd_buffer_offset_length_position">fs.readSync(fd, buffer, offset, length, position)</a></li>
<li><a href="#fs_fs_realpath_path_options_callback">fs.realpath(path[, options], callback)</a></li>
<li><a href="#fs_fs_realpathsync_path_options">fs.realpathSync(path[, options])</a></li>
<li><a href="#fs_fs_rename_oldpath_newpath_callback">fs.rename(oldPath, newPath, callback)</a></li>
<li><a href="#fs_fs_renamesync_oldpath_newpath">fs.renameSync(oldPath, newPath)</a></li>
<li><a href="#fs_fs_rmdir_path_callback">fs.rmdir(path, callback)</a></li>
<li><a href="#fs_fs_rmdirsync_path">fs.rmdirSync(path)</a></li>
<li><a href="#fs_fs_stat_path_callback">fs.stat(path, callback)</a></li>
<li><a href="#fs_fs_statsync_path">fs.statSync(path)</a></li>
<li><a href="#fs_fs_symlink_target_path_type_callback">fs.symlink(target, path[, type], callback)</a></li>
<li><a href="#fs_fs_symlinksync_target_path_type">fs.symlinkSync(target, path[, type])</a></li>
<li><a href="#fs_fs_truncate_path_len_callback">fs.truncate(path, len, callback)</a></li>
<li><a href="#fs_fs_truncatesync_path_len">fs.truncateSync(path, len)</a></li>
<li><a href="#fs_fs_unlink_path_callback">fs.unlink(path, callback)</a></li>
<li><a href="#fs_fs_unlinksync_path">fs.unlinkSync(path)</a></li>
<li><a href="#fs_fs_unwatchfile_filename_listener">fs.unwatchFile(filename[, listener])</a></li>
<li><a href="#fs_fs_utimes_path_atime_mtime_callback">fs.utimes(path, atime, mtime, callback)</a></li>
<li><a href="#fs_fs_utimessync_path_atime_mtime">fs.utimesSync(path, atime, mtime)</a></li>
<li><a href="#fs_fs_watch_filename_options_listener">fs.watch(filename[, options][, listener])</a><ul>
<li><a href="#fs_caveats">Caveats</a><ul>
<li><a href="#fs_availability">Availability</a></li>
<li><a href="#fs_inodes">Inodes</a></li>
<li><a href="#fs_filename_argument">Filename Argument</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#fs_fs_watchfile_filename_options_listener">fs.watchFile(filename[, options], listener)</a></li>
<li><a href="#fs_fs_write_fd_buffer_offset_length_position_callback">fs.write(fd, buffer, offset, length[, position], callback)</a></li>
<li><a href="#fs_fs_write_fd_data_position_encoding_callback">fs.write(fd, data[, position[, encoding]], callback)</a></li>
<li><a href="#fs_fs_writefile_file_data_options_callback">fs.writeFile(file, data[, options], callback)</a></li>
<li><a href="#fs_fs_writefilesync_file_data_options">fs.writeFileSync(file, data[, options])</a></li>
<li><a href="#fs_fs_writesync_fd_buffer_offset_length_position">fs.writeSync(fd, buffer, offset, length[, position])</a></li>
<li><a href="#fs_fs_writesync_fd_data_position_encoding">fs.writeSync(fd, data[, position[, encoding]])</a></li>
</ul>
</li>
<li><a href="#globals_global_objects">Global Objects</a><ul>
<li><a href="#globals_class_buffer">Class: Buffer</a></li>
<li><a href="#globals_dirname">__dirname</a></li>
<li><a href="#globals_filename">__filename</a></li>
<li><a href="#globals_clearimmediate_immediateobject">clearImmediate(immediateObject)</a></li>
<li><a href="#globals_clearinterval_intervalobject">clearInterval(intervalObject)</a></li>
<li><a href="#globals_cleartimeout_timeoutobject">clearTimeout(timeoutObject)</a></li>
<li><a href="#globals_console">console</a></li>
<li><a href="#globals_exports">exports</a></li>
<li><a href="#globals_global">global</a></li>
<li><a href="#globals_module">module</a></li>
<li><a href="#globals_process">process</a></li>
<li><a href="#globals_require">require()</a><ul>
<li><a href="#globals_require_cache">require.cache</a></li>
<li><a href="#globals_require_extensions">require.extensions</a></li>
<li><a href="#globals_require_resolve">require.resolve()</a></li>
</ul>
</li>
<li><a href="#globals_setimmediate_callback_arg">setImmediate(callback[, arg][, ...])</a></li>
<li><a href="#globals_setinterval_callback_delay_arg">setInterval(callback, delay[, arg][, ...])</a></li>
<li><a href="#globals_settimeout_callback_delay_arg">setTimeout(callback, delay[, arg][, ...])</a></li>
</ul>
</li>
<li><a href="#http_http">HTTP</a><ul>
<li><a href="#http_class_http_agent">Class: http.Agent</a><ul>
<li><a href="#http_new_agent_options">new Agent([options])</a></li>
<li><a href="#http_agent_createconnection_options_callback">agent.createConnection(options[, callback])</a></li>
<li><a href="#http_agent_destroy">agent.destroy()</a></li>
<li><a href="#http_agent_freesockets">agent.freeSockets</a></li>
<li><a href="#http_agent_getname_options">agent.getName(options)</a></li>
<li><a href="#http_agent_maxfreesockets">agent.maxFreeSockets</a></li>
<li><a href="#http_agent_maxsockets">agent.maxSockets</a></li>
<li><a href="#http_agent_requests">agent.requests</a></li>
<li><a href="#http_agent_sockets">agent.sockets</a></li>
</ul>
</li>
<li><a href="#http_class_http_clientrequest">Class: http.ClientRequest</a><ul>
<li><a href="#http_event_abort">Event: 'abort'</a></li>
<li><a href="#http_event_checkexpectation">Event: 'checkExpectation'</a></li>
<li><a href="#http_event_connect">Event: 'connect'</a></li>
<li><a href="#http_event_continue">Event: 'continue'</a></li>
<li><a href="#http_event_response">Event: 'response'</a></li>
<li><a href="#http_event_socket">Event: 'socket'</a></li>
<li><a href="#http_event_upgrade">Event: 'upgrade'</a></li>
<li><a href="#http_request_abort">request.abort()</a></li>
<li><a href="#http_request_end_data_encoding_callback">request.end([data][, encoding][, callback])</a></li>
<li><a href="#http_request_flushheaders">request.flushHeaders()</a></li>
<li><a href="#http_request_setnodelay_nodelay">request.setNoDelay([noDelay])</a></li>
<li><a href="#http_request_setsocketkeepalive_enable_initialdelay">request.setSocketKeepAlive([enable][, initialDelay])</a></li>
<li><a href="#http_request_settimeout_timeout_callback">request.setTimeout(timeout[, callback])</a></li>
<li><a href="#http_request_write_chunk_encoding_callback">request.write(chunk[, encoding][, callback])</a></li>
</ul>
</li>
<li><a href="#http_class_http_server">Class: http.Server</a><ul>
<li><a href="#http_event_checkcontinue">Event: 'checkContinue'</a></li>
<li><a href="#http_event_clienterror">Event: 'clientError'</a></li>
<li><a href="#http_event_close">Event: 'close'</a></li>
<li><a href="#http_event_connect_1">Event: 'connect'</a></li>
<li><a href="#http_event_connection">Event: 'connection'</a></li>
<li><a href="#http_event_request">Event: 'request'</a></li>
<li><a href="#http_event_upgrade_1">Event: 'upgrade'</a></li>
<li><a href="#http_server_close_callback">server.close([callback])</a></li>
<li><a href="#http_server_listen_handle_callback">server.listen(handle[, callback])</a></li>
<li><a href="#http_server_listen_path_callback">server.listen(path[, callback])</a></li>
<li><a href="#http_server_listen_port_hostname_backlog_callback">server.listen(port[, hostname][, backlog][, callback])</a></li>
<li><a href="#http_server_listening">server.listening</a></li>
<li><a href="#http_server_maxheaderscount">server.maxHeadersCount</a></li>
<li><a href="#http_server_settimeout_msecs_callback">server.setTimeout(msecs, callback)</a></li>
<li><a href="#http_server_timeout">server.timeout</a></li>
</ul>
</li>
<li><a href="#http_class_http_serverresponse">Class: http.ServerResponse</a><ul>
<li><a href="#http_event_close_1">Event: 'close'</a></li>
<li><a href="#http_event_finish">Event: 'finish'</a></li>
<li><a href="#http_response_addtrailers_headers">response.addTrailers(headers)</a></li>
<li><a href="#http_response_end_data_encoding_callback">response.end([data][, encoding][, callback])</a></li>
<li><a href="#http_response_finished">response.finished</a></li>
<li><a href="#http_response_getheader_name">response.getHeader(name)</a></li>
<li><a href="#http_response_headerssent">response.headersSent</a></li>
<li><a href="#http_response_removeheader_name">response.removeHeader(name)</a></li>
<li><a href="#http_response_senddate">response.sendDate</a></li>
<li><a href="#http_response_setheader_name_value">response.setHeader(name, value)</a></li>
<li><a href="#http_response_settimeout_msecs_callback">response.setTimeout(msecs, callback)</a></li>
<li><a href="#http_response_statuscode">response.statusCode</a></li>
<li><a href="#http_response_statusmessage">response.statusMessage</a></li>
<li><a href="#http_response_write_chunk_encoding_callback">response.write(chunk[, encoding][, callback])</a></li>
<li><a href="#http_response_writecontinue">response.writeContinue()</a></li>
<li><a href="#http_response_writehead_statuscode_statusmessage_headers">response.writeHead(statusCode[, statusMessage][, headers])</a></li>
</ul>
</li>
<li><a href="#http_class_http_incomingmessage">Class: http.IncomingMessage</a><ul>
<li><a href="#http_event_close_2">Event: 'close'</a></li>
<li><a href="#http_message_destroy_error">message.destroy([error])</a></li>
<li><a href="#http_message_headers">message.headers</a></li>
<li><a href="#http_message_httpversion">message.httpVersion</a></li>
<li><a href="#http_message_method">message.method</a></li>
<li><a href="#http_message_rawheaders">message.rawHeaders</a></li>
<li><a href="#http_message_rawtrailers">message.rawTrailers</a></li>
<li><a href="#http_message_settimeout_msecs_callback">message.setTimeout(msecs, callback)</a></li>
<li><a href="#http_message_statuscode">message.statusCode</a></li>
<li><a href="#http_message_statusmessage">message.statusMessage</a></li>
<li><a href="#http_message_socket">message.socket</a></li>
<li><a href="#http_message_trailers">message.trailers</a></li>
<li><a href="#http_message_url">message.url</a></li>
</ul>
</li>
<li><a href="#http_http_methods">http.METHODS</a></li>
<li><a href="#http_http_status_codes">http.STATUS_CODES</a></li>
<li><a href="#http_http_createclient_port_host">http.createClient([port][, host])</a></li>
<li><a href="#http_http_createserver_requestlistener">http.createServer([requestListener])</a></li>
<li><a href="#http_http_get_options_callback">http.get(options[, callback])</a></li>
<li><a href="#http_http_globalagent">http.globalAgent</a></li>
<li><a href="#http_http_request_options_callback">http.request(options[, callback])</a></li>
</ul>
</li>
<li><a href="#https_https">HTTPS</a><ul>
<li><a href="#https_class_https_agent">Class: https.Agent</a></li>
<li><a href="#https_class_https_server">Class: https.Server</a><ul>
<li><a href="#https_server_settimeout_msecs_callback">server.setTimeout(msecs, callback)</a></li>
<li><a href="#https_server_timeout">server.timeout</a></li>
</ul>
</li>
<li><a href="#https_https_createserver_options_requestlistener">https.createServer(options[, requestListener])</a><ul>
<li><a href="#https_server_close_callback">server.close([callback])</a></li>
<li><a href="#https_server_listen_handle_callback">server.listen(handle[, callback])</a></li>
<li><a href="#https_server_listen_path_callback">server.listen(path[, callback])</a></li>
<li><a href="#https_server_listen_port_host_backlog_callback">server.listen(port[, host][, backlog][, callback])</a></li>
</ul>
</li>
<li><a href="#https_https_get_options_callback">https.get(options, callback)</a></li>
<li><a href="#https_https_globalagent">https.globalAgent</a></li>
<li><a href="#https_https_request_options_callback">https.request(options, callback)</a></li>
</ul>
</li>
<li><a href="#modules_modules">Modules</a><ul>
<li><a href="#modules_accessing_the_main_module">Accessing the main module</a></li>
<li><a href="#modules_addenda_package_manager_tips">Addenda: Package Manager Tips</a></li>
<li><a href="#modules_all_together">All Together...</a></li>
<li><a href="#modules_caching">Caching</a><ul>
<li><a href="#modules_module_caching_caveats">Module Caching Caveats</a></li>
</ul>
</li>
<li><a href="#modules_core_modules">Core Modules</a></li>
<li><a href="#modules_cycles">Cycles</a></li>
<li><a href="#modules_file_modules">File Modules</a></li>
<li><a href="#modules_folders_as_modules">Folders as Modules</a></li>
<li><a href="#modules_loading_from_node_modules_folders">Loading from <code>node_modules</code> Folders</a></li>
<li><a href="#modules_loading_from_the_global_folders">Loading from the global folders</a></li>
<li><a href="#modules_the_module_wrapper">The module wrapper</a></li>
<li><a href="#modules_the_module_object">The <code>module</code> Object</a><ul>
<li><a href="#modules_module_children">module.children</a></li>
<li><a href="#modules_module_exports">module.exports</a><ul>
<li><a href="#modules_exports_alias">exports alias</a></li>
</ul>
</li>
<li><a href="#modules_module_filename">module.filename</a></li>
<li><a href="#modules_module_id">module.id</a></li>
<li><a href="#modules_module_loaded">module.loaded</a></li>
<li><a href="#modules_module_parent">module.parent</a></li>
<li><a href="#modules_module_require_id">module.require(id)</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#net_net">net</a><ul>
<li><a href="#net_class_net_server">Class: net.Server</a><ul>
<li><a href="#net_event_close">Event: 'close'</a></li>
<li><a href="#net_event_connection">Event: 'connection'</a></li>
<li><a href="#net_event_error">Event: 'error'</a></li>
<li><a href="#net_event_listening">Event: 'listening'</a></li>
<li><a href="#net_server_address">server.address()</a></li>
<li><a href="#net_server_close_callback">server.close([callback])</a></li>
<li><a href="#net_server_connections">server.connections</a></li>
<li><a href="#net_server_getconnections_callback">server.getConnections(callback)</a></li>
<li><a href="#net_server_listen_handle_backlog_callback">server.listen(handle[, backlog][, callback])</a></li>
<li><a href="#net_server_listen_options_callback">server.listen(options[, callback])</a></li>
<li><a href="#net_server_listen_path_backlog_callback">server.listen(path[, backlog][, callback])</a></li>
<li><a href="#net_server_listen_port_hostname_backlog_callback">server.listen(port[, hostname][, backlog][, callback])</a></li>
<li><a href="#net_server_listening">server.listening</a></li>
<li><a href="#net_server_maxconnections">server.maxConnections</a></li>
<li><a href="#net_server_ref">server.ref()</a></li>
<li><a href="#net_server_unref">server.unref()</a></li>
</ul>
</li>
<li><a href="#net_class_net_socket">Class: net.Socket</a><ul>
<li><a href="#net_new_net_socket_options">new net.Socket([options])</a></li>
<li><a href="#net_event_close_1">Event: 'close'</a></li>
<li><a href="#net_event_connect">Event: 'connect'</a></li>
<li><a href="#net_event_data">Event: 'data'</a></li>
<li><a href="#net_event_drain">Event: 'drain'</a></li>
<li><a href="#net_event_end">Event: 'end'</a></li>
<li><a href="#net_event_error_1">Event: 'error'</a></li>
<li><a href="#net_event_lookup">Event: 'lookup'</a></li>
<li><a href="#net_event_timeout">Event: 'timeout'</a></li>
<li><a href="#net_socket_address">socket.address()</a></li>
<li><a href="#net_socket_buffersize">socket.bufferSize</a></li>
<li><a href="#net_socket_bytesread">socket.bytesRead</a></li>
<li><a href="#net_socket_byteswritten">socket.bytesWritten</a></li>
<li><a href="#net_socket_connect_options_connectlistener">socket.connect(options[, connectListener])</a></li>
<li><a href="#net_socket_connect_path_connectlistener">socket.connect(path[, connectListener])</a></li>
<li><a href="#net_socket_connect_port_host_connectlistener">socket.connect(port[, host][, connectListener])</a></li>
<li><a href="#net_socket_connecting">socket.connecting</a></li>
<li><a href="#net_socket_destroy">socket.destroy()</a></li>
<li><a href="#net_socket_end_data_encoding">socket.end([data][, encoding])</a></li>
<li><a href="#net_socket_localaddress">socket.localAddress</a></li>
<li><a href="#net_socket_localport">socket.localPort</a></li>
<li><a href="#net_socket_pause">socket.pause()</a></li>
<li><a href="#net_socket_ref">socket.ref()</a></li>
<li><a href="#net_socket_remoteaddress">socket.remoteAddress</a></li>
<li><a href="#net_socket_remotefamily">socket.remoteFamily</a></li>
<li><a href="#net_socket_remoteport">socket.remotePort</a></li>
<li><a href="#net_socket_resume">socket.resume()</a></li>
<li><a href="#net_socket_setencoding_encoding">socket.setEncoding([encoding])</a></li>
<li><a href="#net_socket_setkeepalive_enable_initialdelay">socket.setKeepAlive([enable][, initialDelay])</a></li>
<li><a href="#net_socket_setnodelay_nodelay">socket.setNoDelay([noDelay])</a></li>
<li><a href="#net_socket_settimeout_timeout_callback">socket.setTimeout(timeout[, callback])</a></li>
<li><a href="#net_socket_unref">socket.unref()</a></li>
<li><a href="#net_socket_write_data_encoding_callback">socket.write(data[, encoding][, callback])</a></li>
</ul>
</li>
<li><a href="#net_net_connect_options_connectlistener">net.connect(options[, connectListener])</a></li>
<li><a href="#net_net_connect_path_connectlistener">net.connect(path[, connectListener])</a></li>
<li><a href="#net_net_connect_port_host_connectlistener">net.connect(port[, host][, connectListener])</a></li>
<li><a href="#net_net_createconnection_options_connectlistener">net.createConnection(options[, connectListener])</a></li>
<li><a href="#net_net_createconnection_path_connectlistener">net.createConnection(path[, connectListener])</a></li>
<li><a href="#net_net_createconnection_port_host_connectlistener">net.createConnection(port[, host][, connectListener])</a></li>
<li><a href="#net_net_createserver_options_connectionlistener">net.createServer([options][, connectionListener])</a></li>
<li><a href="#net_net_isip_input">net.isIP(input)</a></li>
<li><a href="#net_net_isipv4_input">net.isIPv4(input)</a></li>
<li><a href="#net_net_isipv6_input">net.isIPv6(input)</a></li>
</ul>
</li>
<li><a href="#os_os">OS</a><ul>
<li><a href="#os_os_eol">os.EOL</a></li>
<li><a href="#os_os_arch">os.arch()</a></li>
<li><a href="#os_os_cpus">os.cpus()</a></li>
<li><a href="#os_os_endianness">os.endianness()</a></li>
<li><a href="#os_os_freemem">os.freemem()</a></li>
<li><a href="#os_os_homedir">os.homedir()</a></li>
<li><a href="#os_os_hostname">os.hostname()</a></li>
<li><a href="#os_os_loadavg">os.loadavg()</a></li>
<li><a href="#os_os_networkinterfaces">os.networkInterfaces()</a></li>
<li><a href="#os_os_platform">os.platform()</a></li>
<li><a href="#os_os_release">os.release()</a></li>
<li><a href="#os_os_tmpdir">os.tmpdir()</a></li>
<li><a href="#os_os_totalmem">os.totalmem()</a></li>
<li><a href="#os_os_type">os.type()</a></li>
<li><a href="#os_os_uptime">os.uptime()</a></li>
<li><a href="#os_os_userinfo_options">os.userInfo([options])</a></li>
</ul>
</li>
<li><a href="#path_path">Path</a><ul>
<li><a href="#path_windows_vs_posix">Windows vs. POSIX</a></li>
<li><a href="#path_path_basename_path_ext">path.basename(path[, ext])</a></li>
<li><a href="#path_path_delimiter">path.delimiter</a></li>
<li><a href="#path_path_dirname_path">path.dirname(path)</a></li>
<li><a href="#path_path_extname_path">path.extname(path)</a></li>
<li><a href="#path_path_format_pathobject">path.format(pathObject)</a></li>
<li><a href="#path_path_isabsolute_path">path.isAbsolute(path)</a></li>
<li><a href="#path_path_join_path">path.join([path[, ...]])</a></li>
<li><a href="#path_path_normalize_path">path.normalize(path)</a></li>
<li><a href="#path_path_parse_path">path.parse(path)</a></li>
<li><a href="#path_path_posix">path.posix</a></li>
<li><a href="#path_path_relative_from_to">path.relative(from, to)</a></li>
<li><a href="#path_path_resolve_path">path.resolve([path[, ...]])</a></li>
<li><a href="#path_path_sep">path.sep</a></li>
<li><a href="#path_path_win32">path.win32</a></li>
</ul>
</li>
<li><a href="#process_process">process</a><ul>
<li><a href="#process_process_events">Process Events</a><ul>
<li><a href="#process_event_beforeexit">Event: 'beforeExit'</a></li>
<li><a href="#process_event_disconnect">Event: 'disconnect'</a></li>
<li><a href="#process_event_exit">Event: 'exit'</a></li>
<li><a href="#process_event_message">Event: 'message'</a></li>
<li><a href="#process_event_rejectionhandled">Event: 'rejectionHandled'</a></li>
<li><a href="#process_event_uncaughtexception">Event: 'uncaughtException'</a><ul>
<li><a href="#process_warning_using_uncaughtexception_correctly">Warning: Using <code>'uncaughtException'</code> correctly</a></li>
</ul>
</li>
<li><a href="#process_event_unhandledrejection">Event: 'unhandledRejection'</a></li>
<li><a href="#process_event_warning">Event: 'warning'</a><ul>
<li><a href="#process_emitting_custom_warnings">Emitting custom warnings</a></li>
<li><a href="#process_emitting_custom_deprecation_warnings">Emitting custom deprecation warnings</a></li>
</ul>
</li>
<li><a href="#process_signal_events">Signal Events</a></li>
</ul>
</li>
<li><a href="#process_process_abort">process.abort()</a></li>
<li><a href="#process_process_arch">process.arch</a></li>
<li><a href="#process_process_argv">process.argv</a></li>
<li><a href="#process_process_chdir_directory">process.chdir(directory)</a></li>
<li><a href="#process_process_config">process.config</a></li>
<li><a href="#process_process_connected">process.connected</a></li>
<li><a href="#process_process_cpuusage_previousvalue">process.cpuUsage([previousValue])</a></li>
<li><a href="#process_process_cwd">process.cwd()</a></li>
<li><a href="#process_process_disconnect">process.disconnect()</a></li>
<li><a href="#process_process_env">process.env</a></li>
<li><a href="#process_process_emitwarning_warning_name_ctor">process.emitWarning(warning[, name][, ctor])</a><ul>
<li><a href="#process_avoiding_duplicate_warnings">Avoiding duplicate warnings</a></li>
</ul>
</li>
<li><a href="#process_process_execargv">process.execArgv</a></li>
<li><a href="#process_process_execpath">process.execPath</a></li>
<li><a href="#process_process_exit_code">process.exit([code])</a></li>
<li><a href="#process_process_exitcode">process.exitCode</a></li>
<li><a href="#process_process_getegid">process.getegid()</a></li>
<li><a href="#process_process_geteuid">process.geteuid()</a></li>
<li><a href="#process_process_getgid">process.getgid()</a></li>
<li><a href="#process_process_getgroups">process.getgroups()</a></li>
<li><a href="#process_process_getuid">process.getuid()</a></li>
<li><a href="#process_process_hrtime_time">process.hrtime([time])</a></li>
<li><a href="#process_process_initgroups_user_extra_group">process.initgroups(user, extra_group)</a></li>
<li><a href="#process_process_kill_pid_signal">process.kill(pid[, signal])</a></li>
<li><a href="#process_process_mainmodule">process.mainModule</a></li>
<li><a href="#process_process_memoryusage">process.memoryUsage()</a></li>
<li><a href="#process_process_nexttick_callback_arg">process.nextTick(callback[, arg][, ...])</a></li>
<li><a href="#process_process_pid">process.pid</a></li>
<li><a href="#process_process_platform">process.platform</a></li>
<li><a href="#process_process_release">process.release</a></li>
<li><a href="#process_process_send_message_sendhandle_options_callback">process.send(message[, sendHandle[, options]][, callback])</a></li>
<li><a href="#process_process_setegid_id">process.setegid(id)</a></li>
<li><a href="#process_process_seteuid_id">process.seteuid(id)</a></li>
<li><a href="#process_process_setgid_id">process.setgid(id)</a></li>
<li><a href="#process_process_setgroups_groups">process.setgroups(groups)</a></li>
<li><a href="#process_process_setuid_id">process.setuid(id)</a></li>
<li><a href="#process_process_stderr">process.stderr</a></li>
<li><a href="#process_process_stdin">process.stdin</a></li>
<li><a href="#process_process_stdout">process.stdout</a><ul>
<li><a href="#process_tty_terminals_and_process_stdout">TTY Terminals and <code>process.stdout</code></a></li>
</ul>
</li>
<li><a href="#process_process_title">process.title</a></li>
<li><a href="#process_process_umask_mask">process.umask([mask])</a></li>
<li><a href="#process_process_uptime">process.uptime()</a></li>
<li><a href="#process_process_version">process.version</a></li>
<li><a href="#process_process_versions">process.versions</a></li>
<li><a href="#process_exit_codes">Exit Codes</a></li>
</ul>
</li>
<li><a href="#punycode_punycode">punycode</a><ul>
<li><a href="#punycode_punycode_decode_string">punycode.decode(string)</a></li>
<li><a href="#punycode_punycode_encode_string">punycode.encode(string)</a></li>
<li><a href="#punycode_punycode_toascii_domain">punycode.toASCII(domain)</a></li>
<li><a href="#punycode_punycode_tounicode_domain">punycode.toUnicode(domain)</a></li>
<li><a href="#punycode_punycode_ucs2">punycode.ucs2</a><ul>
<li><a href="#punycode_punycode_ucs2_decode_string">punycode.ucs2.decode(string)</a></li>
<li><a href="#punycode_punycode_ucs2_encode_codepoints">punycode.ucs2.encode(codePoints)</a></li>
</ul>
</li>
<li><a href="#punycode_punycode_version">punycode.version</a></li>
</ul>
</li>
<li><a href="#querystring_query_string">Query String</a><ul>
<li><a href="#querystring_querystring_escape_str">querystring.escape(str)</a></li>
<li><a href="#querystring_querystring_parse_str_sep_eq_options">querystring.parse(str[, sep[, eq[, options]]])</a></li>
<li><a href="#querystring_querystring_stringify_obj_sep_eq_options">querystring.stringify(obj[, sep[, eq[, options]]])</a></li>
<li><a href="#querystring_querystring_unescape_str">querystring.unescape(str)</a></li>
</ul>
</li>
<li><a href="#readline_readline">Readline</a><ul>
<li><a href="#readline_class_interface">Class: Interface</a><ul>
<li><a href="#readline_event_close">Event: 'close'</a></li>
<li><a href="#readline_event_line">Event: 'line'</a></li>
<li><a href="#readline_event_pause">Event: 'pause'</a></li>
<li><a href="#readline_event_resume">Event: 'resume'</a></li>
<li><a href="#readline_event_sigcont">Event: 'SIGCONT'</a></li>
<li><a href="#readline_event_sigint">Event: 'SIGINT'</a></li>
<li><a href="#readline_event_sigtstp">Event: 'SIGTSTP'</a></li>
<li><a href="#readline_rl_close">rl.close()</a></li>
<li><a href="#readline_rl_pause">rl.pause()</a></li>
<li><a href="#readline_rl_prompt_preservecursor">rl.prompt([preserveCursor])</a></li>
<li><a href="#readline_rl_question_query_callback">rl.question(query, callback)</a></li>
<li><a href="#readline_rl_resume">rl.resume()</a></li>
<li><a href="#readline_rl_setprompt_prompt">rl.setPrompt(prompt)</a></li>
<li><a href="#readline_rl_write_data_key">rl.write(data[, key])</a></li>
</ul>
</li>
<li><a href="#readline_readline_clearline_stream_dir">readline.clearLine(stream, dir)</a></li>
<li><a href="#readline_readline_clearscreendown_stream">readline.clearScreenDown(stream)</a></li>
<li><a href="#readline_readline_createinterface_options">readline.createInterface(options)</a><ul>
<li><a href="#readline_use_of_the_completer_function">Use of the <code>completer</code> Function</a></li>
</ul>
</li>
<li><a href="#readline_readline_cursorto_stream_x_y">readline.cursorTo(stream, x, y)</a></li>
<li><a href="#readline_readline_emitkeypressevents_stream_interface">readline.emitKeypressEvents(stream[, interface])</a></li>
<li><a href="#readline_readline_movecursor_stream_dx_dy">readline.moveCursor(stream, dx, dy)</a></li>
<li><a href="#readline_example_tiny_cli">Example: Tiny CLI</a></li>
<li><a href="#readline_example_read_file_stream_line_by_line">Example: Read File Stream Line-by-Line</a></li>
</ul>
</li>
<li><a href="#repl_repl">REPL</a><ul>
<li><a href="#repl_design_and_features">Design and Features</a><ul>
<li><a href="#repl_commands_and_special_keys">Commands and Special Keys</a></li>
<li><a href="#repl_default_evaluation">Default Evaluation</a><ul>
<li><a href="#repl_javascript_expressions">JavaScript Expressions</a></li>
<li><a href="#repl_global_and_local_scope">Global and Local Scope</a></li>
<li><a href="#repl_accessing_core_node_js_modules">Accessing Core Node.js Modules</a></li>
<li><a href="#repl_assignment_of_the_underscore_variable">Assignment of the <code>_</code> (underscore) variable</a></li>
</ul>
</li>
<li><a href="#repl_custom_evaluation_functions">Custom Evaluation Functions</a><ul>
<li><a href="#repl_recoverable_errors">Recoverable Errors</a></li>
</ul>
</li>
<li><a href="#repl_customizing_repl_output">Customizing REPL Output</a></li>
</ul>
</li>
<li><a href="#repl_class_replserver">Class: REPLServer</a><ul>
<li><a href="#repl_event_exit">Event: 'exit'</a></li>
<li><a href="#repl_event_reset">Event: 'reset'</a></li>
<li><a href="#repl_replserver_definecommand_keyword_cmd">replServer.defineCommand(keyword, cmd)</a></li>
<li><a href="#repl_replserver_displayprompt_preservecursor">replServer.displayPrompt([preserveCursor])</a></li>
</ul>
</li>
<li><a href="#repl_repl_start_options">repl.start([options])</a></li>
<li><a href="#repl_the_node_js_repl">The Node.js REPL</a><ul>
<li><a href="#repl_environment_variable_options">Environment Variable Options</a></li>
<li><a href="#repl_persistent_history">Persistent History</a><ul>
<li><a href="#repl_node_repl_history_file">NODE_REPL_HISTORY_FILE</a></li>
</ul>
</li>
<li><a href="#repl_using_the_node_js_repl_with_advanced_line_editors">Using the Node.js REPL with advanced line-editors</a></li>
<li><a href="#repl_starting_multiple_repl_instances_against_a_single_running_instance">Starting multiple REPL instances against a single running instance</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#stream_stream">Stream</a><ul>
<li><a href="#stream_organization_of_this_document">Organization of this document</a></li>
<li><a href="#stream_types_of_streams">Types of Streams</a><ul>
<li><a href="#stream_object_mode">Object Mode</a></li>
<li><a href="#stream_buffering">Buffering</a></li>
</ul>
</li>
<li><a href="#stream_api_for_stream_consumers">API for Stream Consumers</a><ul>
<li><a href="#stream_writable_streams">Writable Streams</a><ul>
<li><a href="#stream_class_stream_writable">Class: stream.Writable</a><ul>
<li><a href="#stream_event_close">Event: 'close'</a></li>
<li><a href="#stream_event_drain">Event: 'drain'</a></li>
<li><a href="#stream_event_error">Event: 'error'</a></li>
<li><a href="#stream_event_finish">Event: 'finish'</a></li>
<li><a href="#stream_event_pipe">Event: 'pipe'</a></li>
<li><a href="#stream_event_unpipe">Event: 'unpipe'</a></li>
<li><a href="#stream_writable_cork">writable.cork()</a></li>
<li><a href="#stream_writable_end_chunk_encoding_callback">writable.end([chunk][, encoding][, callback])</a></li>
<li><a href="#stream_writable_setdefaultencoding_encoding">writable.setDefaultEncoding(encoding)</a></li>
<li><a href="#stream_writable_uncork">writable.uncork()</a></li>
<li><a href="#stream_writable_write_chunk_encoding_callback">writable.write(chunk[, encoding][, callback])</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#stream_readable_streams">Readable Streams</a><ul>
<li><a href="#stream_two_modes">Two Modes</a></li>
<li><a href="#stream_three_states">Three States</a></li>
<li><a href="#stream_choose_one">Choose One</a></li>
<li><a href="#stream_class_stream_readable">Class: stream.Readable</a><ul>
<li><a href="#stream_event_close_1">Event: 'close'</a></li>
<li><a href="#stream_event_data">Event: 'data'</a></li>
<li><a href="#stream_event_end">Event: 'end'</a></li>
<li><a href="#stream_event_error_1">Event: 'error'</a></li>
<li><a href="#stream_event_readable">Event: 'readable'</a></li>
<li><a href="#stream_readable_ispaused">readable.isPaused()</a></li>
<li><a href="#stream_readable_pause">readable.pause()</a></li>
<li><a href="#stream_readable_pipe_destination_options">readable.pipe(destination[, options])</a></li>
<li><a href="#stream_readable_read_size">readable.read([size])</a></li>
<li><a href="#stream_readable_resume">readable.resume()</a></li>
<li><a href="#stream_readable_setencoding_encoding">readable.setEncoding(encoding)</a></li>
<li><a href="#stream_readable_unpipe_destination">readable.unpipe([destination])</a></li>
<li><a href="#stream_readable_unshift_chunk">readable.unshift(chunk)</a></li>
<li><a href="#stream_readable_wrap_stream">readable.wrap(stream)</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#stream_duplex_and_transform_streams">Duplex and Transform Streams</a><ul>
<li><a href="#stream_class_stream_duplex">Class: stream.Duplex</a></li>
<li><a href="#stream_class_stream_transform">Class: stream.Transform</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#stream_api_for_stream_implemeters">API for Stream Implemeters</a><ul>
<li><a href="#stream_simplified_construction">Simplified Construction</a></li>
<li><a href="#stream_implementing_a_writable_stream">Implementing a Writable Stream</a><ul>
<li><a href="#stream_constructor_new_stream_writable_options">Constructor: new stream.Writable([options])</a></li>
<li><a href="#stream_writable_write_chunk_encoding_callback_1">writable._write(chunk, encoding, callback)</a></li>
<li><a href="#stream_writable_writev_chunks_callback">writable._writev(chunks, callback)</a></li>
<li><a href="#stream_errors_while_writing">Errors While Writing</a></li>
<li><a href="#stream_an_example_writable_stream">An Example Writable Stream</a></li>
</ul>
</li>
<li><a href="#stream_implementing_a_readable_stream">Implementing a Readable Stream</a><ul>
<li><a href="#stream_new_stream_readable_options">new stream.Readable([options])</a></li>
<li><a href="#stream_readable_read_size_1">readable._read(size)</a></li>
<li><a href="#stream_readable_push_chunk_encoding">readable.push(chunk[, encoding])</a></li>
<li><a href="#stream_errors_while_reading">Errors While Reading</a></li>
<li><a href="#stream_an_example_counting_stream">An Example Counting Stream</a></li>
</ul>
</li>
<li><a href="#stream_implementing_a_duplex_stream">Implementing a Duplex Stream</a><ul>
<li><a href="#stream_new_stream_duplex_options">new stream.Duplex(options)</a></li>
<li><a href="#stream_an_example_duplex_stream">An Example Duplex Stream</a></li>
<li><a href="#stream_object_mode_duplex_streams">Object Mode Duplex Streams</a></li>
</ul>
</li>
<li><a href="#stream_implementing_a_transform_stream">Implementing a Transform Stream</a><ul>
<li><a href="#stream_new_stream_transform_options">new stream.Transform([options])</a></li>
<li><a href="#stream_events_finish_and_end">Events: 'finish' and 'end'</a></li>
<li><a href="#stream_transform_flush_callback">transform._flush(callback)</a></li>
<li><a href="#stream_transform_transform_chunk_encoding_callback">transform._transform(chunk, encoding, callback)</a></li>
<li><a href="#stream_class_stream_passthrough">Class: stream.PassThrough</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#stream_additional_notes">Additional Notes</a><ul>
<li><a href="#stream_compatibility_with_older_node_js_versions">Compatibility with Older Node.js Versions</a></li>
<li><a href="#stream_readable_read_0"><code>readable.read(0)</code></a></li>
<li><a href="#stream_readable_push"><code>readable.push('')</code></a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#string_decoder_stringdecoder">StringDecoder</a><ul>
<li><a href="#string_decoder_class_new_stringdecoder_encoding">Class: new StringDecoder([encoding])</a><ul>
<li><a href="#string_decoder_stringdecoder_end_buffer">stringDecoder.end([buffer])</a></li>
<li><a href="#string_decoder_stringdecoder_write_buffer">stringDecoder.write(buffer)</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#timers_timers">Timers</a><ul>
<li><a href="#timers_clearimmediate_immediateobject">clearImmediate(immediateObject)</a></li>
<li><a href="#timers_clearinterval_intervalobject">clearInterval(intervalObject)</a></li>
<li><a href="#timers_cleartimeout_timeoutobject">clearTimeout(timeoutObject)</a></li>
<li><a href="#timers_ref">ref()</a></li>
<li><a href="#timers_setimmediate_callback_arg">setImmediate(callback[, arg][, ...])</a></li>
<li><a href="#timers_setinterval_callback_delay_arg">setInterval(callback, delay[, arg][, ...])</a></li>
<li><a href="#timers_settimeout_callback_delay_arg">setTimeout(callback, delay[, arg][, ...])</a></li>
<li><a href="#timers_unref">unref()</a></li>
</ul>
</li>
<li><a href="#tls_tls_ssl">TLS (SSL)</a><ul>
<li><a href="#tls_tls_ssl_concepts">TLS/SSL Concepts</a><ul>
<li><a href="#tls_perfect_forward_secrecy">Perfect Forward Secrecy</a></li>
<li><a href="#tls_alpn_npn_and_sni">ALPN, NPN and SNI</a></li>
<li><a href="#tls_client_initiated_renegotiation_attack_mitigation">Client-initiated renegotiation attack mitigation</a></li>
</ul>
</li>
<li><a href="#tls_modifying_the_default_tls_cipher_suite">Modifying the Default TLS Cipher suite</a></li>
<li><a href="#tls_class_tls_server">Class: tls.Server</a><ul>
<li><a href="#tls_event_tlsclienterror">Event: 'tlsClientError'</a></li>
<li><a href="#tls_event_newsession">Event: 'newSession'</a></li>
<li><a href="#tls_event_ocsprequest">Event: 'OCSPRequest'</a></li>
<li><a href="#tls_event_resumesession">Event: 'resumeSession'</a></li>
<li><a href="#tls_event_secureconnection">Event: 'secureConnection'</a></li>
<li><a href="#tls_server_addcontext_hostname_context">server.addContext(hostname, context)</a></li>
<li><a href="#tls_server_address">server.address()</a></li>
<li><a href="#tls_server_close_callback">server.close([callback])</a></li>
<li><a href="#tls_server_connections">server.connections</a></li>
<li><a href="#tls_server_getticketkeys">server.getTicketKeys()</a></li>
<li><a href="#tls_server_listen_port_hostname_callback">server.listen(port[, hostname][, callback])</a></li>
<li><a href="#tls_server_setticketkeys_keys">server.setTicketKeys(keys)</a></li>
</ul>
</li>
<li><a href="#tls_class_tls_tlssocket">Class: tls.TLSSocket</a><ul>
<li><a href="#tls_new_tls_tlssocket_socket_options">new tls.TLSSocket(socket[, options])</a></li>
<li><a href="#tls_event_ocspresponse">Event: 'OCSPResponse'</a></li>
<li><a href="#tls_event_secureconnect">Event: 'secureConnect'</a></li>
<li><a href="#tls_tlssocket_address">tlsSocket.address()</a></li>
<li><a href="#tls_tlssocket_authorized">tlsSocket.authorized</a></li>
<li><a href="#tls_tlssocket_authorizationerror">tlsSocket.authorizationError</a></li>
<li><a href="#tls_tlssocket_encrypted">tlsSocket.encrypted</a></li>
<li><a href="#tls_tlssocket_getcipher">tlsSocket.getCipher()</a></li>
<li><a href="#tls_tlssocket_getephemeralkeyinfo">tlsSocket.getEphemeralKeyInfo()</a></li>
<li><a href="#tls_tlssocket_getpeercertificate_detailed">tlsSocket.getPeerCertificate([ detailed ])</a></li>
<li><a href="#tls_tlssocket_getprotocol">tlsSocket.getProtocol()</a></li>
<li><a href="#tls_tlssocket_getsession">tlsSocket.getSession()</a></li>
<li><a href="#tls_tlssocket_gettlsticket">tlsSocket.getTLSTicket()</a></li>
<li><a href="#tls_tlssocket_localaddress">tlsSocket.localAddress</a></li>
<li><a href="#tls_tlssocket_localport">tlsSocket.localPort</a></li>
<li><a href="#tls_tlssocket_remoteaddress">tlsSocket.remoteAddress</a></li>
<li><a href="#tls_tlssocket_remotefamily">tlsSocket.remoteFamily</a></li>
<li><a href="#tls_tlssocket_remoteport">tlsSocket.remotePort</a></li>
<li><a href="#tls_tlssocket_renegotiate_options_callback">tlsSocket.renegotiate(options, callback)</a></li>
<li><a href="#tls_tlssocket_setmaxsendfragment_size">tlsSocket.setMaxSendFragment(size)</a></li>
</ul>
</li>
<li><a href="#tls_tls_connect_options_callback">tls.connect(options[, callback])</a></li>
<li><a href="#tls_tls_connect_port_host_options_callback">tls.connect(port[, host][, options][, callback])</a></li>
<li><a href="#tls_tls_createsecurecontext_options">tls.createSecureContext(options)</a></li>
<li><a href="#tls_tls_createserver_options_secureconnectionlistener">tls.createServer(options[, secureConnectionListener])</a></li>
<li><a href="#tls_tls_getciphers">tls.getCiphers()</a></li>
<li><a href="#tls_deprecated_apis">Deprecated APIs</a><ul>
<li><a href="#tls_class_cryptostream">Class: CryptoStream</a><ul>
<li><a href="#tls_cryptostream_byteswritten">cryptoStream.bytesWritten</a></li>
</ul>
</li>
<li><a href="#tls_class_securepair">Class: SecurePair</a><ul>
<li><a href="#tls_event_secure">Event: 'secure'</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#tls_tls_createsecurepair_context_isserver_requestcert_rejectunauthorized_options">tls.createSecurePair([context][, isServer][, requestCert][, rejectUnauthorized][, options])</a></li>
</ul>
</li>
<li><a href="#tty_tty">TTY</a><ul>
<li><a href="#tty_class_tty_readstream">Class: tty.ReadStream</a><ul>
<li><a href="#tty_readstream_israw">readStream.isRaw</a></li>
<li><a href="#tty_readstream_setrawmode_mode">readStream.setRawMode(mode)</a></li>
</ul>
</li>
<li><a href="#tty_class_tty_writestream">Class: tty.WriteStream</a><ul>
<li><a href="#tty_event_resize">Event: 'resize'</a></li>
<li><a href="#tty_writestream_columns">writeStream.columns</a></li>
<li><a href="#tty_writestream_rows">writeStream.rows</a></li>
</ul>
</li>
<li><a href="#tty_tty_isatty_fd">tty.isatty(fd)</a></li>
</ul>
</li>
<li><a href="#url_url">URL</a><ul>
<li><a href="#url_url_strings_and_url_objects">URL Strings and URL Objects</a><ul>
<li><a href="#url_urlobject_href">urlObject.href</a></li>
<li><a href="#url_urlobject_protocol">urlObject.protocol</a></li>
<li><a href="#url_urlobject_slashes">urlObject.slashes</a></li>
<li><a href="#url_urlobject_host">urlObject.host</a></li>
<li><a href="#url_urlobject_auth">urlObject.auth</a></li>
<li><a href="#url_urlobject_hostname">urlObject.hostname</a></li>
<li><a href="#url_urlobject_port">urlObject.port</a></li>
<li><a href="#url_urlobject_pathname">urlObject.pathname</a></li>
<li><a href="#url_urlobject_search">urlObject.search</a></li>
<li><a href="#url_urlobject_path">urlObject.path</a></li>
<li><a href="#url_urlobject_query">urlObject.query</a></li>
<li><a href="#url_urlobject_hash">urlObject.hash</a></li>
</ul>
</li>
<li><a href="#url_url_format_urlobject">url.format(urlObject)</a></li>
<li><a href="#url_url_parse_urlstring_parsequerystring_slashesdenotehost">url.parse(urlString[, parseQueryString[, slashesDenoteHost]])</a></li>
<li><a href="#url_url_resolve_from_to">url.resolve(from, to)</a></li>
<li><a href="#url_escaped_characters">Escaped Characters</a></li>
</ul>
</li>
<li><a href="#util_util">util</a><ul>
<li><a href="#util_util_debuglog_section">util.debuglog(section)</a></li>
<li><a href="#util_util_deprecate_function_string">util.deprecate(function, string)</a></li>
<li><a href="#util_util_format_format">util.format(format[, ...])</a></li>
<li><a href="#util_util_inherits_constructor_superconstructor">util.inherits(constructor, superConstructor)</a></li>
<li><a href="#util_util_inspect_object_options">util.inspect(object[, options])</a><ul>
<li><a href="#util_customizing_util_inspect_colors">Customizing <code>util.inspect</code> colors</a></li>
<li><a href="#util_custom_inspect_function_on_objects">Custom <code>inspect()</code> function on Objects</a></li>
</ul>
</li>
<li><a href="#util_deprecated_apis">Deprecated APIs</a><ul>
<li><a href="#util_util_debug_string">util.debug(string)</a></li>
<li><a href="#util_util_error">util.error([...])</a></li>
<li><a href="#util_util_isarray_object">util.isArray(object)</a></li>
<li><a href="#util_util_isboolean_object">util.isBoolean(object)</a></li>
<li><a href="#util_util_isbuffer_object">util.isBuffer(object)</a></li>
<li><a href="#util_util_isdate_object">util.isDate(object)</a></li>
<li><a href="#util_util_iserror_object">util.isError(object)</a></li>
<li><a href="#util_util_isfunction_object">util.isFunction(object)</a></li>
<li><a href="#util_util_isnull_object">util.isNull(object)</a></li>
<li><a href="#util_util_isnullorundefined_object">util.isNullOrUndefined(object)</a></li>
<li><a href="#util_util_isnumber_object">util.isNumber(object)</a></li>
<li><a href="#util_util_isobject_object">util.isObject(object)</a></li>
<li><a href="#util_util_isprimitive_object">util.isPrimitive(object)</a></li>
<li><a href="#util_util_isregexp_object">util.isRegExp(object)</a></li>
<li><a href="#util_util_isstring_object">util.isString(object)</a></li>
<li><a href="#util_util_issymbol_object">util.isSymbol(object)</a></li>
<li><a href="#util_util_isundefined_object">util.isUndefined(object)</a></li>
<li><a href="#util_util_log_string">util.log(string)</a></li>
<li><a href="#util_util_print">util.print([...])</a></li>
<li><a href="#util_util_puts">util.puts([...])</a></li>
<li><a href="#util_util_extend_obj">util._extend(obj)</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#v8_v8">V8</a><ul>
<li><a href="#v8_v8_getheapstatistics">v8.getHeapStatistics()</a></li>
<li><a href="#v8_v8_getheapspacestatistics">v8.getHeapSpaceStatistics()</a></li>
<li><a href="#v8_v8_setflagsfromstring_string">v8.setFlagsFromString(string)</a></li>
</ul>
</li>
<li><a href="#vm_executing_javascript">Executing JavaScript</a><ul>
<li><a href="#vm_class_vm_script">Class: vm.Script</a><ul>
<li><a href="#vm_new_vm_script_code_options">new vm.Script(code, options)</a></li>
<li><a href="#vm_script_runincontext_contextifiedsandbox_options">script.runInContext(contextifiedSandbox[, options])</a></li>
<li><a href="#vm_script_runinnewcontext_sandbox_options">script.runInNewContext([sandbox][, options])</a></li>
<li><a href="#vm_script_runinthiscontext_options">script.runInThisContext([options])</a></li>
</ul>
</li>
<li><a href="#vm_vm_createcontext_sandbox">vm.createContext([sandbox])</a></li>
<li><a href="#vm_vm_iscontext_sandbox">vm.isContext(sandbox)</a></li>
<li><a href="#vm_vm_runincontext_code_contextifiedsandbox_options">vm.runInContext(code, contextifiedSandbox[, options])</a></li>
<li><a href="#vm_vm_runindebugcontext_code">vm.runInDebugContext(code)</a></li>
<li><a href="#vm_vm_runinnewcontext_code_sandbox_options">vm.runInNewContext(code[, sandbox][, options])</a></li>
<li><a href="#vm_vm_runinthiscontext_code_options">vm.runInThisContext(code[, options])</a></li>
<li><a href="#vm_example_running_an_http_server_within_a_vm">Example: Running an HTTP Server within a VM</a></li>
<li><a href="#vm_what_does_it_mean_to_contextify_an_object">What does it mean to "contextify" an object?</a></li>
</ul>
</li>
<li><a href="#zlib_zlib">Zlib</a><ul>
<li><a href="#zlib_compressing_http_requests_and_responses">Compressing HTTP requests and responses</a></li>
<li><a href="#zlib_memory_usage_tuning">Memory Usage Tuning</a></li>
<li><a href="#zlib_flushing">Flushing</a></li>
<li><a href="#zlib_constants">Constants</a></li>
<li><a href="#zlib_class_options">Class Options</a></li>
<li><a href="#zlib_class_zlib_deflate">Class: zlib.Deflate</a></li>
<li><a href="#zlib_class_zlib_deflateraw">Class: zlib.DeflateRaw</a></li>
<li><a href="#zlib_class_zlib_gunzip">Class: zlib.Gunzip</a></li>
<li><a href="#zlib_class_zlib_gzip">Class: zlib.Gzip</a></li>
<li><a href="#zlib_class_zlib_inflate">Class: zlib.Inflate</a></li>
<li><a href="#zlib_class_zlib_inflateraw">Class: zlib.InflateRaw</a></li>
<li><a href="#zlib_class_zlib_unzip">Class: zlib.Unzip</a></li>
<li><a href="#zlib_class_zlib_zlib">Class: zlib.Zlib</a><ul>
<li><a href="#zlib_zlib_flush_kind_callback">zlib.flush([kind], callback)</a></li>
<li><a href="#zlib_zlib_params_level_strategy_callback">zlib.params(level, strategy, callback)</a></li>
<li><a href="#zlib_zlib_reset">zlib.reset()</a></li>
</ul>
</li>
<li><a href="#zlib_zlib_createdeflate_options">zlib.createDeflate([options])</a></li>
<li><a href="#zlib_zlib_createdeflateraw_options">zlib.createDeflateRaw([options])</a></li>
<li><a href="#zlib_zlib_creategunzip_options">zlib.createGunzip([options])</a></li>
<li><a href="#zlib_zlib_creategzip_options">zlib.createGzip([options])</a></li>
<li><a href="#zlib_zlib_createinflate_options">zlib.createInflate([options])</a></li>
<li><a href="#zlib_zlib_createinflateraw_options">zlib.createInflateRaw([options])</a></li>
<li><a href="#zlib_zlib_createunzip_options">zlib.createUnzip([options])</a></li>
<li><a href="#zlib_convenience_methods">Convenience Methods</a><ul>
<li><a href="#zlib_zlib_deflate_buf_options_callback">zlib.deflate(buf[, options], callback)</a></li>
<li><a href="#zlib_zlib_deflatesync_buf_options">zlib.deflateSync(buf[, options])</a></li>
<li><a href="#zlib_zlib_deflateraw_buf_options_callback">zlib.deflateRaw(buf[, options], callback)</a></li>
<li><a href="#zlib_zlib_deflaterawsync_buf_options">zlib.deflateRawSync(buf[, options])</a></li>
<li><a href="#zlib_zlib_gunzip_buf_options_callback">zlib.gunzip(buf[, options], callback)</a></li>
<li><a href="#zlib_zlib_gunzipsync_buf_options">zlib.gunzipSync(buf[, options])</a></li>
<li><a href="#zlib_zlib_gzip_buf_options_callback">zlib.gzip(buf[, options], callback)</a></li>
<li><a href="#zlib_zlib_gzipsync_buf_options">zlib.gzipSync(buf[, options])</a></li>
<li><a href="#zlib_zlib_inflate_buf_options_callback">zlib.inflate(buf[, options], callback)</a></li>
<li><a href="#zlib_zlib_inflatesync_buf_options">zlib.inflateSync(buf[, options])</a></li>
<li><a href="#zlib_zlib_inflateraw_buf_options_callback">zlib.inflateRaw(buf[, options], callback)</a></li>
<li><a href="#zlib_zlib_inflaterawsync_buf_options">zlib.inflateRawSync(buf[, options])</a></li>
<li><a href="#zlib_zlib_unzip_buf_options_callback">zlib.unzip(buf[, options], callback)</a></li>
<li><a href="#zlib_zlib_unzipsync_buf_options">zlib.unzipSync(buf[, options])</a></li>
</ul>
</li>
</ul>
</li>
</ul>

      </div>

      <div id="apicontent">
        <!-- [start-include:documentation.md] -->
<h1>About this Documentation<span><a class="mark" href="#documentation_about_this_documentation" id="documentation_about_this_documentation">#</a></span></h1>
<!-- type=misc -->
<p>The goal of this documentation is to comprehensively explain the Node.js
API, both from a reference as well as a conceptual point of view.  Each
section describes a built-in module or high-level concept.</p>
<p>Where appropriate, property types, method arguments, and the arguments
provided to event handlers are detailed in a list underneath the topic
heading.</p>
<p>Every <code>.html</code> document has a corresponding <code>.json</code> document presenting
the same information in a structured manner.  This feature is
experimental, and added for the benefit of IDEs and other utilities that
wish to do programmatic things with the documentation.</p>
<p>Every <code>.html</code> and <code>.json</code> file is generated based on the corresponding
<code>.md</code> file in the <code>doc/api/</code> folder in Node.js's source tree.  The
documentation is generated using the <code>tools/doc/generate.js</code> program.
The HTML template is located at <code>doc/template.html</code>.</p>
<p>If you find an error in this documentation, please <a href="https://github.com/nodejs/node/issues/new">submit an issue</a>
or see <a href="https://github.com/nodejs/node/blob/master/CONTRIBUTING.md">the contributing guide</a> for directions on how to submit a patch.</p>
<h2>Stability Index<span><a class="mark" href="#documentation_stability_index" id="documentation_stability_index">#</a></span></h2>
<!--type=misc-->
<p>Throughout the documentation, you will see indications of a section's
stability.  The Node.js API is still somewhat changing, and as it
matures, certain parts are more reliable than others.  Some are so
proven, and so relied upon, that they are unlikely to ever change at
all.  Others are brand new and experimental, or known to be hazardous
and in the process of being redesigned.</p>
<p>The stability indices are as follows:</p>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated
This feature is known to be problematic<span class="sh_symbol">,</span> and changes are
planned<span class="sh_symbol">.</span>  Do not rely on it<span class="sh_symbol">.</span>  Use of the feature may cause warnings<span class="sh_symbol">.</span>  Backwards
compatibility should not be expected<span class="sh_symbol">.</span></pre><pre class="api_stability api_stability_1 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">1</span> <span class="sh_symbol">-</span> Experimental
This feature is subject to change<span class="sh_symbol">,</span> and is gated by a command line flag<span class="sh_symbol">.</span>
It may change or be removed <span class="sh_keyword">in</span> future versions<span class="sh_symbol">.</span></pre><pre class="api_stability api_stability_2 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> Stable
The API has proven satisfactory<span class="sh_symbol">.</span> Compatibility <span class="sh_keyword">with</span> the npm ecosystem
is a high priority<span class="sh_symbol">,</span> and will not be broken unless absolutely necessary<span class="sh_symbol">.</span></pre><pre class="api_stability api_stability_3 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">3</span> <span class="sh_symbol">-</span> Locked
Only fixes related to security<span class="sh_symbol">,</span> performance<span class="sh_symbol">,</span> or bug fixes will be accepted<span class="sh_symbol">.</span>
Please <span class="sh_keyword">do</span> not suggest API changes <span class="sh_keyword">in</span> <span class="sh_keyword">this</span> area<span class="sh_symbol">;</span> they will be refused<span class="sh_symbol">.</span></pre><h2>JSON Output<span><a class="mark" href="#documentation_json_output" id="documentation_json_output">#</a></span></h2>
<pre class="api_stability api_stability_1 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">1</span> <span class="sh_symbol">-</span> Experimental</pre><p>Every HTML file in the markdown has a corresponding JSON file with the
same data.</p>
<p>This feature was added in Node.js v0.6.12.  It is experimental.</p>
<h2>Syscalls and man pages<span><a class="mark" href="#documentation_syscalls_and_man_pages" id="documentation_syscalls_and_man_pages">#</a></span></h2>
<p>System calls like <a href="http://man7.org/linux/man-pages/man2/open.2.html">open(2)</a> and <a href="http://man7.org/linux/man-pages/man2/read.2.html">read(2)</a> define the interface between user programs
and the underlying operating system. Node functions which simply wrap a syscall,
like <code>fs.open()</code>, will document that. The docs link to the corresponding man
pages (short for manual pages) which describe how the syscalls work.</p>
<p><strong>Caveat:</strong> some syscalls, like <a href="http://man7.org/linux/man-pages/man2/lchown.2.html">lchown(2)</a>, are BSD-specific. That means, for
example, that <code>fs.lchown()</code> only works on Mac OS X and other BSD-derived systems,
and is not available on Linux.</p>
<p>Most Unix syscalls have Windows equivalents, but behavior may differ on Windows
relative to Linux and OS X. For an example of the subtle ways in which it's
sometimes impossible to replace Unix syscall semantics on Windows, see <a href="https://github.com/nodejs/node/issues/4760">Node
issue 4760</a>.</p>
<!-- [end-include:documentation.md] -->
<!-- [start-include:synopsis.md] -->
<h1>Usage<span><a class="mark" href="#synopsis_usage" id="synopsis_usage">#</a></span></h1>
<!--type=misc-->
<p><code>node [options] [v8 options] [script.js | -e "script"] [arguments]</code></p>
<p>Please see the <a href="https://nodejs.org/api/cli.html#cli_command_line_options">Command Line Options</a> document for information about
different options and ways to run scripts with Node.js.</p>
<h2>Example<span><a class="mark" href="#synopsis_example" id="synopsis_example">#</a></span></h2>
<p>An example of a <a href="https://nodejs.org/api/http.html">web server</a> written with Node.js which responds with
<code>'Hello World'</code>:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> http <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'http'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> hostname <span class="sh_symbol">=</span> <span class="sh_string">'127.0.0.1'</span><span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> port <span class="sh_symbol">=</span> <span class="sh_number">3000</span><span class="sh_symbol">;</span>

<span class="sh_keyword">const</span> server <span class="sh_symbol">=</span> http<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">((</span>req<span class="sh_symbol">,</span> res<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  res<span class="sh_symbol">.</span>statusCode <span class="sh_symbol">=</span> <span class="sh_number">200</span><span class="sh_symbol">;</span>
  res<span class="sh_symbol">.</span><span class="sh_function">setHeader</span><span class="sh_symbol">(</span><span class="sh_string">'Content-Type'</span><span class="sh_symbol">,</span> <span class="sh_string">'text/plain'</span><span class="sh_symbol">);</span>
  res<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'Hello World</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

server<span class="sh_symbol">.</span><span class="sh_function">listen</span><span class="sh_symbol">(</span>port<span class="sh_symbol">,</span> hostname<span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Server running at http<span class="sh_symbol">:</span><span class="sh_comment">//${hostname}:${port}/`);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>To run the server, put the code into a file called <code>example.js</code> and execute
it with Node.js:</p>
<pre class="sh_sourceCode"><code>$ node example<span class="sh_symbol">.</span>js
Server running at http<span class="sh_symbol">:</span><span class="sh_comment">//127.0.0.1:3000/</span>
</code></pre><p>All of the examples in the documentation can be run similarly.</p>
<!-- [end-include:synopsis.md] -->
<!-- [start-include:addons.md] -->
<h1>Addons<span><a class="mark" href="#addons_addons" id="addons_addons">#</a></span></h1>
<p>Node.js Addons are dynamically-linked shared objects, written in C or C++, that
can be loaded into Node.js using the <a href="https://nodejs.org/api/globals.html#globals_require"><code>require()</code></a> function, and used
just as if they were an ordinary Node.js module. They are used primarily to
provide an interface between JavaScript running in Node.js and C/C++ libraries.</p>
<p>At the moment, the method for implementing Addons is rather complicated,
involving knowledge of several components and APIs :</p>
<ul>
<li><p>V8: the C++ library Node.js currently uses to provide the
JavaScript implementation. V8 provides the mechanisms for creating objects,
calling functions, etc. V8's API is documented mostly in the
<code>v8.h</code> header file (<code>deps/v8/include/v8.h</code> in the Node.js source
tree), which is also available <a href="https://v8docs.nodesource.com/">online</a>.</p>
</li>
<li><p><a href="https://github.com/libuv/libuv">libuv</a>: The C library that implements the Node.js event loop, its worker
threads and all of the asynchronous behaviors of the platform. It also
serves as a cross-platform abstraction library, giving easy, POSIX-like
access across all major operating systems to many common system tasks, such
as interacting with the filesystem, sockets, timers and system events. libuv
also provides a pthreads-like threading abstraction that may be used to
power more sophisticated asynchronous Addons that need to move beyond the
standard event loop. Addon authors are encouraged to think about how to
avoid blocking the event loop with I/O or other time-intensive tasks by
off-loading work via libuv to non-blocking system operations, worker threads
or a custom use of libuv's threads.</p>
</li>
<li><p>Internal Node.js libraries. Node.js itself exports a number of C/C++ APIs
that Addons can use — the most important of which is the
<code>node::ObjectWrap</code> class.</p>
</li>
<li><p>Node.js includes a number of other statically linked libraries including
OpenSSL. These other libraries are located in the <code>deps/</code> directory in the
Node.js source tree. Only the V8 and OpenSSL symbols are purposefully
re-exported by Node.js and may be used to various extents by Addons.
See <a href="#addons_linking_to_node_js_own_dependencies">Linking to Node.js' own dependencies</a> for additional information.</p>
</li>
</ul>
<p>All of the following examples are available for <a href="https://github.com/nodejs/node-addon-examples">download</a> and may
be used as a starting-point for your own Addon.</p>
<h2>Hello world<span><a class="mark" href="#addons_hello_world" id="addons_hello_world">#</a></span></h2>
<p>This "Hello world" example is a simple Addon, written in C++, that is the
equivalent of the following JavaScript code:</p>
<pre class="sh_sourceCode"><code class="lang-js">module<span class="sh_symbol">.</span>exports<span class="sh_symbol">.</span>hello <span class="sh_symbol">=</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_string">'world'</span><span class="sh_symbol">;</span>
</code></pre>
<p>First, create the file <code>hello.cc</code>:</p>
<pre class="sh_sourceCode"><code class="lang-cpp"><span class="sh_comment">// hello.cc</span>
#include <span class="sh_symbol">&lt;</span>node<span class="sh_symbol">.</span>h<span class="sh_symbol">&gt;</span>

namespace demo <span class="sh_cbracket">{</span>

using v8<span class="sh_symbol">::</span>FunctionCallbackInfo<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Isolate<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Local<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span><span class="sh_predef_func">Object</span><span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span><span class="sh_predef_func">String</span><span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Value<span class="sh_symbol">;</span>

void <span class="sh_function">Method</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> FunctionCallbackInfo<span class="sh_symbol">&lt;</span>Value<span class="sh_symbol">&gt;&amp;</span> args<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  Isolate<span class="sh_symbol">*</span> isolate <span class="sh_symbol">=</span> args<span class="sh_symbol">.</span><span class="sh_function">GetIsolate</span><span class="sh_symbol">();</span>
  args<span class="sh_symbol">.</span><span class="sh_function">GetReturnValue</span><span class="sh_symbol">().</span><span class="sh_function">Set</span><span class="sh_symbol">(</span><span class="sh_predef_func">String</span><span class="sh_symbol">::</span><span class="sh_function">NewFromUtf8</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">,</span> <span class="sh_string">"world"</span><span class="sh_symbol">));</span>
<span class="sh_cbracket">}</span>

void <span class="sh_function">init</span><span class="sh_symbol">(</span>Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Object</span><span class="sh_symbol">&gt;</span> exports<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_function">NODE_SET_METHOD</span><span class="sh_symbol">(</span>exports<span class="sh_symbol">,</span> <span class="sh_string">"hello"</span><span class="sh_symbol">,</span> Method<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

<span class="sh_function">NODE_MODULE</span><span class="sh_symbol">(</span>addon<span class="sh_symbol">,</span> init<span class="sh_symbol">)</span>

<span class="sh_cbracket">}</span>  <span class="sh_comment">// namespace demo</span>
</code></pre>
<p>Note that all Node.js Addons must export an initialization function following
the pattern:</p>
<pre class="sh_sourceCode"><code class="lang-cpp">void <span class="sh_function">Initialize</span><span class="sh_symbol">(</span>Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Object</span><span class="sh_symbol">&gt;</span> exports<span class="sh_symbol">);</span>
<span class="sh_function">NODE_MODULE</span><span class="sh_symbol">(</span>module_name<span class="sh_symbol">,</span> Initialize<span class="sh_symbol">)</span>
</code></pre>
<p>There is no semi-colon after <code>NODE_MODULE</code> as it's not a function (see
<code>node.h</code>).</p>
<p>The <code>module_name</code> must match the filename of the final binary (excluding
the .node suffix).</p>
<p>In the <code>hello.cc</code> example, then, the initialization function is <code>init</code> and the
Addon module name is <code>addon</code>.</p>
<h3>Building<span><a class="mark" href="#addons_building" id="addons_building">#</a></span></h3>
<p>Once the source code has been written, it must be compiled into the binary
<code>addon.node</code> file. To do so, create a file called <code>binding.gyp</code> in the
top-level of the project describing the build configuration of your module
using a JSON-like format. This file is used by <a href="https://github.com/nodejs/node-gyp">node-gyp</a> -- a tool written
specifically to compile Node.js Addons.</p>
<pre class="sh_sourceCode"><code><span class="sh_cbracket">{</span>
  <span class="sh_string">"targets"</span><span class="sh_symbol">:</span> <span class="sh_symbol">[</span>
    <span class="sh_cbracket">{</span>
      <span class="sh_string">"target_name"</span><span class="sh_symbol">:</span> <span class="sh_string">"addon"</span><span class="sh_symbol">,</span>
      <span class="sh_string">"sources"</span><span class="sh_symbol">:</span> <span class="sh_symbol">[</span> <span class="sh_string">"hello.cc"</span> <span class="sh_symbol">]</span>
    <span class="sh_cbracket">}</span>
  <span class="sh_symbol">]</span>
<span class="sh_cbracket">}</span>
</code></pre><p><em>Note: A version of the <code>node-gyp</code> utility is bundled and distributed with
Node.js as part of <code>npm</code>. This version is not made directly available for
developers to use and is intended only to support the ability to use the
<code>npm install</code> command to compile and install Addons. Developers who wish to
use <code>node-gyp</code> directly can install it using the command
<code>npm install -g node-gyp</code>. See the <code>node-gyp</code> <a href="https://github.com/nodejs/node-gyp#installation">installation instructions</a> for
more information, including platform-specific requirements.</em></p>
<p>Once the <code>binding.gyp</code> file has been created, use <code>node-gyp configure</code> to
generate the appropriate project build files for the current platform. This
will generate either a <code>Makefile</code> (on Unix platforms) or a <code>vcxproj</code> file
(on Windows) in the <code>build/</code> directory.</p>
<p>Next, invoke the <code>node-gyp build</code> command to generate the compiled <code>addon.node</code>
file. This will be put into the <code>build/Release/</code> directory.</p>
<p>When using <code>npm install</code> to install a Node.js Addon, npm uses its own bundled
version of <code>node-gyp</code> to perform this same set of actions, generating a
compiled version of the Addon for the user's platform on demand.</p>
<p>Once built, the binary Addon can be used from within Node.js by pointing
<a href="https://nodejs.org/api/globals.html#globals_require"><code>require()</code></a> to the built <code>addon.node</code> module:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// hello.js</span>
<span class="sh_keyword">const</span> addon <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./build/Release/addon'</span><span class="sh_symbol">);</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>addon<span class="sh_symbol">.</span><span class="sh_function">hello</span><span class="sh_symbol">());</span> <span class="sh_comment">// 'world'</span>
</code></pre>
<p>Please see the examples below for further information or
<a href="https://github.com/arturadib/node-qt">https://github.com/arturadib/node-qt</a> for an example in production.</p>
<p>Because the exact path to the compiled Addon binary can vary depending on how
it is compiled (i.e. sometimes it may be in <code>./build/Debug/</code>), Addons can use
the <a href="https://github.com/TooTallNate/node-bindings">bindings</a> package to load the compiled module.</p>
<p>Note that while the <code>bindings</code> package implementation is more sophisticated
in how it locates Addon modules, it is essentially using a try-catch pattern
similar to:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">try</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">return</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./build/Release/addon.node'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span> <span class="sh_keyword">catch</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">return</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./build/Debug/addon.node'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>
</code></pre>
<h3>Linking to Node.js' own dependencies<span><a class="mark" href="#addons_linking_to_node_js_own_dependencies" id="addons_linking_to_node_js_own_dependencies">#</a></span></h3>
<p>Node.js uses a number of statically linked libraries such as V8, libuv and
OpenSSL. All Addons are required to link to V8 and may link to any of the
other dependencies as well. Typically, this is as simple as including
the appropriate <code>#include &lt;...&gt;</code> statements (e.g. <code>#include &lt;v8.h&gt;</code>) and
<code>node-gyp</code> will locate the appropriate headers automatically. However, there
are a few caveats to be aware of:</p>
<ul>
<li><p>When <code>node-gyp</code> runs, it will detect the specific release version of Node.js
and download either the full source tarball or just the headers. If the full
source is downloaded, Addons will have complete access to the full set of
Node.js dependencies. However, if only the Node.js headers are downloaded, then
only the symbols exported by Node.js will be available.</p>
</li>
<li><p><code>node-gyp</code> can be run using the <code>--nodedir</code> flag pointing at a local Node.js
source image. Using this option, the Addon will have access to the full set of
dependencies.</p>
</li>
</ul>
<h3>Loading Addons using require()<span><a class="mark" href="#addons_loading_addons_using_require" id="addons_loading_addons_using_require">#</a></span></h3>
<p>The filename extension of the compiled Addon binary is <code>.node</code> (as opposed
to <code>.dll</code> or <code>.so</code>). The <a href="https://nodejs.org/api/globals.html#globals_require"><code>require()</code></a> function is written to look for
files with the <code>.node</code> file extension and initialize those as dynamically-linked
libraries.</p>
<p>When calling <a href="https://nodejs.org/api/globals.html#globals_require"><code>require()</code></a>, the <code>.node</code> extension can usually be
omitted and Node.js will still find and initialize the Addon. One caveat,
however, is that Node.js will first attempt to locate and load modules or
JavaScript files that happen to share the same base name. For instance, if
there is a file <code>addon.js</code> in the same directory as the binary <code>addon.node</code>,
then <a href="https://nodejs.org/api/globals.html#globals_require"><code>require('addon')</code></a> will give precedence to the <code>addon.js</code> file
and load it instead.</p>
<h2>Native Abstractions for Node.js<span><a class="mark" href="#addons_native_abstractions_for_node_js" id="addons_native_abstractions_for_node_js">#</a></span></h2>
<p>Each of the examples illustrated in this document make direct use of the
Node.js and V8 APIs for implementing Addons. It is important to understand
that the V8 API can, and has, changed dramatically from one V8 release to the
next (and one major Node.js release to the next). With each change, Addons may
need to be updated and recompiled in order to continue functioning. The Node.js
release schedule is designed to minimize the frequency and impact of such
changes but there is little that Node.js can do currently to ensure stability
of the V8 APIs.</p>
<p>The <a href="https://github.com/nodejs/nan">Native Abstractions for Node.js</a> (or <code>nan</code>) provide a set of tools that
Addon developers are recommended to use to keep compatibility between past and
future releases of V8 and Node.js. See the <code>nan</code> <a href="https://github.com/nodejs/nan/tree/master/examples/">examples</a> for an
illustration of how it can be used.</p>
<h2>Addon examples<span><a class="mark" href="#addons_addon_examples" id="addons_addon_examples">#</a></span></h2>
<p>Following are some example Addons intended to help developers get started. The
examples make use of the V8 APIs. Refer to the online <a href="https://v8docs.nodesource.com/">V8 reference</a>
for help with the various V8 calls, and V8's <a href="https://developers.google.com/v8/embed">Embedder's Guide</a> for an
explanation of several concepts used such as handles, scopes, function
templates, etc.</p>
<p>Each of these examples using the following <code>binding.gyp</code> file:</p>
<pre class="sh_sourceCode"><code><span class="sh_cbracket">{</span>
  <span class="sh_string">"targets"</span><span class="sh_symbol">:</span> <span class="sh_symbol">[</span>
    <span class="sh_cbracket">{</span>
      <span class="sh_string">"target_name"</span><span class="sh_symbol">:</span> <span class="sh_string">"addon"</span><span class="sh_symbol">,</span>
      <span class="sh_string">"sources"</span><span class="sh_symbol">:</span> <span class="sh_symbol">[</span> <span class="sh_string">"addon.cc"</span> <span class="sh_symbol">]</span>
    <span class="sh_cbracket">}</span>
  <span class="sh_symbol">]</span>
<span class="sh_cbracket">}</span>
</code></pre><p>In cases where there is more than one <code>.cc</code> file, simply add the additional
filename to the <code>sources</code> array. For example:</p>
<pre class="sh_sourceCode"><code><span class="sh_string">"sources"</span><span class="sh_symbol">:</span> <span class="sh_symbol">[</span><span class="sh_string">"addon.cc"</span><span class="sh_symbol">,</span> <span class="sh_string">"myexample.cc"</span><span class="sh_symbol">]</span>
</code></pre><p>Once the <code>binding.gyp</code> file is ready, the example Addons can be configured and
built using <code>node-gyp</code>:</p>
<pre class="sh_sourceCode"><code>$ node<span class="sh_symbol">-</span>gyp configure build
</code></pre><h3>Function arguments<span><a class="mark" href="#addons_function_arguments" id="addons_function_arguments">#</a></span></h3>
<p>Addons will typically expose objects and functions that can be accessed from
JavaScript running within Node.js. When functions are invoked from JavaScript,
the input arguments and return value must be mapped to and from the C/C++
code.</p>
<p>The following example illustrates how to read function arguments passed from
JavaScript and how to return a result:</p>
<pre class="sh_sourceCode"><code class="lang-cpp"><span class="sh_comment">// addon.cc</span>
#include <span class="sh_symbol">&lt;</span>node<span class="sh_symbol">.</span>h<span class="sh_symbol">&gt;</span>

namespace demo <span class="sh_cbracket">{</span>

using v8<span class="sh_symbol">::</span>Exception<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>FunctionCallbackInfo<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Isolate<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Local<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span><span class="sh_predef_func">Number</span><span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span><span class="sh_predef_func">Object</span><span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span><span class="sh_predef_func">String</span><span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Value<span class="sh_symbol">;</span>

<span class="sh_comment">// This is the implementation of the "add" method</span>
<span class="sh_comment">// Input arguments are passed using the</span>
<span class="sh_comment">// const FunctionCallbackInfo&lt;Value&gt;&amp; args struct</span>
void <span class="sh_function">Add</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> FunctionCallbackInfo<span class="sh_symbol">&lt;</span>Value<span class="sh_symbol">&gt;&amp;</span> args<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  Isolate<span class="sh_symbol">*</span> isolate <span class="sh_symbol">=</span> args<span class="sh_symbol">.</span><span class="sh_function">GetIsolate</span><span class="sh_symbol">();</span>

  <span class="sh_comment">// Check the number of arguments passed.</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>args<span class="sh_symbol">.</span><span class="sh_function">Length</span><span class="sh_symbol">()</span> <span class="sh_symbol">&lt;</span> <span class="sh_number">2</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// Throw an Error that is passed back to JavaScript</span>
    isolate<span class="sh_symbol">-&gt;</span><span class="sh_function">ThrowException</span><span class="sh_symbol">(</span>Exception<span class="sh_symbol">::</span><span class="sh_predef_func">TypeError</span><span class="sh_symbol">(</span>
        <span class="sh_predef_func">String</span><span class="sh_symbol">::</span><span class="sh_function">NewFromUtf8</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">,</span> <span class="sh_string">"Wrong number of arguments"</span><span class="sh_symbol">)));</span>
    <span class="sh_keyword">return</span><span class="sh_symbol">;</span>
  <span class="sh_cbracket">}</span>

  <span class="sh_comment">// Check the argument types</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(!</span>args<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]-&gt;</span><span class="sh_function">IsNumber</span><span class="sh_symbol">()</span> <span class="sh_symbol">||</span> <span class="sh_symbol">!</span>args<span class="sh_symbol">[</span><span class="sh_number">1</span><span class="sh_symbol">]-&gt;</span><span class="sh_function">IsNumber</span><span class="sh_symbol">())</span> <span class="sh_cbracket">{</span>
    isolate<span class="sh_symbol">-&gt;</span><span class="sh_function">ThrowException</span><span class="sh_symbol">(</span>Exception<span class="sh_symbol">::</span><span class="sh_predef_func">TypeError</span><span class="sh_symbol">(</span>
        <span class="sh_predef_func">String</span><span class="sh_symbol">::</span><span class="sh_function">NewFromUtf8</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">,</span> <span class="sh_string">"Wrong arguments"</span><span class="sh_symbol">)));</span>
    <span class="sh_keyword">return</span><span class="sh_symbol">;</span>
  <span class="sh_cbracket">}</span>

  <span class="sh_comment">// Perform the operation</span>
  double value <span class="sh_symbol">=</span> args<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]-&gt;</span><span class="sh_function">NumberValue</span><span class="sh_symbol">()</span> <span class="sh_symbol">+</span> args<span class="sh_symbol">[</span><span class="sh_number">1</span><span class="sh_symbol">]-&gt;</span><span class="sh_function">NumberValue</span><span class="sh_symbol">();</span>
  Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Number</span><span class="sh_symbol">&gt;</span> num <span class="sh_symbol">=</span> <span class="sh_predef_func">Number</span><span class="sh_symbol">::</span><span class="sh_function">New</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">,</span> value<span class="sh_symbol">);</span>

  <span class="sh_comment">// Set the return value (using the passed in</span>
  <span class="sh_comment">// FunctionCallbackInfo&lt;Value&gt;&amp;)</span>
  args<span class="sh_symbol">.</span><span class="sh_function">GetReturnValue</span><span class="sh_symbol">().</span><span class="sh_function">Set</span><span class="sh_symbol">(</span>num<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

void <span class="sh_function">Init</span><span class="sh_symbol">(</span>Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Object</span><span class="sh_symbol">&gt;</span> exports<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_function">NODE_SET_METHOD</span><span class="sh_symbol">(</span>exports<span class="sh_symbol">,</span> <span class="sh_string">"add"</span><span class="sh_symbol">,</span> Add<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

<span class="sh_function">NODE_MODULE</span><span class="sh_symbol">(</span>addon<span class="sh_symbol">,</span> Init<span class="sh_symbol">)</span>

<span class="sh_cbracket">}</span>  <span class="sh_comment">// namespace demo</span>
</code></pre>
<p>Once compiled, the example Addon can be required and used from within Node.js:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// test.js</span>
<span class="sh_keyword">const</span> addon <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./build/Release/addon'</span><span class="sh_symbol">);</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'This should be eight:'</span><span class="sh_symbol">,</span> addon<span class="sh_symbol">.</span><span class="sh_function">add</span><span class="sh_symbol">(</span><span class="sh_number">3</span><span class="sh_symbol">,</span> <span class="sh_number">5</span><span class="sh_symbol">));</span>
</code></pre>
<h3>Callbacks<span><a class="mark" href="#addons_callbacks" id="addons_callbacks">#</a></span></h3>
<p>It is common practice within Addons to pass JavaScript functions to a C++
function and execute them from there. The following example illustrates how
to invoke such callbacks:</p>
<pre class="sh_sourceCode"><code class="lang-cpp"><span class="sh_comment">// addon.cc</span>
#include <span class="sh_symbol">&lt;</span>node<span class="sh_symbol">.</span>h<span class="sh_symbol">&gt;</span>

namespace demo <span class="sh_cbracket">{</span>

using v8<span class="sh_symbol">::</span><span class="sh_predef_func">Function</span><span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>FunctionCallbackInfo<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Isolate<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Local<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Null<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span><span class="sh_predef_func">Object</span><span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span><span class="sh_predef_func">String</span><span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Value<span class="sh_symbol">;</span>

void <span class="sh_function">RunCallback</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> FunctionCallbackInfo<span class="sh_symbol">&lt;</span>Value<span class="sh_symbol">&gt;&amp;</span> args<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  Isolate<span class="sh_symbol">*</span> isolate <span class="sh_symbol">=</span> args<span class="sh_symbol">.</span><span class="sh_function">GetIsolate</span><span class="sh_symbol">();</span>
  Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Function</span><span class="sh_symbol">&gt;</span> cb <span class="sh_symbol">=</span> Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Function</span><span class="sh_symbol">&gt;::</span><span class="sh_function">Cast</span><span class="sh_symbol">(</span>args<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]);</span>
  <span class="sh_keyword">const</span> unsigned argc <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
  Local<span class="sh_symbol">&lt;</span>Value<span class="sh_symbol">&gt;</span> argv<span class="sh_symbol">[</span>argc<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span> <span class="sh_predef_func">String</span><span class="sh_symbol">::</span><span class="sh_function">NewFromUtf8</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">,</span> <span class="sh_string">"hello world"</span><span class="sh_symbol">)</span> <span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
  cb<span class="sh_symbol">-&gt;</span><span class="sh_function">Call</span><span class="sh_symbol">(</span><span class="sh_function">Null</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">),</span> argc<span class="sh_symbol">,</span> argv<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

void <span class="sh_function">Init</span><span class="sh_symbol">(</span>Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Object</span><span class="sh_symbol">&gt;</span> exports<span class="sh_symbol">,</span> Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Object</span><span class="sh_symbol">&gt;</span> module<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_function">NODE_SET_METHOD</span><span class="sh_symbol">(</span>module<span class="sh_symbol">,</span> <span class="sh_string">"exports"</span><span class="sh_symbol">,</span> RunCallback<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

<span class="sh_function">NODE_MODULE</span><span class="sh_symbol">(</span>addon<span class="sh_symbol">,</span> Init<span class="sh_symbol">)</span>

<span class="sh_cbracket">}</span>  <span class="sh_comment">// namespace demo</span>
</code></pre>
<p>Note that this example uses a two-argument form of <code>Init()</code> that receives
the full <code>module</code> object as the second argument. This allows the Addon
to completely overwrite <code>exports</code> with a single function instead of
adding the function as a property of <code>exports</code>.</p>
<p>To test it, run the following JavaScript:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// test.js</span>
<span class="sh_keyword">const</span> addon <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./build/Release/addon'</span><span class="sh_symbol">);</span>

<span class="sh_function">addon</span><span class="sh_symbol">((</span>msg<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>msg<span class="sh_symbol">);</span> <span class="sh_comment">// 'hello world'</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>Note that, in this example, the callback function is invoked synchronously.</p>
<h3>Object factory<span><a class="mark" href="#addons_object_factory" id="addons_object_factory">#</a></span></h3>
<p>Addons can create and return new objects from within a C++ function as
illustrated in the following example. An object is created and returned with a
property <code>msg</code> that echoes the string passed to <code>createObject()</code>:</p>
<pre class="sh_sourceCode"><code class="lang-cpp"><span class="sh_comment">// addon.cc</span>
#include <span class="sh_symbol">&lt;</span>node<span class="sh_symbol">.</span>h<span class="sh_symbol">&gt;</span>

namespace demo <span class="sh_cbracket">{</span>

using v8<span class="sh_symbol">::</span>FunctionCallbackInfo<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Isolate<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Local<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span><span class="sh_predef_func">Object</span><span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span><span class="sh_predef_func">String</span><span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Value<span class="sh_symbol">;</span>

void <span class="sh_function">CreateObject</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> FunctionCallbackInfo<span class="sh_symbol">&lt;</span>Value<span class="sh_symbol">&gt;&amp;</span> args<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  Isolate<span class="sh_symbol">*</span> isolate <span class="sh_symbol">=</span> args<span class="sh_symbol">.</span><span class="sh_function">GetIsolate</span><span class="sh_symbol">();</span>

  Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Object</span><span class="sh_symbol">&gt;</span> obj <span class="sh_symbol">=</span> <span class="sh_predef_func">Object</span><span class="sh_symbol">::</span><span class="sh_function">New</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">);</span>
  obj<span class="sh_symbol">-&gt;</span><span class="sh_function">Set</span><span class="sh_symbol">(</span><span class="sh_predef_func">String</span><span class="sh_symbol">::</span><span class="sh_function">NewFromUtf8</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">,</span> <span class="sh_string">"msg"</span><span class="sh_symbol">),</span> args<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]-&gt;</span><span class="sh_function">ToString</span><span class="sh_symbol">());</span>

  args<span class="sh_symbol">.</span><span class="sh_function">GetReturnValue</span><span class="sh_symbol">().</span><span class="sh_function">Set</span><span class="sh_symbol">(</span>obj<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

void <span class="sh_function">Init</span><span class="sh_symbol">(</span>Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Object</span><span class="sh_symbol">&gt;</span> exports<span class="sh_symbol">,</span> Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Object</span><span class="sh_symbol">&gt;</span> module<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_function">NODE_SET_METHOD</span><span class="sh_symbol">(</span>module<span class="sh_symbol">,</span> <span class="sh_string">"exports"</span><span class="sh_symbol">,</span> CreateObject<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

<span class="sh_function">NODE_MODULE</span><span class="sh_symbol">(</span>addon<span class="sh_symbol">,</span> Init<span class="sh_symbol">)</span>

<span class="sh_cbracket">}</span>  <span class="sh_comment">// namespace demo</span>
</code></pre>
<p>To test it in JavaScript:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// test.js</span>
<span class="sh_keyword">const</span> addon <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./build/Release/addon'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">var</span> obj1 <span class="sh_symbol">=</span> <span class="sh_function">addon</span><span class="sh_symbol">(</span><span class="sh_string">'hello'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">var</span> obj2 <span class="sh_symbol">=</span> <span class="sh_function">addon</span><span class="sh_symbol">(</span><span class="sh_string">'world'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>obj1<span class="sh_symbol">.</span>msg <span class="sh_symbol">+</span> <span class="sh_string">' '</span> <span class="sh_symbol">+</span> obj2<span class="sh_symbol">.</span>msg<span class="sh_symbol">);</span> <span class="sh_comment">// 'hello world'</span>
</code></pre>
<h3>Function factory<span><a class="mark" href="#addons_function_factory" id="addons_function_factory">#</a></span></h3>
<p>Another common scenario is creating JavaScript functions that wrap C++
functions and returning those back to JavaScript:</p>
<pre class="sh_sourceCode"><code class="lang-cpp"><span class="sh_comment">// addon.cc</span>
#include <span class="sh_symbol">&lt;</span>node<span class="sh_symbol">.</span>h<span class="sh_symbol">&gt;</span>

namespace demo <span class="sh_cbracket">{</span>

using v8<span class="sh_symbol">::</span><span class="sh_predef_func">Function</span><span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>FunctionCallbackInfo<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>FunctionTemplate<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Isolate<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Local<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span><span class="sh_predef_func">Object</span><span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span><span class="sh_predef_func">String</span><span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Value<span class="sh_symbol">;</span>

void <span class="sh_function">MyFunction</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> FunctionCallbackInfo<span class="sh_symbol">&lt;</span>Value<span class="sh_symbol">&gt;&amp;</span> args<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  Isolate<span class="sh_symbol">*</span> isolate <span class="sh_symbol">=</span> args<span class="sh_symbol">.</span><span class="sh_function">GetIsolate</span><span class="sh_symbol">();</span>
  args<span class="sh_symbol">.</span><span class="sh_function">GetReturnValue</span><span class="sh_symbol">().</span><span class="sh_function">Set</span><span class="sh_symbol">(</span><span class="sh_predef_func">String</span><span class="sh_symbol">::</span><span class="sh_function">NewFromUtf8</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">,</span> <span class="sh_string">"hello world"</span><span class="sh_symbol">));</span>
<span class="sh_cbracket">}</span>

void <span class="sh_function">CreateFunction</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> FunctionCallbackInfo<span class="sh_symbol">&lt;</span>Value<span class="sh_symbol">&gt;&amp;</span> args<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  Isolate<span class="sh_symbol">*</span> isolate <span class="sh_symbol">=</span> args<span class="sh_symbol">.</span><span class="sh_function">GetIsolate</span><span class="sh_symbol">();</span>

  Local<span class="sh_symbol">&lt;</span>FunctionTemplate<span class="sh_symbol">&gt;</span> tpl <span class="sh_symbol">=</span> FunctionTemplate<span class="sh_symbol">::</span><span class="sh_function">New</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">,</span> MyFunction<span class="sh_symbol">);</span>
  Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Function</span><span class="sh_symbol">&gt;</span> fn <span class="sh_symbol">=</span> tpl<span class="sh_symbol">-&gt;</span><span class="sh_function">GetFunction</span><span class="sh_symbol">();</span>

  <span class="sh_comment">// omit this to make it anonymous</span>
  fn<span class="sh_symbol">-&gt;</span><span class="sh_function">SetName</span><span class="sh_symbol">(</span><span class="sh_predef_func">String</span><span class="sh_symbol">::</span><span class="sh_function">NewFromUtf8</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">,</span> <span class="sh_string">"theFunction"</span><span class="sh_symbol">));</span>

  args<span class="sh_symbol">.</span><span class="sh_function">GetReturnValue</span><span class="sh_symbol">().</span><span class="sh_function">Set</span><span class="sh_symbol">(</span>fn<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

void <span class="sh_function">Init</span><span class="sh_symbol">(</span>Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Object</span><span class="sh_symbol">&gt;</span> exports<span class="sh_symbol">,</span> Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Object</span><span class="sh_symbol">&gt;</span> module<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_function">NODE_SET_METHOD</span><span class="sh_symbol">(</span>module<span class="sh_symbol">,</span> <span class="sh_string">"exports"</span><span class="sh_symbol">,</span> CreateFunction<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

<span class="sh_function">NODE_MODULE</span><span class="sh_symbol">(</span>addon<span class="sh_symbol">,</span> Init<span class="sh_symbol">)</span>

<span class="sh_cbracket">}</span>  <span class="sh_comment">// namespace demo</span>
</code></pre>
<p>To test:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// test.js</span>
<span class="sh_keyword">const</span> addon <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./build/Release/addon'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">var</span> fn <span class="sh_symbol">=</span> <span class="sh_function">addon</span><span class="sh_symbol">();</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_function">fn</span><span class="sh_symbol">());</span> <span class="sh_comment">// 'hello world'</span>
</code></pre>
<h3>Wrapping C++ objects<span><a class="mark" href="#addons_wrapping_c_objects" id="addons_wrapping_c_objects">#</a></span></h3>
<p>It is also possible to wrap C++ objects/classes in a way that allows new
instances to be created using the JavaScript <code>new</code> operator:</p>
<pre class="sh_sourceCode"><code class="lang-cpp"><span class="sh_comment">// addon.cc</span>
#include <span class="sh_symbol">&lt;</span>node<span class="sh_symbol">.</span>h<span class="sh_symbol">&gt;</span>
#include <span class="sh_string">"myobject.h"</span>

namespace demo <span class="sh_cbracket">{</span>

using v8<span class="sh_symbol">::</span>Local<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span><span class="sh_predef_func">Object</span><span class="sh_symbol">;</span>

void <span class="sh_function">InitAll</span><span class="sh_symbol">(</span>Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Object</span><span class="sh_symbol">&gt;</span> exports<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  MyObject<span class="sh_symbol">::</span><span class="sh_function">Init</span><span class="sh_symbol">(</span>exports<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

<span class="sh_function">NODE_MODULE</span><span class="sh_symbol">(</span>addon<span class="sh_symbol">,</span> InitAll<span class="sh_symbol">)</span>

<span class="sh_cbracket">}</span>  <span class="sh_comment">// namespace demo</span>
</code></pre>
<p>Then, in <code>myobject.h</code>, the wrapper class inherits from <code>node::ObjectWrap</code>:</p>
<pre class="sh_sourceCode"><code class="lang-cpp"><span class="sh_comment">// myobject.h</span>
#ifndef MYOBJECT_H
#define MYOBJECT_H

#include <span class="sh_symbol">&lt;</span>node<span class="sh_symbol">.</span>h<span class="sh_symbol">&gt;</span>
#include <span class="sh_symbol">&lt;</span>node_object_wrap<span class="sh_symbol">.</span>h<span class="sh_symbol">&gt;</span>

namespace demo <span class="sh_cbracket">{</span>

<span class="sh_keyword">class</span> MyObject <span class="sh_symbol">:</span> <span class="sh_keyword">public</span> node<span class="sh_symbol">::</span>ObjectWrap <span class="sh_cbracket">{</span>
 <span class="sh_keyword">public</span><span class="sh_symbol">:</span>
  <span class="sh_keyword">static</span> void <span class="sh_function">Init</span><span class="sh_symbol">(</span>v8<span class="sh_symbol">::</span>Local<span class="sh_symbol">&lt;</span>v8<span class="sh_symbol">::</span><span class="sh_predef_func">Object</span><span class="sh_symbol">&gt;</span> exports<span class="sh_symbol">);</span>

 <span class="sh_keyword">private</span><span class="sh_symbol">:</span>
  explicit <span class="sh_function">MyObject</span><span class="sh_symbol">(</span>double value <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">);</span>
  <span class="sh_symbol">~</span><span class="sh_function">MyObject</span><span class="sh_symbol">();</span>

  <span class="sh_keyword">static</span> void <span class="sh_function">New</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> v8<span class="sh_symbol">::</span>FunctionCallbackInfo<span class="sh_symbol">&lt;</span>v8<span class="sh_symbol">::</span>Value<span class="sh_symbol">&gt;&amp;</span> args<span class="sh_symbol">);</span>
  <span class="sh_keyword">static</span> void <span class="sh_function">PlusOne</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> v8<span class="sh_symbol">::</span>FunctionCallbackInfo<span class="sh_symbol">&lt;</span>v8<span class="sh_symbol">::</span>Value<span class="sh_symbol">&gt;&amp;</span> args<span class="sh_symbol">);</span>
  <span class="sh_keyword">static</span> v8<span class="sh_symbol">::</span>Persistent<span class="sh_symbol">&lt;</span>v8<span class="sh_symbol">::</span><span class="sh_predef_func">Function</span><span class="sh_symbol">&gt;</span> constructor<span class="sh_symbol">;</span>
  double value_<span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

<span class="sh_cbracket">}</span>  <span class="sh_comment">// namespace demo</span>

#endif
</code></pre>
<p>In <code>myobject.cc</code>, implement the various methods that are to be exposed.
Below, the method <code>plusOne()</code> is exposed by adding it to the constructor's
prototype:</p>
<pre class="sh_sourceCode"><code class="lang-cpp"><span class="sh_comment">// myobject.cc</span>
#include <span class="sh_string">"myobject.h"</span>

namespace demo <span class="sh_cbracket">{</span>

using v8<span class="sh_symbol">::</span>Context<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span><span class="sh_predef_func">Function</span><span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>FunctionCallbackInfo<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>FunctionTemplate<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Isolate<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Local<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span><span class="sh_predef_func">Number</span><span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span><span class="sh_predef_func">Object</span><span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Persistent<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span><span class="sh_predef_func">String</span><span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Value<span class="sh_symbol">;</span>

Persistent<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Function</span><span class="sh_symbol">&gt;</span> MyObject<span class="sh_symbol">::</span>constructor<span class="sh_symbol">;</span>

MyObject<span class="sh_symbol">::</span><span class="sh_function">MyObject</span><span class="sh_symbol">(</span>double value<span class="sh_symbol">)</span> <span class="sh_symbol">:</span> <span class="sh_function">value_</span><span class="sh_symbol">(</span>value<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
<span class="sh_cbracket">}</span>

MyObject<span class="sh_symbol">::~</span><span class="sh_function">MyObject</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
<span class="sh_cbracket">}</span>

void MyObject<span class="sh_symbol">::</span><span class="sh_function">Init</span><span class="sh_symbol">(</span>Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Object</span><span class="sh_symbol">&gt;</span> exports<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  Isolate<span class="sh_symbol">*</span> isolate <span class="sh_symbol">=</span> exports<span class="sh_symbol">-&gt;</span><span class="sh_function">GetIsolate</span><span class="sh_symbol">();</span>

  <span class="sh_comment">// Prepare constructor template</span>
  Local<span class="sh_symbol">&lt;</span>FunctionTemplate<span class="sh_symbol">&gt;</span> tpl <span class="sh_symbol">=</span> FunctionTemplate<span class="sh_symbol">::</span><span class="sh_function">New</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">,</span> New<span class="sh_symbol">);</span>
  tpl<span class="sh_symbol">-&gt;</span><span class="sh_function">SetClassName</span><span class="sh_symbol">(</span><span class="sh_predef_func">String</span><span class="sh_symbol">::</span><span class="sh_function">NewFromUtf8</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">,</span> <span class="sh_string">"MyObject"</span><span class="sh_symbol">));</span>
  tpl<span class="sh_symbol">-&gt;</span><span class="sh_function">InstanceTemplate</span><span class="sh_symbol">()-&gt;</span><span class="sh_function">SetInternalFieldCount</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">);</span>

  <span class="sh_comment">// Prototype</span>
  <span class="sh_function">NODE_SET_PROTOTYPE_METHOD</span><span class="sh_symbol">(</span>tpl<span class="sh_symbol">,</span> <span class="sh_string">"plusOne"</span><span class="sh_symbol">,</span> PlusOne<span class="sh_symbol">);</span>

  constructor<span class="sh_symbol">.</span><span class="sh_function">Reset</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">,</span> tpl<span class="sh_symbol">-&gt;</span><span class="sh_function">GetFunction</span><span class="sh_symbol">());</span>
  exports<span class="sh_symbol">-&gt;</span><span class="sh_function">Set</span><span class="sh_symbol">(</span><span class="sh_predef_func">String</span><span class="sh_symbol">::</span><span class="sh_function">NewFromUtf8</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">,</span> <span class="sh_string">"MyObject"</span><span class="sh_symbol">),</span>
               tpl<span class="sh_symbol">-&gt;</span><span class="sh_function">GetFunction</span><span class="sh_symbol">());</span>
<span class="sh_cbracket">}</span>

void MyObject<span class="sh_symbol">::</span><span class="sh_function">New</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> FunctionCallbackInfo<span class="sh_symbol">&lt;</span>Value<span class="sh_symbol">&gt;&amp;</span> args<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  Isolate<span class="sh_symbol">*</span> isolate <span class="sh_symbol">=</span> args<span class="sh_symbol">.</span><span class="sh_function">GetIsolate</span><span class="sh_symbol">();</span>

  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>args<span class="sh_symbol">.</span><span class="sh_function">IsConstructCall</span><span class="sh_symbol">())</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// Invoked as constructor: `new MyObject(...)`</span>
    double value <span class="sh_symbol">=</span> args<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]-&gt;</span><span class="sh_function">IsUndefined</span><span class="sh_symbol">()</span> <span class="sh_symbol">?</span> <span class="sh_number">0</span> <span class="sh_symbol">:</span> args<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]-&gt;</span><span class="sh_function">NumberValue</span><span class="sh_symbol">();</span>
    MyObject<span class="sh_symbol">*</span> obj <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">MyObject</span><span class="sh_symbol">(</span>value<span class="sh_symbol">);</span>
    obj<span class="sh_symbol">-&gt;</span><span class="sh_function">Wrap</span><span class="sh_symbol">(</span>args<span class="sh_symbol">.</span><span class="sh_function">This</span><span class="sh_symbol">());</span>
    args<span class="sh_symbol">.</span><span class="sh_function">GetReturnValue</span><span class="sh_symbol">().</span><span class="sh_function">Set</span><span class="sh_symbol">(</span>args<span class="sh_symbol">.</span><span class="sh_function">This</span><span class="sh_symbol">());</span>
  <span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// Invoked as plain function `MyObject(...)`, turn into construct call.</span>
    <span class="sh_keyword">const</span> int argc <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
    Local<span class="sh_symbol">&lt;</span>Value<span class="sh_symbol">&gt;</span> argv<span class="sh_symbol">[</span>argc<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span> args<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]</span> <span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
    Local<span class="sh_symbol">&lt;</span>Context<span class="sh_symbol">&gt;</span> context <span class="sh_symbol">=</span> isolate<span class="sh_symbol">-&gt;</span><span class="sh_function">GetCurrentContext</span><span class="sh_symbol">();</span>
    Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Function</span><span class="sh_symbol">&gt;</span> cons <span class="sh_symbol">=</span> Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Function</span><span class="sh_symbol">&gt;::</span><span class="sh_function">New</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">,</span> constructor<span class="sh_symbol">);</span>
    Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Object</span><span class="sh_symbol">&gt;</span> result <span class="sh_symbol">=</span>
        cons<span class="sh_symbol">-&gt;</span><span class="sh_function">NewInstance</span><span class="sh_symbol">(</span>context<span class="sh_symbol">,</span> argc<span class="sh_symbol">,</span> argv<span class="sh_symbol">).</span><span class="sh_function">ToLocalChecked</span><span class="sh_symbol">();</span>
    args<span class="sh_symbol">.</span><span class="sh_function">GetReturnValue</span><span class="sh_symbol">().</span><span class="sh_function">Set</span><span class="sh_symbol">(</span>result<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>

void MyObject<span class="sh_symbol">::</span><span class="sh_function">PlusOne</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> FunctionCallbackInfo<span class="sh_symbol">&lt;</span>Value<span class="sh_symbol">&gt;&amp;</span> args<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  Isolate<span class="sh_symbol">*</span> isolate <span class="sh_symbol">=</span> args<span class="sh_symbol">.</span><span class="sh_function">GetIsolate</span><span class="sh_symbol">();</span>

  MyObject<span class="sh_symbol">*</span> obj <span class="sh_symbol">=</span> ObjectWrap<span class="sh_symbol">::</span>Unwrap<span class="sh_symbol">&lt;</span>MyObject<span class="sh_symbol">&gt;(</span>args<span class="sh_symbol">.</span><span class="sh_function">Holder</span><span class="sh_symbol">());</span>
  obj<span class="sh_symbol">-&gt;</span>value_ <span class="sh_symbol">+=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>

  args<span class="sh_symbol">.</span><span class="sh_function">GetReturnValue</span><span class="sh_symbol">().</span><span class="sh_function">Set</span><span class="sh_symbol">(</span><span class="sh_predef_func">Number</span><span class="sh_symbol">::</span><span class="sh_function">New</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">,</span> obj<span class="sh_symbol">-&gt;</span>value_<span class="sh_symbol">));</span>
<span class="sh_cbracket">}</span>

<span class="sh_cbracket">}</span>  <span class="sh_comment">// namespace demo</span>
</code></pre>
<p>To build this example, the <code>myobject.cc</code> file must be added to the
<code>binding.gyp</code>:</p>
<pre class="sh_sourceCode"><code><span class="sh_cbracket">{</span>
  <span class="sh_string">"targets"</span><span class="sh_symbol">:</span> <span class="sh_symbol">[</span>
    <span class="sh_cbracket">{</span>
      <span class="sh_string">"target_name"</span><span class="sh_symbol">:</span> <span class="sh_string">"addon"</span><span class="sh_symbol">,</span>
      <span class="sh_string">"sources"</span><span class="sh_symbol">:</span> <span class="sh_symbol">[</span>
        <span class="sh_string">"addon.cc"</span><span class="sh_symbol">,</span>
        <span class="sh_string">"myobject.cc"</span>
      <span class="sh_symbol">]</span>
    <span class="sh_cbracket">}</span>
  <span class="sh_symbol">]</span>
<span class="sh_cbracket">}</span>
</code></pre><p>Test it with:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// test.js</span>
<span class="sh_keyword">const</span> addon <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./build/Release/addon'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">var</span> obj <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> addon<span class="sh_symbol">.</span><span class="sh_function">MyObject</span><span class="sh_symbol">(</span><span class="sh_number">10</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>obj<span class="sh_symbol">.</span><span class="sh_function">plusOne</span><span class="sh_symbol">());</span> <span class="sh_comment">// 11</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>obj<span class="sh_symbol">.</span><span class="sh_function">plusOne</span><span class="sh_symbol">());</span> <span class="sh_comment">// 12</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>obj<span class="sh_symbol">.</span><span class="sh_function">plusOne</span><span class="sh_symbol">());</span> <span class="sh_comment">// 13</span>
</code></pre>
<h3>Factory of wrapped objects<span><a class="mark" href="#addons_factory_of_wrapped_objects" id="addons_factory_of_wrapped_objects">#</a></span></h3>
<p>Alternatively, it is possible to use a factory pattern to avoid explicitly
creating object instances using the JavaScript <code>new</code> operator:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">var</span> obj <span class="sh_symbol">=</span> addon<span class="sh_symbol">.</span><span class="sh_function">createObject</span><span class="sh_symbol">();</span>
<span class="sh_comment">// instead of:</span>
<span class="sh_comment">// var obj = new addon.Object();</span>
</code></pre>
<p>First, the <code>createObject()</code> method is implemented in <code>addon.cc</code>:</p>
<pre class="sh_sourceCode"><code class="lang-cpp"><span class="sh_comment">// addon.cc</span>
#include <span class="sh_symbol">&lt;</span>node<span class="sh_symbol">.</span>h<span class="sh_symbol">&gt;</span>
#include <span class="sh_string">"myobject.h"</span>

namespace demo <span class="sh_cbracket">{</span>

using v8<span class="sh_symbol">::</span>FunctionCallbackInfo<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Isolate<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Local<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span><span class="sh_predef_func">Object</span><span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span><span class="sh_predef_func">String</span><span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Value<span class="sh_symbol">;</span>

void <span class="sh_function">CreateObject</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> FunctionCallbackInfo<span class="sh_symbol">&lt;</span>Value<span class="sh_symbol">&gt;&amp;</span> args<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  MyObject<span class="sh_symbol">::</span><span class="sh_function">NewInstance</span><span class="sh_symbol">(</span>args<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

void <span class="sh_function">InitAll</span><span class="sh_symbol">(</span>Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Object</span><span class="sh_symbol">&gt;</span> exports<span class="sh_symbol">,</span> Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Object</span><span class="sh_symbol">&gt;</span> module<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  MyObject<span class="sh_symbol">::</span><span class="sh_function">Init</span><span class="sh_symbol">(</span>exports<span class="sh_symbol">-&gt;</span><span class="sh_function">GetIsolate</span><span class="sh_symbol">());</span>

  <span class="sh_function">NODE_SET_METHOD</span><span class="sh_symbol">(</span>module<span class="sh_symbol">,</span> <span class="sh_string">"exports"</span><span class="sh_symbol">,</span> CreateObject<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

<span class="sh_function">NODE_MODULE</span><span class="sh_symbol">(</span>addon<span class="sh_symbol">,</span> InitAll<span class="sh_symbol">)</span>

<span class="sh_cbracket">}</span>  <span class="sh_comment">// namespace demo</span>
</code></pre>
<p>In <code>myobject.h</code>, the static method <code>NewInstance()</code> is added to handle
instantiating the object. This method takes the place of using <code>new</code> in
JavaScript:</p>
<pre class="sh_sourceCode"><code class="lang-cpp"><span class="sh_comment">// myobject.h</span>
#ifndef MYOBJECT_H
#define MYOBJECT_H

#include <span class="sh_symbol">&lt;</span>node<span class="sh_symbol">.</span>h<span class="sh_symbol">&gt;</span>
#include <span class="sh_symbol">&lt;</span>node_object_wrap<span class="sh_symbol">.</span>h<span class="sh_symbol">&gt;</span>

namespace demo <span class="sh_cbracket">{</span>

<span class="sh_keyword">class</span> MyObject <span class="sh_symbol">:</span> <span class="sh_keyword">public</span> node<span class="sh_symbol">::</span>ObjectWrap <span class="sh_cbracket">{</span>
 <span class="sh_keyword">public</span><span class="sh_symbol">:</span>
  <span class="sh_keyword">static</span> void <span class="sh_function">Init</span><span class="sh_symbol">(</span>v8<span class="sh_symbol">::</span>Isolate<span class="sh_symbol">*</span> isolate<span class="sh_symbol">);</span>
  <span class="sh_keyword">static</span> void <span class="sh_function">NewInstance</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> v8<span class="sh_symbol">::</span>FunctionCallbackInfo<span class="sh_symbol">&lt;</span>v8<span class="sh_symbol">::</span>Value<span class="sh_symbol">&gt;&amp;</span> args<span class="sh_symbol">);</span>

 <span class="sh_keyword">private</span><span class="sh_symbol">:</span>
  explicit <span class="sh_function">MyObject</span><span class="sh_symbol">(</span>double value <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">);</span>
  <span class="sh_symbol">~</span><span class="sh_function">MyObject</span><span class="sh_symbol">();</span>

  <span class="sh_keyword">static</span> void <span class="sh_function">New</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> v8<span class="sh_symbol">::</span>FunctionCallbackInfo<span class="sh_symbol">&lt;</span>v8<span class="sh_symbol">::</span>Value<span class="sh_symbol">&gt;&amp;</span> args<span class="sh_symbol">);</span>
  <span class="sh_keyword">static</span> void <span class="sh_function">PlusOne</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> v8<span class="sh_symbol">::</span>FunctionCallbackInfo<span class="sh_symbol">&lt;</span>v8<span class="sh_symbol">::</span>Value<span class="sh_symbol">&gt;&amp;</span> args<span class="sh_symbol">);</span>
  <span class="sh_keyword">static</span> v8<span class="sh_symbol">::</span>Persistent<span class="sh_symbol">&lt;</span>v8<span class="sh_symbol">::</span><span class="sh_predef_func">Function</span><span class="sh_symbol">&gt;</span> constructor<span class="sh_symbol">;</span>
  double value_<span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

<span class="sh_cbracket">}</span>  <span class="sh_comment">// namespace demo</span>

#endif
</code></pre>
<p>The implementation in <code>myobject.cc</code> is similar to the previous example:</p>
<pre class="sh_sourceCode"><code class="lang-cpp"><span class="sh_comment">// myobject.cc</span>
#include <span class="sh_symbol">&lt;</span>node<span class="sh_symbol">.</span>h<span class="sh_symbol">&gt;</span>
#include <span class="sh_string">"myobject.h"</span>

namespace demo <span class="sh_cbracket">{</span>

using v8<span class="sh_symbol">::</span>Context<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span><span class="sh_predef_func">Function</span><span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>FunctionCallbackInfo<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>FunctionTemplate<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Isolate<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Local<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span><span class="sh_predef_func">Number</span><span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span><span class="sh_predef_func">Object</span><span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Persistent<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span><span class="sh_predef_func">String</span><span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Value<span class="sh_symbol">;</span>

Persistent<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Function</span><span class="sh_symbol">&gt;</span> MyObject<span class="sh_symbol">::</span>constructor<span class="sh_symbol">;</span>

MyObject<span class="sh_symbol">::</span><span class="sh_function">MyObject</span><span class="sh_symbol">(</span>double value<span class="sh_symbol">)</span> <span class="sh_symbol">:</span> <span class="sh_function">value_</span><span class="sh_symbol">(</span>value<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
<span class="sh_cbracket">}</span>

MyObject<span class="sh_symbol">::~</span><span class="sh_function">MyObject</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
<span class="sh_cbracket">}</span>

void MyObject<span class="sh_symbol">::</span><span class="sh_function">Init</span><span class="sh_symbol">(</span>Isolate<span class="sh_symbol">*</span> isolate<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// Prepare constructor template</span>
  Local<span class="sh_symbol">&lt;</span>FunctionTemplate<span class="sh_symbol">&gt;</span> tpl <span class="sh_symbol">=</span> FunctionTemplate<span class="sh_symbol">::</span><span class="sh_function">New</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">,</span> New<span class="sh_symbol">);</span>
  tpl<span class="sh_symbol">-&gt;</span><span class="sh_function">SetClassName</span><span class="sh_symbol">(</span><span class="sh_predef_func">String</span><span class="sh_symbol">::</span><span class="sh_function">NewFromUtf8</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">,</span> <span class="sh_string">"MyObject"</span><span class="sh_symbol">));</span>
  tpl<span class="sh_symbol">-&gt;</span><span class="sh_function">InstanceTemplate</span><span class="sh_symbol">()-&gt;</span><span class="sh_function">SetInternalFieldCount</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">);</span>

  <span class="sh_comment">// Prototype</span>
  <span class="sh_function">NODE_SET_PROTOTYPE_METHOD</span><span class="sh_symbol">(</span>tpl<span class="sh_symbol">,</span> <span class="sh_string">"plusOne"</span><span class="sh_symbol">,</span> PlusOne<span class="sh_symbol">);</span>

  constructor<span class="sh_symbol">.</span><span class="sh_function">Reset</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">,</span> tpl<span class="sh_symbol">-&gt;</span><span class="sh_function">GetFunction</span><span class="sh_symbol">());</span>
<span class="sh_cbracket">}</span>

void MyObject<span class="sh_symbol">::</span><span class="sh_function">New</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> FunctionCallbackInfo<span class="sh_symbol">&lt;</span>Value<span class="sh_symbol">&gt;&amp;</span> args<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  Isolate<span class="sh_symbol">*</span> isolate <span class="sh_symbol">=</span> args<span class="sh_symbol">.</span><span class="sh_function">GetIsolate</span><span class="sh_symbol">();</span>

  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>args<span class="sh_symbol">.</span><span class="sh_function">IsConstructCall</span><span class="sh_symbol">())</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// Invoked as constructor: `new MyObject(...)`</span>
    double value <span class="sh_symbol">=</span> args<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]-&gt;</span><span class="sh_function">IsUndefined</span><span class="sh_symbol">()</span> <span class="sh_symbol">?</span> <span class="sh_number">0</span> <span class="sh_symbol">:</span> args<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]-&gt;</span><span class="sh_function">NumberValue</span><span class="sh_symbol">();</span>
    MyObject<span class="sh_symbol">*</span> obj <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">MyObject</span><span class="sh_symbol">(</span>value<span class="sh_symbol">);</span>
    obj<span class="sh_symbol">-&gt;</span><span class="sh_function">Wrap</span><span class="sh_symbol">(</span>args<span class="sh_symbol">.</span><span class="sh_function">This</span><span class="sh_symbol">());</span>
    args<span class="sh_symbol">.</span><span class="sh_function">GetReturnValue</span><span class="sh_symbol">().</span><span class="sh_function">Set</span><span class="sh_symbol">(</span>args<span class="sh_symbol">.</span><span class="sh_function">This</span><span class="sh_symbol">());</span>
  <span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// Invoked as plain function `MyObject(...)`, turn into construct call.</span>
    <span class="sh_keyword">const</span> int argc <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
    Local<span class="sh_symbol">&lt;</span>Value<span class="sh_symbol">&gt;</span> argv<span class="sh_symbol">[</span>argc<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span> args<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]</span> <span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
    Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Function</span><span class="sh_symbol">&gt;</span> cons <span class="sh_symbol">=</span> Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Function</span><span class="sh_symbol">&gt;::</span><span class="sh_function">New</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">,</span> constructor<span class="sh_symbol">);</span>
    Local<span class="sh_symbol">&lt;</span>Context<span class="sh_symbol">&gt;</span> context <span class="sh_symbol">=</span> isolate<span class="sh_symbol">-&gt;</span><span class="sh_function">GetCurrentContext</span><span class="sh_symbol">();</span>
    Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Object</span><span class="sh_symbol">&gt;</span> instance <span class="sh_symbol">=</span>
        cons<span class="sh_symbol">-&gt;</span><span class="sh_function">NewInstance</span><span class="sh_symbol">(</span>context<span class="sh_symbol">,</span> argc<span class="sh_symbol">,</span> argv<span class="sh_symbol">).</span><span class="sh_function">ToLocalChecked</span><span class="sh_symbol">();</span>
    args<span class="sh_symbol">.</span><span class="sh_function">GetReturnValue</span><span class="sh_symbol">().</span><span class="sh_function">Set</span><span class="sh_symbol">(</span>instance<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>

void MyObject<span class="sh_symbol">::</span><span class="sh_function">NewInstance</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> FunctionCallbackInfo<span class="sh_symbol">&lt;</span>Value<span class="sh_symbol">&gt;&amp;</span> args<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  Isolate<span class="sh_symbol">*</span> isolate <span class="sh_symbol">=</span> args<span class="sh_symbol">.</span><span class="sh_function">GetIsolate</span><span class="sh_symbol">();</span>

  <span class="sh_keyword">const</span> unsigned argc <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
  Local<span class="sh_symbol">&lt;</span>Value<span class="sh_symbol">&gt;</span> argv<span class="sh_symbol">[</span>argc<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span> args<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]</span> <span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
  Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Function</span><span class="sh_symbol">&gt;</span> cons <span class="sh_symbol">=</span> Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Function</span><span class="sh_symbol">&gt;::</span><span class="sh_function">New</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">,</span> constructor<span class="sh_symbol">);</span>
  Local<span class="sh_symbol">&lt;</span>Context<span class="sh_symbol">&gt;</span> context <span class="sh_symbol">=</span> isolate<span class="sh_symbol">-&gt;</span><span class="sh_function">GetCurrentContext</span><span class="sh_symbol">();</span>
  Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Object</span><span class="sh_symbol">&gt;</span> instance <span class="sh_symbol">=</span>
      cons<span class="sh_symbol">-&gt;</span><span class="sh_function">NewInstance</span><span class="sh_symbol">(</span>context<span class="sh_symbol">,</span> argc<span class="sh_symbol">,</span> argv<span class="sh_symbol">).</span><span class="sh_function">ToLocalChecked</span><span class="sh_symbol">();</span>

  args<span class="sh_symbol">.</span><span class="sh_function">GetReturnValue</span><span class="sh_symbol">().</span><span class="sh_function">Set</span><span class="sh_symbol">(</span>instance<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

void MyObject<span class="sh_symbol">::</span><span class="sh_function">PlusOne</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> FunctionCallbackInfo<span class="sh_symbol">&lt;</span>Value<span class="sh_symbol">&gt;&amp;</span> args<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  Isolate<span class="sh_symbol">*</span> isolate <span class="sh_symbol">=</span> args<span class="sh_symbol">.</span><span class="sh_function">GetIsolate</span><span class="sh_symbol">();</span>

  MyObject<span class="sh_symbol">*</span> obj <span class="sh_symbol">=</span> ObjectWrap<span class="sh_symbol">::</span>Unwrap<span class="sh_symbol">&lt;</span>MyObject<span class="sh_symbol">&gt;(</span>args<span class="sh_symbol">.</span><span class="sh_function">Holder</span><span class="sh_symbol">());</span>
  obj<span class="sh_symbol">-&gt;</span>value_ <span class="sh_symbol">+=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>

  args<span class="sh_symbol">.</span><span class="sh_function">GetReturnValue</span><span class="sh_symbol">().</span><span class="sh_function">Set</span><span class="sh_symbol">(</span><span class="sh_predef_func">Number</span><span class="sh_symbol">::</span><span class="sh_function">New</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">,</span> obj<span class="sh_symbol">-&gt;</span>value_<span class="sh_symbol">));</span>
<span class="sh_cbracket">}</span>

<span class="sh_cbracket">}</span>  <span class="sh_comment">// namespace demo</span>
</code></pre>
<p>Once again, to build this example, the <code>myobject.cc</code> file must be added to the
<code>binding.gyp</code>:</p>
<pre class="sh_sourceCode"><code><span class="sh_cbracket">{</span>
  <span class="sh_string">"targets"</span><span class="sh_symbol">:</span> <span class="sh_symbol">[</span>
    <span class="sh_cbracket">{</span>
      <span class="sh_string">"target_name"</span><span class="sh_symbol">:</span> <span class="sh_string">"addon"</span><span class="sh_symbol">,</span>
      <span class="sh_string">"sources"</span><span class="sh_symbol">:</span> <span class="sh_symbol">[</span>
        <span class="sh_string">"addon.cc"</span><span class="sh_symbol">,</span>
        <span class="sh_string">"myobject.cc"</span>
      <span class="sh_symbol">]</span>
    <span class="sh_cbracket">}</span>
  <span class="sh_symbol">]</span>
<span class="sh_cbracket">}</span>
</code></pre><p>Test it with:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// test.js</span>
<span class="sh_keyword">const</span> createObject <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./build/Release/addon'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">var</span> obj <span class="sh_symbol">=</span> <span class="sh_function">createObject</span><span class="sh_symbol">(</span><span class="sh_number">10</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>obj<span class="sh_symbol">.</span><span class="sh_function">plusOne</span><span class="sh_symbol">());</span> <span class="sh_comment">// 11</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>obj<span class="sh_symbol">.</span><span class="sh_function">plusOne</span><span class="sh_symbol">());</span> <span class="sh_comment">// 12</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>obj<span class="sh_symbol">.</span><span class="sh_function">plusOne</span><span class="sh_symbol">());</span> <span class="sh_comment">// 13</span>

<span class="sh_keyword">var</span> obj2 <span class="sh_symbol">=</span> <span class="sh_function">createObject</span><span class="sh_symbol">(</span><span class="sh_number">20</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>obj2<span class="sh_symbol">.</span><span class="sh_function">plusOne</span><span class="sh_symbol">());</span> <span class="sh_comment">// 21</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>obj2<span class="sh_symbol">.</span><span class="sh_function">plusOne</span><span class="sh_symbol">());</span> <span class="sh_comment">// 22</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>obj2<span class="sh_symbol">.</span><span class="sh_function">plusOne</span><span class="sh_symbol">());</span> <span class="sh_comment">// 23</span>
</code></pre>
<h3>Passing wrapped objects around<span><a class="mark" href="#addons_passing_wrapped_objects_around" id="addons_passing_wrapped_objects_around">#</a></span></h3>
<p>In addition to wrapping and returning C++ objects, it is possible to pass
wrapped objects around by unwrapping them with the Node.js helper function
<code>node::ObjectWrap::Unwrap</code>. The following examples shows a function <code>add()</code>
that can take two <code>MyObject</code> objects as input arguments:</p>
<pre class="sh_sourceCode"><code class="lang-cpp"><span class="sh_comment">// addon.cc</span>
#include <span class="sh_symbol">&lt;</span>node<span class="sh_symbol">.</span>h<span class="sh_symbol">&gt;</span>
#include <span class="sh_symbol">&lt;</span>node_object_wrap<span class="sh_symbol">.</span>h<span class="sh_symbol">&gt;</span>
#include <span class="sh_string">"myobject.h"</span>

namespace demo <span class="sh_cbracket">{</span>

using v8<span class="sh_symbol">::</span>FunctionCallbackInfo<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Isolate<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Local<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span><span class="sh_predef_func">Number</span><span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span><span class="sh_predef_func">Object</span><span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span><span class="sh_predef_func">String</span><span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Value<span class="sh_symbol">;</span>

void <span class="sh_function">CreateObject</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> FunctionCallbackInfo<span class="sh_symbol">&lt;</span>Value<span class="sh_symbol">&gt;&amp;</span> args<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  MyObject<span class="sh_symbol">::</span><span class="sh_function">NewInstance</span><span class="sh_symbol">(</span>args<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

void <span class="sh_function">Add</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> FunctionCallbackInfo<span class="sh_symbol">&lt;</span>Value<span class="sh_symbol">&gt;&amp;</span> args<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  Isolate<span class="sh_symbol">*</span> isolate <span class="sh_symbol">=</span> args<span class="sh_symbol">.</span><span class="sh_function">GetIsolate</span><span class="sh_symbol">();</span>

  MyObject<span class="sh_symbol">*</span> obj1 <span class="sh_symbol">=</span> node<span class="sh_symbol">::</span>ObjectWrap<span class="sh_symbol">::</span>Unwrap<span class="sh_symbol">&lt;</span>MyObject<span class="sh_symbol">&gt;(</span>
      args<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]-&gt;</span><span class="sh_function">ToObject</span><span class="sh_symbol">());</span>
  MyObject<span class="sh_symbol">*</span> obj2 <span class="sh_symbol">=</span> node<span class="sh_symbol">::</span>ObjectWrap<span class="sh_symbol">::</span>Unwrap<span class="sh_symbol">&lt;</span>MyObject<span class="sh_symbol">&gt;(</span>
      args<span class="sh_symbol">[</span><span class="sh_number">1</span><span class="sh_symbol">]-&gt;</span><span class="sh_function">ToObject</span><span class="sh_symbol">());</span>

  double sum <span class="sh_symbol">=</span> obj1<span class="sh_symbol">-&gt;</span><span class="sh_function">value</span><span class="sh_symbol">()</span> <span class="sh_symbol">+</span> obj2<span class="sh_symbol">-&gt;</span><span class="sh_function">value</span><span class="sh_symbol">();</span>
  args<span class="sh_symbol">.</span><span class="sh_function">GetReturnValue</span><span class="sh_symbol">().</span><span class="sh_function">Set</span><span class="sh_symbol">(</span><span class="sh_predef_func">Number</span><span class="sh_symbol">::</span><span class="sh_function">New</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">,</span> sum<span class="sh_symbol">));</span>
<span class="sh_cbracket">}</span>

void <span class="sh_function">InitAll</span><span class="sh_symbol">(</span>Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Object</span><span class="sh_symbol">&gt;</span> exports<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  MyObject<span class="sh_symbol">::</span><span class="sh_function">Init</span><span class="sh_symbol">(</span>exports<span class="sh_symbol">-&gt;</span><span class="sh_function">GetIsolate</span><span class="sh_symbol">());</span>

  <span class="sh_function">NODE_SET_METHOD</span><span class="sh_symbol">(</span>exports<span class="sh_symbol">,</span> <span class="sh_string">"createObject"</span><span class="sh_symbol">,</span> CreateObject<span class="sh_symbol">);</span>
  <span class="sh_function">NODE_SET_METHOD</span><span class="sh_symbol">(</span>exports<span class="sh_symbol">,</span> <span class="sh_string">"add"</span><span class="sh_symbol">,</span> Add<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

<span class="sh_function">NODE_MODULE</span><span class="sh_symbol">(</span>addon<span class="sh_symbol">,</span> InitAll<span class="sh_symbol">)</span>

<span class="sh_cbracket">}</span>  <span class="sh_comment">// namespace demo</span>
</code></pre>
<p>In <code>myobject.h</code>, a new public method is added to allow access to private values
after unwrapping the object.</p>
<pre class="sh_sourceCode"><code class="lang-cpp"><span class="sh_comment">// myobject.h</span>
#ifndef MYOBJECT_H
#define MYOBJECT_H

#include <span class="sh_symbol">&lt;</span>node<span class="sh_symbol">.</span>h<span class="sh_symbol">&gt;</span>
#include <span class="sh_symbol">&lt;</span>node_object_wrap<span class="sh_symbol">.</span>h<span class="sh_symbol">&gt;</span>

namespace demo <span class="sh_cbracket">{</span>

<span class="sh_keyword">class</span> MyObject <span class="sh_symbol">:</span> <span class="sh_keyword">public</span> node<span class="sh_symbol">::</span>ObjectWrap <span class="sh_cbracket">{</span>
 <span class="sh_keyword">public</span><span class="sh_symbol">:</span>
  <span class="sh_keyword">static</span> void <span class="sh_function">Init</span><span class="sh_symbol">(</span>v8<span class="sh_symbol">::</span>Isolate<span class="sh_symbol">*</span> isolate<span class="sh_symbol">);</span>
  <span class="sh_keyword">static</span> void <span class="sh_function">NewInstance</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> v8<span class="sh_symbol">::</span>FunctionCallbackInfo<span class="sh_symbol">&lt;</span>v8<span class="sh_symbol">::</span>Value<span class="sh_symbol">&gt;&amp;</span> args<span class="sh_symbol">);</span>
  inline double <span class="sh_function">value</span><span class="sh_symbol">()</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span> <span class="sh_keyword">return</span> value_<span class="sh_symbol">;</span> <span class="sh_cbracket">}</span>

 <span class="sh_keyword">private</span><span class="sh_symbol">:</span>
  explicit <span class="sh_function">MyObject</span><span class="sh_symbol">(</span>double value <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">);</span>
  <span class="sh_symbol">~</span><span class="sh_function">MyObject</span><span class="sh_symbol">();</span>

  <span class="sh_keyword">static</span> void <span class="sh_function">New</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> v8<span class="sh_symbol">::</span>FunctionCallbackInfo<span class="sh_symbol">&lt;</span>v8<span class="sh_symbol">::</span>Value<span class="sh_symbol">&gt;&amp;</span> args<span class="sh_symbol">);</span>
  <span class="sh_keyword">static</span> v8<span class="sh_symbol">::</span>Persistent<span class="sh_symbol">&lt;</span>v8<span class="sh_symbol">::</span><span class="sh_predef_func">Function</span><span class="sh_symbol">&gt;</span> constructor<span class="sh_symbol">;</span>
  double value_<span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

<span class="sh_cbracket">}</span>  <span class="sh_comment">// namespace demo</span>

#endif
</code></pre>
<p>The implementation of <code>myobject.cc</code> is similar to before:</p>
<pre class="sh_sourceCode"><code class="lang-cpp"><span class="sh_comment">// myobject.cc</span>
#include <span class="sh_symbol">&lt;</span>node<span class="sh_symbol">.</span>h<span class="sh_symbol">&gt;</span>
#include <span class="sh_string">"myobject.h"</span>

namespace demo <span class="sh_cbracket">{</span>

using v8<span class="sh_symbol">::</span>Context<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span><span class="sh_predef_func">Function</span><span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>FunctionCallbackInfo<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>FunctionTemplate<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Isolate<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Local<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span><span class="sh_predef_func">Object</span><span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Persistent<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span><span class="sh_predef_func">String</span><span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Value<span class="sh_symbol">;</span>

Persistent<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Function</span><span class="sh_symbol">&gt;</span> MyObject<span class="sh_symbol">::</span>constructor<span class="sh_symbol">;</span>

MyObject<span class="sh_symbol">::</span><span class="sh_function">MyObject</span><span class="sh_symbol">(</span>double value<span class="sh_symbol">)</span> <span class="sh_symbol">:</span> <span class="sh_function">value_</span><span class="sh_symbol">(</span>value<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
<span class="sh_cbracket">}</span>

MyObject<span class="sh_symbol">::~</span><span class="sh_function">MyObject</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
<span class="sh_cbracket">}</span>

void MyObject<span class="sh_symbol">::</span><span class="sh_function">Init</span><span class="sh_symbol">(</span>Isolate<span class="sh_symbol">*</span> isolate<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// Prepare constructor template</span>
  Local<span class="sh_symbol">&lt;</span>FunctionTemplate<span class="sh_symbol">&gt;</span> tpl <span class="sh_symbol">=</span> FunctionTemplate<span class="sh_symbol">::</span><span class="sh_function">New</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">,</span> New<span class="sh_symbol">);</span>
  tpl<span class="sh_symbol">-&gt;</span><span class="sh_function">SetClassName</span><span class="sh_symbol">(</span><span class="sh_predef_func">String</span><span class="sh_symbol">::</span><span class="sh_function">NewFromUtf8</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">,</span> <span class="sh_string">"MyObject"</span><span class="sh_symbol">));</span>
  tpl<span class="sh_symbol">-&gt;</span><span class="sh_function">InstanceTemplate</span><span class="sh_symbol">()-&gt;</span><span class="sh_function">SetInternalFieldCount</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">);</span>

  constructor<span class="sh_symbol">.</span><span class="sh_function">Reset</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">,</span> tpl<span class="sh_symbol">-&gt;</span><span class="sh_function">GetFunction</span><span class="sh_symbol">());</span>
<span class="sh_cbracket">}</span>

void MyObject<span class="sh_symbol">::</span><span class="sh_function">New</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> FunctionCallbackInfo<span class="sh_symbol">&lt;</span>Value<span class="sh_symbol">&gt;&amp;</span> args<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  Isolate<span class="sh_symbol">*</span> isolate <span class="sh_symbol">=</span> args<span class="sh_symbol">.</span><span class="sh_function">GetIsolate</span><span class="sh_symbol">();</span>

  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>args<span class="sh_symbol">.</span><span class="sh_function">IsConstructCall</span><span class="sh_symbol">())</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// Invoked as constructor: `new MyObject(...)`</span>
    double value <span class="sh_symbol">=</span> args<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]-&gt;</span><span class="sh_function">IsUndefined</span><span class="sh_symbol">()</span> <span class="sh_symbol">?</span> <span class="sh_number">0</span> <span class="sh_symbol">:</span> args<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]-&gt;</span><span class="sh_function">NumberValue</span><span class="sh_symbol">();</span>
    MyObject<span class="sh_symbol">*</span> obj <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">MyObject</span><span class="sh_symbol">(</span>value<span class="sh_symbol">);</span>
    obj<span class="sh_symbol">-&gt;</span><span class="sh_function">Wrap</span><span class="sh_symbol">(</span>args<span class="sh_symbol">.</span><span class="sh_function">This</span><span class="sh_symbol">());</span>
    args<span class="sh_symbol">.</span><span class="sh_function">GetReturnValue</span><span class="sh_symbol">().</span><span class="sh_function">Set</span><span class="sh_symbol">(</span>args<span class="sh_symbol">.</span><span class="sh_function">This</span><span class="sh_symbol">());</span>
  <span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// Invoked as plain function `MyObject(...)`, turn into construct call.</span>
    <span class="sh_keyword">const</span> int argc <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
    Local<span class="sh_symbol">&lt;</span>Value<span class="sh_symbol">&gt;</span> argv<span class="sh_symbol">[</span>argc<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span> args<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]</span> <span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
    Local<span class="sh_symbol">&lt;</span>Context<span class="sh_symbol">&gt;</span> context <span class="sh_symbol">=</span> isolate<span class="sh_symbol">-&gt;</span><span class="sh_function">GetCurrentContext</span><span class="sh_symbol">();</span>
    Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Function</span><span class="sh_symbol">&gt;</span> cons <span class="sh_symbol">=</span> Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Function</span><span class="sh_symbol">&gt;::</span><span class="sh_function">New</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">,</span> constructor<span class="sh_symbol">);</span>
    Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Object</span><span class="sh_symbol">&gt;</span> instance <span class="sh_symbol">=</span>
        cons<span class="sh_symbol">-&gt;</span><span class="sh_function">NewInstance</span><span class="sh_symbol">(</span>context<span class="sh_symbol">,</span> argc<span class="sh_symbol">,</span> argv<span class="sh_symbol">).</span><span class="sh_function">ToLocalChecked</span><span class="sh_symbol">();</span>
    args<span class="sh_symbol">.</span><span class="sh_function">GetReturnValue</span><span class="sh_symbol">().</span><span class="sh_function">Set</span><span class="sh_symbol">(</span>instance<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>

void MyObject<span class="sh_symbol">::</span><span class="sh_function">NewInstance</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> FunctionCallbackInfo<span class="sh_symbol">&lt;</span>Value<span class="sh_symbol">&gt;&amp;</span> args<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  Isolate<span class="sh_symbol">*</span> isolate <span class="sh_symbol">=</span> args<span class="sh_symbol">.</span><span class="sh_function">GetIsolate</span><span class="sh_symbol">();</span>

  <span class="sh_keyword">const</span> unsigned argc <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
  Local<span class="sh_symbol">&lt;</span>Value<span class="sh_symbol">&gt;</span> argv<span class="sh_symbol">[</span>argc<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span> args<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]</span> <span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
  Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Function</span><span class="sh_symbol">&gt;</span> cons <span class="sh_symbol">=</span> Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Function</span><span class="sh_symbol">&gt;::</span><span class="sh_function">New</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">,</span> constructor<span class="sh_symbol">);</span>
  Local<span class="sh_symbol">&lt;</span>Context<span class="sh_symbol">&gt;</span> context <span class="sh_symbol">=</span> isolate<span class="sh_symbol">-&gt;</span><span class="sh_function">GetCurrentContext</span><span class="sh_symbol">();</span>
  Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Object</span><span class="sh_symbol">&gt;</span> instance <span class="sh_symbol">=</span>
      cons<span class="sh_symbol">-&gt;</span><span class="sh_function">NewInstance</span><span class="sh_symbol">(</span>context<span class="sh_symbol">,</span> argc<span class="sh_symbol">,</span> argv<span class="sh_symbol">).</span><span class="sh_function">ToLocalChecked</span><span class="sh_symbol">();</span>

  args<span class="sh_symbol">.</span><span class="sh_function">GetReturnValue</span><span class="sh_symbol">().</span><span class="sh_function">Set</span><span class="sh_symbol">(</span>instance<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

<span class="sh_cbracket">}</span>  <span class="sh_comment">// namespace demo</span>
</code></pre>
<p>Test it with:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// test.js</span>
<span class="sh_keyword">const</span> addon <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./build/Release/addon'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">var</span> obj1 <span class="sh_symbol">=</span> addon<span class="sh_symbol">.</span><span class="sh_function">createObject</span><span class="sh_symbol">(</span><span class="sh_number">10</span><span class="sh_symbol">);</span>
<span class="sh_keyword">var</span> obj2 <span class="sh_symbol">=</span> addon<span class="sh_symbol">.</span><span class="sh_function">createObject</span><span class="sh_symbol">(</span><span class="sh_number">20</span><span class="sh_symbol">);</span>
<span class="sh_keyword">var</span> result <span class="sh_symbol">=</span> addon<span class="sh_symbol">.</span><span class="sh_function">add</span><span class="sh_symbol">(</span>obj1<span class="sh_symbol">,</span> obj2<span class="sh_symbol">);</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>result<span class="sh_symbol">);</span> <span class="sh_comment">// 30</span>
</code></pre>
<h3>AtExit hooks<span><a class="mark" href="#addons_atexit_hooks" id="addons_atexit_hooks">#</a></span></h3>
<p>An "AtExit" hook is a function that is invoked after the Node.js event loop
has ended by before the JavaScript VM is terminated and Node.js shuts down.
"AtExit" hooks are registered using the <code>node::AtExit</code> API.</p>
<h4>void AtExit(callback, args)<span><a class="mark" href="#addons_void_atexit_callback_args" id="addons_void_atexit_callback_args">#</a></span></h4>
<div class="signature"><ul>
<li><code>callback</code>: <code>void (*)(void*)</code> - A pointer to the function to call at exit.</li>
<li><code>args</code>: <code>void*</code> - A pointer to pass to the callback at exit.</li>
</ul>
</div><p>Registers exit hooks that run after the event loop has ended but before the VM
is killed.</p>
<p>AtExit takes two parameters: a pointer to a callback function to run at exit,
and a pointer to untyped context data to be passed to that callback.</p>
<p>Callbacks are run in last-in first-out order.</p>
<p>The following <code>addon.cc</code> implements AtExit:</p>
<pre class="sh_sourceCode"><code class="lang-cpp"><span class="sh_comment">// addon.cc</span>
#undef NDEBUG
#include <span class="sh_symbol">&lt;</span>assert<span class="sh_symbol">.</span>h<span class="sh_symbol">&gt;</span>
#include <span class="sh_symbol">&lt;</span>stdlib<span class="sh_symbol">.</span>h<span class="sh_symbol">&gt;</span>
#include <span class="sh_symbol">&lt;</span>node<span class="sh_symbol">.</span>h<span class="sh_symbol">&gt;</span>

namespace demo <span class="sh_cbracket">{</span>

using node<span class="sh_symbol">::</span>AtExit<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>HandleScope<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Isolate<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span>Local<span class="sh_symbol">;</span>
using v8<span class="sh_symbol">::</span><span class="sh_predef_func">Object</span><span class="sh_symbol">;</span>

<span class="sh_keyword">static</span> char cookie<span class="sh_symbol">[]</span> <span class="sh_symbol">=</span> <span class="sh_string">"yum yum"</span><span class="sh_symbol">;</span>
<span class="sh_keyword">static</span> int at_exit_cb1_called <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span>
<span class="sh_keyword">static</span> int at_exit_cb2_called <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span>

<span class="sh_keyword">static</span> void <span class="sh_function">at_exit_cb1</span><span class="sh_symbol">(</span>void<span class="sh_symbol">*</span> arg<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  Isolate<span class="sh_symbol">*</span> isolate <span class="sh_symbol">=</span> static_cast<span class="sh_symbol">&lt;</span>Isolate<span class="sh_symbol">*&gt;(</span>arg<span class="sh_symbol">);</span>
  HandleScope <span class="sh_function">scope</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">);</span>
  Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Object</span><span class="sh_symbol">&gt;</span> obj <span class="sh_symbol">=</span> <span class="sh_predef_func">Object</span><span class="sh_symbol">::</span><span class="sh_function">New</span><span class="sh_symbol">(</span>isolate<span class="sh_symbol">);</span>
  <span class="sh_function">assert</span><span class="sh_symbol">(!</span>obj<span class="sh_symbol">.</span><span class="sh_function">IsEmpty</span><span class="sh_symbol">());</span> <span class="sh_comment">// assert VM is still alive</span>
  <span class="sh_function">assert</span><span class="sh_symbol">(</span>obj<span class="sh_symbol">-&gt;</span><span class="sh_function">IsObject</span><span class="sh_symbol">());</span>
  at_exit_cb1_called<span class="sh_symbol">++;</span>
<span class="sh_cbracket">}</span>

<span class="sh_keyword">static</span> void <span class="sh_function">at_exit_cb2</span><span class="sh_symbol">(</span>void<span class="sh_symbol">*</span> arg<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_function">assert</span><span class="sh_symbol">(</span>arg <span class="sh_symbol">==</span> static_cast<span class="sh_symbol">&lt;</span>void<span class="sh_symbol">*&gt;(</span>cookie<span class="sh_symbol">));</span>
  at_exit_cb2_called<span class="sh_symbol">++;</span>
<span class="sh_cbracket">}</span>

<span class="sh_keyword">static</span> void <span class="sh_function">sanity_check</span><span class="sh_symbol">(</span>void<span class="sh_symbol">*)</span> <span class="sh_cbracket">{</span>
  <span class="sh_function">assert</span><span class="sh_symbol">(</span>at_exit_cb1_called <span class="sh_symbol">==</span> <span class="sh_number">1</span><span class="sh_symbol">);</span>
  <span class="sh_function">assert</span><span class="sh_symbol">(</span>at_exit_cb2_called <span class="sh_symbol">==</span> <span class="sh_number">2</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

void <span class="sh_function">init</span><span class="sh_symbol">(</span>Local<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Object</span><span class="sh_symbol">&gt;</span> exports<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_function">AtExit</span><span class="sh_symbol">(</span>sanity_check<span class="sh_symbol">);</span>
  <span class="sh_function">AtExit</span><span class="sh_symbol">(</span>at_exit_cb2<span class="sh_symbol">,</span> cookie<span class="sh_symbol">);</span>
  <span class="sh_function">AtExit</span><span class="sh_symbol">(</span>at_exit_cb2<span class="sh_symbol">,</span> cookie<span class="sh_symbol">);</span>
  <span class="sh_function">AtExit</span><span class="sh_symbol">(</span>at_exit_cb1<span class="sh_symbol">,</span> exports<span class="sh_symbol">-&gt;</span><span class="sh_function">GetIsolate</span><span class="sh_symbol">());</span>
<span class="sh_cbracket">}</span>

<span class="sh_function">NODE_MODULE</span><span class="sh_symbol">(</span>addon<span class="sh_symbol">,</span> init<span class="sh_symbol">);</span>

<span class="sh_cbracket">}</span>  <span class="sh_comment">// namespace demo</span>
</code></pre>
<p>Test in JavaScript by running:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// test.js</span>
<span class="sh_keyword">const</span> addon <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./build/Release/addon'</span><span class="sh_symbol">);</span>
</code></pre>
<!-- [end-include:addons.md] -->
<!-- [start-include:assert.md] -->
<h1>Assert<span><a class="mark" href="#assert_assert" id="assert_assert">#</a></span></h1>
<pre class="api_stability api_stability_3 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">3</span> <span class="sh_symbol">-</span> Locked</pre><p>The <code>assert</code> module provides a simple set of assertion tests that can be used to
test invariants. The module is intended for internal use by Node.js, but can be
used in application code via <code>require('assert')</code>. However, <code>assert</code> is not a
testing framework, and is not intended to be used as a general purpose assertion
library.</p>
<p>The API for the <code>assert</code> module is <a href="https://nodejs.org/api/documentation.html#documentation_stability_index">Locked</a>. This means that there will be no
additions or changes to any of the methods implemented and exposed by
the module.</p>
<h2>assert(value[, message])<span><a class="mark" href="#assert_assert_value_message" id="assert_assert_value_message">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.9</span>
</div><p>An alias of <a href="#assert_assert_ok_value_message"><code>assert.ok()</code></a> .</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> assert <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'assert'</span><span class="sh_symbol">);</span>

<span class="sh_function">assert</span><span class="sh_symbol">(</span><span class="sh_keyword">true</span><span class="sh_symbol">);</span>  <span class="sh_comment">// OK</span>
<span class="sh_function">assert</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">);</span>     <span class="sh_comment">// OK</span>
<span class="sh_function">assert</span><span class="sh_symbol">(</span><span class="sh_keyword">false</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// throws "AssertionError: false == true"</span>
<span class="sh_function">assert</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// throws "AssertionError: 0 == true"</span>
<span class="sh_function">assert</span><span class="sh_symbol">(</span><span class="sh_keyword">false</span><span class="sh_symbol">,</span> <span class="sh_string">'it</span><span class="sh_specialchar">\'</span><span class="sh_string">s false'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// throws "AssertionError: it's false"</span>
</code></pre>
<h2>assert.deepEqual(actual, expected[, message])<span><a class="mark" href="#assert_assert_deepequal_actual_expected_message" id="assert_assert_deepequal_actual_expected_message">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.21</span>
</div><p>Tests for deep equality between the <code>actual</code> and <code>expected</code> parameters.
Primitive values are compared with the equal comparison operator ( <code>==</code> ).</p>
<p>Only enumerable "own" properties are considered. The <code>deepEqual()</code>
implementation does not test object prototypes, attached symbols, or
non-enumerable properties. This can lead to some potentially surprising
results. For example, the following example does not throw an <code>AssertionError</code>
because the properties on the <a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a> object are non-enumerable:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// WARNING: This does not throw an AssertionError!</span>
assert<span class="sh_symbol">.</span><span class="sh_function">deepEqual</span><span class="sh_symbol">(</span><span class="sh_predef_func">Error</span><span class="sh_symbol">(</span><span class="sh_string">'a'</span><span class="sh_symbol">),</span> <span class="sh_predef_func">Error</span><span class="sh_symbol">(</span><span class="sh_string">'b'</span><span class="sh_symbol">));</span>
</code></pre>
<p>"Deep" equality means that the enumerable "own" properties of child objects
are evaluated also:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> assert <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'assert'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> obj1 <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span>
  a <span class="sh_symbol">:</span> <span class="sh_cbracket">{</span>
    b <span class="sh_symbol">:</span> <span class="sh_number">1</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> obj2 <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span>
  a <span class="sh_symbol">:</span> <span class="sh_cbracket">{</span>
    b <span class="sh_symbol">:</span> <span class="sh_number">2</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> obj3 <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span>
  a <span class="sh_symbol">:</span> <span class="sh_cbracket">{</span>
    b <span class="sh_symbol">:</span> <span class="sh_number">1</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>
<span class="sh_keyword">const</span> obj4 <span class="sh_symbol">=</span> <span class="sh_predef_func">Object</span><span class="sh_symbol">.</span><span class="sh_function">create</span><span class="sh_symbol">(</span>obj1<span class="sh_symbol">);</span>

assert<span class="sh_symbol">.</span><span class="sh_function">deepEqual</span><span class="sh_symbol">(</span>obj1<span class="sh_symbol">,</span> obj1<span class="sh_symbol">);</span>
  <span class="sh_comment">// OK, object is equal to itself</span>

assert<span class="sh_symbol">.</span><span class="sh_function">deepEqual</span><span class="sh_symbol">(</span>obj1<span class="sh_symbol">,</span> obj2<span class="sh_symbol">);</span>
  <span class="sh_comment">// AssertionError: { a: { b: 1 } } deepEqual { a: { b: 2 } }</span>
  <span class="sh_comment">// values of b are different</span>

assert<span class="sh_symbol">.</span><span class="sh_function">deepEqual</span><span class="sh_symbol">(</span>obj1<span class="sh_symbol">,</span> obj3<span class="sh_symbol">);</span>
  <span class="sh_comment">// OK, objects are equal</span>

assert<span class="sh_symbol">.</span><span class="sh_function">deepEqual</span><span class="sh_symbol">(</span>obj1<span class="sh_symbol">,</span> obj4<span class="sh_symbol">);</span>
  <span class="sh_comment">// AssertionError: { a: { b: 1 } } deepEqual {}</span>
  <span class="sh_comment">// Prototypes are ignored</span>
</code></pre>
<p>If the values are not equal, an <code>AssertionError</code> is thrown with a <code>message</code>
property set equal to the value of the <code>message</code> parameter. If the <code>message</code>
parameter is undefined, a default error message is assigned.</p>
<h2>assert.deepStrictEqual(actual, expected[, message])<span><a class="mark" href="#assert_assert_deepstrictequal_actual_expected_message" id="assert_assert_deepstrictequal_actual_expected_message">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v1.2.0</span>
</div><p>Generally identical to <code>assert.deepEqual()</code> with two exceptions. First,
primitive values are compared using the strict equality operator ( <code>===</code> ).
Second, object comparisons include a strict equality check of their prototypes.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> assert <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'assert'</span><span class="sh_symbol">);</span>

assert<span class="sh_symbol">.</span><span class="sh_function">deepEqual</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>a<span class="sh_symbol">:</span><span class="sh_number">1</span><span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{</span>a<span class="sh_symbol">:</span><span class="sh_string">'1'</span><span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// OK, because 1 == '1'</span>

assert<span class="sh_symbol">.</span><span class="sh_function">deepStrictEqual</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>a<span class="sh_symbol">:</span><span class="sh_number">1</span><span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{</span>a<span class="sh_symbol">:</span><span class="sh_string">'1'</span><span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// AssertionError: { a: 1 } deepStrictEqual { a: '1' }</span>
  <span class="sh_comment">// because 1 !== '1' using strict equality</span>
</code></pre>
<p>If the values are not equal, an <code>AssertionError</code> is thrown with a <code>message</code>
property set equal to the value of the <code>message</code> parameter. If the <code>message</code>
parameter is undefined, a default error message is assigned.</p>
<h2>assert.doesNotThrow(block[, error][, message])<span><a class="mark" href="#assert_assert_doesnotthrow_block_error_message" id="assert_assert_doesnotthrow_block_error_message">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.21</span>
</div><p>Asserts that the function <code>block</code> does not throw an error. See
<a href="#assert_assert_throws_block_error_message"><code>assert.throws()</code></a> for more details.</p>
<p>When <code>assert.doesNotThrow()</code> is called, it will immediately call the <code>block</code>
function.</p>
<p>If an error is thrown and it is the same type as that specified by the <code>error</code>
parameter, then an <code>AssertionError</code> is thrown. If the error is of a different
type, or if the <code>error</code> parameter is undefined, the error is propagated back
to the caller.</p>
<p>The following, for instance, will throw the <a href="https://nodejs.org/api/errors.html#errors_class_typeerror"><code>TypeError</code></a> because there is no
matching error type in the assertion:</p>
<pre class="sh_sourceCode"><code class="lang-js">assert<span class="sh_symbol">.</span><span class="sh_function">doesNotThrow</span><span class="sh_symbol">(</span>
  <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">throw</span> <span class="sh_keyword">new</span> <span class="sh_predef_func">TypeError</span><span class="sh_symbol">(</span><span class="sh_string">'Wrong value'</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_predef_func">SyntaxError</span>
<span class="sh_symbol">);</span>
</code></pre>
<p>However, the following will result in an <code>AssertionError</code> with the message
'Got unwanted exception (TypeError)..':</p>
<pre class="sh_sourceCode"><code class="lang-js">assert<span class="sh_symbol">.</span><span class="sh_function">doesNotThrow</span><span class="sh_symbol">(</span>
  <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">throw</span> <span class="sh_keyword">new</span> <span class="sh_predef_func">TypeError</span><span class="sh_symbol">(</span><span class="sh_string">'Wrong value'</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_predef_func">TypeError</span>
<span class="sh_symbol">);</span>
</code></pre>
<p>If an <code>AssertionError</code> is thrown and a value is provided for the <code>message</code>
parameter, the value of <code>message</code> will be appended to the <code>AssertionError</code>
message:</p>
<pre class="sh_sourceCode"><code class="lang-js">assert<span class="sh_symbol">.</span><span class="sh_function">doesNotThrow</span><span class="sh_symbol">(</span>
  <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">throw</span> <span class="sh_keyword">new</span> <span class="sh_predef_func">TypeError</span><span class="sh_symbol">(</span><span class="sh_string">'Wrong value'</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_predef_func">TypeError</span><span class="sh_symbol">,</span>
  <span class="sh_string">'Whoops'</span>
<span class="sh_symbol">);</span>
<span class="sh_comment">// Throws: AssertionError: Got unwanted exception (TypeError). Whoops</span>
</code></pre>
<h2>assert.equal(actual, expected[, message])<span><a class="mark" href="#assert_assert_equal_actual_expected_message" id="assert_assert_equal_actual_expected_message">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.21</span>
</div><p>Tests shallow, coercive equality between the <code>actual</code> and <code>expected</code> parameters
using the equal comparison operator ( <code>==</code> ).</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> assert <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'assert'</span><span class="sh_symbol">);</span>

assert<span class="sh_symbol">.</span><span class="sh_function">equal</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_number">1</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// OK, 1 == 1</span>
assert<span class="sh_symbol">.</span><span class="sh_function">equal</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_string">'1'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// OK, 1 == '1'</span>

assert<span class="sh_symbol">.</span><span class="sh_function">equal</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_number">2</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// AssertionError: 1 == 2</span>
assert<span class="sh_symbol">.</span><span class="sh_function">equal</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>a<span class="sh_symbol">:</span> <span class="sh_cbracket">{</span>b<span class="sh_symbol">:</span> <span class="sh_number">1</span><span class="sh_cbracket">}}</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{</span>a<span class="sh_symbol">:</span> <span class="sh_cbracket">{</span>b<span class="sh_symbol">:</span> <span class="sh_number">1</span><span class="sh_cbracket">}}</span><span class="sh_symbol">);</span>
  <span class="sh_comment">//AssertionError: { a: { b: 1 } } == { a: { b: 1 } }</span>
</code></pre>
<p>If the values are not equal, an <code>AssertionError</code> is thrown with a <code>message</code>
property set equal to the value of the <code>message</code> parameter. If the <code>message</code>
parameter is undefined, a default error message is assigned.</p>
<h2>assert.fail(actual, expected, message, operator)<span><a class="mark" href="#assert_assert_fail_actual_expected_message_operator" id="assert_assert_fail_actual_expected_message_operator">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.21</span>
</div><p>Throws an <code>AssertionError</code>. If <code>message</code> is falsy, the error message is set as
the values of <code>actual</code> and <code>expected</code> separated by the provided <code>operator</code>.
Otherwise, the error message is the value of <code>message</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> assert <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'assert'</span><span class="sh_symbol">);</span>

assert<span class="sh_symbol">.</span><span class="sh_function">fail</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_number">2</span><span class="sh_symbol">,</span> <span class="sh_predef_var">undefined</span><span class="sh_symbol">,</span> <span class="sh_string">'&gt;'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// AssertionError: 1 &gt; 2</span>

assert<span class="sh_symbol">.</span><span class="sh_function">fail</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_number">2</span><span class="sh_symbol">,</span> <span class="sh_string">'whoops'</span><span class="sh_symbol">,</span> <span class="sh_string">'&gt;'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// AssertionError: whoops</span>
</code></pre>
<h2>assert.ifError(value)<span><a class="mark" href="#assert_assert_iferror_value" id="assert_assert_iferror_value">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.97</span>
</div><p>Throws <code>value</code> if <code>value</code> is truthy. This is useful when testing the <code>error</code>
argument in callbacks.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> assert <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'assert'</span><span class="sh_symbol">);</span>

assert<span class="sh_symbol">.</span><span class="sh_function">ifError</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">);</span> <span class="sh_comment">// OK</span>
assert<span class="sh_symbol">.</span><span class="sh_function">ifError</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">);</span> <span class="sh_comment">// Throws 1</span>
assert<span class="sh_symbol">.</span><span class="sh_function">ifError</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">)</span> <span class="sh_comment">// Throws 'error'</span>
assert<span class="sh_symbol">.</span><span class="sh_function">ifError</span><span class="sh_symbol">(</span><span class="sh_keyword">new</span> <span class="sh_predef_func">Error</span><span class="sh_symbol">());</span> <span class="sh_comment">// Throws Error</span>
</code></pre>
<h2>assert.notDeepEqual(actual, expected[, message])<span><a class="mark" href="#assert_assert_notdeepequal_actual_expected_message" id="assert_assert_notdeepequal_actual_expected_message">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.21</span>
</div><p>Tests for any deep inequality. Opposite of <a href="#assert_assert_deepequal_actual_expected_message"><code>assert.deepEqual()</code></a>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> assert <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'assert'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> obj1 <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span>
  a <span class="sh_symbol">:</span> <span class="sh_cbracket">{</span>
    b <span class="sh_symbol">:</span> <span class="sh_number">1</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> obj2 <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span>
  a <span class="sh_symbol">:</span> <span class="sh_cbracket">{</span>
    b <span class="sh_symbol">:</span> <span class="sh_number">2</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> obj3 <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span>
  a <span class="sh_symbol">:</span> <span class="sh_cbracket">{</span>
    b <span class="sh_symbol">:</span> <span class="sh_number">1</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>
<span class="sh_keyword">const</span> obj4 <span class="sh_symbol">=</span> <span class="sh_predef_func">Object</span><span class="sh_symbol">.</span><span class="sh_function">create</span><span class="sh_symbol">(</span>obj1<span class="sh_symbol">);</span>

assert<span class="sh_symbol">.</span><span class="sh_function">notDeepEqual</span><span class="sh_symbol">(</span>obj1<span class="sh_symbol">,</span> obj1<span class="sh_symbol">);</span>
  <span class="sh_comment">// AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }</span>

assert<span class="sh_symbol">.</span><span class="sh_function">notDeepEqual</span><span class="sh_symbol">(</span>obj1<span class="sh_symbol">,</span> obj2<span class="sh_symbol">);</span>
  <span class="sh_comment">// OK, obj1 and obj2 are not deeply equal</span>

assert<span class="sh_symbol">.</span><span class="sh_function">notDeepEqual</span><span class="sh_symbol">(</span>obj1<span class="sh_symbol">,</span> obj3<span class="sh_symbol">);</span>
  <span class="sh_comment">// AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }</span>

assert<span class="sh_symbol">.</span><span class="sh_function">notDeepEqual</span><span class="sh_symbol">(</span>obj1<span class="sh_symbol">,</span> obj4<span class="sh_symbol">);</span>
  <span class="sh_comment">// OK, obj1 and obj2 are not deeply equal</span>
</code></pre>
<p>If the values are deeply equal, an <code>AssertionError</code> is thrown with a <code>message</code>
property set equal to the value of the <code>message</code> parameter. If the <code>message</code>
parameter is undefined, a default error message is assigned.</p>
<h2>assert.notDeepStrictEqual(actual, expected[, message])<span><a class="mark" href="#assert_assert_notdeepstrictequal_actual_expected_message" id="assert_assert_notdeepstrictequal_actual_expected_message">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v1.2.0</span>
</div><p>Tests for deep strict inequality. Opposite of <a href="#assert_assert_deepstrictequal_actual_expected_message"><code>assert.deepStrictEqual()</code></a>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> assert <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'assert'</span><span class="sh_symbol">);</span>

assert<span class="sh_symbol">.</span><span class="sh_function">notDeepEqual</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>a<span class="sh_symbol">:</span><span class="sh_number">1</span><span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{</span>a<span class="sh_symbol">:</span><span class="sh_string">'1'</span><span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// AssertionError: { a: 1 } notDeepEqual { a: '1' }</span>

assert<span class="sh_symbol">.</span><span class="sh_function">notDeepStrictEqual</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>a<span class="sh_symbol">:</span><span class="sh_number">1</span><span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{</span>a<span class="sh_symbol">:</span><span class="sh_string">'1'</span><span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// OK</span>
</code></pre>
<p>If the values are deeply and strictly equal, an <code>AssertionError</code> is thrown
with a <code>message</code> property set equal to the value of the <code>message</code> parameter. If
the <code>message</code> parameter is undefined, a default error message is assigned.</p>
<h2>assert.notEqual(actual, expected[, message])<span><a class="mark" href="#assert_assert_notequal_actual_expected_message" id="assert_assert_notequal_actual_expected_message">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.21</span>
</div><p>Tests shallow, coercive inequality with the not equal comparison operator
( <code>!=</code> ).</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> assert <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'assert'</span><span class="sh_symbol">);</span>

assert<span class="sh_symbol">.</span><span class="sh_function">notEqual</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_number">2</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// OK</span>

assert<span class="sh_symbol">.</span><span class="sh_function">notEqual</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_number">1</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// AssertionError: 1 != 1</span>

assert<span class="sh_symbol">.</span><span class="sh_function">notEqual</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_string">'1'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// AssertionError: 1 != '1'</span>
</code></pre>
<p>If the values are equal, an <code>AssertionError</code> is thrown with a <code>message</code>
property set equal to the value of the <code>message</code> parameter. If the <code>message</code>
parameter is undefined, a default error message is assigned.</p>
<h2>assert.notStrictEqual(actual, expected[, message])<span><a class="mark" href="#assert_assert_notstrictequal_actual_expected_message" id="assert_assert_notstrictequal_actual_expected_message">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.21</span>
</div><p>Tests strict inequality as determined by the strict not equal operator
( <code>!==</code> ).</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> assert <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'assert'</span><span class="sh_symbol">);</span>

assert<span class="sh_symbol">.</span><span class="sh_function">notStrictEqual</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_number">2</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// OK</span>

assert<span class="sh_symbol">.</span><span class="sh_function">notStrictEqual</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_number">1</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// AssertionError: 1 != 1</span>

assert<span class="sh_symbol">.</span><span class="sh_function">notStrictEqual</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_string">'1'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// OK</span>
</code></pre>
<p>If the values are strictly equal, an <code>AssertionError</code> is thrown with a
<code>message</code> property set equal to the value of the <code>message</code> parameter. If the
<code>message</code> parameter is undefined, a default error message is assigned.</p>
<h2>assert.ok(value[, message])<span><a class="mark" href="#assert_assert_ok_value_message" id="assert_assert_ok_value_message">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.21</span>
</div><p>Tests if <code>value</code> is truthy. It is equivalent to
<code>assert.equal(!!value, true, message)</code>.</p>
<p>If <code>value</code> is not truthy, an <code>AssertionError</code> is thrown with a <code>message</code>
property set equal to the value of the <code>message</code> parameter. If the <code>message</code>
parameter is <code>undefined</code>, a default error message is assigned.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> assert <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'assert'</span><span class="sh_symbol">);</span>

assert<span class="sh_symbol">.</span><span class="sh_function">ok</span><span class="sh_symbol">(</span><span class="sh_keyword">true</span><span class="sh_symbol">);</span>  <span class="sh_comment">// OK</span>
assert<span class="sh_symbol">.</span><span class="sh_function">ok</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">);</span>     <span class="sh_comment">// OK</span>
assert<span class="sh_symbol">.</span><span class="sh_function">ok</span><span class="sh_symbol">(</span><span class="sh_keyword">false</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// throws "AssertionError: false == true"</span>
assert<span class="sh_symbol">.</span><span class="sh_function">ok</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// throws "AssertionError: 0 == true"</span>
assert<span class="sh_symbol">.</span><span class="sh_function">ok</span><span class="sh_symbol">(</span><span class="sh_keyword">false</span><span class="sh_symbol">,</span> <span class="sh_string">'it</span><span class="sh_specialchar">\'</span><span class="sh_string">s false'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// throws "AssertionError: it's false"</span>
</code></pre>
<h2>assert.strictEqual(actual, expected[, message])<span><a class="mark" href="#assert_assert_strictequal_actual_expected_message" id="assert_assert_strictequal_actual_expected_message">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.21</span>
</div><p>Tests strict equality as determined by the strict equality operator ( <code>===</code> ).</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> assert <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'assert'</span><span class="sh_symbol">);</span>

assert<span class="sh_symbol">.</span><span class="sh_function">strictEqual</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_number">2</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// AssertionError: 1 === 2</span>

assert<span class="sh_symbol">.</span><span class="sh_function">strictEqual</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_number">1</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// OK</span>

assert<span class="sh_symbol">.</span><span class="sh_function">strictEqual</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_string">'1'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// AssertionError: 1 === '1'</span>
</code></pre>
<p>If the values are not strictly equal, an <code>AssertionError</code> is thrown with a
<code>message</code> property set equal to the value of the <code>message</code> parameter. If the
<code>message</code> parameter is undefined, a default error message is assigned.</p>
<h2>assert.throws(block[, error][, message])<span><a class="mark" href="#assert_assert_throws_block_error_message" id="assert_assert_throws_block_error_message">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.21</span>
</div><p>Expects the function <code>block</code> to throw an error.</p>
<p>If specified, <code>error</code> can be a constructor, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions"><code>RegExp</code></a>, or validation
function.</p>
<p>If specified, <code>message</code> will be the message provided by the <code>AssertionError</code> if
the block fails to throw.</p>
<p>Validate instanceof using constructor:</p>
<pre class="sh_sourceCode"><code class="lang-js">assert<span class="sh_symbol">.</span><span class="sh_keyword">throws</span><span class="sh_symbol">(</span>
  <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">throw</span> <span class="sh_keyword">new</span> <span class="sh_predef_func">Error</span><span class="sh_symbol">(</span><span class="sh_string">'Wrong value'</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_predef_func">Error</span>
<span class="sh_symbol">);</span>
</code></pre>
<p>Validate error message using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions"><code>RegExp</code></a>:</p>
<pre class="sh_sourceCode"><code class="lang-js">assert<span class="sh_symbol">.</span><span class="sh_keyword">throws</span><span class="sh_symbol">(</span>
  <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">throw</span> <span class="sh_keyword">new</span> <span class="sh_predef_func">Error</span><span class="sh_symbol">(</span><span class="sh_string">'Wrong value'</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_regexp">/value/</span>
<span class="sh_symbol">);</span>
</code></pre>
<p>Custom error validation:</p>
<pre class="sh_sourceCode"><code class="lang-js">assert<span class="sh_symbol">.</span><span class="sh_keyword">throws</span><span class="sh_symbol">(</span>
  <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">throw</span> <span class="sh_keyword">new</span> <span class="sh_predef_func">Error</span><span class="sh_symbol">(</span><span class="sh_string">'Wrong value'</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_keyword">function</span><span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">if</span> <span class="sh_symbol">(</span> <span class="sh_symbol">(</span>err <span class="sh_keyword">instanceof</span> <span class="sh_predef_func">Error</span><span class="sh_symbol">)</span> <span class="sh_symbol">&amp;&amp;</span> <span class="sh_regexp">/value/</span><span class="sh_symbol">.</span><span class="sh_function">test</span><span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
      <span class="sh_keyword">return</span> <span class="sh_keyword">true</span><span class="sh_symbol">;</span>
    <span class="sh_cbracket">}</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_string">'unexpected error'</span>
<span class="sh_symbol">);</span>
</code></pre>
<p>Note that <code>error</code> can not be a string. If a string is provided as the second
argument, then <code>error</code> is assumed to be omitted and the string will be used for
<code>message</code> instead. This can lead to easy-to-miss mistakes:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// THIS IS A MISTAKE! DO NOT DO THIS!</span>
assert<span class="sh_symbol">.</span><span class="sh_keyword">throws</span><span class="sh_symbol">(</span>myFunction<span class="sh_symbol">,</span> <span class="sh_string">'missing foo'</span><span class="sh_symbol">,</span> <span class="sh_string">'did not throw with expected message'</span><span class="sh_symbol">);</span>

<span class="sh_comment">// Do this instead.</span>
assert<span class="sh_symbol">.</span><span class="sh_keyword">throws</span><span class="sh_symbol">(</span>myFunction<span class="sh_symbol">,</span> <span class="sh_regexp">/missing foo/</span><span class="sh_symbol">,</span> <span class="sh_string">'did not throw with expected message'</span><span class="sh_symbol">);</span>
</code></pre>
<!-- [end-include:assert.md] -->
<!-- [start-include:buffer.md] -->
<h1>Buffer<span><a class="mark" href="#buffer_buffer" id="buffer_buffer">#</a></span></h1>
<pre class="api_stability api_stability_2 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> Stable</pre><p>Prior to the introduction of <code>TypedArray</code> in ECMAScript 2015 (ES6), the
JavaScript language had no mechanism for reading or manipulating streams
of binary data. The <code>Buffer</code> class was introduced as part of the Node.js
API to make it possible to interact with octet streams in the context of things
like TCP streams and file system operations.</p>
<p>Now that <code>TypedArray</code> has been added in ES6, the <code>Buffer</code> class implements the
<code>Uint8Array</code> API in a manner that is more optimized and suitable for Node.js'
use cases.</p>
<p>Instances of the <code>Buffer</code> class are similar to arrays of integers but
correspond to fixed-sized, raw memory allocations outside the V8 heap.
The size of the <code>Buffer</code> is established when it is created and cannot be
resized.</p>
<p>The <code>Buffer</code> class is a global within Node.js, making it unlikely that one
would need to ever use <code>require('buffer').Buffer</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf1 <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">alloc</span><span class="sh_symbol">(</span><span class="sh_number">10</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Creates a zero-filled Buffer of length 10.</span>

<span class="sh_keyword">const</span> buf2 <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">alloc</span><span class="sh_symbol">(</span><span class="sh_number">10</span><span class="sh_symbol">,</span> <span class="sh_number">1</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Creates a Buffer of length 10, filled with 0x01.</span>

<span class="sh_keyword">const</span> buf3 <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">allocUnsafe</span><span class="sh_symbol">(</span><span class="sh_number">10</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Creates an uninitialized buffer of length 10.</span>
  <span class="sh_comment">// This is faster than calling Buffer.alloc() but the returned</span>
  <span class="sh_comment">// Buffer instance might contain old data that needs to be</span>
  <span class="sh_comment">// overwritten using either fill() or write().</span>

<span class="sh_keyword">const</span> buf4 <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">([</span><span class="sh_number">1</span><span class="sh_symbol">,</span><span class="sh_number">2</span><span class="sh_symbol">,</span><span class="sh_number">3</span><span class="sh_symbol">]);</span>
  <span class="sh_comment">// Creates a Buffer containing [01, 02, 03].</span>

<span class="sh_keyword">const</span> buf5 <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'test'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Creates a Buffer containing ASCII bytes [74, 65, 73, 74].</span>

<span class="sh_keyword">const</span> buf6 <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'tést'</span><span class="sh_symbol">,</span> <span class="sh_string">'utf8'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Creates a Buffer containing UTF8 bytes [74, c3, a9, 73, 74].</span>
</code></pre>
<h2><code>Buffer.from()</code>, <code>Buffer.alloc()</code>, and <code>Buffer.allocUnsafe()</code><span><a class="mark" href="#buffer_buffer_from_buffer_alloc_and_buffer_allocunsafe" id="buffer_buffer_from_buffer_alloc_and_buffer_allocunsafe">#</a></span></h2>
<p>In versions of Node.js prior to v6, <code>Buffer</code> instances were created using the
<code>Buffer</code> constructor function, which allocates the returned <code>Buffer</code>
differently based on what arguments are provided:</p>
<ul>
<li>Passing a number as the first argument to <code>Buffer()</code> (e.g. <code>new Buffer(10)</code>),
allocates a new <code>Buffer</code> object of the specified size. The memory allocated
for such <code>Buffer</code> instances is <em>not</em> initialized and <em>can contain sensitive
data</em>. Such <code>Buffer</code> objects <em>must</em> be initialized <em>manually</em> by using either
<a href="#buffer_buf_fill_value_offset_end_encoding"><code>buf.fill(0)</code></a> or by writing to the <code>Buffer</code> completely. While this
behavior is <em>intentional</em> to improve performance, development experience has
demonstrated that a more explicit distinction is required between creating a
fast-but-uninitialized <code>Buffer</code> versus creating a slower-but-safer <code>Buffer</code>.</li>
<li>Passing a string, array, or <code>Buffer</code> as the first argument copies the
passed object's data into the <code>Buffer</code>.</li>
<li>Passing an <code>ArrayBuffer</code> returns a <code>Buffer</code> that shares allocated memory with
the given <code>ArrayBuffer</code>.</li>
</ul>
<p>Because the behavior of <code>new Buffer()</code> changes significantly based on the type
of value passed as the first argument, applications that do not properly
validate the input arguments passed to <code>new Buffer()</code>, or that fail to
appropriately initialize newly allocated <code>Buffer</code> content, can inadvertently
introduce security and reliability issues into their code.</p>
<p>To make the creation of <code>Buffer</code> objects more reliable and less error prone,
the various forms of the <code>new Buffer()</code> constructor have been <strong>deprecated</strong>
and replaced by separate <code>Buffer.from()</code>, <code>Buffer.alloc()</code>, and
<code>Buffer.allocUnsafe()</code> methods.</p>
<p><em>Developers should migrate all existing uses of the <code>new Buffer()</code> constructors
to one of these new APIs.</em></p>
<ul>
<li><a href="#buffer_class_method_buffer_from_array"><code>Buffer.from(array)</code></a> returns a new <code>Buffer</code> containing
a <em>copy</em> of the provided octets.</li>
<li><a href="#buffer_class_method_buffer_from_arraybuffer_byteoffset_length"><code>Buffer.from(arrayBuffer[, byteOffset [, length]])</code></a>
returns a new <code>Buffer</code> that <em>shares</em> the same allocated memory as the given
<code>ArrayBuffer</code>.</li>
<li><a href="#buffer_class_method_buffer_from_buffer"><code>Buffer.from(buffer)</code></a> returns a new <code>Buffer</code>
containing a <em>copy</em> of the contents of the given <code>Buffer</code>.</li>
<li><a href="#buffer_class_method_buffer_from_str_encoding"><code>Buffer.from(str[, encoding])</code></a> returns a new <code>Buffer</code>
containing a <em>copy</em> of the provided string.</li>
<li><a href="#buffer_class_method_buffer_alloc_size_fill_encoding"><code>Buffer.alloc(size[, fill[, encoding]])</code></a> returns a "filled"
<code>Buffer</code> instance of the specified size. This method can be significantly
slower than <a href="#buffer_class_method_buffer_allocunsafe_size"><code>Buffer.allocUnsafe(size)</code></a> but ensures
that newly created <code>Buffer</code> instances never contain old and potentially
sensitive data.</li>
<li><a href="#buffer_class_method_buffer_allocunsafe_size"><code>Buffer.allocUnsafe(size)</code></a> and
<a href="#buffer_class_method_buffer_allocunsafeslow_size"><code>Buffer.allocUnsafeSlow(size)</code></a> each return a
new <code>Buffer</code> of the specified <code>size</code> whose content <em>must</em> be initialized
using either <a href="#buffer_buf_fill_value_offset_end_encoding"><code>buf.fill(0)</code></a> or written to completely.</li>
</ul>
<p><code>Buffer</code> instances returned by <code>Buffer.allocUnsafe(size)</code> <em>may</em> be allocated
off a shared internal memory pool if <code>size</code> is less than or equal to half
<code>Buffer.poolSize</code>. Instances returned by <code>Buffer.allocUnsafeSlow(size)</code> <em>never</em>
use the shared internal memory pool.</p>
<h3>The <code>--zero-fill-buffers</code> command line option<span><a class="mark" href="#buffer_the_zero_fill_buffers_command_line_option" id="buffer_the_zero_fill_buffers_command_line_option">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v5.10.0</span>
</div><p>Node.js can be started using the <code>--zero-fill-buffers</code> command line option to
force all newly allocated <code>Buffer</code> instances created using either
<code>new Buffer(size)</code>, <code>Buffer.allocUnsafe(size)</code>, <code>Buffer.allocUnsafeSlow(size)</code>
or <code>new SlowBuffer(size)</code> to be <em>automatically zero-filled</em> upon creation. Use
of this flag <em>changes the default behavior</em> of these methods and <em>can have a
significant impact</em> on performance. Use of the <code>--zero-fill-buffers</code> option is
recommended only when absolutely necessary to enforce that newly allocated
<code>Buffer</code> instances cannot contain potentially sensitive data.</p>
<pre class="sh_sourceCode"><code>$ node <span class="sh_symbol">--</span>zero<span class="sh_symbol">-</span>fill<span class="sh_symbol">-</span>buffers
<span class="sh_symbol">&gt;</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">allocUnsafe</span><span class="sh_symbol">(</span><span class="sh_number">5</span><span class="sh_symbol">);</span>
<span class="sh_symbol">&lt;</span>Buffer <span class="sh_number">00</span> <span class="sh_number">00</span> <span class="sh_number">00</span> <span class="sh_number">00</span> <span class="sh_number">00</span><span class="sh_symbol">&gt;</span>
</code></pre><h3>What makes <code>Buffer.allocUnsafe(size)</code> and <code>Buffer.allocUnsafeSlow(size)</code> "unsafe"?<span><a class="mark" href="#buffer_what_makes_buffer_allocunsafe_size_and_buffer_allocunsafeslow_size_unsafe" id="buffer_what_makes_buffer_allocunsafe_size_and_buffer_allocunsafeslow_size_unsafe">#</a></span></h3>
<p>When calling <code>Buffer.allocUnsafe()</code> (and <code>Buffer.allocUnsafeSlow()</code>), the
segment of allocated memory is <em>uninitialized</em> (it is not zeroed-out). While
this design makes the allocation of memory quite fast, the allocated segment of
memory might contain old data that is potentially sensitive. Using a <code>Buffer</code>
created by <code>Buffer.allocUnsafe()</code> without <em>completely</em> overwriting the memory
can allow this old data to be leaked when the <code>Buffer</code> memory is read.</p>
<p>While there are clear performance advantages to using <code>Buffer.allocUnsafe()</code>,
extra care <em>must</em> be taken in order to avoid introducing security
vulnerabilities into an application.</p>
<h2>Buffers and Character Encodings<span><a class="mark" href="#buffer_buffers_and_character_encodings" id="buffer_buffers_and_character_encodings">#</a></span></h2>
<p>Buffers are commonly used to represent sequences of encoded characters
such as UTF8, UCS2, Base64 or even Hex-encoded data. It is possible to
convert back and forth between Buffers and ordinary JavaScript string objects
by using an explicit encoding method.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'hello world'</span><span class="sh_symbol">,</span> <span class="sh_string">'ascii'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_string">'hex'</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// prints: 68656c6c6f20776f726c64</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_string">'base64'</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// prints: aGVsbG8gd29ybGQ=</span>
</code></pre>
<p>The character encodings currently supported by Node.js include:</p>
<ul>
<li><p><code>'ascii'</code> - for 7-bit ASCII data only.  This encoding method is very fast and
will strip the high bit if set.</p>
</li>
<li><p><code>'utf8'</code> - Multibyte encoded Unicode characters. Many web pages and other
document formats use UTF-8.</p>
</li>
<li><p><code>'utf16le'</code> - 2 or 4 bytes, little-endian encoded Unicode characters.
Surrogate pairs (U+10000 to U+10FFFF) are supported.</p>
</li>
<li><p><code>'ucs2'</code> - Alias of <code>'utf16le'</code>.</p>
</li>
<li><p><code>'base64'</code> - Base64 string encoding. When creating a buffer from a string,
this encoding will also correctly accept "URL and Filename Safe Alphabet" as
specified in <a href="https://tools.ietf.org/html/rfc4648#section-5">RFC 4648, Section 5</a>.</p>
</li>
<li><p><code>'binary'</code> - A way of encoding the buffer into a one-byte (<code>latin-1</code>)
encoded string. The string <code>'latin-1'</code> is not supported. Instead, pass
<code>'binary'</code> to use <code>'latin-1'</code> encoding.</p>
</li>
<li><p><code>'hex'</code> - Encode each byte as two hexadecimal characters.</p>
</li>
</ul>
<h2>Buffers and TypedArray<span><a class="mark" href="#buffer_buffers_and_typedarray" id="buffer_buffers_and_typedarray">#</a></span></h2>
<p>Buffers are also <code>Uint8Array</code> TypedArray instances. However, there are subtle
incompatibilities with the TypedArray specification in ECMAScript 2015. For
instance, while <code>ArrayBuffer#slice()</code> creates a copy of the slice,
the implementation of <a href="#buffer_buf_slice_start_end"><code>Buffer#slice()</code></a> creates a view over the
existing Buffer without copying, making <code>Buffer#slice()</code> far more efficient.</p>
<p>It is also possible to create new TypedArray instances from a <code>Buffer</code> with the
following caveats:</p>
<ol>
<li><p>The <code>Buffer</code> object's memory is copied to the TypedArray, not shared.</p>
</li>
<li><p>The <code>Buffer</code> object's memory is interpreted as an array of distinct
elements, and not as a byte array of the target type. That is,
<code>new Uint32Array(Buffer.from([1,2,3,4]))</code> creates a 4-element <code>Uint32Array</code>
with elements <code>[1,2,3,4]</code>, not a <code>Uint32Array</code> with a single element
<code>[0x1020304]</code> or <code>[0x4030201]</code>.</p>
</li>
</ol>
<p>It is possible to create a new <code>Buffer</code> that shares the same allocated memory as
a TypedArray instance by using the TypeArray object's <code>.buffer</code> property:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> arr <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Uint16Array</span><span class="sh_symbol">(</span><span class="sh_number">2</span><span class="sh_symbol">);</span>
arr<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">5000</span><span class="sh_symbol">;</span>
arr<span class="sh_symbol">[</span><span class="sh_number">1</span><span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">4000</span><span class="sh_symbol">;</span>

<span class="sh_keyword">const</span> buf1 <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span>arr<span class="sh_symbol">);</span> <span class="sh_comment">// copies the buffer</span>
<span class="sh_keyword">const</span> buf2 <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span>arr<span class="sh_symbol">.</span>buffer<span class="sh_symbol">);</span> <span class="sh_comment">// shares the memory with arr;</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf1<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: &lt;Buffer 88 a0&gt;, copied buffer has only two elements</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf2<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: &lt;Buffer 88 13 a0 0f&gt;</span>

arr<span class="sh_symbol">[</span><span class="sh_number">1</span><span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">6000</span><span class="sh_symbol">;</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf1<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: &lt;Buffer 88 a0&gt;</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf2<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: &lt;Buffer 88 13 70 17&gt;</span>
</code></pre>
<p>Note that when creating a <code>Buffer</code> using the TypedArray's <code>.buffer</code>, it is
possible to use only a portion of the underlying <code>ArrayBuffer</code> by passing in
<code>byteOffset</code> and <code>length</code> parameters:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> arr <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Uint16Array</span><span class="sh_symbol">(</span><span class="sh_number">20</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span>arr<span class="sh_symbol">.</span>buffer<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_number">16</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">.</span>length<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: 16</span>
</code></pre>
<p>The <code>Buffer.from()</code> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from"><code>TypedArray.from()</code></a> (e.g.<code>Uint8Array.from()</code>) have
different signatures and implementations. Specifically, the TypedArray variants
accept a second argument that is a mapping function that is invoked on every
element of the typed array:</p>
<ul>
<li><code>TypedArray.from(source[, mapFn[, thisArg]])</code></li>
</ul>
<p>The <code>Buffer.from()</code> method, however, does not support the use of a mapping
function:</p>
<ul>
<li><a href="#buffer_class_method_buffer_from_array"><code>Buffer.from(array)</code></a></li>
<li><a href="#buffer_class_method_buffer_from_buffer"><code>Buffer.from(buffer)</code></a></li>
<li><a href="#buffer_class_method_buffer_from_arraybuffer_byteoffset_length"><code>Buffer.from(arrayBuffer[, byteOffset [, length]])</code></a></li>
<li><a href="#buffer_class_method_buffer_from_str_encoding"><code>Buffer.from(str[, encoding])</code></a></li>
</ul>
<h2>Buffers and ES6 iteration<span><a class="mark" href="#buffer_buffers_and_es6_iteration" id="buffer_buffers_and_es6_iteration">#</a></span></h2>
<p>Buffers can be iterated over using the ECMAScript 2015 (ES6) <code>for..of</code> syntax:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">([</span><span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_number">2</span><span class="sh_symbol">,</span> <span class="sh_number">3</span><span class="sh_symbol">]);</span>

<span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_keyword">var</span> b of buf<span class="sh_symbol">)</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>b<span class="sh_symbol">)</span>

<span class="sh_comment">// Prints:</span>
<span class="sh_comment">//   1</span>
<span class="sh_comment">//   2</span>
<span class="sh_comment">//   3</span>
</code></pre>
<p>Additionally, the <a href="#buffer_buf_values"><code>buf.values()</code></a>, <a href="#buffer_buf_keys"><code>buf.keys()</code></a>, and
<a href="#buffer_buf_entries"><code>buf.entries()</code></a> methods can be used to create iterators.</p>
<h2>Class: Buffer<span><a class="mark" href="#buffer_class_buffer" id="buffer_class_buffer">#</a></span></h2>
<p>The Buffer class is a global type for dealing with binary data directly.
It can be constructed in a variety of ways.</p>
<h3>new Buffer(array)<span><a class="mark" href="#buffer_new_buffer_array" id="buffer_new_buffer_array">#</a></span></h3>
<div class="api_metadata">
<span>Deprecated since: v6.0.0 </span>
</div><pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated<span class="sh_symbol">:</span> Use <a href="#buffer_class_method_buffer_from_array"><code>Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span>array<span class="sh_symbol">)</span></code></a>
instead<span class="sh_symbol">.</span></pre><ul>
<li><code>array</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" class="type">&lt;Array&gt;</a></li>
</ul>
<p>Allocates a new Buffer using an <code>array</code> of octets.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Buffer</span><span class="sh_symbol">([</span><span class="sh_number">0x62</span><span class="sh_symbol">,</span><span class="sh_number">0x75</span><span class="sh_symbol">,</span><span class="sh_number">0x66</span><span class="sh_symbol">,</span><span class="sh_number">0x66</span><span class="sh_symbol">,</span><span class="sh_number">0x65</span><span class="sh_symbol">,</span><span class="sh_number">0x72</span><span class="sh_symbol">]);</span>
  <span class="sh_comment">// creates a new Buffer containing ASCII bytes</span>
  <span class="sh_comment">// ['b','u','f','f','e','r']</span>
</code></pre>
<h3>new Buffer(buffer)<span><a class="mark" href="#buffer_new_buffer_buffer" id="buffer_new_buffer_buffer">#</a></span></h3>
<div class="api_metadata">
<span>Deprecated since: v6.0.0 </span>
</div><pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated<span class="sh_symbol">:</span> Use <a href="#buffer_class_method_buffer_from_buffer"><code>Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span>buffer<span class="sh_symbol">)</span></code></a>
instead<span class="sh_symbol">.</span></pre><ul>
<li><code>buffer</code> <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
</ul>
<p>Copies the passed <code>buffer</code> data onto a new <code>Buffer</code> instance.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf1 <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Buffer</span><span class="sh_symbol">(</span><span class="sh_string">'buffer'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> buf2 <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Buffer</span><span class="sh_symbol">(</span>buf1<span class="sh_symbol">);</span>

buf1<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">0x61</span><span class="sh_symbol">;</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf1<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">());</span>
  <span class="sh_comment">// 'auffer'</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf2<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">());</span>
  <span class="sh_comment">// 'buffer' (copy is not changed)</span>
</code></pre>
<h3>new Buffer(arrayBuffer[, byteOffset [, length]])<span><a class="mark" href="#buffer_new_buffer_arraybuffer_byteoffset_length" id="buffer_new_buffer_arraybuffer_byteoffset_length">#</a></span></h3>
<div class="api_metadata">
<span>Deprecated since: v6.0.0 </span>
</div><pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated<span class="sh_symbol">:</span> Use
<a href="#buffer_class_method_buffer_from_arraybuffer_byteoffset_length"><code>Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span>arrayBuffer<span class="sh_symbol">[,</span> byteOffset <span class="sh_symbol">[,</span> length<span class="sh_symbol">]])</span></code></a>
instead<span class="sh_symbol">.</span></pre><ul>
<li><code>arrayBuffer</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" class="type">&lt;ArrayBuffer&gt;</a> The <code>.buffer</code> property of a <code>TypedArray</code> or a
<code>new ArrayBuffer()</code></li>
<li><code>byteOffset</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Default: <code>0</code></li>
<li><code>length</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Default: <code>arrayBuffer.length - byteOffset</code></li>
</ul>
<p>When passed a reference to the <code>.buffer</code> property of a <code>TypedArray</code> instance,
the newly created Buffer will share the same allocated memory as the
TypedArray.</p>
<p>The optional <code>byteOffset</code> and <code>length</code> arguments specify a memory range within
the <code>arrayBuffer</code> that will be shared by the <code>Buffer</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> arr <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Uint16Array</span><span class="sh_symbol">(</span><span class="sh_number">2</span><span class="sh_symbol">);</span>
arr<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">5000</span><span class="sh_symbol">;</span>
arr<span class="sh_symbol">[</span><span class="sh_number">1</span><span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">4000</span><span class="sh_symbol">;</span>

<span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Buffer</span><span class="sh_symbol">(</span>arr<span class="sh_symbol">.</span>buffer<span class="sh_symbol">);</span> <span class="sh_comment">// shares the memory with arr;</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: &lt;Buffer 88 13 a0 0f&gt;</span>

<span class="sh_comment">// changing the TypdArray changes the Buffer also</span>
arr<span class="sh_symbol">[</span><span class="sh_number">1</span><span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">6000</span><span class="sh_symbol">;</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: &lt;Buffer 88 13 70 17&gt;</span>
</code></pre>
<h3>new Buffer(size)<span><a class="mark" href="#buffer_new_buffer_size" id="buffer_new_buffer_size">#</a></span></h3>
<div class="api_metadata">
<span>Deprecated since: v6.0.0 </span>
</div><pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated<span class="sh_symbol">:</span> Use
<a href="#buffer_class_method_buffer_alloc_size_fill_encoding"><code>Buffer<span class="sh_symbol">.</span><span class="sh_function">alloc</span><span class="sh_symbol">(</span>size<span class="sh_symbol">[,</span> fill<span class="sh_symbol">[,</span> encoding<span class="sh_symbol">]])</span></code></a> <span class="sh_function">instead</span> <span class="sh_symbol">(</span>also
see <a href="#buffer_class_method_buffer_allocunsafe_size"><code>Buffer<span class="sh_symbol">.</span><span class="sh_function">allocUnsafe</span><span class="sh_symbol">(</span>size<span class="sh_symbol">)</span></code></a><span class="sh_symbol">).</span></pre><ul>
<li><code>size</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
</ul>
<p>Allocates a new <code>Buffer</code> of <code>size</code> bytes.  The <code>size</code> must be less than
or equal to the value of <code>require('buffer').kMaxLength</code> (on 64-bit
architectures, <code>kMaxLength</code> is <code>(2^31)-1</code>). Otherwise, a <a href="https://nodejs.org/api/errors.html#errors_class_rangeerror"><code>RangeError</code></a> is
thrown. A zero-length Buffer will be created if a <code>size</code> less than or equal to
0 is specified.</p>
<p>Unlike <code>ArrayBuffers</code>, the underlying memory for <code>Buffer</code> instances created in
this way is <em>not initialized</em>. The contents of a newly created <code>Buffer</code> are
unknown and <em>could contain sensitive data</em>. Use <a href="#buffer_buf_fill_value_offset_end_encoding"><code>buf.fill(0)</code></a> to initialize
a <code>Buffer</code> to zeroes.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Buffer</span><span class="sh_symbol">(</span><span class="sh_number">5</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_comment">// &lt;Buffer 78 e0 82 02 01&gt;</span>
  <span class="sh_comment">// (octets will be different, every time)</span>
buf<span class="sh_symbol">.</span><span class="sh_function">fill</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_comment">// &lt;Buffer 00 00 00 00 00&gt;</span>
</code></pre>
<h3>new Buffer(str[, encoding])<span><a class="mark" href="#buffer_new_buffer_str_encoding" id="buffer_new_buffer_str_encoding">#</a></span></h3>
<div class="api_metadata">
<span>Deprecated since: v6.0.0 </span>
</div><pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated<span class="sh_symbol">:</span>
Use <a href="#buffer_class_method_buffer_from_str_encoding"><code>Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span>str<span class="sh_symbol">[,</span> encoding<span class="sh_symbol">])</span></code></a> instead<span class="sh_symbol">.</span></pre><ul>
<li><code>str</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> string to encode.</li>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> Default: <code>'utf8'</code></li>
</ul>
<p>Creates a new Buffer containing the given JavaScript string <code>str</code>. If
provided, the <code>encoding</code> parameter identifies the strings character encoding.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf1 <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Buffer</span><span class="sh_symbol">(</span><span class="sh_string">'this is a tést'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf1<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">());</span>
  <span class="sh_comment">// prints: this is a tést</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf1<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_string">'ascii'</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// prints: this is a tC)st</span>

<span class="sh_keyword">const</span> buf2 <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Buffer</span><span class="sh_symbol">(</span><span class="sh_string">'7468697320697320612074c3a97374'</span><span class="sh_symbol">,</span> <span class="sh_string">'hex'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf2<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">());</span>
  <span class="sh_comment">// prints: this is a tést</span>
</code></pre>
<h3>Class Method: Buffer.alloc(size[, fill[, encoding]])<span><a class="mark" href="#buffer_class_method_buffer_alloc_size_fill_encoding" id="buffer_class_method_buffer_alloc_size_fill_encoding">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v5.10.0</span>
</div><ul>
<li><code>size</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
<li><code>fill</code> <span class="type">&lt;Value&gt;</span> Default: <code>undefined</code></li>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> Default: <code>utf8</code></li>
</ul>
<p>Allocates a new <code>Buffer</code> of <code>size</code> bytes. If <code>fill</code> is <code>undefined</code>, the
<code>Buffer</code> will be <em>zero-filled</em>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">alloc</span><span class="sh_symbol">(</span><span class="sh_number">5</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_comment">// &lt;Buffer 00 00 00 00 00&gt;</span>
</code></pre>
<p>The <code>size</code> must be less than or equal to the value of
<code>require('buffer').kMaxLength</code> (on 64-bit architectures, <code>kMaxLength</code> is
<code>(2^31)-1</code>). Otherwise, a <a href="https://nodejs.org/api/errors.html#errors_class_rangeerror"><code>RangeError</code></a> is thrown. A zero-length Buffer will
be created if a <code>size</code> less than or equal to 0 is specified.</p>
<p>If <code>fill</code> is specified, the allocated <code>Buffer</code> will be initialized by calling
<code>buf.fill(fill)</code>. See <a href="#buffer_buf_fill_value_offset_end_encoding"><code>buf.fill()</code></a> for more information.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">alloc</span><span class="sh_symbol">(</span><span class="sh_number">5</span><span class="sh_symbol">,</span> <span class="sh_string">'a'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_comment">// &lt;Buffer 61 61 61 61 61&gt;</span>
</code></pre>
<p>If both <code>fill</code> and <code>encoding</code> are specified, the allocated <code>Buffer</code> will be
initialized by calling <code>buf.fill(fill, encoding)</code>. For example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">alloc</span><span class="sh_symbol">(</span><span class="sh_number">11</span><span class="sh_symbol">,</span> <span class="sh_string">'aGVsbG8gd29ybGQ='</span><span class="sh_symbol">,</span> <span class="sh_string">'base64'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_comment">// &lt;Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64&gt;</span>
</code></pre>
<p>Calling <code>Buffer.alloc(size)</code> can be significantly slower than the alternative
<code>Buffer.allocUnsafe(size)</code> but ensures that the newly created <code>Buffer</code> instance
contents will <em>never contain sensitive data</em>.</p>
<p>A <code>TypeError</code> will be thrown if <code>size</code> is not a number.</p>
<h3>Class Method: Buffer.allocUnsafe(size)<span><a class="mark" href="#buffer_class_method_buffer_allocunsafe_size" id="buffer_class_method_buffer_allocunsafe_size">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v5.10.0</span>
</div><ul>
<li><code>size</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
</ul>
<p>Allocates a new <em>non-zero-filled</em> <code>Buffer</code> of <code>size</code> bytes.  The <code>size</code> must
be less than or equal to the value of <code>require('buffer').kMaxLength</code> (on 64-bit
architectures, <code>kMaxLength</code> is <code>(2^31)-1</code>). Otherwise, a <a href="https://nodejs.org/api/errors.html#errors_class_rangeerror"><code>RangeError</code></a> is
thrown. A zero-length Buffer will be created if a <code>size</code> less than or equal to
0 is specified.</p>
<p>The underlying memory for <code>Buffer</code> instances created in this way is <em>not
initialized</em>. The contents of the newly created <code>Buffer</code> are unknown and
<em>may contain sensitive data</em>. Use <a href="#buffer_buf_fill_value_offset_end_encoding"><code>buf.fill(0)</code></a> to initialize such
<code>Buffer</code> instances to zeroes.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">allocUnsafe</span><span class="sh_symbol">(</span><span class="sh_number">5</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_comment">// &lt;Buffer 78 e0 82 02 01&gt;</span>
  <span class="sh_comment">// (octets will be different, every time)</span>
buf<span class="sh_symbol">.</span><span class="sh_function">fill</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_comment">// &lt;Buffer 00 00 00 00 00&gt;</span>
</code></pre>
<p>A <code>TypeError</code> will be thrown if <code>size</code> is not a number.</p>
<p>Note that the <code>Buffer</code> module pre-allocates an internal <code>Buffer</code> instance of
size <code>Buffer.poolSize</code> that is used as a pool for the fast allocation of new
<code>Buffer</code> instances created using <code>Buffer.allocUnsafe(size)</code> (and the deprecated
<code>new Buffer(size)</code> constructor) only when <code>size</code> is less than or equal to
<code>Buffer.poolSize &gt;&gt; 1</code> (floor of <code>Buffer.poolSize</code> divided by two). The default
value of <code>Buffer.poolSize</code> is <code>8192</code> but can be modified.</p>
<p>Use of this pre-allocated internal memory pool is a key difference between
calling <code>Buffer.alloc(size, fill)</code> vs. <code>Buffer.allocUnsafe(size).fill(fill)</code>.
Specifically, <code>Buffer.alloc(size, fill)</code> will <em>never</em> use the internal Buffer
pool, while <code>Buffer.allocUnsafe(size).fill(fill)</code> <em>will</em> use the internal
Buffer pool if <code>size</code> is less than or equal to half <code>Buffer.poolSize</code>. The
difference is subtle but can be important when an application requires the
additional performance that <code>Buffer.allocUnsafe(size)</code> provides.</p>
<h3>Class Method: Buffer.allocUnsafeSlow(size)<span><a class="mark" href="#buffer_class_method_buffer_allocunsafeslow_size" id="buffer_class_method_buffer_allocunsafeslow_size">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v5.10.0</span>
</div><ul>
<li><code>size</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
</ul>
<p>Allocates a new <em>non-zero-filled</em> and non-pooled <code>Buffer</code> of <code>size</code> bytes.  The
<code>size</code> must be less than or equal to the value of
<code>require('buffer').kMaxLength</code> (on 64-bit architectures, <code>kMaxLength</code> is
<code>(2^31)-1</code>). Otherwise, a <a href="https://nodejs.org/api/errors.html#errors_class_rangeerror"><code>RangeError</code></a> is thrown. A zero-length Buffer will
be created if a <code>size</code> less than or equal to 0 is specified.</p>
<p>The underlying memory for <code>Buffer</code> instances created in this way is <em>not
initialized</em>. The contents of the newly created <code>Buffer</code> are unknown and
<em>may contain sensitive data</em>. Use <a href="#buffer_buf_fill_value_offset_end_encoding"><code>buf.fill(0)</code></a> to initialize such
<code>Buffer</code> instances to zeroes.</p>
<p>When using <code>Buffer.allocUnsafe()</code> to allocate new <code>Buffer</code> instances,
allocations under 4KB are, by default, sliced from a single pre-allocated
<code>Buffer</code>. This allows applications to avoid the garbage collection overhead of
creating many individually allocated Buffers. This approach improves both
performance and memory usage by eliminating the need to track and cleanup as
many <code>Persistent</code> objects.</p>
<p>However, in the case where a developer may need to retain a small chunk of
memory from a pool for an indeterminate amount of time, it may be appropriate
to create an un-pooled Buffer instance using <code>Buffer.allocUnsafeSlow()</code> then
copy out the relevant bits.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// need to keep around a few small chunks of memory</span>
<span class="sh_keyword">const</span> store <span class="sh_symbol">=</span> <span class="sh_symbol">[];</span>

socket<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'readable'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">const</span> data <span class="sh_symbol">=</span> socket<span class="sh_symbol">.</span><span class="sh_function">read</span><span class="sh_symbol">();</span>
  <span class="sh_comment">// allocate for retained data</span>
  <span class="sh_keyword">const</span> sb <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">allocUnsafeSlow</span><span class="sh_symbol">(</span><span class="sh_number">10</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// copy the data into the new allocation</span>
  data<span class="sh_symbol">.</span><span class="sh_function">copy</span><span class="sh_symbol">(</span>sb<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_number">10</span><span class="sh_symbol">);</span>
  store<span class="sh_symbol">.</span><span class="sh_function">push</span><span class="sh_symbol">(</span>sb<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>Use of <code>Buffer.allocUnsafeSlow()</code> should be used only as a last resort <em>after</em>
a developer has observed undue memory retention in their applications.</p>
<p>A <code>TypeError</code> will be thrown if <code>size</code> is not a number.</p>
<h3>Class Method: Buffer.byteLength(string[, encoding])<span><a class="mark" href="#buffer_class_method_buffer_bytelength_string_encoding" id="buffer_class_method_buffer_bytelength_string_encoding">#</a></span></h3>
<div class="signature"><ul>
<li><code>string</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <span class="type">&lt;TypedArray&gt;</span> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" class="type">&lt;DataView&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" class="type">&lt;ArrayBuffer&gt;</a></li>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> Default: <code>'utf8'</code></li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
</ul>
</div><p>Returns the actual byte length of a string. This is not the same as
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length"><code>String.prototype.length</code></a> since that returns the number of <em>characters</em> in
a string.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> str <span class="sh_symbol">=</span> <span class="sh_string">'</span><span class="sh_specialchar">\u</span><span class="sh_string">00bd + </span><span class="sh_specialchar">\u</span><span class="sh_string">00bc = </span><span class="sh_specialchar">\u</span><span class="sh_string">00be'</span><span class="sh_symbol">;</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`$<span class="sh_cbracket">{</span>str<span class="sh_cbracket">}</span><span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>str<span class="sh_symbol">.</span>length<span class="sh_cbracket">}</span> characters<span class="sh_symbol">,</span> ` <span class="sh_symbol">+</span>
            `$<span class="sh_cbracket">{</span>Buffer<span class="sh_symbol">.</span><span class="sh_function">byteLength</span><span class="sh_symbol">(</span>str<span class="sh_symbol">,</span> <span class="sh_string">'utf8'</span><span class="sh_symbol">)</span><span class="sh_cbracket">}</span> bytes`<span class="sh_symbol">);</span>

<span class="sh_comment">// ½ + ¼ = ¾: 9 characters, 12 bytes</span>
</code></pre>
<p>When <code>string</code> is a <code>Buffer</code>/<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"><code>DataView</code></a>/<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"><code>TypedArray</code></a>/<code>ArrayBuffer</code>,
returns the actual byte length.</p>
<p>Otherwise, converts to <code>String</code> and returns the byte length of string.</p>
<h3>Class Method: Buffer.compare(buf1, buf2)<span><a class="mark" href="#buffer_class_method_buffer_compare_buf1_buf2" id="buffer_class_method_buffer_compare_buf1_buf2">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.11.13</span>
</div><ul>
<li><code>buf1</code> <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>buf2</code> <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
</ul>
<p>Compares <code>buf1</code> to <code>buf2</code> typically for the purpose of sorting arrays of
Buffers. This is equivalent is calling <a href="#buffer_buf_compare_target_targetstart_targetend_sourcestart_sourceend"><code>buf1.compare(buf2)</code></a>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> arr <span class="sh_symbol">=</span> <span class="sh_symbol">[</span>Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'1234'</span><span class="sh_symbol">),</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'0123'</span><span class="sh_symbol">)];</span>
arr<span class="sh_symbol">.</span><span class="sh_function">sort</span><span class="sh_symbol">(</span>Buffer<span class="sh_symbol">.</span>compare<span class="sh_symbol">);</span>
</code></pre>
<h3>Class Method: Buffer.concat(list[, totalLength])<span><a class="mark" href="#buffer_class_method_buffer_concat_list_totallength" id="buffer_class_method_buffer_concat_list_totallength">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.7.11</span>
</div><ul>
<li><code>list</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" class="type">&lt;Array&gt;</a> List of Buffer objects to concat</li>
<li><code>totalLength</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Total length of the Buffers in the list
when concatenated</li>
<li>Return: <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
</ul>
<p>Returns a new Buffer which is the result of concatenating all the Buffers in
the <code>list</code> together.</p>
<p>If the list has no items, or if the <code>totalLength</code> is 0, then a new zero-length
Buffer is returned.</p>
<p>If <code>totalLength</code> is not provided, it is calculated from the Buffers in the
<code>list</code>. This, however, adds an additional loop to the function, so it is faster
to provide the length explicitly.</p>
<p>Example: build a single Buffer from a list of three Buffers:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf1 <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">alloc</span><span class="sh_symbol">(</span><span class="sh_number">10</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> buf2 <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">alloc</span><span class="sh_symbol">(</span><span class="sh_number">14</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> buf3 <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">alloc</span><span class="sh_symbol">(</span><span class="sh_number">18</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> totalLength <span class="sh_symbol">=</span> buf1<span class="sh_symbol">.</span>length <span class="sh_symbol">+</span> buf2<span class="sh_symbol">.</span>length <span class="sh_symbol">+</span> buf3<span class="sh_symbol">.</span>length<span class="sh_symbol">;</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>totalLength<span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> bufA <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">concat</span><span class="sh_symbol">([</span>buf1<span class="sh_symbol">,</span> buf2<span class="sh_symbol">,</span> buf3<span class="sh_symbol">],</span> totalLength<span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>bufA<span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>bufA<span class="sh_symbol">.</span>length<span class="sh_symbol">);</span>

<span class="sh_comment">// 42</span>
<span class="sh_comment">// &lt;Buffer 00 00 00 00 ...&gt;</span>
<span class="sh_comment">// 42</span>
</code></pre>
<h3>Class Method: Buffer.from(array)<span><a class="mark" href="#buffer_class_method_buffer_from_array" id="buffer_class_method_buffer_from_array">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v3.0.0</span>
</div><ul>
<li><code>array</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" class="type">&lt;Array&gt;</a></li>
</ul>
<p>Allocates a new <code>Buffer</code> using an <code>array</code> of octets.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">([</span><span class="sh_number">0x62</span><span class="sh_symbol">,</span><span class="sh_number">0x75</span><span class="sh_symbol">,</span><span class="sh_number">0x66</span><span class="sh_symbol">,</span><span class="sh_number">0x66</span><span class="sh_symbol">,</span><span class="sh_number">0x65</span><span class="sh_symbol">,</span><span class="sh_number">0x72</span><span class="sh_symbol">]);</span>
  <span class="sh_comment">// creates a new Buffer containing ASCII bytes</span>
  <span class="sh_comment">// ['b','u','f','f','e','r']</span>
</code></pre>
<p>A <code>TypeError</code> will be thrown if <code>array</code> is not an <code>Array</code>.</p>
<h3>Class Method: Buffer.from(arrayBuffer[, byteOffset[, length]])<span><a class="mark" href="#buffer_class_method_buffer_from_arraybuffer_byteoffset_length" id="buffer_class_method_buffer_from_arraybuffer_byteoffset_length">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v5.10.0</span>
</div><ul>
<li><code>arrayBuffer</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" class="type">&lt;ArrayBuffer&gt;</a> The <code>.buffer</code> property of a <code>TypedArray</code> or
a <code>new ArrayBuffer()</code></li>
<li><code>byteOffset</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Default: <code>0</code></li>
<li><code>length</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Default: <code>arrayBuffer.length - byteOffset</code></li>
</ul>
<p>When passed a reference to the <code>.buffer</code> property of a <code>TypedArray</code> instance,
the newly created <code>Buffer</code> will share the same allocated memory as the
TypedArray.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> arr <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Uint16Array</span><span class="sh_symbol">(</span><span class="sh_number">2</span><span class="sh_symbol">);</span>
arr<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">5000</span><span class="sh_symbol">;</span>
arr<span class="sh_symbol">[</span><span class="sh_number">1</span><span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">4000</span><span class="sh_symbol">;</span>

<span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span>arr<span class="sh_symbol">.</span>buffer<span class="sh_symbol">);</span> <span class="sh_comment">// shares the memory with arr;</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: &lt;Buffer 88 13 a0 0f&gt;</span>

<span class="sh_comment">// changing the TypedArray changes the Buffer also</span>
arr<span class="sh_symbol">[</span><span class="sh_number">1</span><span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">6000</span><span class="sh_symbol">;</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: &lt;Buffer 88 13 70 17&gt;</span>
</code></pre>
<p>The optional <code>byteOffset</code> and <code>length</code> arguments specify a memory range within
the <code>arrayBuffer</code> that will be shared by the <code>Buffer</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> ab <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">ArrayBuffer</span><span class="sh_symbol">(</span><span class="sh_number">10</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span>ab<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_number">2</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">.</span>length<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: 2</span>
</code></pre>
<p>A <code>TypeError</code> will be thrown if <code>arrayBuffer</code> is not an <code>ArrayBuffer</code>.</p>
<h3>Class Method: Buffer.from(buffer)<span><a class="mark" href="#buffer_class_method_buffer_from_buffer" id="buffer_class_method_buffer_from_buffer">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v3.0.0</span>
</div><ul>
<li><code>buffer</code> <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
</ul>
<p>Copies the passed <code>buffer</code> data onto a new <code>Buffer</code> instance.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf1 <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'buffer'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> buf2 <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span>buf1<span class="sh_symbol">);</span>

buf1<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">0x61</span><span class="sh_symbol">;</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf1<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">());</span>
  <span class="sh_comment">// 'auffer'</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf2<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">());</span>
  <span class="sh_comment">// 'buffer' (copy is not changed)</span>
</code></pre>
<p>A <code>TypeError</code> will be thrown if <code>buffer</code> is not a <code>Buffer</code>.</p>
<h3>Class Method: Buffer.from(str[, encoding])<span><a class="mark" href="#buffer_class_method_buffer_from_str_encoding" id="buffer_class_method_buffer_from_str_encoding">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v5.10.0</span>
</div><ul>
<li><code>str</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> String to encode.</li>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> Encoding to use, Default: <code>'utf8'</code></li>
</ul>
<p>Creates a new <code>Buffer</code> containing the given JavaScript string <code>str</code>. If
provided, the <code>encoding</code> parameter identifies the character encoding.
If not provided, <code>encoding</code> defaults to <code>'utf8'</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf1 <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'this is a tést'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf1<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">());</span>
  <span class="sh_comment">// prints: this is a tést</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf1<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_string">'ascii'</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// prints: this is a tC)st</span>

<span class="sh_keyword">const</span> buf2 <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'7468697320697320612074c3a97374'</span><span class="sh_symbol">,</span> <span class="sh_string">'hex'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf2<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">());</span>
  <span class="sh_comment">// prints: this is a tést</span>
</code></pre>
<p>A <code>TypeError</code> will be thrown if <code>str</code> is not a string.</p>
<h3>Class Method: Buffer.isBuffer(obj)<span><a class="mark" href="#buffer_class_method_buffer_isbuffer_obj" id="buffer_class_method_buffer_isbuffer_obj">#</a></span></h3>
<div class="signature"><ul>
<li><code>obj</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a></li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a></li>
</ul>
</div><p>Returns 'true' if <code>obj</code> is a Buffer.</p>
<h3>Class Method: Buffer.isEncoding(encoding)<span><a class="mark" href="#buffer_class_method_buffer_isencoding_encoding" id="buffer_class_method_buffer_isencoding_encoding">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.9.1</span>
</div><ul>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The encoding string to test</li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a></li>
</ul>
<p>Returns true if the <code>encoding</code> is a valid encoding argument, or false
otherwise.</p>
<h3>buf[index]<span><a class="mark" href="#buffer_buf_index" id="buffer_buf_index">#</a></span></h3>
<div class="api_metadata">
</div><p>The index operator <code>[index]</code> can be used to get and set the octet at position
<code>index</code> in the Buffer. The values refer to individual bytes, so the legal value
range is between <code>0x00</code> and <code>0xFF</code> (hex) or <code>0</code> and <code>255</code> (decimal).</p>
<p>Example: copy an ASCII string into a Buffer, one byte at a time:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> str <span class="sh_symbol">=</span> <span class="sh_string">"Node.js"</span><span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">allocUnsafe</span><span class="sh_symbol">(</span>str<span class="sh_symbol">.</span>length<span class="sh_symbol">);</span>

<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>let i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> str<span class="sh_symbol">.</span>length <span class="sh_symbol">;</span> i<span class="sh_symbol">++)</span> <span class="sh_cbracket">{</span>
  buf<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> str<span class="sh_symbol">.</span><span class="sh_function">charCodeAt</span><span class="sh_symbol">(</span>i<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_string">'ascii'</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// Prints: Node.js</span>
</code></pre>
<h3>buf.compare(target[, targetStart[, targetEnd[, sourceStart[, sourceEnd]]]])<span><a class="mark" href="#buffer_buf_compare_target_targetstart_targetend_sourcestart_sourceend" id="buffer_buf_compare_target_targetstart_targetend_sourcestart_sourceend">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.11.13</span>
</div><ul>
<li><code>target</code> <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>targetStart</code> <span class="type">&lt;Integer&gt;</span> The offset within <code>target</code> at which to begin
comparison. default = <code>0</code>.</li>
<li><code>targetEnd</code> <span class="type">&lt;Integer&gt;</span> The offset with <code>target</code> at which to end comparison.
Ignored when <code>targetStart</code> is <code>undefined</code>. default = <code>target.byteLength</code>.</li>
<li><code>sourceStart</code> <span class="type">&lt;Integer&gt;</span> The offset within <code>buf</code> at which to begin comparison.
Ignored when <code>targetStart</code> is <code>undefined</code>. default = <code>0</code></li>
<li><code>sourceEnd</code> <span class="type">&lt;Integer&gt;</span> The offset within <code>buf</code> at which to end comparison.
Ignored when <code>targetStart</code> is <code>undefined</code>. default = <code>buf.byteLength</code>.</li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
</ul>
<p>Compares two Buffer instances and returns a number indicating whether <code>buf</code>
comes before, after, or is the same as the <code>target</code> in sort order.
Comparison is based on the actual sequence of bytes in each Buffer.</p>
<ul>
<li><code>0</code> is returned if <code>target</code> is the same as <code>buf</code></li>
<li><code>1</code> is returned if <code>target</code> should come <em>before</em> <code>buf</code> when sorted.</li>
<li><code>-1</code> is returned if <code>target</code> should come <em>after</em> <code>buf</code> when sorted.</li>
</ul>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf1 <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'ABC'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> buf2 <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'BCD'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> buf3 <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'ABCD'</span><span class="sh_symbol">);</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf1<span class="sh_symbol">.</span><span class="sh_function">compare</span><span class="sh_symbol">(</span>buf1<span class="sh_symbol">));</span>
  <span class="sh_comment">// Prints: 0</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf1<span class="sh_symbol">.</span><span class="sh_function">compare</span><span class="sh_symbol">(</span>buf2<span class="sh_symbol">));</span>
  <span class="sh_comment">// Prints: -1</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf1<span class="sh_symbol">.</span><span class="sh_function">compare</span><span class="sh_symbol">(</span>buf3<span class="sh_symbol">));</span>
  <span class="sh_comment">// Prints: 1</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf2<span class="sh_symbol">.</span><span class="sh_function">compare</span><span class="sh_symbol">(</span>buf1<span class="sh_symbol">));</span>
  <span class="sh_comment">// Prints: 1</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf2<span class="sh_symbol">.</span><span class="sh_function">compare</span><span class="sh_symbol">(</span>buf3<span class="sh_symbol">));</span>
  <span class="sh_comment">// Prints: 1</span>

<span class="sh_symbol">[</span>buf1<span class="sh_symbol">,</span> buf2<span class="sh_symbol">,</span> buf3<span class="sh_symbol">].</span><span class="sh_function">sort</span><span class="sh_symbol">(</span>Buffer<span class="sh_symbol">.</span>compare<span class="sh_symbol">);</span>
  <span class="sh_comment">// produces sort order [buf1, buf3, buf2]</span>
</code></pre>
<p>The optional <code>targetStart</code>, <code>targetEnd</code>, <code>sourceStart</code>, and <code>sourceEnd</code>
arguments can be used to limit the comparison to specific ranges within the two
<code>Buffer</code> objects.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf1 <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">([</span><span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_number">2</span><span class="sh_symbol">,</span> <span class="sh_number">3</span><span class="sh_symbol">,</span> <span class="sh_number">4</span><span class="sh_symbol">,</span> <span class="sh_number">5</span><span class="sh_symbol">,</span> <span class="sh_number">6</span><span class="sh_symbol">,</span> <span class="sh_number">7</span><span class="sh_symbol">,</span> <span class="sh_number">8</span><span class="sh_symbol">,</span> <span class="sh_number">9</span><span class="sh_symbol">]);</span>
<span class="sh_keyword">const</span> buf2 <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">([</span><span class="sh_number">5</span><span class="sh_symbol">,</span> <span class="sh_number">6</span><span class="sh_symbol">,</span> <span class="sh_number">7</span><span class="sh_symbol">,</span> <span class="sh_number">8</span><span class="sh_symbol">,</span> <span class="sh_number">9</span><span class="sh_symbol">,</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_number">2</span><span class="sh_symbol">,</span> <span class="sh_number">3</span><span class="sh_symbol">,</span> <span class="sh_number">4</span><span class="sh_symbol">]);</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf1<span class="sh_symbol">.</span><span class="sh_function">compare</span><span class="sh_symbol">(</span>buf2<span class="sh_symbol">,</span> <span class="sh_number">5</span><span class="sh_symbol">,</span> <span class="sh_number">9</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_number">4</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// Prints: 0</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf1<span class="sh_symbol">.</span><span class="sh_function">compare</span><span class="sh_symbol">(</span>buf2<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_number">6</span><span class="sh_symbol">,</span> <span class="sh_number">4</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// Prints: -1</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf1<span class="sh_symbol">.</span><span class="sh_function">compare</span><span class="sh_symbol">(</span>buf2<span class="sh_symbol">,</span> <span class="sh_number">5</span><span class="sh_symbol">,</span> <span class="sh_number">6</span><span class="sh_symbol">,</span> <span class="sh_number">5</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// Prints: 1</span>
</code></pre>
<p>A <code>RangeError</code> will be thrown if: <code>targetStart &lt; 0</code>, <code>sourceStart &lt; 0</code>,
<code>targetEnd &gt; target.byteLength</code> or <code>sourceEnd &gt; source.byteLength</code>.</p>
<h3>buf.copy(targetBuffer[, targetStart[, sourceStart[, sourceEnd]]])<span><a class="mark" href="#buffer_buf_copy_targetbuffer_targetstart_sourcestart_sourceend" id="buffer_buf_copy_targetbuffer_targetstart_sourcestart_sourceend">#</a></span></h3>
<div class="signature"><ul>
<li><code>targetBuffer</code> <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> Buffer to copy into</li>
<li><code>targetStart</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Default: 0</li>
<li><code>sourceStart</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Default: 0</li>
<li><code>sourceEnd</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Default: <code>buffer.length</code></li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> The number of bytes copied.</li>
</ul>
</div><p>Copies data from a region of this Buffer to a region in the target Buffer even
if the target memory region overlaps with the source.</p>
<p>Example: build two Buffers, then copy <code>buf1</code> from byte 16 through byte 19
into <code>buf2</code>, starting at the 8th byte in <code>buf2</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf1 <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">allocUnsafe</span><span class="sh_symbol">(</span><span class="sh_number">26</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> buf2 <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">allocUnsafe</span><span class="sh_symbol">(</span><span class="sh_number">26</span><span class="sh_symbol">).</span><span class="sh_function">fill</span><span class="sh_symbol">(</span><span class="sh_string">'!'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>let i <span class="sh_symbol">=</span> <span class="sh_number">0</span> <span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> <span class="sh_number">26</span> <span class="sh_symbol">;</span> i<span class="sh_symbol">++)</span> <span class="sh_cbracket">{</span>
  buf1<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> i <span class="sh_symbol">+</span> <span class="sh_number">97</span><span class="sh_symbol">;</span> <span class="sh_comment">// 97 is ASCII a</span>
<span class="sh_cbracket">}</span>

buf1<span class="sh_symbol">.</span><span class="sh_function">copy</span><span class="sh_symbol">(</span>buf2<span class="sh_symbol">,</span> <span class="sh_number">8</span><span class="sh_symbol">,</span> <span class="sh_number">16</span><span class="sh_symbol">,</span> <span class="sh_number">20</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf2<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_string">'ascii'</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_number">25</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// Prints: !!!!!!!!qrst!!!!!!!!!!!!!</span>
</code></pre>
<p>Example: Build a single Buffer, then copy data from one region to an overlapping
region in the same Buffer</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">allocUnsafe</span><span class="sh_symbol">(</span><span class="sh_number">26</span><span class="sh_symbol">);</span>

<span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_keyword">var</span> i <span class="sh_symbol">=</span> <span class="sh_number">0</span> <span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> <span class="sh_number">26</span> <span class="sh_symbol">;</span> i<span class="sh_symbol">++)</span> <span class="sh_cbracket">{</span>
  buf<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> i <span class="sh_symbol">+</span> <span class="sh_number">97</span><span class="sh_symbol">;</span> <span class="sh_comment">// 97 is ASCII a</span>
<span class="sh_cbracket">}</span>

buf<span class="sh_symbol">.</span><span class="sh_function">copy</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_number">4</span><span class="sh_symbol">,</span> <span class="sh_number">10</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">());</span>

<span class="sh_comment">// efghijghijklmnopqrstuvwxyz</span>
</code></pre>
<h3>buf.entries()<span><a class="mark" href="#buffer_buf_entries" id="buffer_buf_entries">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v1.1.0</span>
</div><ul>
<li>Return: <span class="type">&lt;Iterator&gt;</span></li>
</ul>
<p>Creates and returns an <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols">iterator</a> of <code>[index, byte]</code> pairs from the Buffer
contents.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'buffer'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_keyword">var</span> pair of buf<span class="sh_symbol">.</span><span class="sh_function">entries</span><span class="sh_symbol">())</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>pair<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>
<span class="sh_comment">// prints:</span>
<span class="sh_comment">//   [0, 98]</span>
<span class="sh_comment">//   [1, 117]</span>
<span class="sh_comment">//   [2, 102]</span>
<span class="sh_comment">//   [3, 102]</span>
<span class="sh_comment">//   [4, 101]</span>
<span class="sh_comment">//   [5, 114]</span>
</code></pre>
<h3>buf.equals(otherBuffer)<span><a class="mark" href="#buffer_buf_equals_otherbuffer" id="buffer_buf_equals_otherbuffer">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v1.0.0</span>
</div><ul>
<li><code>otherBuffer</code> <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a></li>
</ul>
<p>Returns a boolean indicating whether <code>this</code> and <code>otherBuffer</code> have exactly the
same bytes.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf1 <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'ABC'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> buf2 <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'414243'</span><span class="sh_symbol">,</span> <span class="sh_string">'hex'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> buf3 <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'ABCD'</span><span class="sh_symbol">);</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf1<span class="sh_symbol">.</span><span class="sh_function">equals</span><span class="sh_symbol">(</span>buf2<span class="sh_symbol">));</span>
  <span class="sh_comment">// Prints: true</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf1<span class="sh_symbol">.</span><span class="sh_function">equals</span><span class="sh_symbol">(</span>buf3<span class="sh_symbol">));</span>
  <span class="sh_comment">// Prints: false</span>
</code></pre>
<h3>buf.fill(value[, offset[, end]][, encoding])<span><a class="mark" href="#buffer_buf_fill_value_offset_end_encoding" id="buffer_buf_fill_value_offset_end_encoding">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.5.0</span>
</div><ul>
<li><code>value</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
<li><code>offset</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Default: 0</li>
<li><code>end</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Default: <code>buf.length</code></li>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> Default: <code>'utf8'</code></li>
<li>Return: <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
</ul>
<p>Fills the Buffer with the specified value. If the <code>offset</code> (defaults to <code>0</code>)
and <code>end</code> (defaults to <code>buf.length</code>) are not given the entire buffer will be
filled. The method returns a reference to the Buffer, so calls can be chained.
This is meant as a small simplification to creating a Buffer. Allowing the
creation and fill of the Buffer to be done on a single line:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> b <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">allocUnsafe</span><span class="sh_symbol">(</span><span class="sh_number">50</span><span class="sh_symbol">).</span><span class="sh_function">fill</span><span class="sh_symbol">(</span><span class="sh_string">'h'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>b<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">());</span>
  <span class="sh_comment">// Prints: hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh</span>
</code></pre>
<p><code>encoding</code> is only relevant if <code>value</code> is a string. Otherwise it is ignored.
<code>value</code> is coerced to a <code>uint32</code> value if it is not a String or Number.</p>
<p>The <code>fill()</code> operation writes bytes into the Buffer dumbly. If the final write
falls in between a multi-byte character then whatever bytes fit into the buffer
are written.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_function">Buffer</span><span class="sh_symbol">(</span><span class="sh_number">3</span><span class="sh_symbol">).</span><span class="sh_function">fill</span><span class="sh_symbol">(</span><span class="sh_string">'</span><span class="sh_specialchar">\u</span><span class="sh_string">0222'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: &lt;Buffer c8 a2 c8&gt;</span>
</code></pre>
<h3>buf.indexOf(value[, byteOffset][, encoding])<span><a class="mark" href="#buffer_buf_indexof_value_byteoffset_encoding" id="buffer_buf_indexof_value_byteoffset_encoding">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v1.5.0</span>
</div><ul>
<li><code>value</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
<li><code>byteOffset</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Default: 0</li>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> Default: <code>'utf8'</code></li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
</ul>
<p>Operates similar to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf"><code>Array#indexOf()</code></a> in that it returns either the
starting index position of <code>value</code> in Buffer or <code>-1</code> if the Buffer does not
contain <code>value</code>. The <code>value</code> can be a String, Buffer or Number. Strings are by
default interpreted as UTF8. Buffers will use the entire Buffer (to compare a
partial Buffer use <a href="#buffer_buf_slice_start_end"><code>buf.slice()</code></a>).  Numbers can range from 0 to 255.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'this is a buffer'</span><span class="sh_symbol">);</span>

buf<span class="sh_symbol">.</span><span class="sh_function">indexOf</span><span class="sh_symbol">(</span><span class="sh_string">'this'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// returns 0</span>
buf<span class="sh_symbol">.</span><span class="sh_function">indexOf</span><span class="sh_symbol">(</span><span class="sh_string">'is'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// returns 2</span>
buf<span class="sh_symbol">.</span><span class="sh_function">indexOf</span><span class="sh_symbol">(</span>Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'a buffer'</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// returns 8</span>
buf<span class="sh_symbol">.</span><span class="sh_function">indexOf</span><span class="sh_symbol">(</span><span class="sh_number">97</span><span class="sh_symbol">);</span> <span class="sh_comment">// ascii for 'a'</span>
  <span class="sh_comment">// returns 8</span>
buf<span class="sh_symbol">.</span><span class="sh_function">indexOf</span><span class="sh_symbol">(</span>Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'a buffer example'</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// returns -1</span>
buf<span class="sh_symbol">.</span><span class="sh_function">indexOf</span><span class="sh_symbol">(</span>Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'a buffer example'</span><span class="sh_symbol">).</span><span class="sh_function">slice</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">,</span><span class="sh_number">8</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// returns 8</span>

<span class="sh_keyword">const</span> utf16Buffer <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'</span><span class="sh_specialchar">\u</span><span class="sh_string">039a</span><span class="sh_specialchar">\u</span><span class="sh_string">0391</span><span class="sh_specialchar">\u</span><span class="sh_string">03a3</span><span class="sh_specialchar">\u</span><span class="sh_string">03a3</span><span class="sh_specialchar">\u</span><span class="sh_string">0395'</span><span class="sh_symbol">,</span> <span class="sh_string">'ucs2'</span><span class="sh_symbol">);</span>

utf16Buffer<span class="sh_symbol">.</span><span class="sh_function">indexOf</span><span class="sh_symbol">(</span><span class="sh_string">'</span><span class="sh_specialchar">\u</span><span class="sh_string">03a3'</span><span class="sh_symbol">,</span>  <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_string">'ucs2'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// returns 4</span>
utf16Buffer<span class="sh_symbol">.</span><span class="sh_function">indexOf</span><span class="sh_symbol">(</span><span class="sh_string">'</span><span class="sh_specialchar">\u</span><span class="sh_string">03a3'</span><span class="sh_symbol">,</span> <span class="sh_symbol">-</span><span class="sh_number">4</span><span class="sh_symbol">,</span> <span class="sh_string">'ucs2'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// returns 6</span>
</code></pre>
<h3>buf.includes(value[, byteOffset][, encoding])<span><a class="mark" href="#buffer_buf_includes_value_byteoffset_encoding" id="buffer_buf_includes_value_byteoffset_encoding">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v5.3.0</span>
</div><ul>
<li><code>value</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
<li><code>byteOffset</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Default: 0</li>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> Default: <code>'utf8'</code></li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a></li>
</ul>
<p>Operates similar to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes"><code>Array#includes()</code></a>. The <code>value</code> can be a String, Buffer
or Number. Strings are interpreted as UTF8 unless overridden with the
<code>encoding</code> argument. Buffers will use the entire Buffer (to compare a partial
Buffer use <a href="#buffer_buf_slice_start_end"><code>buf.slice()</code></a>). Numbers can range from 0 to 255.</p>
<p>The <code>byteOffset</code> indicates the index in <code>buf</code> where searching begins.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'this is a buffer'</span><span class="sh_symbol">);</span>

buf<span class="sh_symbol">.</span><span class="sh_function">includes</span><span class="sh_symbol">(</span><span class="sh_string">'this'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// returns true</span>
buf<span class="sh_symbol">.</span><span class="sh_function">includes</span><span class="sh_symbol">(</span><span class="sh_string">'is'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// returns true</span>
buf<span class="sh_symbol">.</span><span class="sh_function">includes</span><span class="sh_symbol">(</span>Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'a buffer'</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// returns true</span>
buf<span class="sh_symbol">.</span><span class="sh_function">includes</span><span class="sh_symbol">(</span><span class="sh_number">97</span><span class="sh_symbol">);</span> <span class="sh_comment">// ascii for 'a'</span>
  <span class="sh_comment">// returns true</span>
buf<span class="sh_symbol">.</span><span class="sh_function">includes</span><span class="sh_symbol">(</span>Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'a buffer example'</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// returns false</span>
buf<span class="sh_symbol">.</span><span class="sh_function">includes</span><span class="sh_symbol">(</span>Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'a buffer example'</span><span class="sh_symbol">).</span><span class="sh_function">slice</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">,</span><span class="sh_number">8</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// returns true</span>
buf<span class="sh_symbol">.</span><span class="sh_function">includes</span><span class="sh_symbol">(</span><span class="sh_string">'this'</span><span class="sh_symbol">,</span> <span class="sh_number">4</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// returns false</span>
</code></pre>
<h3>buf.keys()<span><a class="mark" href="#buffer_buf_keys" id="buffer_buf_keys">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v1.1.0</span>
</div><ul>
<li>Return: <span class="type">&lt;Iterator&gt;</span></li>
</ul>
<p>Creates and returns an <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols">iterator</a> of Buffer keys (indices).</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'buffer'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_keyword">var</span> key of buf<span class="sh_symbol">.</span><span class="sh_function">keys</span><span class="sh_symbol">())</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>key<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>
<span class="sh_comment">// prints:</span>
<span class="sh_comment">//   0</span>
<span class="sh_comment">//   1</span>
<span class="sh_comment">//   2</span>
<span class="sh_comment">//   3</span>
<span class="sh_comment">//   4</span>
<span class="sh_comment">//   5</span>
</code></pre>
<h3>buf.lastIndexOf(value[, byteOffset][, encoding])<span><a class="mark" href="#buffer_buf_lastindexof_value_byteoffset_encoding" id="buffer_buf_lastindexof_value_byteoffset_encoding">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v6.0.0</span>
</div><ul>
<li><code>value</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
<li><code>byteOffset</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Default: <code>buf.length</code></li>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> Default: <code>'utf8'</code></li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
</ul>
<p>Identical to <a href="#buffer_buf_indexof_value_byteoffset_encoding"><code>Buffer#indexOf()</code></a>, but searches the Buffer from back to front
instead of front to back. Returns the starting index position of <code>value</code> in
Buffer or <code>-1</code> if the Buffer does not contain <code>value</code>. The <code>value</code> can be a
String, Buffer or Number. Strings are by default interpreted as UTF8. If
<code>byteOffset</code> is provided, will return the last match that begins at or before
<code>byteOffset</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Buffer</span><span class="sh_symbol">(</span><span class="sh_string">'this buffer is a buffer'</span><span class="sh_symbol">);</span>

buf<span class="sh_symbol">.</span><span class="sh_function">lastIndexOf</span><span class="sh_symbol">(</span><span class="sh_string">'this'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// returns 0</span>
buf<span class="sh_symbol">.</span><span class="sh_function">lastIndexOf</span><span class="sh_symbol">(</span><span class="sh_string">'buffer'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// returns 17</span>
buf<span class="sh_symbol">.</span><span class="sh_function">lastIndexOf</span><span class="sh_symbol">(</span><span class="sh_keyword">new</span> <span class="sh_function">Buffer</span><span class="sh_symbol">(</span><span class="sh_string">'buffer'</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// returns 17</span>
buf<span class="sh_symbol">.</span><span class="sh_function">lastIndexOf</span><span class="sh_symbol">(</span><span class="sh_number">97</span><span class="sh_symbol">);</span> <span class="sh_comment">// ascii for 'a'</span>
  <span class="sh_comment">// returns 15</span>
buf<span class="sh_symbol">.</span><span class="sh_function">lastIndexOf</span><span class="sh_symbol">(</span><span class="sh_keyword">new</span> <span class="sh_function">Buffer</span><span class="sh_symbol">(</span><span class="sh_string">'yolo'</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// returns -1</span>
buf<span class="sh_symbol">.</span><span class="sh_function">lastIndexOf</span><span class="sh_symbol">(</span><span class="sh_string">'buffer'</span><span class="sh_symbol">,</span> <span class="sh_number">5</span><span class="sh_symbol">)</span>
  <span class="sh_comment">// returns 5</span>
buf<span class="sh_symbol">.</span><span class="sh_function">lastIndexOf</span><span class="sh_symbol">(</span><span class="sh_string">'buffer'</span><span class="sh_symbol">,</span> <span class="sh_number">4</span><span class="sh_symbol">)</span>
  <span class="sh_comment">// returns -1</span>

<span class="sh_keyword">const</span> utf16Buffer <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Buffer</span><span class="sh_symbol">(</span><span class="sh_string">'</span><span class="sh_specialchar">\u</span><span class="sh_string">039a</span><span class="sh_specialchar">\u</span><span class="sh_string">0391</span><span class="sh_specialchar">\u</span><span class="sh_string">03a3</span><span class="sh_specialchar">\u</span><span class="sh_string">03a3</span><span class="sh_specialchar">\u</span><span class="sh_string">0395'</span><span class="sh_symbol">,</span> <span class="sh_string">'ucs2'</span><span class="sh_symbol">);</span>

utf16Buffer<span class="sh_symbol">.</span><span class="sh_function">lastIndexOf</span><span class="sh_symbol">(</span><span class="sh_string">'</span><span class="sh_specialchar">\u</span><span class="sh_string">03a3'</span><span class="sh_symbol">,</span> <span class="sh_keyword">null</span><span class="sh_symbol">,</span> <span class="sh_string">'ucs2'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// returns 6</span>
utf16Buffer<span class="sh_symbol">.</span><span class="sh_function">lastIndexOf</span><span class="sh_symbol">(</span><span class="sh_string">'</span><span class="sh_specialchar">\u</span><span class="sh_string">03a3'</span><span class="sh_symbol">,</span> <span class="sh_symbol">-</span><span class="sh_number">5</span><span class="sh_symbol">,</span> <span class="sh_string">'ucs2'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// returns 4</span>
</code></pre>
<h3>buf.length<span><a class="mark" href="#buffer_buf_length" id="buffer_buf_length">#</a></span></h3>
<div class="signature"><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
</ul>
</div><p>Returns the amount of memory allocated for the Buffer in number of bytes. Note
that this does not necessarily reflect the amount of usable data within the
Buffer. For instance, in the example below, a Buffer with 1234 bytes is
allocated, but only 11 ASCII bytes are written.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">alloc</span><span class="sh_symbol">(</span><span class="sh_number">1234</span><span class="sh_symbol">);</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">.</span>length<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: 1234</span>

buf<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'some string'</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_string">'ascii'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">.</span>length<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: 1234</span>
</code></pre>
<p>While the <code>length</code> property is not immutable, changing the value of <code>length</code>
can result in undefined and inconsistent behavior. Applications that wish to
modify the length of a Buffer should therefore treat <code>length</code> as read-only and
use <a href="#buffer_buf_slice_start_end"><code>buf.slice()</code></a> to create a new Buffer.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">var</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">allocUnsafe</span><span class="sh_symbol">(</span><span class="sh_number">10</span><span class="sh_symbol">);</span>
buf<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'abcdefghj'</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_string">'ascii'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">.</span>length<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: 10</span>
buf <span class="sh_symbol">=</span> buf<span class="sh_symbol">.</span><span class="sh_function">slice</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">,</span><span class="sh_number">5</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">.</span>length<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: 5</span>
</code></pre>
<h3>buf.readDoubleBE(offset[, noAssert])<span><a class="mark" href="#buffer_buf_readdoublebe_offset_noassert" id="buffer_buf_readdoublebe_offset_noassert">#</a></span></h3>
<h3>buf.readDoubleLE(offset[, noAssert])<span><a class="mark" href="#buffer_buf_readdoublele_offset_noassert" id="buffer_buf_readdoublele_offset_noassert">#</a></span></h3>
<div class="signature"><ul>
<li><code>offset</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 8</code></li>
<li><code>noAssert</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Default: false</li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
</ul>
</div><p>Reads a 64-bit double from the Buffer at the specified <code>offset</code> with specified
endian format (<code>readDoubleBE()</code> returns big endian, <code>readDoubleLE()</code> returns
little endian).</p>
<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the
<code>offset</code> to be beyond the end of the Buffer.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">([</span><span class="sh_number">1</span><span class="sh_symbol">,</span><span class="sh_number">2</span><span class="sh_symbol">,</span><span class="sh_number">3</span><span class="sh_symbol">,</span><span class="sh_number">4</span><span class="sh_symbol">,</span><span class="sh_number">5</span><span class="sh_symbol">,</span><span class="sh_number">6</span><span class="sh_symbol">,</span><span class="sh_number">7</span><span class="sh_symbol">,</span><span class="sh_number">8</span><span class="sh_symbol">]);</span>

buf<span class="sh_symbol">.</span><span class="sh_function">readDoubleBE</span><span class="sh_symbol">();</span>
  <span class="sh_comment">// Returns: 8.20788039913184e-304</span>
buf<span class="sh_symbol">.</span><span class="sh_function">readDoubleLE</span><span class="sh_symbol">();</span>
  <span class="sh_comment">// Returns: 5.447603722011605e-270</span>
buf<span class="sh_symbol">.</span><span class="sh_function">readDoubleLE</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// throws RangeError: Index out of range</span>

buf<span class="sh_symbol">.</span><span class="sh_function">readDoubleLE</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_keyword">true</span><span class="sh_symbol">);</span> <span class="sh_comment">// Warning: reads passed end of buffer!</span>
  <span class="sh_comment">// Segmentation fault! don't do this!</span>
</code></pre>
<h3>buf.readFloatBE(offset[, noAssert])<span><a class="mark" href="#buffer_buf_readfloatbe_offset_noassert" id="buffer_buf_readfloatbe_offset_noassert">#</a></span></h3>
<h3>buf.readFloatLE(offset[, noAssert])<span><a class="mark" href="#buffer_buf_readfloatle_offset_noassert" id="buffer_buf_readfloatle_offset_noassert">#</a></span></h3>
<div class="signature"><ul>
<li><code>offset</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 4</code></li>
<li><code>noAssert</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Default: false</li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
</ul>
</div><p>Reads a 32-bit float from the Buffer at the specified <code>offset</code> with specified
endian format (<code>readFloatBE()</code> returns big endian, <code>readFloatLE()</code> returns
little endian).</p>
<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the
<code>offset</code> to be beyond the end of the Buffer.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">([</span><span class="sh_number">1</span><span class="sh_symbol">,</span><span class="sh_number">2</span><span class="sh_symbol">,</span><span class="sh_number">3</span><span class="sh_symbol">,</span><span class="sh_number">4</span><span class="sh_symbol">]);</span>

buf<span class="sh_symbol">.</span><span class="sh_function">readFloatBE</span><span class="sh_symbol">();</span>
  <span class="sh_comment">// Returns: 2.387939260590663e-38</span>
buf<span class="sh_symbol">.</span><span class="sh_function">readFloatLE</span><span class="sh_symbol">();</span>
  <span class="sh_comment">// Returns: 1.539989614439558e-36</span>
buf<span class="sh_symbol">.</span><span class="sh_function">readFloatLE</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// throws RangeError: Index out of range</span>

buf<span class="sh_symbol">.</span><span class="sh_function">readFloatLE</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_keyword">true</span><span class="sh_symbol">);</span> <span class="sh_comment">// Warning: reads passed end of buffer!</span>
  <span class="sh_comment">// Segmentation fault! don't do this!</span>
</code></pre>
<h3>buf.readInt8(offset[, noAssert])<span><a class="mark" href="#buffer_buf_readint8_offset_noassert" id="buffer_buf_readint8_offset_noassert">#</a></span></h3>
<div class="signature"><ul>
<li><code>offset</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 1</code></li>
<li><code>noAssert</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Default: false</li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
</ul>
</div><p>Reads a signed 8-bit integer from the Buffer at the specified <code>offset</code>.</p>
<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the
<code>offset</code> to be beyond the end of the Buffer.</p>
<p>Integers read from the Buffer are interpreted as two's complement signed values.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">([</span><span class="sh_number">1</span><span class="sh_symbol">,-</span><span class="sh_number">2</span><span class="sh_symbol">,</span><span class="sh_number">3</span><span class="sh_symbol">,</span><span class="sh_number">4</span><span class="sh_symbol">]);</span>

buf<span class="sh_symbol">.</span><span class="sh_function">readInt8</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// returns 1</span>
buf<span class="sh_symbol">.</span><span class="sh_function">readInt8</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// returns -2</span>
</code></pre>
<h3>buf.readInt16BE(offset[, noAssert])<span><a class="mark" href="#buffer_buf_readint16be_offset_noassert" id="buffer_buf_readint16be_offset_noassert">#</a></span></h3>
<h3>buf.readInt16LE(offset[, noAssert])<span><a class="mark" href="#buffer_buf_readint16le_offset_noassert" id="buffer_buf_readint16le_offset_noassert">#</a></span></h3>
<div class="signature"><ul>
<li><code>offset</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 2</code></li>
<li><code>noAssert</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Default: false</li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
</ul>
</div><p>Reads a signed 16-bit integer from the Buffer at the specified <code>offset</code> with
the specified endian format (<code>readInt16BE()</code> returns big endian,
<code>readInt16LE()</code> returns little endian).</p>
<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the
<code>offset</code> to be beyond the end of the Buffer.</p>
<p>Integers read from the Buffer are interpreted as two's complement signed values.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">([</span><span class="sh_number">1</span><span class="sh_symbol">,-</span><span class="sh_number">2</span><span class="sh_symbol">,</span><span class="sh_number">3</span><span class="sh_symbol">,</span><span class="sh_number">4</span><span class="sh_symbol">]);</span>

buf<span class="sh_symbol">.</span><span class="sh_function">readInt16BE</span><span class="sh_symbol">();</span>
  <span class="sh_comment">// returns 510</span>
buf<span class="sh_symbol">.</span><span class="sh_function">readInt16LE</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// returns 1022</span>
</code></pre>
<h3>buf.readInt32BE(offset[, noAssert])<span><a class="mark" href="#buffer_buf_readint32be_offset_noassert" id="buffer_buf_readint32be_offset_noassert">#</a></span></h3>
<h3>buf.readInt32LE(offset[, noAssert])<span><a class="mark" href="#buffer_buf_readint32le_offset_noassert" id="buffer_buf_readint32le_offset_noassert">#</a></span></h3>
<div class="signature"><ul>
<li><code>offset</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 4</code></li>
<li><code>noAssert</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Default: false</li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
</ul>
</div><p>Reads a signed 32-bit integer from the Buffer at the specified <code>offset</code> with
the specified endian format (<code>readInt32BE()</code> returns big endian,
<code>readInt32LE()</code> returns little endian).</p>
<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the
<code>offset</code> to be beyond the end of the Buffer.</p>
<p>Integers read from the Buffer are interpreted as two's complement signed values.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">([</span><span class="sh_number">1</span><span class="sh_symbol">,-</span><span class="sh_number">2</span><span class="sh_symbol">,</span><span class="sh_number">3</span><span class="sh_symbol">,</span><span class="sh_number">4</span><span class="sh_symbol">]);</span>

buf<span class="sh_symbol">.</span><span class="sh_function">readInt32BE</span><span class="sh_symbol">();</span>
  <span class="sh_comment">// returns 33424132</span>
buf<span class="sh_symbol">.</span><span class="sh_function">readInt32LE</span><span class="sh_symbol">();</span>
  <span class="sh_comment">// returns 67370497</span>
buf<span class="sh_symbol">.</span><span class="sh_function">readInt32LE</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// throws RangeError: Index out of range</span>
</code></pre>
<h3>buf.readIntBE(offset, byteLength[, noAssert])<span><a class="mark" href="#buffer_buf_readintbe_offset_bytelength_noassert" id="buffer_buf_readintbe_offset_bytelength_noassert">#</a></span></h3>
<h3>buf.readIntLE(offset, byteLength[, noAssert])<span><a class="mark" href="#buffer_buf_readintle_offset_bytelength_noassert" id="buffer_buf_readintle_offset_bytelength_noassert">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v1.0.0</span>
</div><ul>
<li><code>offset</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - byteLength</code></li>
<li><code>byteLength</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> <code>0 &lt; byteLength &lt;= 6</code></li>
<li><code>noAssert</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Default: false</li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
</ul>
<p>Reads <code>byteLength</code> number of bytes from the Buffer at the specified <code>offset</code>
and interprets the result as a two's complement signed value. Supports up to 48
bits of accuracy. For example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">allocUnsafe</span><span class="sh_symbol">(</span><span class="sh_number">6</span><span class="sh_symbol">);</span>
buf<span class="sh_symbol">.</span><span class="sh_function">writeUInt16LE</span><span class="sh_symbol">(</span><span class="sh_number">0x90ab</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">);</span>
buf<span class="sh_symbol">.</span><span class="sh_function">writeUInt32LE</span><span class="sh_symbol">(</span><span class="sh_number">0x12345678</span><span class="sh_symbol">,</span> <span class="sh_number">2</span><span class="sh_symbol">);</span>
buf<span class="sh_symbol">.</span><span class="sh_function">readIntLE</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_number">6</span><span class="sh_symbol">).</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_number">16</span><span class="sh_symbol">);</span>  <span class="sh_comment">// Specify 6 bytes (48 bits)</span>
<span class="sh_comment">// Returns: '1234567890ab'</span>

buf<span class="sh_symbol">.</span><span class="sh_function">readIntBE</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_number">6</span><span class="sh_symbol">).</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_number">16</span><span class="sh_symbol">);</span>
<span class="sh_comment">// Returns: -546f87a9cbee</span>
</code></pre>
<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the
<code>offset</code> to be beyond the end of the Buffer.</p>
<h3>buf.readUInt8(offset[, noAssert])<span><a class="mark" href="#buffer_buf_readuint8_offset_noassert" id="buffer_buf_readuint8_offset_noassert">#</a></span></h3>
<div class="signature"><ul>
<li><code>offset</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 1</code></li>
<li><code>noAssert</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Default: false</li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
</ul>
</div><p>Reads an unsigned 8-bit integer from the Buffer at the specified <code>offset</code>.</p>
<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the
<code>offset</code> to be beyond the end of the Buffer.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">([</span><span class="sh_number">1</span><span class="sh_symbol">,-</span><span class="sh_number">2</span><span class="sh_symbol">,</span><span class="sh_number">3</span><span class="sh_symbol">,</span><span class="sh_number">4</span><span class="sh_symbol">]);</span>

buf<span class="sh_symbol">.</span><span class="sh_function">readUInt8</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// returns 1</span>
buf<span class="sh_symbol">.</span><span class="sh_function">readUInt8</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// returns 254</span>
</code></pre>
<h3>buf.readUInt16BE(offset[, noAssert])<span><a class="mark" href="#buffer_buf_readuint16be_offset_noassert" id="buffer_buf_readuint16be_offset_noassert">#</a></span></h3>
<h3>buf.readUInt16LE(offset[, noAssert])<span><a class="mark" href="#buffer_buf_readuint16le_offset_noassert" id="buffer_buf_readuint16le_offset_noassert">#</a></span></h3>
<div class="signature"><ul>
<li><code>offset</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 2</code></li>
<li><code>noAssert</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Default: false</li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
</ul>
</div><p>Reads an unsigned 16-bit integer from the Buffer at the specified <code>offset</code> with
specified endian format (<code>readUInt16BE()</code> returns big endian,
<code>readUInt16LE()</code> returns little endian).</p>
<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the
<code>offset</code> to be beyond the end of the Buffer.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">([</span><span class="sh_number">0x3</span><span class="sh_symbol">,</span> <span class="sh_number">0x4</span><span class="sh_symbol">,</span> <span class="sh_number">0x23</span><span class="sh_symbol">,</span> <span class="sh_number">0x42</span><span class="sh_symbol">]);</span>

buf<span class="sh_symbol">.</span><span class="sh_function">readUInt16BE</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Returns: 0x0304</span>
buf<span class="sh_symbol">.</span><span class="sh_function">readUInt16LE</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Returns: 0x0403</span>
buf<span class="sh_symbol">.</span><span class="sh_function">readUInt16BE</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Returns: 0x0423</span>
buf<span class="sh_symbol">.</span><span class="sh_function">readUInt16LE</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Returns: 0x2304</span>
buf<span class="sh_symbol">.</span><span class="sh_function">readUInt16BE</span><span class="sh_symbol">(</span><span class="sh_number">2</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Returns: 0x2342</span>
buf<span class="sh_symbol">.</span><span class="sh_function">readUInt16LE</span><span class="sh_symbol">(</span><span class="sh_number">2</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Returns: 0x4223</span>
</code></pre>
<h3>buf.readUInt32BE(offset[, noAssert])<span><a class="mark" href="#buffer_buf_readuint32be_offset_noassert" id="buffer_buf_readuint32be_offset_noassert">#</a></span></h3>
<h3>buf.readUInt32LE(offset[, noAssert])<span><a class="mark" href="#buffer_buf_readuint32le_offset_noassert" id="buffer_buf_readuint32le_offset_noassert">#</a></span></h3>
<div class="signature"><ul>
<li><code>offset</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 4</code></li>
<li><code>noAssert</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Default: false</li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
</ul>
</div><p>Reads an unsigned 32-bit integer from the Buffer at the specified <code>offset</code> with
specified endian format (<code>readUInt32BE()</code> returns big endian,
<code>readUInt32LE()</code> returns little endian).</p>
<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the
<code>offset</code> to be beyond the end of the Buffer.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">([</span><span class="sh_number">0x3</span><span class="sh_symbol">,</span> <span class="sh_number">0x4</span><span class="sh_symbol">,</span> <span class="sh_number">0x23</span><span class="sh_symbol">,</span> <span class="sh_number">0x42</span><span class="sh_symbol">]);</span>

buf<span class="sh_symbol">.</span><span class="sh_function">readUInt32BE</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Returns: 0x03042342</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">.</span><span class="sh_function">readUInt32LE</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// Returns: 0x42230403</span>
</code></pre>
<h3>buf.readUIntBE(offset, byteLength[, noAssert])<span><a class="mark" href="#buffer_buf_readuintbe_offset_bytelength_noassert" id="buffer_buf_readuintbe_offset_bytelength_noassert">#</a></span></h3>
<h3>buf.readUIntLE(offset, byteLength[, noAssert])<span><a class="mark" href="#buffer_buf_readuintle_offset_bytelength_noassert" id="buffer_buf_readuintle_offset_bytelength_noassert">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v1.0.0</span>
</div><ul>
<li><code>offset</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - byteLength</code></li>
<li><code>byteLength</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> <code>0 &lt; byteLength &lt;= 6</code></li>
<li><code>noAssert</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Default: false</li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
</ul>
<p>Reads <code>byteLength</code> number of bytes from the Buffer at the specified <code>offset</code>
and interprets the result as an unsigned integer. Supports up to 48
bits of accuracy. For example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">allocUnsafe</span><span class="sh_symbol">(</span><span class="sh_number">6</span><span class="sh_symbol">);</span>
buf<span class="sh_symbol">.</span><span class="sh_function">writeUInt16LE</span><span class="sh_symbol">(</span><span class="sh_number">0x90ab</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">);</span>
buf<span class="sh_symbol">.</span><span class="sh_function">writeUInt32LE</span><span class="sh_symbol">(</span><span class="sh_number">0x12345678</span><span class="sh_symbol">,</span> <span class="sh_number">2</span><span class="sh_symbol">);</span>
buf<span class="sh_symbol">.</span><span class="sh_function">readUIntLE</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_number">6</span><span class="sh_symbol">).</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_number">16</span><span class="sh_symbol">);</span>  <span class="sh_comment">// Specify 6 bytes (48 bits)</span>
<span class="sh_comment">// Returns: '1234567890ab'</span>

buf<span class="sh_symbol">.</span><span class="sh_function">readUIntBE</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_number">6</span><span class="sh_symbol">).</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_number">16</span><span class="sh_symbol">);</span>
<span class="sh_comment">// Returns: ab9078563412</span>
</code></pre>
<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the
<code>offset</code> to be beyond the end of the Buffer.</p>
<h3>buf.slice([start[, end]])<span><a class="mark" href="#buffer_buf_slice_start_end" id="buffer_buf_slice_start_end">#</a></span></h3>
<div class="signature"><ul>
<li><code>start</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Default: 0</li>
<li><code>end</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Default: <code>buffer.length</code></li>
<li>Return: <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
</ul>
</div><p>Returns a new Buffer that references the same memory as the original, but
offset and cropped by the <code>start</code> and <code>end</code> indices.</p>
<p><strong>Note that modifying the new Buffer slice will modify the memory in the
original Buffer because the allocated memory of the two objects overlap.</strong></p>
<p>Example: build a Buffer with the ASCII alphabet, take a slice, then modify one
byte from the original Buffer.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf1 <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">allocUnsafe</span><span class="sh_symbol">(</span><span class="sh_number">26</span><span class="sh_symbol">);</span>

<span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_keyword">var</span> i <span class="sh_symbol">=</span> <span class="sh_number">0</span> <span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> <span class="sh_number">26</span> <span class="sh_symbol">;</span> i<span class="sh_symbol">++)</span> <span class="sh_cbracket">{</span>
  buf1<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> i <span class="sh_symbol">+</span> <span class="sh_number">97</span><span class="sh_symbol">;</span> <span class="sh_comment">// 97 is ASCII a</span>
<span class="sh_cbracket">}</span>

<span class="sh_keyword">const</span> buf2 <span class="sh_symbol">=</span> buf1<span class="sh_symbol">.</span><span class="sh_function">slice</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_number">3</span><span class="sh_symbol">);</span>
buf2<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_string">'ascii'</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> buf2<span class="sh_symbol">.</span>length<span class="sh_symbol">);</span>
  <span class="sh_comment">// Returns: 'abc'</span>
buf1<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">33</span><span class="sh_symbol">;</span>
buf2<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_string">'ascii'</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> buf2<span class="sh_symbol">.</span>length<span class="sh_symbol">);</span>
  <span class="sh_comment">// Returns : '!bc'</span>
</code></pre>
<p>Specifying negative indexes causes the slice to be generated relative to the
end of the Buffer rather than the beginning.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'buffer'</span><span class="sh_symbol">);</span>

buf<span class="sh_symbol">.</span><span class="sh_function">slice</span><span class="sh_symbol">(-</span><span class="sh_number">6</span><span class="sh_symbol">,</span> <span class="sh_symbol">-</span><span class="sh_number">1</span><span class="sh_symbol">).</span><span class="sh_function">toString</span><span class="sh_symbol">();</span>
  <span class="sh_comment">// Returns 'buffe', equivalent to buf.slice(0, 5)</span>
buf<span class="sh_symbol">.</span><span class="sh_function">slice</span><span class="sh_symbol">(-</span><span class="sh_number">6</span><span class="sh_symbol">,</span> <span class="sh_symbol">-</span><span class="sh_number">2</span><span class="sh_symbol">).</span><span class="sh_function">toString</span><span class="sh_symbol">();</span>
  <span class="sh_comment">// Returns 'buff', equivalent to buf.slice(0, 4)</span>
buf<span class="sh_symbol">.</span><span class="sh_function">slice</span><span class="sh_symbol">(-</span><span class="sh_number">5</span><span class="sh_symbol">,</span> <span class="sh_symbol">-</span><span class="sh_number">2</span><span class="sh_symbol">).</span><span class="sh_function">toString</span><span class="sh_symbol">();</span>
  <span class="sh_comment">// Returns 'uff', equivalent to buf.slice(1, 4)</span>
</code></pre>
<h3>buf.swap16()<span><a class="mark" href="#buffer_buf_swap16" id="buffer_buf_swap16">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v5.10.0</span>
</div><ul>
<li>Return: <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
</ul>
<p>Interprets the <code>Buffer</code> as an array of unsigned 16-bit integers and swaps
the byte-order <em>in-place</em>. Throws a <code>RangeError</code> if the <code>Buffer</code> length is
not a multiple of 16 bits. The method returns a reference to the Buffer, so
calls can be chained.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">([</span><span class="sh_number">0x1</span><span class="sh_symbol">,</span> <span class="sh_number">0x2</span><span class="sh_symbol">,</span> <span class="sh_number">0x3</span><span class="sh_symbol">,</span> <span class="sh_number">0x4</span><span class="sh_symbol">,</span> <span class="sh_number">0x5</span><span class="sh_symbol">,</span> <span class="sh_number">0x6</span><span class="sh_symbol">,</span> <span class="sh_number">0x7</span><span class="sh_symbol">,</span> <span class="sh_number">0x8</span><span class="sh_symbol">]);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints Buffer(0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8)</span>
buf<span class="sh_symbol">.</span><span class="sh_function">swap16</span><span class="sh_symbol">();</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints Buffer(0x2, 0x1, 0x4, 0x3, 0x6, 0x5, 0x8, 0x7)</span>
</code></pre>
<h3>buf.swap32()<span><a class="mark" href="#buffer_buf_swap32" id="buffer_buf_swap32">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v5.10.0</span>
</div><ul>
<li>Return: <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
</ul>
<p>Interprets the <code>Buffer</code> as an array of unsigned 32-bit integers and swaps
the byte-order <em>in-place</em>. Throws a <code>RangeError</code> if the <code>Buffer</code> length is
not a multiple of 32 bits. The method returns a reference to the Buffer, so
calls can be chained.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">([</span><span class="sh_number">0x1</span><span class="sh_symbol">,</span> <span class="sh_number">0x2</span><span class="sh_symbol">,</span> <span class="sh_number">0x3</span><span class="sh_symbol">,</span> <span class="sh_number">0x4</span><span class="sh_symbol">,</span> <span class="sh_number">0x5</span><span class="sh_symbol">,</span> <span class="sh_number">0x6</span><span class="sh_symbol">,</span> <span class="sh_number">0x7</span><span class="sh_symbol">,</span> <span class="sh_number">0x8</span><span class="sh_symbol">]);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints Buffer(0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8)</span>
buf<span class="sh_symbol">.</span><span class="sh_function">swap32</span><span class="sh_symbol">();</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints Buffer(0x4, 0x3, 0x2, 0x1, 0x8, 0x7, 0x6, 0x5)</span>
</code></pre>
<h3>buf.toString([encoding[, start[, end]]])<span><a class="mark" href="#buffer_buf_tostring_encoding_start_end" id="buffer_buf_tostring_encoding_start_end">#</a></span></h3>
<div class="signature"><ul>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> Default: <code>'utf8'</code></li>
<li><code>start</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Default: 0</li>
<li><code>end</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Default: <code>buffer.length</code></li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
</ul>
</div><p>Decodes and returns a string from the Buffer data using the specified
character set <code>encoding</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">allocUnsafe</span><span class="sh_symbol">(</span><span class="sh_number">26</span><span class="sh_symbol">);</span>
<span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_keyword">var</span> i <span class="sh_symbol">=</span> <span class="sh_number">0</span> <span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> <span class="sh_number">26</span> <span class="sh_symbol">;</span> i<span class="sh_symbol">++)</span> <span class="sh_cbracket">{</span>
  buf<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> i <span class="sh_symbol">+</span> <span class="sh_number">97</span><span class="sh_symbol">;</span> <span class="sh_comment">// 97 is ASCII a</span>
<span class="sh_cbracket">}</span>
buf<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_string">'ascii'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Returns: 'abcdefghijklmnopqrstuvwxyz'</span>
buf<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_string">'ascii'</span><span class="sh_symbol">,</span><span class="sh_number">0</span><span class="sh_symbol">,</span><span class="sh_number">5</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Returns: 'abcde'</span>
buf<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_string">'utf8'</span><span class="sh_symbol">,</span><span class="sh_number">0</span><span class="sh_symbol">,</span><span class="sh_number">5</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Returns: 'abcde'</span>
buf<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_predef_var">undefined</span><span class="sh_symbol">,</span><span class="sh_number">0</span><span class="sh_symbol">,</span><span class="sh_number">5</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Returns: 'abcde', encoding defaults to 'utf8'</span>
</code></pre>
<h3>buf.toJSON()<span><a class="mark" href="#buffer_buf_tojson" id="buffer_buf_tojson">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.9.2</span>
</div><ul>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a></li>
</ul>
<p>Returns a JSON representation of the Buffer instance.  <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify"><code>JSON.stringify()</code></a>
implicitly calls this function when stringifying a Buffer instance.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'test'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> json <span class="sh_symbol">=</span> JSON<span class="sh_symbol">.</span><span class="sh_function">stringify</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>json<span class="sh_symbol">);</span>
<span class="sh_comment">// Prints: '{"type":"Buffer","data":[116,101,115,116]}'</span>

<span class="sh_keyword">const</span> copy <span class="sh_symbol">=</span> JSON<span class="sh_symbol">.</span><span class="sh_function">parse</span><span class="sh_symbol">(</span>json<span class="sh_symbol">,</span> <span class="sh_symbol">(</span>key<span class="sh_symbol">,</span> value<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">return</span> value <span class="sh_symbol">&amp;&amp;</span> value<span class="sh_symbol">.</span>type <span class="sh_symbol">===</span> <span class="sh_string">'Buffer'</span>
      <span class="sh_symbol">?</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span>value<span class="sh_symbol">.</span>data<span class="sh_symbol">)</span>
      <span class="sh_symbol">:</span> value<span class="sh_symbol">;</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>copy<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">());</span>
<span class="sh_comment">// Prints: 'test'</span>
</code></pre>
<h3>buf.values()<span><a class="mark" href="#buffer_buf_values" id="buffer_buf_values">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v1.1.0</span>
</div><ul>
<li>Return: <span class="type">&lt;Iterator&gt;</span></li>
</ul>
<p>Creates and returns an <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols">iterator</a> for Buffer values (bytes). This function is
called automatically when the Buffer is used in a <code>for..of</code> statement.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'buffer'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_keyword">var</span> value of buf<span class="sh_symbol">.</span><span class="sh_function">values</span><span class="sh_symbol">())</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>value<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>
<span class="sh_comment">// prints:</span>
<span class="sh_comment">//   98</span>
<span class="sh_comment">//   117</span>
<span class="sh_comment">//   102</span>
<span class="sh_comment">//   102</span>
<span class="sh_comment">//   101</span>
<span class="sh_comment">//   114</span>

<span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_keyword">var</span> value of buf<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>value<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>
<span class="sh_comment">// prints:</span>
<span class="sh_comment">//   98</span>
<span class="sh_comment">//   117</span>
<span class="sh_comment">//   102</span>
<span class="sh_comment">//   102</span>
<span class="sh_comment">//   101</span>
<span class="sh_comment">//   114</span>
</code></pre>
<h3>buf.write(string[, offset[, length]][, encoding])<span><a class="mark" href="#buffer_buf_write_string_offset_length_encoding" id="buffer_buf_write_string_offset_length_encoding">#</a></span></h3>
<div class="signature"><ul>
<li><code>string</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> Bytes to be written to buffer</li>
<li><code>offset</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Default: 0</li>
<li><code>length</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Default: <code>buffer.length - offset</code></li>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> Default: <code>'utf8'</code></li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Numbers of bytes written</li>
</ul>
</div><p>Writes <code>string</code> to the Buffer at <code>offset</code> using the given <code>encoding</code>.
The <code>length</code> parameter is the number of bytes to write. If the Buffer did not
contain enough space to fit the entire string, only a partial amount of the
string will be written however, it will not write only partially encoded
characters.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">allocUnsafe</span><span class="sh_symbol">(</span><span class="sh_number">256</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> len <span class="sh_symbol">=</span> buf<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'</span><span class="sh_specialchar">\u</span><span class="sh_string">00bd + </span><span class="sh_specialchar">\u</span><span class="sh_string">00bc = </span><span class="sh_specialchar">\u</span><span class="sh_string">00be'</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`$<span class="sh_cbracket">{</span>len<span class="sh_cbracket">}</span> bytes<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>buf<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_string">'utf8'</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> len<span class="sh_symbol">)</span><span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: 12 bytes: ½ + ¼ = ¾</span>
</code></pre>
<h3>buf.writeDoubleBE(value, offset[, noAssert])<span><a class="mark" href="#buffer_buf_writedoublebe_value_offset_noassert" id="buffer_buf_writedoublebe_value_offset_noassert">#</a></span></h3>
<h3>buf.writeDoubleLE(value, offset[, noAssert])<span><a class="mark" href="#buffer_buf_writedoublele_value_offset_noassert" id="buffer_buf_writedoublele_value_offset_noassert">#</a></span></h3>
<div class="signature"><ul>
<li><code>value</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Bytes to be written to Buffer</li>
<li><code>offset</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 8</code></li>
<li><code>noAssert</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Default: false</li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> The offset plus the number of written bytes</li>
</ul>
</div><p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> with specified endian
format (<code>writeDoubleBE()</code> writes big endian, <code>writeDoubleLE()</code> writes little
endian). The <code>value</code> argument <em>should</em> be a valid 64-bit double. Behavior is
not defined when <code>value</code> is anything other than a 64-bit double.</p>
<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means
that <code>value</code> may be too large for the specific function and <code>offset</code> may be
beyond the end of the Buffer leading to the values being silently dropped. This
should not be used unless you are certain of correctness.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">allocUnsafe</span><span class="sh_symbol">(</span><span class="sh_number">8</span><span class="sh_symbol">);</span>
buf<span class="sh_symbol">.</span><span class="sh_function">writeDoubleBE</span><span class="sh_symbol">(</span><span class="sh_number">0xdeadbeefcafebabe</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">);</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: &lt;Buffer 43 eb d5 b7 dd f9 5f d7&gt;</span>

buf<span class="sh_symbol">.</span><span class="sh_function">writeDoubleLE</span><span class="sh_symbol">(</span><span class="sh_number">0xdeadbeefcafebabe</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">);</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: &lt;Buffer d7 5f f9 dd b7 d5 eb 43&gt;</span>
</code></pre>
<h3>buf.writeFloatBE(value, offset[, noAssert])<span><a class="mark" href="#buffer_buf_writefloatbe_value_offset_noassert" id="buffer_buf_writefloatbe_value_offset_noassert">#</a></span></h3>
<h3>buf.writeFloatLE(value, offset[, noAssert])<span><a class="mark" href="#buffer_buf_writefloatle_value_offset_noassert" id="buffer_buf_writefloatle_value_offset_noassert">#</a></span></h3>
<div class="signature"><ul>
<li><code>value</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Bytes to be written to Buffer</li>
<li><code>offset</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 4</code></li>
<li><code>noAssert</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Default: false</li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> The offset plus the number of written bytes</li>
</ul>
</div><p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> with specified endian
format (<code>writeFloatBE()</code> writes big endian, <code>writeFloatLE()</code> writes little
endian). Behavior is not defined when <code>value</code> is anything other than a 32-bit
float.</p>
<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means
that <code>value</code> may be too large for the specific function and <code>offset</code> may be
beyond the end of the Buffer leading to the values being silently dropped. This
should not be used unless you are certain of correctness.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">allocUnsafe</span><span class="sh_symbol">(</span><span class="sh_number">4</span><span class="sh_symbol">);</span>
buf<span class="sh_symbol">.</span><span class="sh_function">writeFloatBE</span><span class="sh_symbol">(</span><span class="sh_number">0xcafebabe</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">);</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: &lt;Buffer 4f 4a fe bb&gt;</span>

buf<span class="sh_symbol">.</span><span class="sh_function">writeFloatLE</span><span class="sh_symbol">(</span><span class="sh_number">0xcafebabe</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">);</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: &lt;Buffer bb fe 4a 4f&gt;</span>
</code></pre>
<h3>buf.writeInt8(value, offset[, noAssert])<span><a class="mark" href="#buffer_buf_writeint8_value_offset_noassert" id="buffer_buf_writeint8_value_offset_noassert">#</a></span></h3>
<div class="signature"><ul>
<li><code>value</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Bytes to be written to Buffer</li>
<li><code>offset</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 1</code></li>
<li><code>noAssert</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Default: false</li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> The offset plus the number of written bytes</li>
</ul>
</div><p>Writes <code>value</code> to the Buffer at the specified <code>offset</code>. The <code>value</code> should be a
valid signed 8-bit integer.  Behavior is not defined when <code>value</code> is anything
other than a signed 8-bit integer.</p>
<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means
that <code>value</code> may be too large for the specific function and <code>offset</code> may be
beyond the end of the Buffer leading to the values being silently dropped. This
should not be used unless you are certain of correctness.</p>
<p>The <code>value</code> is interpreted and written as a two's complement signed integer.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">allocUnsafe</span><span class="sh_symbol">(</span><span class="sh_number">2</span><span class="sh_symbol">);</span>
buf<span class="sh_symbol">.</span><span class="sh_function">writeInt8</span><span class="sh_symbol">(</span><span class="sh_number">2</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">);</span>
buf<span class="sh_symbol">.</span><span class="sh_function">writeInt8</span><span class="sh_symbol">(-</span><span class="sh_number">2</span><span class="sh_symbol">,</span> <span class="sh_number">1</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: &lt;Buffer 02 fe&gt;</span>
</code></pre>
<h3>buf.writeInt16BE(value, offset[, noAssert])<span><a class="mark" href="#buffer_buf_writeint16be_value_offset_noassert" id="buffer_buf_writeint16be_value_offset_noassert">#</a></span></h3>
<h3>buf.writeInt16LE(value, offset[, noAssert])<span><a class="mark" href="#buffer_buf_writeint16le_value_offset_noassert" id="buffer_buf_writeint16le_value_offset_noassert">#</a></span></h3>
<div class="signature"><ul>
<li><code>value</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Bytes to be written to Buffer</li>
<li><code>offset</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 2</code></li>
<li><code>noAssert</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Default: false</li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> The offset plus the number of written bytes</li>
</ul>
</div><p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> with specified endian
format (<code>writeInt16BE()</code> writes big endian, <code>writeInt16LE()</code> writes little
endian). The <code>value</code> should be a valid signed 16-bit integer. Behavior is
not defined when <code>value</code> is anything other than a signed 16-bit integer.</p>
<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means
that <code>value</code> may be too large for the specific function and <code>offset</code> may be
beyond the end of the Buffer leading to the values being silently dropped. This
should not be used unless you are certain of correctness.</p>
<p>The <code>value</code> is interpreted and written as a two's complement signed integer.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">allocUnsafe</span><span class="sh_symbol">(</span><span class="sh_number">4</span><span class="sh_symbol">);</span>
buf<span class="sh_symbol">.</span><span class="sh_function">writeInt16BE</span><span class="sh_symbol">(</span><span class="sh_number">0x0102</span><span class="sh_symbol">,</span><span class="sh_number">0</span><span class="sh_symbol">);</span>
buf<span class="sh_symbol">.</span><span class="sh_function">writeInt16LE</span><span class="sh_symbol">(</span><span class="sh_number">0x0304</span><span class="sh_symbol">,</span><span class="sh_number">2</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: &lt;Buffer 01 02 04 03&gt;</span>
</code></pre>
<h3>buf.writeInt32BE(value, offset[, noAssert])<span><a class="mark" href="#buffer_buf_writeint32be_value_offset_noassert" id="buffer_buf_writeint32be_value_offset_noassert">#</a></span></h3>
<h3>buf.writeInt32LE(value, offset[, noAssert])<span><a class="mark" href="#buffer_buf_writeint32le_value_offset_noassert" id="buffer_buf_writeint32le_value_offset_noassert">#</a></span></h3>
<div class="signature"><ul>
<li><code>value</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Bytes to be written to Buffer</li>
<li><code>offset</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 4</code></li>
<li><code>noAssert</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Default: false</li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> The offset plus the number of written bytes</li>
</ul>
</div><p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> with specified endian
format (<code>writeInt32BE()</code> writes big endian, <code>writeInt32LE()</code> writes little
endian). The <code>value</code> should be a valid signed 32-bit integer. Behavior is
not defined when <code>value</code> is anything other than a signed 32-bit integer.</p>
<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means
that <code>value</code> may be too large for the specific function and <code>offset</code> may be
beyond the end of the Buffer leading to the values being silently dropped. This
should not be used unless you are certain of correctness.</p>
<p>The <code>value</code> is interpreted and written as a two's complement signed integer.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">allocUnsafe</span><span class="sh_symbol">(</span><span class="sh_number">8</span><span class="sh_symbol">);</span>
buf<span class="sh_symbol">.</span><span class="sh_function">writeInt32BE</span><span class="sh_symbol">(</span><span class="sh_number">0x01020304</span><span class="sh_symbol">,</span><span class="sh_number">0</span><span class="sh_symbol">);</span>
buf<span class="sh_symbol">.</span><span class="sh_function">writeInt32LE</span><span class="sh_symbol">(</span><span class="sh_number">0x05060708</span><span class="sh_symbol">,</span><span class="sh_number">4</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: &lt;Buffer 01 02 03 04 08 07 06 05&gt;</span>
</code></pre>
<h3>buf.writeIntBE(value, offset, byteLength[, noAssert])<span><a class="mark" href="#buffer_buf_writeintbe_value_offset_bytelength_noassert" id="buffer_buf_writeintbe_value_offset_bytelength_noassert">#</a></span></h3>
<h3>buf.writeIntLE(value, offset, byteLength[, noAssert])<span><a class="mark" href="#buffer_buf_writeintle_value_offset_bytelength_noassert" id="buffer_buf_writeintle_value_offset_bytelength_noassert">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v1.0.0</span>
</div><ul>
<li><code>value</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Bytes to be written to Buffer</li>
<li><code>offset</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - byteLength</code></li>
<li><code>byteLength</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> <code>0 &lt; byteLength &lt;= 6</code></li>
<li><code>noAssert</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Default: false</li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> The offset plus the number of written bytes</li>
</ul>
<p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> and <code>byteLength</code>.
Supports up to 48 bits of accuracy. For example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf1 <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">allocUnsafe</span><span class="sh_symbol">(</span><span class="sh_number">6</span><span class="sh_symbol">);</span>
buf1<span class="sh_symbol">.</span><span class="sh_function">writeUIntBE</span><span class="sh_symbol">(</span><span class="sh_number">0x1234567890ab</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_number">6</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf1<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: &lt;Buffer 12 34 56 78 90 ab&gt;</span>

<span class="sh_keyword">const</span> buf2 <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">allocUnsafe</span><span class="sh_symbol">(</span><span class="sh_number">6</span><span class="sh_symbol">);</span>
buf2<span class="sh_symbol">.</span><span class="sh_function">writeUIntLE</span><span class="sh_symbol">(</span><span class="sh_number">0x1234567890ab</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_number">6</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf2<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: &lt;Buffer ab 90 78 56 34 12&gt;</span>
</code></pre>
<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means
that <code>value</code> may be too large for the specific function and <code>offset</code> may be
beyond the end of the Buffer leading to the values being silently dropped. This
should not be used unless you are certain of correctness.</p>
<p>Behavior is not defined when <code>value</code> is anything other than an integer.</p>
<h3>buf.writeUInt8(value, offset[, noAssert])<span><a class="mark" href="#buffer_buf_writeuint8_value_offset_noassert" id="buffer_buf_writeuint8_value_offset_noassert">#</a></span></h3>
<div class="signature"><ul>
<li><code>value</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Bytes to be written to Buffer</li>
<li><code>offset</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 1</code></li>
<li><code>noAssert</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Default: false</li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> The offset plus the number of written bytes</li>
</ul>
</div><p>Writes <code>value</code> to the Buffer at the specified <code>offset</code>. The <code>value</code> should be a
valid unsigned 8-bit integer.  Behavior is not defined when <code>value</code> is anything
other than an unsigned 8-bit integer.</p>
<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means
that <code>value</code> may be too large for the specific function and <code>offset</code> may be
beyond the end of the Buffer leading to the values being silently dropped. This
should not be used unless you are certain of correctness.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">allocUnsafe</span><span class="sh_symbol">(</span><span class="sh_number">4</span><span class="sh_symbol">);</span>
buf<span class="sh_symbol">.</span><span class="sh_function">writeUInt8</span><span class="sh_symbol">(</span><span class="sh_number">0x3</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">);</span>
buf<span class="sh_symbol">.</span><span class="sh_function">writeUInt8</span><span class="sh_symbol">(</span><span class="sh_number">0x4</span><span class="sh_symbol">,</span> <span class="sh_number">1</span><span class="sh_symbol">);</span>
buf<span class="sh_symbol">.</span><span class="sh_function">writeUInt8</span><span class="sh_symbol">(</span><span class="sh_number">0x23</span><span class="sh_symbol">,</span> <span class="sh_number">2</span><span class="sh_symbol">);</span>
buf<span class="sh_symbol">.</span><span class="sh_function">writeUInt8</span><span class="sh_symbol">(</span><span class="sh_number">0x42</span><span class="sh_symbol">,</span> <span class="sh_number">3</span><span class="sh_symbol">);</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: &lt;Buffer 03 04 23 42&gt;</span>
</code></pre>
<h3>buf.writeUInt16BE(value, offset[, noAssert])<span><a class="mark" href="#buffer_buf_writeuint16be_value_offset_noassert" id="buffer_buf_writeuint16be_value_offset_noassert">#</a></span></h3>
<h3>buf.writeUInt16LE(value, offset[, noAssert])<span><a class="mark" href="#buffer_buf_writeuint16le_value_offset_noassert" id="buffer_buf_writeuint16le_value_offset_noassert">#</a></span></h3>
<div class="signature"><ul>
<li><code>value</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Bytes to be written to Buffer</li>
<li><code>offset</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 2</code></li>
<li><code>noAssert</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Default: false</li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> The offset plus the number of written bytes</li>
</ul>
</div><p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> with specified endian
format (<code>writeUInt16BE()</code> writes big endian, <code>writeUInt16LE()</code> writes little
endian). The <code>value</code> should be a valid unsigned 16-bit integer. Behavior is
not defined when <code>value</code> is anything other than an unsigned 16-bit integer.</p>
<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means
that <code>value</code> may be too large for the specific function and <code>offset</code> may be
beyond the end of the Buffer leading to the values being silently dropped. This
should not be used unless you are certain of correctness.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">allocUnsafe</span><span class="sh_symbol">(</span><span class="sh_number">4</span><span class="sh_symbol">);</span>
buf<span class="sh_symbol">.</span><span class="sh_function">writeUInt16BE</span><span class="sh_symbol">(</span><span class="sh_number">0xdead</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">);</span>
buf<span class="sh_symbol">.</span><span class="sh_function">writeUInt16BE</span><span class="sh_symbol">(</span><span class="sh_number">0xbeef</span><span class="sh_symbol">,</span> <span class="sh_number">2</span><span class="sh_symbol">);</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: &lt;Buffer de ad be ef&gt;</span>

buf<span class="sh_symbol">.</span><span class="sh_function">writeUInt16LE</span><span class="sh_symbol">(</span><span class="sh_number">0xdead</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">);</span>
buf<span class="sh_symbol">.</span><span class="sh_function">writeUInt16LE</span><span class="sh_symbol">(</span><span class="sh_number">0xbeef</span><span class="sh_symbol">,</span> <span class="sh_number">2</span><span class="sh_symbol">);</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: &lt;Buffer ad de ef be&gt;</span>
</code></pre>
<h3>buf.writeUInt32BE(value, offset[, noAssert])<span><a class="mark" href="#buffer_buf_writeuint32be_value_offset_noassert" id="buffer_buf_writeuint32be_value_offset_noassert">#</a></span></h3>
<h3>buf.writeUInt32LE(value, offset[, noAssert])<span><a class="mark" href="#buffer_buf_writeuint32le_value_offset_noassert" id="buffer_buf_writeuint32le_value_offset_noassert">#</a></span></h3>
<div class="signature"><ul>
<li><code>value</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Bytes to be written to Buffer</li>
<li><code>offset</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 4</code></li>
<li><code>noAssert</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Default: false</li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> The offset plus the number of written bytes</li>
</ul>
</div><p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> with specified endian
format (<code>writeUInt32BE()</code> writes big endian, <code>writeUInt32LE()</code> writes little
endian). The <code>value</code> should be a valid unsigned 32-bit integer. Behavior is
not defined when <code>value</code> is anything other than an unsigned 32-bit integer.</p>
<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means
that <code>value</code> may be too large for the specific function and <code>offset</code> may be
beyond the end of the Buffer leading to the values being silently dropped. This
should not be used unless you are certain of correctness.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">allocUnsafe</span><span class="sh_symbol">(</span><span class="sh_number">4</span><span class="sh_symbol">);</span>
buf<span class="sh_symbol">.</span><span class="sh_function">writeUInt32BE</span><span class="sh_symbol">(</span><span class="sh_number">0xfeedface</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">);</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: &lt;Buffer fe ed fa ce&gt;</span>

buf<span class="sh_symbol">.</span><span class="sh_function">writeUInt32LE</span><span class="sh_symbol">(</span><span class="sh_number">0xfeedface</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">);</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: &lt;Buffer ce fa ed fe&gt;</span>
</code></pre>
<h3>buf.writeUIntBE(value, offset, byteLength[, noAssert])<span><a class="mark" href="#buffer_buf_writeuintbe_value_offset_bytelength_noassert" id="buffer_buf_writeuintbe_value_offset_bytelength_noassert">#</a></span></h3>
<h3>buf.writeUIntLE(value, offset, byteLength[, noAssert])<span><a class="mark" href="#buffer_buf_writeuintle_value_offset_bytelength_noassert" id="buffer_buf_writeuintle_value_offset_bytelength_noassert">#</a></span></h3>
<div class="signature"><ul>
<li><code>value</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Bytes to be written to Buffer</li>
<li><code>offset</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - byteLength</code></li>
<li><code>byteLength</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> <code>0 &lt; byteLength &lt;= 6</code></li>
<li><code>noAssert</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Default: false</li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> The offset plus the number of written bytes</li>
</ul>
</div><p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> and <code>byteLength</code>.
Supports up to 48 bits of accuracy. For example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">allocUnsafe</span><span class="sh_symbol">(</span><span class="sh_number">6</span><span class="sh_symbol">);</span>
buf<span class="sh_symbol">.</span><span class="sh_function">writeUIntBE</span><span class="sh_symbol">(</span><span class="sh_number">0x1234567890ab</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_number">6</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: &lt;Buffer 12 34 56 78 90 ab&gt;</span>
</code></pre>
<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means
that <code>value</code> may be too large for the specific function and <code>offset</code> may be
beyond the end of the Buffer leading to the values being silently dropped. This
should not be used unless you are certain of correctness.</p>
<p>Behavior is not defined when <code>value</code> is anything other than an unsigned integer.</p>
<h2>buffer.INSPECT_MAX_BYTES<span><a class="mark" href="#buffer_buffer_inspect_max_bytes" id="buffer_buffer_inspect_max_bytes">#</a></span></h2>
<div class="signature"><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Default: 50</li>
</ul>
</div><p>Returns the maximum number of bytes that will be returned when
<code>buffer.inspect()</code> is called. This can be overridden by user modules. See
<a href="https://nodejs.org/api/util.html#util_util_inspect_object_options"><code>util.inspect()</code></a> for more details on <code>buffer.inspect()</code> behavior.</p>
<p>Note that this is a property on the <code>buffer</code> module as returned by
<code>require('buffer')</code>, not on the Buffer global or a Buffer instance.</p>
<h2>Class: SlowBuffer<span><a class="mark" href="#buffer_class_slowbuffer" id="buffer_class_slowbuffer">#</a></span></h2>
<div class="api_metadata">
<span>Deprecated since: v6.0.0 </span>
</div><pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated<span class="sh_symbol">:</span> Use
<a href="#buffer_class_method_buffer_allocunsafeslow_size"><code>Buffer<span class="sh_symbol">.</span><span class="sh_function">allocUnsafeSlow</span><span class="sh_symbol">(</span>size<span class="sh_symbol">)</span></code></a> instead<span class="sh_symbol">.</span></pre><p>Returns an un-pooled <code>Buffer</code>.</p>
<p>In order to avoid the garbage collection overhead of creating many individually
allocated Buffers, by default allocations under 4KB are sliced from a single
larger allocated object. This approach improves both performance and memory
usage since v8 does not need to track and cleanup as many <code>Persistent</code> objects.</p>
<p>In the case where a developer may need to retain a small chunk of memory from a
pool for an indeterminate amount of time, it may be appropriate to create an
un-pooled Buffer instance using <code>SlowBuffer</code> then copy out the relevant bits.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// need to keep around a few small chunks of memory</span>
<span class="sh_keyword">const</span> store <span class="sh_symbol">=</span> <span class="sh_symbol">[];</span>

socket<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'readable'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">var</span> data <span class="sh_symbol">=</span> socket<span class="sh_symbol">.</span><span class="sh_function">read</span><span class="sh_symbol">();</span>
  <span class="sh_comment">// allocate for retained data</span>
  <span class="sh_keyword">var</span> sb <span class="sh_symbol">=</span> <span class="sh_function">SlowBuffer</span><span class="sh_symbol">(</span><span class="sh_number">10</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// copy the data into the new allocation</span>
  data<span class="sh_symbol">.</span><span class="sh_function">copy</span><span class="sh_symbol">(</span>sb<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_number">10</span><span class="sh_symbol">);</span>
  store<span class="sh_symbol">.</span><span class="sh_function">push</span><span class="sh_symbol">(</span>sb<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>Use of <code>SlowBuffer</code> should be used only as a last resort <em>after</em> a developer
has observed undue memory retention in their applications.</p>
<h3>new SlowBuffer(size)<span><a class="mark" href="#buffer_new_slowbuffer_size" id="buffer_new_slowbuffer_size">#</a></span></h3>
<div class="api_metadata">
<span>Deprecated since: v6.0.0 </span>
</div><pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated<span class="sh_symbol">:</span> Use
<a href="#buffer_class_method_buffer_allocunsafeslow_size"><code>Buffer<span class="sh_symbol">.</span><span class="sh_function">allocUnsafeSlow</span><span class="sh_symbol">(</span>size<span class="sh_symbol">)</span></code></a> instead<span class="sh_symbol">.</span></pre><ul>
<li><code>size</code> Number</li>
</ul>
<p>Allocates a new <code>SlowBuffer</code> of <code>size</code> bytes.  The <code>size</code> must be less than
or equal to the value of <code>require('buffer').kMaxLength</code> (on 64-bit
architectures, <code>kMaxLength</code> is <code>(2^31)-1</code>). Otherwise, a <a href="https://nodejs.org/api/errors.html#errors_class_rangeerror"><code>RangeError</code></a> is
thrown. A zero-length Buffer will be created if a <code>size</code> less than or equal to
0 is specified.</p>
<p>The underlying memory for <code>SlowBuffer</code> instances is <em>not initialized</em>. The
contents of a newly created <code>SlowBuffer</code> are unknown and could contain
sensitive data. Use <a href="#buffer_buf_fill_value_offset_end_encoding"><code>buf.fill(0)</code></a> to initialize a <code>SlowBuffer</code> to zeroes.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> SlowBuffer <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'buffer'</span><span class="sh_symbol">).</span>SlowBuffer<span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">SlowBuffer</span><span class="sh_symbol">(</span><span class="sh_number">5</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_comment">// &lt;Buffer 78 e0 82 02 01&gt;</span>
  <span class="sh_comment">// (octets will be different, every time)</span>
buf<span class="sh_symbol">.</span><span class="sh_function">fill</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_comment">// &lt;Buffer 00 00 00 00 00&gt;</span>
</code></pre>
<!-- [end-include:buffer.md] -->
<!-- [start-include:child_process.md] -->
<h1>Child Process<span><a class="mark" href="#child_process_child_process" id="child_process_child_process">#</a></span></h1>
<pre class="api_stability api_stability_2 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> Stable</pre><p>The <code>child_process</code> module provides the ability to spawn child processes in
a manner that is similar, but not identical, to <a href="http://man7.org/linux/man-pages/man3/popen.3.html">popen(3)</a>. This capability
is primarily provided by the <a href="#child_process_child_process_spawn_command_args_options"><code>child_process.spawn()</code></a> function:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> spawn <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'child_process'</span><span class="sh_symbol">).</span>spawn<span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> ls <span class="sh_symbol">=</span> <span class="sh_function">spawn</span><span class="sh_symbol">(</span><span class="sh_string">'ls'</span><span class="sh_symbol">,</span> <span class="sh_symbol">[</span><span class="sh_string">'-lh'</span><span class="sh_symbol">,</span> <span class="sh_string">'/usr'</span><span class="sh_symbol">]);</span>

ls<span class="sh_symbol">.</span>stdout<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>data<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`stdout<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>data<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

ls<span class="sh_symbol">.</span>stderr<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>data<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`stderr<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>data<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

ls<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'close'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>code<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`child process exited <span class="sh_keyword">with</span> code $<span class="sh_cbracket">{</span>code<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>By default, pipes for <code>stdin</code>, <code>stdout</code> and <code>stderr</code> are established between
the parent Node.js process and the spawned child. It is possible to stream data
through these pipes in a non-blocking way. <em>Note, however, that some programs
use line-buffered I/O internally. While that does not affect Node.js, it can
mean that data sent to the child process may not be immediately consumed.</em></p>
<p>The <a href="#child_process_child_process_spawn_command_args_options"><code>child_process.spawn()</code></a> method spawns the child process asynchronously,
without blocking the Node.js event loop. The <a href="#child_process_child_process_spawnsync_command_args_options"><code>child_process.spawnSync()</code></a>
function provides equivalent functionality in a synchronous manner that blocks
the event loop until the spawned process either exits or is terminated.</p>
<p>For convenience, the <code>child_process</code> module provides a handful of synchronous
and asynchronous alternatives to <a href="#child_process_child_process_spawn_command_args_options"><code>child_process.spawn()</code></a> and
<a href="#child_process_child_process_spawnsync_command_args_options"><code>child_process.spawnSync()</code></a>.  <em>Note that each of these alternatives are
implemented on top of <a href="#child_process_child_process_spawn_command_args_options"><code>child_process.spawn()</code></a> or <a href="#child_process_child_process_spawnsync_command_args_options"><code>child_process.spawnSync()</code></a>.</em></p>
<ul>
<li><a href="#child_process_child_process_exec_command_options_callback"><code>child_process.exec()</code></a>: spawns a shell and runs a command within that shell,
passing the <code>stdout</code> and <code>stderr</code> to a callback function when complete.</li>
<li><a href="#child_process_child_process_execfile_file_args_options_callback"><code>child_process.execFile()</code></a>: similar to <a href="#child_process_child_process_exec_command_options_callback"><code>child_process.exec()</code></a> except that
it spawns the command directly without first spawning a shell.</li>
<li><a href="https://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options"><code>child_process.fork()</code></a>: spawns a new Node.js process and invokes a
specified module with an IPC communication channel established that allows
sending messages between parent and child.</li>
<li><a href="#child_process_child_process_execsync_command_options"><code>child_process.execSync()</code></a>: a synchronous version of
<a href="#child_process_child_process_exec_command_options_callback"><code>child_process.exec()</code></a> that <em>will</em> block the Node.js event loop.</li>
<li><a href="#child_process_child_process_execfilesync_file_args_options"><code>child_process.execFileSync()</code></a>: a synchronous version of
<a href="#child_process_child_process_execfile_file_args_options_callback"><code>child_process.execFile()</code></a> that <em>will</em> block the Node.js event loop.</li>
</ul>
<p>For certain use cases, such as automating shell scripts, the
<a href="#child_process_synchronous_process_creation">synchronous counterparts</a> may be more convenient. In many cases, however,
the synchronous methods can have significant impact on performance due to
stalling the event loop while spawned processes complete.</p>
<h2>Asynchronous Process Creation<span><a class="mark" href="#child_process_asynchronous_process_creation" id="child_process_asynchronous_process_creation">#</a></span></h2>
<p>The <a href="#child_process_child_process_spawn_command_args_options"><code>child_process.spawn()</code></a>, <a href="https://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options"><code>child_process.fork()</code></a>, <a href="#child_process_child_process_exec_command_options_callback"><code>child_process.exec()</code></a>,
and <a href="#child_process_child_process_execfile_file_args_options_callback"><code>child_process.execFile()</code></a> methods all follow the idiomatic asynchronous
programming pattern typical of other Node.js APIs.</p>
<p>Each of the methods returns a <a href="https://nodejs.org/api/child_process.html#child_process_class_childprocess"><code>ChildProcess</code></a> instance. These objects
implement the Node.js <a href="https://nodejs.org/api/events.html#events_class_eventemitter"><code>EventEmitter</code></a> API, allowing the parent process to
register listener functions that are called when certain events occur during
the life cycle of the child process.</p>
<p>The <a href="#child_process_child_process_exec_command_options_callback"><code>child_process.exec()</code></a> and <a href="#child_process_child_process_execfile_file_args_options_callback"><code>child_process.execFile()</code></a> methods additionally
allow for an optional <code>callback</code> function to be specified that is invoked
when the child process terminates.</p>
<h3>Spawning <code>.bat</code> and <code>.cmd</code> files on Windows<span><a class="mark" href="#child_process_spawning_bat_and_cmd_files_on_windows" id="child_process_spawning_bat_and_cmd_files_on_windows">#</a></span></h3>
<p>The importance of the distinction between <a href="#child_process_child_process_exec_command_options_callback"><code>child_process.exec()</code></a> and
<a href="#child_process_child_process_execfile_file_args_options_callback"><code>child_process.execFile()</code></a> can vary based on platform. On Unix-type operating
systems (Unix, Linux, OSX) <a href="#child_process_child_process_execfile_file_args_options_callback"><code>child_process.execFile()</code></a> can be more efficient
because it does not spawn a shell. On Windows, however, <code>.bat</code> and <code>.cmd</code>
files are not executable on their own without a terminal, and therefore cannot
be launched using <a href="#child_process_child_process_execfile_file_args_options_callback"><code>child_process.execFile()</code></a>. When running on Windows, <code>.bat</code>
and <code>.cmd</code> files can be invoked using <a href="#child_process_child_process_spawn_command_args_options"><code>child_process.spawn()</code></a> with the <code>shell</code>
option set, with <a href="#child_process_child_process_exec_command_options_callback"><code>child_process.exec()</code></a>, or by spawning <code>cmd.exe</code> and passing
the <code>.bat</code> or <code>.cmd</code> file as an argument (which is what the <code>shell</code> option and
<a href="#child_process_child_process_exec_command_options_callback"><code>child_process.exec()</code></a> do).</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// On Windows Only ...</span>
<span class="sh_keyword">const</span> spawn <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'child_process'</span><span class="sh_symbol">).</span>spawn<span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> bat <span class="sh_symbol">=</span> <span class="sh_function">spawn</span><span class="sh_symbol">(</span><span class="sh_string">'cmd.exe'</span><span class="sh_symbol">,</span> <span class="sh_symbol">[</span><span class="sh_string">'/c'</span><span class="sh_symbol">,</span> <span class="sh_string">'my.bat'</span><span class="sh_symbol">]);</span>

bat<span class="sh_symbol">.</span>stdout<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>data<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>data<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

bat<span class="sh_symbol">.</span>stderr<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>data<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>data<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

bat<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'exit'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>code<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Child exited <span class="sh_keyword">with</span> code $<span class="sh_cbracket">{</span>code<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_comment">// OR...</span>
<span class="sh_keyword">const</span> exec <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'child_process'</span><span class="sh_symbol">).</span>exec<span class="sh_symbol">;</span>
<span class="sh_function">exec</span><span class="sh_symbol">(</span><span class="sh_string">'my.bat'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">,</span> stdout<span class="sh_symbol">,</span> stderr<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span>err<span class="sh_symbol">);</span>
    <span class="sh_keyword">return</span><span class="sh_symbol">;</span>
  <span class="sh_cbracket">}</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>stdout<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h3>child_process.exec(command[, options][, callback])<span><a class="mark" href="#child_process_child_process_exec_command_options_callback" id="child_process_child_process_exec_command_options_callback">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><ul>
<li><code>command</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The command to run, with space-separated arguments</li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>cwd</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> Current working directory of the child process</li>
<li><code>env</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> Environment key-value pairs</li>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> (Default: <code>'utf8'</code>)</li>
<li><code>shell</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> Shell to execute the command with
(Default: <code>'/bin/sh'</code> on UNIX, <code>'cmd.exe'</code> on Windows, The shell should
 understand the <code>-c</code> switch on UNIX or <code>/s /c</code> on Windows. On Windows,
 command line parsing should be compatible with <code>cmd.exe</code>.)</li>
<li><code>timeout</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> (Default: <code>0</code>)</li>
<li><a href="#child_process_maxbuffer_and_unicode"><code>maxBuffer</code></a> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> largest amount of data (in bytes) allowed on
stdout or stderr - if exceeded child process is killed (Default: <code>200*1024</code>)</li>
<li><code>killSignal</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> (Default: <code>'SIGTERM'</code>)</li>
<li><code>uid</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Sets the user identity of the process. (See <a href="http://man7.org/linux/man-pages/man2/setuid.2.html">setuid(2)</a>.)</li>
<li><code>gid</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Sets the group identity of the process. (See <a href="http://man7.org/linux/man-pages/man2/setgid.2.html">setgid(2)</a>.)</li>
</ul>
</li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> called with the output when process terminates<ul>
<li><code>error</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" class="type">&lt;Error&gt;</a></li>
<li><code>stdout</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>stderr</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
</ul>
</li>
<li>Return: <a href="https://nodejs.org/api/child_process.html#child_process_class_childprocess" class="type">&lt;ChildProcess&gt;</a></li>
</ul>
<p>Spawns a shell then executes the <code>command</code> within that shell, buffering any
generated output.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> exec <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'child_process'</span><span class="sh_symbol">).</span>exec<span class="sh_symbol">;</span>
<span class="sh_function">exec</span><span class="sh_symbol">(</span><span class="sh_string">'cat *.js bad_file | wc -l'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>error<span class="sh_symbol">,</span> stdout<span class="sh_symbol">,</span> stderr<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>error<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span>`exec error<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>error<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
    <span class="sh_keyword">return</span><span class="sh_symbol">;</span>
  <span class="sh_cbracket">}</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`stdout<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>stdout<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`stderr<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>stderr<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>If a <code>callback</code> function is provided, it is called with the arguments
<code>(error, stdout, stderr)</code>. On success, <code>error</code> will be <code>null</code>.  On error,
<code>error</code> will be an instance of <a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a>. The <code>error.code</code> property will be
the exit code of the child process while <code>error.signal</code> will be set to the
signal that terminated the process. Any exit code other than <code>0</code> is considered
to be an error.</p>
<p>The <code>stdout</code> and <code>stderr</code> arguments passed to the callback will contain the
stdout and stderr output of the child process. By default, Node.js will decode
the output as UTF-8 and pass strings to the callback. The <code>encoding</code> option
can be used to specify the character encoding used to decode the stdout and
stderr output. If <code>encoding</code> is <code>'buffer'</code>, <code>Buffer</code> objects will be passed to
the callback instead.</p>
<p>The <code>options</code> argument may be passed as the second argument to customize how
the process is spawned. The default options are:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_cbracket">{</span>
  encoding<span class="sh_symbol">:</span> <span class="sh_string">'utf8'</span><span class="sh_symbol">,</span>
  timeout<span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">,</span>
  maxBuffer<span class="sh_symbol">:</span> <span class="sh_number">200</span><span class="sh_symbol">*</span><span class="sh_number">1024</span><span class="sh_symbol">,</span>
  killSignal<span class="sh_symbol">:</span> <span class="sh_string">'SIGTERM'</span><span class="sh_symbol">,</span>
  cwd<span class="sh_symbol">:</span> <span class="sh_keyword">null</span><span class="sh_symbol">,</span>
  env<span class="sh_symbol">:</span> <span class="sh_keyword">null</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p>If <code>timeout</code> is greater than <code>0</code>, the parent will send the the signal
identified by the <code>killSignal</code> property (the default is <code>'SIGTERM'</code>) if the
child runs longer than <code>timeout</code> milliseconds.</p>
<p><em>Note: Unlike the <a href="http://man7.org/linux/man-pages/man3/exec.3.html">exec(3)</a> POSIX system call, <code>child_process.exec()</code> does not
replace the existing process and uses a shell to execute the command.</em></p>
<h3>child_process.execFile(file[, args][, options][, callback])<span><a class="mark" href="#child_process_child_process_execfile_file_args_options_callback" id="child_process_child_process_execfile_file_args_options_callback">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.91</span>
</div><ul>
<li><code>file</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The name or path of the executable file to run</li>
<li><code>args</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" class="type">&lt;Array&gt;</a> List of string arguments</li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>cwd</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> Current working directory of the child process</li>
<li><code>env</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> Environment key-value pairs</li>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> (Default: <code>'utf8'</code>)</li>
<li><code>timeout</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> (Default: <code>0</code>)</li>
<li><a href="#child_process_maxbuffer_and_unicode"><code>maxBuffer</code></a> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> largest amount of data (in bytes) allowed on
stdout or stderr - if exceeded child process is killed (Default: <code>200*1024</code>)</li>
<li><code>killSignal</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> (Default: <code>'SIGTERM'</code>)</li>
<li><code>uid</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Sets the user identity of the process. (See <a href="http://man7.org/linux/man-pages/man2/setuid.2.html">setuid(2)</a>.)</li>
<li><code>gid</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Sets the group identity of the process. (See <a href="http://man7.org/linux/man-pages/man2/setgid.2.html">setgid(2)</a>.)</li>
</ul>
</li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> called with the output when process terminates<ul>
<li><code>error</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" class="type">&lt;Error&gt;</a></li>
<li><code>stdout</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>stderr</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
</ul>
</li>
<li>Return: <a href="https://nodejs.org/api/child_process.html#child_process_class_childprocess" class="type">&lt;ChildProcess&gt;</a></li>
</ul>
<p>The <code>child_process.execFile()</code> function is similar to <a href="#child_process_child_process_exec_command_options_callback"><code>child_process.exec()</code></a>
except that it does not spawn a shell. Rather, the specified executable <code>file</code>
is spawned directly as a new process making it slightly more efficient than
<a href="#child_process_child_process_exec_command_options_callback"><code>child_process.exec()</code></a>.</p>
<p>The same options as <a href="#child_process_child_process_exec_command_options_callback"><code>child_process.exec()</code></a> are supported. Since a shell is not
spawned, behaviors such as I/O redirection and file globbing are not supported.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> execFile <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'child_process'</span><span class="sh_symbol">).</span>execFile<span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> child <span class="sh_symbol">=</span> <span class="sh_function">execFile</span><span class="sh_symbol">(</span><span class="sh_string">'node'</span><span class="sh_symbol">,</span> <span class="sh_symbol">[</span><span class="sh_string">'--version'</span><span class="sh_symbol">],</span> <span class="sh_symbol">(</span>error<span class="sh_symbol">,</span> stdout<span class="sh_symbol">,</span> stderr<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>error<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">throw</span> error<span class="sh_symbol">;</span>
  <span class="sh_cbracket">}</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>stdout<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>The <code>stdout</code> and <code>stderr</code> arguments passed to the callback will contain the
stdout and stderr output of the child process. By default, Node.js will decode
the output as UTF-8 and pass strings to the callback. The <code>encoding</code> option
can be used to specify the character encoding used to decode the stdout and
stderr output. If <code>encoding</code> is <code>'buffer'</code>, <code>Buffer</code> objects will be passed to
the callback instead.</p>
<h3>child_process.fork(modulePath[, args][, options])<span><a class="mark" href="#child_process_child_process_fork_modulepath_args_options" id="child_process_child_process_fork_modulepath_args_options">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.5.0</span>
</div><ul>
<li><code>modulePath</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The module to run in the child</li>
<li><code>args</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" class="type">&lt;Array&gt;</a> List of string arguments</li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>cwd</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> Current working directory of the child process</li>
<li><code>env</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> Environment key-value pairs</li>
<li><code>execPath</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> Executable used to create the child process</li>
<li><code>execArgv</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" class="type">&lt;Array&gt;</a> List of string arguments passed to the executable
(Default: <code>process.execArgv</code>)</li>
<li><code>silent</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> If <code>true</code>, stdin, stdout, and stderr of the child will be
piped to the parent, otherwise they will be inherited from the parent, see
the <code>'pipe'</code> and <code>'inherit'</code> options for <a href="#child_process_child_process_spawn_command_args_options"><code>child_process.spawn()</code></a>'s
<a href="#child_process_options_stdio"><code>stdio</code></a> for more details (Default: <code>false</code>)</li>
<li><code>uid</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Sets the user identity of the process. (See <a href="http://man7.org/linux/man-pages/man2/setuid.2.html">setuid(2)</a>.)</li>
<li><code>gid</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Sets the group identity of the process. (See <a href="http://man7.org/linux/man-pages/man2/setgid.2.html">setgid(2)</a>.)</li>
</ul>
</li>
<li>Return: <a href="https://nodejs.org/api/child_process.html#child_process_class_childprocess" class="type">&lt;ChildProcess&gt;</a></li>
</ul>
<p>The <code>child_process.fork()</code> method is a special case of
<a href="#child_process_child_process_spawn_command_args_options"><code>child_process.spawn()</code></a> used specifically to spawn new Node.js processes.
Like <a href="#child_process_child_process_spawn_command_args_options"><code>child_process.spawn()</code></a>, a <a href="https://nodejs.org/api/child_process.html#child_process_class_childprocess"><code>ChildProcess</code></a> object is returned. The returned
<a href="https://nodejs.org/api/child_process.html#child_process_class_childprocess"><code>ChildProcess</code></a> will have an additional communication channel built-in that
allows messages to be passed back and forth between the parent and child. See
<a href="#child_process_child_send_message_sendhandle_options_callback"><code>child.send()</code></a> for details.</p>
<p>It is important to keep in mind that spawned Node.js child processes are
independent of the parent with exception of the IPC communication channel
that is established between the two. Each process has it's own memory, with
their own V8 instances. Because of the additional resource allocations
required, spawning a large number of child Node.js processes is not
recommended.</p>
<p>By default, <code>child_process.fork()</code> will spawn new Node.js instances using the
<a href="https://nodejs.org/api/process.html#process_process_execpath"><code>process.execPath</code></a> of the parent process. The <code>execPath</code> property in the
<code>options</code> object allows for an alternative execution path to be used.</p>
<p>Node.js processes launched with a custom <code>execPath</code> will communicate with the
parent process using the file descriptor (fd) identified using the
environment variable <code>NODE_CHANNEL_FD</code> on the child process. The input and
output on this fd is expected to be line delimited JSON objects.</p>
<p><em>Note: Unlike the <a href="http://man7.org/linux/man-pages/man2/fork.2.html">fork(2)</a> POSIX system call, <code>child_process.fork()</code> does
not clone the current process.</em></p>
<h3>child_process.spawn(command[, args][, options])<span><a class="mark" href="#child_process_child_process_spawn_command_args_options" id="child_process_child_process_spawn_command_args_options">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><ul>
<li><code>command</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The command to run</li>
<li><code>args</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" class="type">&lt;Array&gt;</a> List of string arguments</li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>cwd</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> Current working directory of the child process</li>
<li><code>env</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> Environment key-value pairs</li>
<li><code>stdio</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" class="type">&lt;Array&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> Child's stdio configuration. (See
<a href="#child_process_options_stdio"><code>options.stdio</code></a>)</li>
<li><code>detached</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Prepare child to run independently of its parent
process. Specific behavior depends on the platform, see
<a href="#child_process_options_detached"><code>options.detached</code></a>)</li>
<li><code>uid</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Sets the user identity of the process. (See <a href="http://man7.org/linux/man-pages/man2/setuid.2.html">setuid(2)</a>.)</li>
<li><code>gid</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Sets the group identity of the process. (See <a href="http://man7.org/linux/man-pages/man2/setgid.2.html">setgid(2)</a>.)</li>
<li><code>shell</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> If <code>true</code>, runs <code>command</code> inside of a shell. Uses
<code>'/bin/sh'</code> on UNIX, and <code>'cmd.exe'</code> on Windows. A different shell can be
specified as a string. The shell should understand the <code>-c</code> switch on UNIX,
or <code>/s /c</code> on Windows. Defaults to <code>false</code> (no shell).</li>
</ul>
</li>
<li>return: <a href="https://nodejs.org/api/child_process.html#child_process_class_childprocess" class="type">&lt;ChildProcess&gt;</a></li>
</ul>
<p>The <code>child_process.spawn()</code> method spawns a new process using the given
<code>command</code>, with command line arguments in <code>args</code>. If omitted, <code>args</code> defaults
to an empty array.</p>
<p>A third argument may be used to specify additional options, with these defaults:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_cbracket">{</span>
  cwd<span class="sh_symbol">:</span> <span class="sh_predef_var">undefined</span><span class="sh_symbol">,</span>
  env<span class="sh_symbol">:</span> process<span class="sh_symbol">.</span>env
<span class="sh_cbracket">}</span>
</code></pre>
<p>Use <code>cwd</code> to specify the working directory from which the process is spawned.
If not given, the default is to inherit the current working directory.</p>
<p>Use <code>env</code> to specify environment variables that will be visible to the new
process, the default is <a href="https://nodejs.org/api/process.html#process_process_env"><code>process.env</code></a>.</p>
<p>Example of running <code>ls -lh /usr</code>, capturing <code>stdout</code>, <code>stderr</code>, and the
exit code:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> spawn <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'child_process'</span><span class="sh_symbol">).</span>spawn<span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> ls <span class="sh_symbol">=</span> <span class="sh_function">spawn</span><span class="sh_symbol">(</span><span class="sh_string">'ls'</span><span class="sh_symbol">,</span> <span class="sh_symbol">[</span><span class="sh_string">'-lh'</span><span class="sh_symbol">,</span> <span class="sh_string">'/usr'</span><span class="sh_symbol">]);</span>

ls<span class="sh_symbol">.</span>stdout<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>data<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`stdout<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>data<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

ls<span class="sh_symbol">.</span>stderr<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>data<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`stderr<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>data<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

ls<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'close'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>code<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`child process exited <span class="sh_keyword">with</span> code $<span class="sh_cbracket">{</span>code<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>Example: A very elaborate way to run <code>ps ax | grep ssh</code></p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> spawn <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'child_process'</span><span class="sh_symbol">).</span>spawn<span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> ps <span class="sh_symbol">=</span> <span class="sh_function">spawn</span><span class="sh_symbol">(</span><span class="sh_string">'ps'</span><span class="sh_symbol">,</span> <span class="sh_symbol">[</span><span class="sh_string">'ax'</span><span class="sh_symbol">]);</span>
<span class="sh_keyword">const</span> grep <span class="sh_symbol">=</span> <span class="sh_function">spawn</span><span class="sh_symbol">(</span><span class="sh_string">'grep'</span><span class="sh_symbol">,</span> <span class="sh_symbol">[</span><span class="sh_string">'ssh'</span><span class="sh_symbol">]);</span>

ps<span class="sh_symbol">.</span>stdout<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>data<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  grep<span class="sh_symbol">.</span>stdin<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span>data<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

ps<span class="sh_symbol">.</span>stderr<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>data<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`ps stderr<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>data<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

ps<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'close'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>code<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>code <span class="sh_symbol">!==</span> <span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`ps process exited <span class="sh_keyword">with</span> code $<span class="sh_cbracket">{</span>code<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
  grep<span class="sh_symbol">.</span>stdin<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

grep<span class="sh_symbol">.</span>stdout<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>data<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`$<span class="sh_cbracket">{</span>data<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

grep<span class="sh_symbol">.</span>stderr<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>data<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`grep stderr<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>data<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

grep<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'close'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>code<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>code <span class="sh_symbol">!==</span> <span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`grep process exited <span class="sh_keyword">with</span> code $<span class="sh_cbracket">{</span>code<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>Example of checking for failed exec:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> spawn <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'child_process'</span><span class="sh_symbol">).</span>spawn<span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> child <span class="sh_symbol">=</span> <span class="sh_function">spawn</span><span class="sh_symbol">(</span><span class="sh_string">'bad_command'</span><span class="sh_symbol">);</span>

child<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Failed to start child process.'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h4>options.detached<span><a class="mark" href="#child_process_options_detached" id="child_process_options_detached">#</a></span></h4>
<div class="api_metadata">
<span>Added in: v0.7.10</span>
</div><p>On Windows, setting <code>options.detached</code> to <code>true</code> makes it possible for the
child process to continue running after the parent exits. The child will have
its own console window. <em>Once enabled for a child process, it cannot be
disabled</em>.</p>
<p>On non-Windows platforms, if <code>options.detached</code> is set to <code>true</code>, the child
process will be made the leader of a new process group and session. Note that
child processes may continue running after the parent exits regardless of
whether they are detached or not.  See <a href="http://man7.org/linux/man-pages/man2/setsid.2.html">setsid(2)</a> for more information.</p>
<p>By default, the parent will wait for the detached child to exit. To prevent
the parent from waiting for a given <code>child</code>, use the <code>child.unref()</code> method.
Doing so will cause the parent's event loop to not include the child in its
reference count, allowing the parent to exit independently of the child, unless
there is an established IPC channel between the child and parent.</p>
<p>When using the <code>detached</code> option to start a long-running process, the process
will not stay running in the background after the parent exits unless it is
provided with a <code>stdio</code> configuration that is not connected to the parent.
If the parent's <code>stdio</code> is inherited, the child will remain attached to the
controlling terminal.</p>
<p>Example of a long-running process, by detaching and also ignoring its parent
<code>stdio</code> file descriptors, in order to ignore the parent's termination:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> spawn <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'child_process'</span><span class="sh_symbol">).</span>spawn<span class="sh_symbol">;</span>

<span class="sh_keyword">const</span> child <span class="sh_symbol">=</span> <span class="sh_function">spawn</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>argv<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">],</span> <span class="sh_symbol">[</span><span class="sh_string">'child_program.js'</span><span class="sh_symbol">],</span> <span class="sh_cbracket">{</span>
  detached<span class="sh_symbol">:</span> <span class="sh_keyword">true</span><span class="sh_symbol">,</span>
  stdio<span class="sh_symbol">:</span> <span class="sh_symbol">[</span><span class="sh_string">'ignore'</span><span class="sh_symbol">]</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

child<span class="sh_symbol">.</span><span class="sh_function">unref</span><span class="sh_symbol">();</span>
</code></pre>
<p>Alternatively one can redirect the child process' output into files:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> fs <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'fs'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> spawn <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'child_process'</span><span class="sh_symbol">).</span>spawn<span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> out <span class="sh_symbol">=</span> fs<span class="sh_symbol">.</span><span class="sh_function">openSync</span><span class="sh_symbol">(</span><span class="sh_string">'./out.log'</span><span class="sh_symbol">,</span> <span class="sh_string">'a'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> err <span class="sh_symbol">=</span> fs<span class="sh_symbol">.</span><span class="sh_function">openSync</span><span class="sh_symbol">(</span><span class="sh_string">'./out.log'</span><span class="sh_symbol">,</span> <span class="sh_string">'a'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> child <span class="sh_symbol">=</span> <span class="sh_function">spawn</span><span class="sh_symbol">(</span><span class="sh_string">'prg'</span><span class="sh_symbol">,</span> <span class="sh_symbol">[],</span> <span class="sh_cbracket">{</span>
 detached<span class="sh_symbol">:</span> <span class="sh_keyword">true</span><span class="sh_symbol">,</span>
 stdio<span class="sh_symbol">:</span> <span class="sh_symbol">[</span> <span class="sh_string">'ignore'</span><span class="sh_symbol">,</span> out<span class="sh_symbol">,</span> err <span class="sh_symbol">]</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

child<span class="sh_symbol">.</span><span class="sh_function">unref</span><span class="sh_symbol">();</span>
</code></pre>
<h4>options.stdio<span><a class="mark" href="#child_process_options_stdio" id="child_process_options_stdio">#</a></span></h4>
<div class="api_metadata">
<span>Added in: v0.7.10</span>
</div><p>The <code>options.stdio</code> option is used to configure the pipes that are established
between the parent and child process. By default, the child's stdin, stdout,
and stderr are redirected to corresponding <a href="#child_process_child_stdin"><code>child.stdin</code></a>, <a href="#child_process_child_stdout"><code>child.stdout</code></a>, and
<a href="#child_process_child_stderr"><code>child.stderr</code></a> streams on the <a href="https://nodejs.org/api/child_process.html#child_process_class_childprocess"><code>ChildProcess</code></a> object. This is equivalent to
setting the <code>options.stdio</code> equal to <code>['pipe', 'pipe', 'pipe']</code>.</p>
<p>For convenience, <code>options.stdio</code> may be one of the following strings:</p>
<ul>
<li><code>'pipe'</code> - equivalent to <code>['pipe', 'pipe', 'pipe']</code> (the default)</li>
<li><code>'ignore'</code> - equivalent to <code>['ignore', 'ignore', 'ignore']</code></li>
<li><code>'inherit'</code> - equivalent to <code>[process.stdin, process.stdout, process.stderr]</code>
 or <code>[0,1,2]</code></li>
</ul>
<p>Otherwise, the value of <code>options.stdio</code> is an array where each index corresponds
to an fd in the child. The fds 0, 1, and 2 correspond to stdin, stdout,
and stderr, respectively. Additional fds can be specified to create additional
pipes between the parent and child. The value is one of the following:</p>
<ol>
<li><code>'pipe'</code> - Create a pipe between the child process and the parent process.
The parent end of the pipe is exposed to the parent as a property on the
<code>child_process</code> object as <a href="#child_process_options_stdio"><code>child.stdio[fd]</code></a>. Pipes created for
fds 0 - 2 are also available as <a href="#child_process_child_stdin"><code>child.stdin</code></a>, <a href="#child_process_child_stdout"><code>child.stdout</code></a>
and <a href="#child_process_child_stderr"><code>child.stderr</code></a>, respectively.</li>
<li><code>'ipc'</code> - Create an IPC channel for passing messages/file descriptors
between parent and child. A <a href="https://nodejs.org/api/child_process.html#child_process_class_childprocess"><code>ChildProcess</code></a> may have at most <em>one</em> IPC stdio
file descriptor. Setting this option enables the <a href="#child_process_child_send_message_sendhandle_options_callback"><code>child.send()</code></a> method.
If the child writes JSON messages to this file descriptor, the
<a href="https://nodejs.org/api/child_process.html#child_process_event_message"><code>child.on('message')</code></a> event handler will be triggered in the parent.
If the child is a Node.js process, the presence of an IPC channel will enable
<a href="https://nodejs.org/api/process.html#process_process_send_message_sendhandle_options_callback"><code>process.send()</code></a>, <a href="https://nodejs.org/api/process.html#process_process_disconnect"><code>process.disconnect()</code></a>, <a href="https://nodejs.org/api/process.html#process_event_disconnect"><code>process.on('disconnect')</code></a>, and
<a href="https://nodejs.org/api/process.html#process_event_message"><code>process.on('message')</code></a> within the child.</li>
<li><code>'ignore'</code> - Instructs Node.js to ignore the fd in the child. While Node.js
will always open fds 0 - 2 for the processes it spawns, setting the fd to
<code>'ignore'</code> will cause Node.js to open <code>/dev/null</code> and attach it to the
child's fd.</li>
<li><a href="https://nodejs.org/api/stream.html#stream_stream" class="type">&lt;Stream&gt;</a> object - Share a readable or writable stream that refers to a tty,
file, socket, or a pipe with the child process. The stream's underlying
file descriptor is duplicated in the child process to the fd that
corresponds to the index in the <code>stdio</code> array. Note that the stream must
have an underlying descriptor (file streams do not until the <code>'open'</code>
event has occurred).</li>
<li>Positive integer - The integer value is interpreted as a file descriptor
that is is currently open in the parent process. It is shared with the child
process, similar to how <a href="https://nodejs.org/api/stream.html#stream_stream" class="type">&lt;Stream&gt;</a> objects can be shared.</li>
<li><code>null</code>, <code>undefined</code> - Use default value. For stdio fds 0, 1 and 2 (in other
words, stdin, stdout, and stderr) a pipe is created. For fd 3 and up, the
default is <code>'ignore'</code>.</li>
</ol>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> spawn <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'child_process'</span><span class="sh_symbol">).</span>spawn<span class="sh_symbol">;</span>

<span class="sh_comment">// Child will use parent's stdios</span>
<span class="sh_function">spawn</span><span class="sh_symbol">(</span><span class="sh_string">'prg'</span><span class="sh_symbol">,</span> <span class="sh_symbol">[],</span> <span class="sh_cbracket">{</span> stdio<span class="sh_symbol">:</span> <span class="sh_string">'inherit'</span> <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_comment">// Spawn child sharing only stderr</span>
<span class="sh_function">spawn</span><span class="sh_symbol">(</span><span class="sh_string">'prg'</span><span class="sh_symbol">,</span> <span class="sh_symbol">[],</span> <span class="sh_cbracket">{</span> stdio<span class="sh_symbol">:</span> <span class="sh_symbol">[</span><span class="sh_string">'pipe'</span><span class="sh_symbol">,</span> <span class="sh_string">'pipe'</span><span class="sh_symbol">,</span> process<span class="sh_symbol">.</span>stderr<span class="sh_symbol">]</span> <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_comment">// Open an extra fd=4, to interact with programs presenting a</span>
<span class="sh_comment">// startd-style interface.</span>
<span class="sh_function">spawn</span><span class="sh_symbol">(</span><span class="sh_string">'prg'</span><span class="sh_symbol">,</span> <span class="sh_symbol">[],</span> <span class="sh_cbracket">{</span> stdio<span class="sh_symbol">:</span> <span class="sh_symbol">[</span><span class="sh_string">'pipe'</span><span class="sh_symbol">,</span> <span class="sh_keyword">null</span><span class="sh_symbol">,</span> <span class="sh_keyword">null</span><span class="sh_symbol">,</span> <span class="sh_keyword">null</span><span class="sh_symbol">,</span> <span class="sh_string">'pipe'</span><span class="sh_symbol">]</span> <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p><em>It is worth noting that when an IPC channel is established between the
parent and child processes, and the child is a Node.js process, the child
is launched with the IPC channel unreferenced (using <code>unref()</code>) until the
child registers an event handler for the <a href="https://nodejs.org/api/process.html#process_event_disconnect"><code>process.on('disconnect')</code></a> event.
This allows the child to exit normally without the process being held open
by the open IPC channel.</em></p>
<p>See also: <a href="#child_process_child_process_exec_command_options_callback"><code>child_process.exec()</code></a> and <a href="https://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options"><code>child_process.fork()</code></a></p>
<h2>Synchronous Process Creation<span><a class="mark" href="#child_process_synchronous_process_creation" id="child_process_synchronous_process_creation">#</a></span></h2>
<p>The <a href="#child_process_child_process_spawnsync_command_args_options"><code>child_process.spawnSync()</code></a>, <a href="#child_process_child_process_execsync_command_options"><code>child_process.execSync()</code></a>, and
<a href="#child_process_child_process_execfilesync_file_args_options"><code>child_process.execFileSync()</code></a> methods are <strong>synchronous</strong> and <strong>WILL</strong> block
the Node.js event loop, pausing execution of any additional code until the
spawned process exits.</p>
<p>Blocking calls like these are mostly useful for simplifying general purpose
scripting tasks and for simplifying the loading/processing of application
configuration at startup.</p>
<h3>child_process.execFileSync(file[, args][, options])<span><a class="mark" href="#child_process_child_process_execfilesync_file_args_options" id="child_process_child_process_execfilesync_file_args_options">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.11.12</span>
</div><ul>
<li><code>file</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The name or path of the executable file to run</li>
<li><code>args</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" class="type">&lt;Array&gt;</a> List of string arguments</li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>cwd</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> Current working directory of the child process</li>
<li><code>input</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> The value which will be passed as stdin to the
spawned process<ul>
<li>supplying this value will override <code>stdio[0]</code></li>
</ul>
</li>
<li><code>stdio</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" class="type">&lt;Array&gt;</a> Child's stdio configuration. (Default: <code>'pipe'</code>)<ul>
<li><code>stderr</code> by default will be output to the parent process' stderr unless
<code>stdio</code> is specified</li>
</ul>
</li>
<li><code>env</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> Environment key-value pairs</li>
<li><code>uid</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Sets the user identity of the process. (See <a href="http://man7.org/linux/man-pages/man2/setuid.2.html">setuid(2)</a>.)</li>
<li><code>gid</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Sets the group identity of the process. (See <a href="http://man7.org/linux/man-pages/man2/setgid.2.html">setgid(2)</a>.)</li>
<li><code>timeout</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> In milliseconds the maximum amount of time the process
is allowed to run. (Default: <code>undefined</code>)</li>
<li><code>killSignal</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The signal value to be used when the spawned process
will be killed. (Default: <code>'SIGTERM'</code>)</li>
<li><a href="#child_process_maxbuffer_and_unicode"><code>maxBuffer</code></a> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> largest amount of data (in bytes) allowed on
stdout or stderr - if exceeded child process is killed</li>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The encoding used for all stdio inputs and outputs. (Default: <code>'buffer'</code>)</li>
</ul>
</li>
<li>return: <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The stdout from the command</li>
</ul>
<p>The <code>child_process.execFileSync()</code> method is generally identical to
<a href="#child_process_child_process_execfile_file_args_options_callback"><code>child_process.execFile()</code></a> with the exception that the method will not return
until the child process has fully closed. When a timeout has been encountered
and <code>killSignal</code> is sent, the method won't return until the process has
completely exited. <em>Note that if the child process intercepts and handles
the <code>SIGTERM</code> signal and does not exit, the parent process will still wait
until the child process has exited.</em></p>
<p>If the process times out, or has a non-zero exit code, this method <strong><em>will</em></strong>
throw.  The <a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a> object will contain the entire result from
<a href="#child_process_child_process_spawnsync_command_args_options"><code>child_process.spawnSync()</code></a></p>
<h3>child_process.execSync(command[, options])<span><a class="mark" href="#child_process_child_process_execsync_command_options" id="child_process_child_process_execsync_command_options">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.11.12</span>
</div><ul>
<li><code>command</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The command to run</li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>cwd</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> Current working directory of the child process</li>
<li><code>input</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> The value which will be passed as stdin to the
spawned process<ul>
<li>supplying this value will override <code>stdio[0]</code></li>
</ul>
</li>
<li><code>stdio</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" class="type">&lt;Array&gt;</a> Child's stdio configuration. (Default: <code>'pipe'</code>)<ul>
<li><code>stderr</code> by default will be output to the parent process' stderr unless
<code>stdio</code> is specified</li>
</ul>
</li>
<li><code>env</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> Environment key-value pairs</li>
<li><code>shell</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> Shell to execute the command with
(Default: <code>'/bin/sh'</code> on UNIX, <code>'cmd.exe'</code> on Windows, The shell should
 understand the <code>-c</code> switch on UNIX or <code>/s /c</code> on Windows. On Windows,
 command line parsing should be compatible with <code>cmd.exe</code>.)</li>
<li><code>uid</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Sets the user identity of the process. (See <a href="http://man7.org/linux/man-pages/man2/setuid.2.html">setuid(2)</a>.)</li>
<li><code>gid</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Sets the group identity of the process. (See <a href="http://man7.org/linux/man-pages/man2/setgid.2.html">setgid(2)</a>.)</li>
<li><code>timeout</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> In milliseconds the maximum amount of time the process
is allowed to run. (Default: <code>undefined</code>)</li>
<li><code>killSignal</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The signal value to be used when the spawned process
will be killed. (Default: <code>'SIGTERM'</code>)</li>
<li><a href="#child_process_maxbuffer_and_unicode"><code>maxBuffer</code></a> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> largest amount of data (in bytes) allowed on
stdout or stderr - if exceeded child process is killed</li>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The encoding used for all stdio inputs and outputs.
(Default: <code>'buffer'</code>)</li>
</ul>
</li>
<li>return: <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The stdout from the command</li>
</ul>
<p>The <code>child_process.execSync()</code> method is generally identical to
<a href="#child_process_child_process_exec_command_options_callback"><code>child_process.exec()</code></a> with the exception that the method will not return until
the child process has fully closed. When a timeout has been encountered and
<code>killSignal</code> is sent, the method won't return until the process has completely
exited. <em>Note that if  the child process intercepts and handles the <code>SIGTERM</code>
signal and doesn't exit, the parent process will wait until the child
process has exited.</em></p>
<p>If the process times out, or has a non-zero exit code, this method <strong><em>will</em></strong>
throw.  The <a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a> object will contain the entire result from
<a href="#child_process_child_process_spawnsync_command_args_options"><code>child_process.spawnSync()</code></a></p>
<h3>child_process.spawnSync(command[, args][, options])<span><a class="mark" href="#child_process_child_process_spawnsync_command_args_options" id="child_process_child_process_spawnsync_command_args_options">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.11.12</span>
</div><ul>
<li><code>command</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The command to run</li>
<li><code>args</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" class="type">&lt;Array&gt;</a> List of string arguments</li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>cwd</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> Current working directory of the child process</li>
<li><code>input</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> The value which will be passed as stdin to the
spawned process<ul>
<li>supplying this value will override <code>stdio[0]</code></li>
</ul>
</li>
<li><code>stdio</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" class="type">&lt;Array&gt;</a> Child's stdio configuration.</li>
<li><code>env</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> Environment key-value pairs</li>
<li><code>uid</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Sets the user identity of the process. (See <a href="http://man7.org/linux/man-pages/man2/setuid.2.html">setuid(2)</a>.)</li>
<li><code>gid</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Sets the group identity of the process. (See <a href="http://man7.org/linux/man-pages/man2/setgid.2.html">setgid(2)</a>.)</li>
<li><code>timeout</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> In milliseconds the maximum amount of time the process
is allowed to run. (Default: <code>undefined</code>)</li>
<li><code>killSignal</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The signal value to be used when the spawned process
will be killed. (Default: <code>'SIGTERM'</code>)</li>
<li><a href="#child_process_maxbuffer_and_unicode"><code>maxBuffer</code></a> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> largest amount of data (in bytes) allowed on
stdout or stderr - if exceeded child process is killed</li>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The encoding used for all stdio inputs and outputs.
(Default: <code>'buffer'</code>)</li>
<li><code>shell</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> If <code>true</code>, runs <code>command</code> inside of a shell. Uses
<code>'/bin/sh'</code> on UNIX, and <code>'cmd.exe'</code> on Windows. A different shell can be
specified as a string. The shell should understand the <code>-c</code> switch on UNIX,
or <code>/s /c</code> on Windows. Defaults to <code>false</code> (no shell).</li>
</ul>
</li>
<li>return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>pid</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Pid of the child process</li>
<li><code>output</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" class="type">&lt;Array&gt;</a> Array of results from stdio output</li>
<li><code>stdout</code> <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The contents of <code>output[1]</code></li>
<li><code>stderr</code> <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The contents of <code>output[2]</code></li>
<li><code>status</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> The exit code of the child process</li>
<li><code>signal</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The signal used to kill the child process</li>
<li><code>error</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" class="type">&lt;Error&gt;</a> The error object if the child process failed or timed out</li>
</ul>
</li>
</ul>
<p>The <code>child_process.spawnSync()</code> method is generally identical to
<a href="#child_process_child_process_spawn_command_args_options"><code>child_process.spawn()</code></a> with the exception that the function will not return
until the child process has fully closed. When a timeout has been encountered
and <code>killSignal</code> is sent, the method won't return until the process has
completely exited. Note that if the process intercepts and handles the
<code>SIGTERM</code> signal and doesn't exit, the parent process will wait until the child
process has exited.</p>
<h2>Class: ChildProcess<span><a class="mark" href="#child_process_class_childprocess" id="child_process_class_childprocess">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v2.2.0</span>
</div><p>Instances of the <code>ChildProcess</code> class are <a href="https://nodejs.org/api/events.html#events_class_eventemitter"><code>EventEmitters</code></a> that represent
spawned child processes.</p>
<p>Instances of <code>ChildProcess</code> are not intended to be created directly. Rather,
use the <a href="#child_process_child_process_spawn_command_args_options"><code>child_process.spawn()</code></a>, <a href="#child_process_child_process_exec_command_options_callback"><code>child_process.exec()</code></a>,
<a href="#child_process_child_process_execfile_file_args_options_callback"><code>child_process.execFile()</code></a>, or <a href="https://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options"><code>child_process.fork()</code></a> methods to create
instances of <code>ChildProcess</code>.</p>
<h3>Event: 'close'<span><a class="mark" href="#child_process_event_close" id="child_process_event_close">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.7.7</span>
</div><ul>
<li><code>code</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> the exit code if the child exited on its own.</li>
<li><code>signal</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> the signal by which the child process was terminated.</li>
</ul>
<p>The <code>'close'</code> event is emitted when the stdio streams of a child process have
been closed. This is distinct from the <a href="#child_process_event_exit"><code>'exit'</code></a> event, since multiple
processes might share the same stdio streams.</p>
<h3>Event: 'disconnect'<span><a class="mark" href="#child_process_event_disconnect" id="child_process_event_disconnect">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.7.2</span>
</div><p>The <code>'disconnect'</code> event is emitted after calling the
<a href="#child_process_child_disconnect"><code>child.disconnect()</code></a> method in parent process or <a href="https://nodejs.org/api/process.html#process_process_disconnect"><code>process.disconnect()</code></a> in child process. After
disconnecting it is no longer possible to send or receive messages, and the
<a href="#child_process_child_connected"><code>child.connected</code></a> property is <code>false</code>.</p>
<h3>Event: 'error'<span><a class="mark" href="#child_process_event_error" id="child_process_event_error">#</a></span></h3>
<div class="signature"><ul>
<li><code>err</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" class="type">&lt;Error&gt;</a> the error.</li>
</ul>
</div><p>The <code>'error'</code> event is emitted whenever:</p>
<ol>
<li>The process could not be spawned, or</li>
<li>The process could not be killed, or</li>
<li>Sending a message to the child process failed.</li>
</ol>
<p>Note that the <code>'exit'</code> event may or may not fire after an error has occurred.
If you are listening to both the <code>'exit'</code> and <code>'error'</code> events, it is important
to guard against accidentally invoking handler functions multiple times.</p>
<p>See also <a href="#child_process_child_kill_signal"><code>child.kill()</code></a> and <a href="#child_process_child_send_message_sendhandle_options_callback"><code>child.send()</code></a>.</p>
<h3>Event: 'exit'<span><a class="mark" href="#child_process_event_exit" id="child_process_event_exit">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><ul>
<li><code>code</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> the exit code if the child exited on its own.</li>
<li><code>signal</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> the signal by which the child process was terminated.</li>
</ul>
<p>The <code>'exit'</code> event is emitted after the child process ends. If the process
exited, <code>code</code> is the final exit code of the process, otherwise <code>null</code>. If the
process terminated due to receipt of a signal, <code>signal</code> is the string name of
the signal, otherwise <code>null</code>. One of the two will always be non-null.</p>
<p>Note that when the <code>'exit'</code> event is triggered, child process stdio streams
might still be open.</p>
<p>Also, note that Node.js establishes signal handlers for <code>SIGINT</code> and
<code>SIGTERM</code> and Node.js processes will not terminate immediately due to receipt
of those signals. Rather, Node.js will perform a sequence of cleanup actions
and then will re-raise the handled signal.</p>
<p>See <a href="http://man7.org/linux/man-pages/man2/waitpid.2.html">waitpid(2)</a>.</p>
<h3>Event: 'message'<span><a class="mark" href="#child_process_event_message" id="child_process_event_message">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.5.9</span>
</div><ul>
<li><code>message</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> a parsed JSON object or primitive value.</li>
<li><code>sendHandle</code> <a href="https://nodejs.org/api/net.html#net_server_listen_handle_backlog_callback" class="type">&lt;Handle&gt;</a> a <a href="https://nodejs.org/api/net.html#net_class_net_socket"><code>net.Socket</code></a> or <a href="https://nodejs.org/api/net.html#net_class_net_server"><code>net.Server</code></a> object, or
undefined.</li>
</ul>
<p>The <code>'message'</code> event is triggered when a child process uses <a href="https://nodejs.org/api/process.html#process_process_send_message_sendhandle_options_callback"><code>process.send()</code></a>
to send messages.</p>
<h3>child.connected<span><a class="mark" href="#child_process_child_connected" id="child_process_child_connected">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.7.2</span>
</div><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Set to <code>false</code> after <code>child.disconnect()</code> is called</li>
</ul>
<p>The <code>child.connected</code> property indicates whether it is still possible to send
and receive messages from a child process. When <code>child.connected</code> is <code>false</code>, it
is no longer possible to send or receive messages.</p>
<h3>child.disconnect()<span><a class="mark" href="#child_process_child_disconnect" id="child_process_child_disconnect">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.7.2</span>
</div><p>Closes the IPC channel between parent and child, allowing the child to exit
gracefully once there are no other connections keeping it alive. After calling
this method the <code>child.connected</code> and <code>process.connected</code> properties in both
the parent and child (respectively) will be set to <code>false</code>, and it will be no
longer possible to pass messages between the processes.</p>
<p>The <code>'disconnect'</code> event will be emitted when there are no messages in the
process of being received. This will most often be triggered immediately after
calling <code>child.disconnect()</code>.</p>
<p>Note that when the child process is a Node.js instance (e.g. spawned using
<a href="https://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options"><code>child_process.fork()</code></a>), the <code>process.disconnect()</code> method can be invoked
within the child process to close the IPC channel as well.</p>
<h3>child.kill([signal])<span><a class="mark" href="#child_process_child_kill_signal" id="child_process_child_kill_signal">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><ul>
<li><code>signal</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
</ul>
<p>The <code>child.kill()</code> methods sends a signal to the child process. If no argument
is given, the process will be sent the <code>'SIGTERM'</code> signal. See <code>signal(7)</code> for
a list of available signals.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> spawn <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'child_process'</span><span class="sh_symbol">).</span>spawn<span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> grep <span class="sh_symbol">=</span> <span class="sh_function">spawn</span><span class="sh_symbol">(</span><span class="sh_string">'grep'</span><span class="sh_symbol">,</span> <span class="sh_symbol">[</span><span class="sh_string">'ssh'</span><span class="sh_symbol">]);</span>

grep<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'close'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>code<span class="sh_symbol">,</span> signal<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>
    `child process terminated due to receipt of signal $<span class="sh_cbracket">{</span>signal<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_comment">// Send SIGHUP to process</span>
grep<span class="sh_symbol">.</span><span class="sh_function">kill</span><span class="sh_symbol">(</span><span class="sh_string">'SIGHUP'</span><span class="sh_symbol">);</span>
</code></pre>
<p>The <a href="https://nodejs.org/api/child_process.html#child_process_class_childprocess"><code>ChildProcess</code></a> object may emit an <a href="#net_event_error_1"><code>'error'</code></a> event if the signal cannot be
delivered. Sending a signal to a child process that has already exited is not
an error but may have unforeseen consequences. Specifically, if the process
identifier (PID) has been reassigned to another process, the signal will be
delivered to that process instead which can have unexpected results.</p>
<p>Note that while the function is called <code>kill</code>, the signal delivered to the
child process may not actually terminate the process.</p>
<p>See <a href="http://man7.org/linux/man-pages/man2/kill.2.html">kill(2)</a> for reference.</p>
<p>Also note: on Linux, child processes of child processes will not be terminated
when attempting to kill their parent. This is likely to happen when running a
new process in a shell or with use of the <code>shell</code> option of <code>ChildProcess</code>, such
as in this example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_string">'use strict'</span><span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> spawn <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'child_process'</span><span class="sh_symbol">).</span>spawn<span class="sh_symbol">;</span>

let child <span class="sh_symbol">=</span> <span class="sh_function">spawn</span><span class="sh_symbol">(</span><span class="sh_string">'sh'</span><span class="sh_symbol">,</span> <span class="sh_symbol">[</span><span class="sh_string">'-c'</span><span class="sh_symbol">,</span>
  `node <span class="sh_symbol">-</span>e <span class="sh_string">"setInterval(() =&gt; {</span>
<span class="sh_string">      console.log(process.pid + 'is alive')</span>
<span class="sh_string">    }, 500);"</span>`
  <span class="sh_symbol">],</span> <span class="sh_cbracket">{</span>
    stdio<span class="sh_symbol">:</span> <span class="sh_symbol">[</span><span class="sh_string">'inherit'</span><span class="sh_symbol">,</span> <span class="sh_string">'inherit'</span><span class="sh_symbol">,</span> <span class="sh_string">'inherit'</span><span class="sh_symbol">]</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_function">setTimeout</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  child<span class="sh_symbol">.</span><span class="sh_function">kill</span><span class="sh_symbol">();</span> <span class="sh_comment">// does not terminate the node process in the shell</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">2000</span><span class="sh_symbol">);</span>
</code></pre>
<h3>child.pid<span><a class="mark" href="#child_process_child_pid" id="child_process_child_pid">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Integer</li>
</ul>
<p>Returns the process identifier (PID) of the child process.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> spawn <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'child_process'</span><span class="sh_symbol">).</span>spawn<span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> grep <span class="sh_symbol">=</span> <span class="sh_function">spawn</span><span class="sh_symbol">(</span><span class="sh_string">'grep'</span><span class="sh_symbol">,</span> <span class="sh_symbol">[</span><span class="sh_string">'ssh'</span><span class="sh_symbol">]);</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Spawned child pid<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>grep<span class="sh_symbol">.</span>pid<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
grep<span class="sh_symbol">.</span>stdin<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">();</span>
</code></pre>
<h3>child.send(message[, sendHandle[, options]][, callback])<span><a class="mark" href="#child_process_child_send_message_sendhandle_options_callback" id="child_process_child_send_message_sendhandle_options_callback">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.5.9</span>
</div><ul>
<li><code>message</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a></li>
<li><code>sendHandle</code> <a href="https://nodejs.org/api/net.html#net_server_listen_handle_backlog_callback" class="type">&lt;Handle&gt;</a></li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a></li>
</ul>
<p>When an IPC channel has been established between the parent and child (
i.e. when using <a href="https://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options"><code>child_process.fork()</code></a>), the <code>child.send()</code> method can be
used to send messages to the child process. When the child process is a Node.js
instance, these messages can be received via the <a href="https://nodejs.org/api/process.html#process_event_message"><code>process.on('message')</code></a> event.</p>
<p>For example, in the parent script:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> cp <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'child_process'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> n <span class="sh_symbol">=</span> cp<span class="sh_symbol">.</span><span class="sh_function">fork</span><span class="sh_symbol">(</span>`$<span class="sh_cbracket">{</span>__dirname<span class="sh_cbracket">}</span><span class="sh_symbol">/</span>sub<span class="sh_symbol">.</span>js`<span class="sh_symbol">);</span>

n<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'message'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>m<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'PARENT got message:'</span><span class="sh_symbol">,</span> m<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

n<span class="sh_symbol">.</span><span class="sh_function">send</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span> hello<span class="sh_symbol">:</span> <span class="sh_string">'world'</span> <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>And then the child script, <code>'sub.js'</code> might look like this:</p>
<pre class="sh_sourceCode"><code class="lang-js">process<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'message'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>m<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'CHILD got message:'</span><span class="sh_symbol">,</span> m<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

process<span class="sh_symbol">.</span><span class="sh_function">send</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span> foo<span class="sh_symbol">:</span> <span class="sh_string">'bar'</span> <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>Child Node.js processes will have a <a href="https://nodejs.org/api/process.html#process_process_send_message_sendhandle_options_callback"><code>process.send()</code></a> method of their own that
allows the child to send messages back to the parent.</p>
<p>There is a special case when sending a <code>{cmd: 'NODE_foo'}</code> message. All messages
containing a <code>NODE_</code> prefix in its <code>cmd</code> property are considered to be reserved
for use within Node.js core and will not be emitted in the child's
<a href="https://nodejs.org/api/process.html#process_event_message"><code>process.on('message')</code></a> event. Rather, such messages are emitted using the
<code>process.on('internalMessage')</code> event and are consumed internally by Node.js.
Applications should avoid using such messages or listening for
<code>'internalMessage'</code> events as it is subject to change without notice.</p>
<p>The optional <code>sendHandle</code> argument that may be passed to <code>child.send()</code> is for
passing a TCP server or socket object to the child process. The child will
receive the object as the second argument passed to the callback function
registered on the <a href="https://nodejs.org/api/process.html#process_event_message"><code>process.on('message')</code></a> event. Any data that is received
and buffered in the socket will not be sent to the child.</p>
<p>The <code>options</code> argument, if present, is an object used to parameterize the
sending of certain types of handles. <code>options</code> supports the following
properties:</p>
<ul>
<li><code>keepOpen</code> - A Boolean value that can be used when passing instances of
<code>net.Socket</code>. When <code>true</code>, the socket is kept open in the sending process.
Defaults to <code>false</code>.</li>
</ul>
<p>The optional <code>callback</code> is a function that is invoked after the message is
sent but before the child may have received it.  The function is called with a
single argument: <code>null</code> on success, or an <a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a> object on failure.</p>
<p>If no <code>callback</code> function is provided and the message cannot be sent, an
<code>'error'</code> event will be emitted by the <a href="https://nodejs.org/api/child_process.html#child_process_class_childprocess"><code>ChildProcess</code></a> object. This can happen,
for instance, when the child process has already exited.</p>
<p><code>child.send()</code> will return <code>false</code> if the channel has closed or when the
backlog of unsent messages exceeds a threshold that makes it unwise to send
more. Otherwise, the method returns <code>true</code>. The <code>callback</code> function can be
used to implement flow control.</p>
<h4>Example: sending a server object<span><a class="mark" href="#child_process_example_sending_a_server_object" id="child_process_example_sending_a_server_object">#</a></span></h4>
<p>The <code>sendHandle</code> argument can be used, for instance, to pass the handle of
a TCP server object to the child process as illustrated in the example below:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> child <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'child_process'</span><span class="sh_symbol">).</span><span class="sh_function">fork</span><span class="sh_symbol">(</span><span class="sh_string">'child.js'</span><span class="sh_symbol">);</span>

<span class="sh_comment">// Open up the server object and send the handle.</span>
<span class="sh_keyword">const</span> server <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'net'</span><span class="sh_symbol">).</span><span class="sh_function">createServer</span><span class="sh_symbol">();</span>
server<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'connection'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>socket<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  socket<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'handled by parent'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
server<span class="sh_symbol">.</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">1337</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  child<span class="sh_symbol">.</span><span class="sh_function">send</span><span class="sh_symbol">(</span><span class="sh_string">'server'</span><span class="sh_symbol">,</span> server<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>The child would then receive the server object as:</p>
<pre class="sh_sourceCode"><code class="lang-js">process<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'message'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>m<span class="sh_symbol">,</span> server<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>m <span class="sh_symbol">===</span> <span class="sh_string">'server'</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    server<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'connection'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>socket<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
      socket<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'handled by child'</span><span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>Once the server is now shared between the parent and child, some connections
can be handled by the parent and some by the child.</p>
<p>While the example above uses a server created using the <code>net</code> module, <code>dgram</code>
module servers use exactly the same workflow with the exceptions of listening on
a <code>'message'</code> event instead of <code>'connection'</code> and using <code>server.bind()</code> instead of
<code>server.listen()</code>. This is, however, currently only supported on UNIX platforms.</p>
<h4>Example: sending a socket object<span><a class="mark" href="#child_process_example_sending_a_socket_object" id="child_process_example_sending_a_socket_object">#</a></span></h4>
<p>Similarly, the <code>sendHandler</code> argument can be used to pass the handle of a
socket to the child process. The example below spawns two children that each
handle connections with "normal" or "special" priority:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> normal <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'child_process'</span><span class="sh_symbol">).</span><span class="sh_function">fork</span><span class="sh_symbol">(</span><span class="sh_string">'child.js'</span><span class="sh_symbol">,</span> <span class="sh_symbol">[</span><span class="sh_string">'normal'</span><span class="sh_symbol">]);</span>
<span class="sh_keyword">const</span> special <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'child_process'</span><span class="sh_symbol">).</span><span class="sh_function">fork</span><span class="sh_symbol">(</span><span class="sh_string">'child.js'</span><span class="sh_symbol">,</span> <span class="sh_symbol">[</span><span class="sh_string">'special'</span><span class="sh_symbol">]);</span>

<span class="sh_comment">// Open up the server and send sockets to child</span>
<span class="sh_keyword">const</span> server <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'net'</span><span class="sh_symbol">).</span><span class="sh_function">createServer</span><span class="sh_symbol">();</span>
server<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'connection'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>socket<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>

  <span class="sh_comment">// If this is special priority</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>socket<span class="sh_symbol">.</span>remoteAddress <span class="sh_symbol">===</span> <span class="sh_string">'74.125.127.100'</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    special<span class="sh_symbol">.</span><span class="sh_function">send</span><span class="sh_symbol">(</span><span class="sh_string">'socket'</span><span class="sh_symbol">,</span> socket<span class="sh_symbol">);</span>
    <span class="sh_keyword">return</span><span class="sh_symbol">;</span>
  <span class="sh_cbracket">}</span>
  <span class="sh_comment">// This is normal priority</span>
  normal<span class="sh_symbol">.</span><span class="sh_function">send</span><span class="sh_symbol">(</span><span class="sh_string">'socket'</span><span class="sh_symbol">,</span> socket<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
server<span class="sh_symbol">.</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">1337</span><span class="sh_symbol">);</span>
</code></pre>
<p>The <code>child.js</code> would receive the socket handle as the second argument passed
to the event callback function:</p>
<pre class="sh_sourceCode"><code class="lang-js">process<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'message'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>m<span class="sh_symbol">,</span> socket<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>m <span class="sh_symbol">===</span> <span class="sh_string">'socket'</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    socket<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span>`Request handled <span class="sh_keyword">with</span> $<span class="sh_cbracket">{</span>process<span class="sh_symbol">.</span>argv<span class="sh_symbol">[</span><span class="sh_number">2</span><span class="sh_symbol">]</span><span class="sh_cbracket">}</span> priority`<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>Once a socket has been passed to a child, the parent is no longer capable of
tracking when the socket is destroyed. To indicate this, the <code>.connections</code>
property becomes <code>null</code>. It is recommended not to use <code>.maxConnections</code> when
this occurs.</p>
<p><em>Note: this function uses <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify"><code>JSON.stringify()</code></a> internally to serialize the
<code>message</code>.</em></p>
<h3>child.stderr<span><a class="mark" href="#child_process_child_stderr" id="child_process_child_stderr">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><ul>
<li><a href="https://nodejs.org/api/stream.html#stream_stream" class="type">&lt;Stream&gt;</a></li>
</ul>
<p>A <code>Readable Stream</code> that represents the child process's <code>stderr</code>.</p>
<p>If the child was spawned with <code>stdio[2]</code> set to anything other than <code>'pipe'</code>,
then this will be <code>undefined</code>.</p>
<p><code>child.stderr</code> is an alias for <code>child.stdio[2]</code>. Both properties will refer to
the same value.</p>
<h3>child.stdin<span><a class="mark" href="#child_process_child_stdin" id="child_process_child_stdin">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><ul>
<li><a href="https://nodejs.org/api/stream.html#stream_stream" class="type">&lt;Stream&gt;</a></li>
</ul>
<p>A <code>Writable Stream</code> that represents the child process's <code>stdin</code>.</p>
<p><em>Note that if a child process waits to read all of its input, the child will not
continue until this stream has been closed via <code>end()</code>.</em></p>
<p>If the child was spawned with <code>stdio[0]</code> set to anything other than <code>'pipe'</code>,
then this will be <code>undefined</code>.</p>
<p><code>child.stdin</code> is an alias for <code>child.stdio[0]</code>. Both properties will refer to
the same value.</p>
<h3>child.stdio<span><a class="mark" href="#child_process_child_stdio" id="child_process_child_stdio">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.7.10</span>
</div><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" class="type">&lt;Array&gt;</a></li>
</ul>
<p>A sparse array of pipes to the child process, corresponding with positions in
the <a href="#child_process_options_stdio"><code>stdio</code></a> option passed to <a href="#child_process_child_process_spawn_command_args_options"><code>child_process.spawn()</code></a> that have been set
to the value <code>'pipe'</code>. Note that <code>child.stdio[0]</code>, <code>child.stdio[1]</code>, and
<code>child.stdio[2]</code> are also available as <code>child.stdin</code>, <code>child.stdout</code>, and
<code>child.stderr</code>, respectively.</p>
<p>In the following example, only the child's fd <code>1</code> (stdout) is configured as a
pipe, so only the parent's <code>child.stdio[1]</code> is a stream, all other values in
the array are <code>null</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> assert <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'assert'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> fs <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'fs'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> child_process <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'child_process'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> child <span class="sh_symbol">=</span> child_process<span class="sh_symbol">.</span><span class="sh_function">spawn</span><span class="sh_symbol">(</span><span class="sh_string">'ls'</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{</span>
    stdio<span class="sh_symbol">:</span> <span class="sh_symbol">[</span>
      <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_comment">// Use parents stdin for child</span>
      <span class="sh_string">'pipe'</span><span class="sh_symbol">,</span> <span class="sh_comment">// Pipe child's stdout to parent</span>
      fs<span class="sh_symbol">.</span><span class="sh_function">openSync</span><span class="sh_symbol">(</span><span class="sh_string">'err.out'</span><span class="sh_symbol">,</span> <span class="sh_string">'w'</span><span class="sh_symbol">)</span> <span class="sh_comment">// Direct child's stderr to a file</span>
    <span class="sh_symbol">]</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

assert<span class="sh_symbol">.</span><span class="sh_function">equal</span><span class="sh_symbol">(</span>child<span class="sh_symbol">.</span>stdio<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">],</span> <span class="sh_keyword">null</span><span class="sh_symbol">);</span>
assert<span class="sh_symbol">.</span><span class="sh_function">equal</span><span class="sh_symbol">(</span>child<span class="sh_symbol">.</span>stdio<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">],</span> child<span class="sh_symbol">.</span>stdin<span class="sh_symbol">);</span>

<span class="sh_function">assert</span><span class="sh_symbol">(</span>child<span class="sh_symbol">.</span>stdout<span class="sh_symbol">);</span>
assert<span class="sh_symbol">.</span><span class="sh_function">equal</span><span class="sh_symbol">(</span>child<span class="sh_symbol">.</span>stdio<span class="sh_symbol">[</span><span class="sh_number">1</span><span class="sh_symbol">],</span> child<span class="sh_symbol">.</span>stdout<span class="sh_symbol">);</span>

assert<span class="sh_symbol">.</span><span class="sh_function">equal</span><span class="sh_symbol">(</span>child<span class="sh_symbol">.</span>stdio<span class="sh_symbol">[</span><span class="sh_number">2</span><span class="sh_symbol">],</span> <span class="sh_keyword">null</span><span class="sh_symbol">);</span>
assert<span class="sh_symbol">.</span><span class="sh_function">equal</span><span class="sh_symbol">(</span>child<span class="sh_symbol">.</span>stdio<span class="sh_symbol">[</span><span class="sh_number">2</span><span class="sh_symbol">],</span> child<span class="sh_symbol">.</span>stderr<span class="sh_symbol">);</span>
</code></pre>
<h3>child.stdout<span><a class="mark" href="#child_process_child_stdout" id="child_process_child_stdout">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><ul>
<li><a href="https://nodejs.org/api/stream.html#stream_stream" class="type">&lt;Stream&gt;</a></li>
</ul>
<p>A <code>Readable Stream</code> that represents the child process's <code>stdout</code>.</p>
<p>If the child was spawned with <code>stdio[1]</code> set to anything other than <code>'pipe'</code>,
then this will be <code>undefined</code>.</p>
<p><code>child.stdout</code> is an alias for <code>child.stdio[1]</code>. Both properties will refer
to the same value.</p>
<h2><code>maxBuffer</code> and Unicode<span><a class="mark" href="#child_process_maxbuffer_and_unicode" id="child_process_maxbuffer_and_unicode">#</a></span></h2>
<p>It is important to keep in mind that the <code>maxBuffer</code> option specifies the
largest number of <em>octets</em> allowed on <code>stdout</code> or <code>stderr</code>. If this value is
exceeded, then the child process is terminated. This particularly impacts
output that includes multibyte character encodings such as UTF-8 or UTF-16.
For instance, the following will output 13 UTF-8 encoded octets to <code>stdout</code>
although there are only 4 characters:</p>
<pre class="sh_sourceCode"><code class="lang-js">console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'中文测试'</span><span class="sh_symbol">);</span>
</code></pre>
<!-- [end-include:child_process.md] -->
<!-- [start-include:cluster.md] -->
<h1>Cluster<span><a class="mark" href="#cluster_cluster" id="cluster_cluster">#</a></span></h1>
<pre class="api_stability api_stability_2 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> Stable</pre><p>A single instance of Node.js runs in a single thread. To take advantage of
multi-core systems the user will sometimes want to launch a cluster of Node.js
processes to handle the load.</p>
<p>The cluster module allows you to easily create child processes that
all share server ports.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> cluster <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'cluster'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> http <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'http'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> numCPUs <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'os'</span><span class="sh_symbol">).</span><span class="sh_function">cpus</span><span class="sh_symbol">().</span>length<span class="sh_symbol">;</span>

<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>cluster<span class="sh_symbol">.</span>isMaster<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// Fork workers.</span>
  <span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_keyword">var</span> i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> numCPUs<span class="sh_symbol">;</span> i<span class="sh_symbol">++)</span> <span class="sh_cbracket">{</span>
    cluster<span class="sh_symbol">.</span><span class="sh_function">fork</span><span class="sh_symbol">();</span>
  <span class="sh_cbracket">}</span>

  cluster<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'exit'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>worker<span class="sh_symbol">,</span> code<span class="sh_symbol">,</span> signal<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`worker $<span class="sh_cbracket">{</span>worker<span class="sh_symbol">.</span>process<span class="sh_symbol">.</span>pid<span class="sh_cbracket">}</span> died`<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// Workers can share any TCP connection</span>
  <span class="sh_comment">// In this case it is an HTTP server</span>
  http<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">((</span>req<span class="sh_symbol">,</span> res<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    res<span class="sh_symbol">.</span><span class="sh_function">writeHead</span><span class="sh_symbol">(</span><span class="sh_number">200</span><span class="sh_symbol">);</span>
    res<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'hello world</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">8000</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p>Running Node.js will now share port 8000 between the workers:</p>
<pre class="sh_sourceCode"><code>$ NODE_DEBUG<span class="sh_symbol">=</span>cluster node server<span class="sh_symbol">.</span>js
<span class="sh_number">23521</span><span class="sh_symbol">,</span>Master Worker <span class="sh_number">23524</span> online
<span class="sh_number">23521</span><span class="sh_symbol">,</span>Master Worker <span class="sh_number">23526</span> online
<span class="sh_number">23521</span><span class="sh_symbol">,</span>Master Worker <span class="sh_number">23523</span> online
<span class="sh_number">23521</span><span class="sh_symbol">,</span>Master Worker <span class="sh_number">23528</span> online
</code></pre><p>Please note that, on Windows, it is not yet possible to set up a named pipe
server in a worker.</p>
<h2>How It Works<span><a class="mark" href="#cluster_how_it_works" id="cluster_how_it_works">#</a></span></h2>
<!--type=misc-->
<p>The worker processes are spawned using the <a href="https://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options"><code>child_process.fork()</code></a> method,
so that they can communicate with the parent via IPC and pass server
handles back and forth.</p>
<p>The cluster module supports two methods of distributing incoming
connections.</p>
<p>The first one (and the default one on all platforms except Windows),
is the round-robin approach, where the master process listens on a
port, accepts new connections and distributes them across the workers
in a round-robin fashion, with some built-in smarts to avoid
overloading a worker process.</p>
<p>The second approach is where the master process creates the listen
socket and sends it to interested workers. The workers then accept
incoming connections directly.</p>
<p>The second approach should, in theory, give the best performance.
In practice however, distribution tends to be very unbalanced due
to operating system scheduler vagaries. Loads have been observed
where over 70% of all connections ended up in just two processes,
out of a total of eight.</p>
<p>Because <code>server.listen()</code> hands off most of the work to the master
process, there are three cases where the behavior between a normal
Node.js process and a cluster worker differs:</p>
<ol>
<li><code>server.listen({fd: 7})</code> Because the message is passed to the master,
file descriptor 7 <strong>in the parent</strong> will be listened on, and the
handle passed to the worker, rather than listening to the worker's
idea of what the number 7 file descriptor references.</li>
<li><code>server.listen(handle)</code> Listening on handles explicitly will cause
the worker to use the supplied handle, rather than talk to the master
process.  If the worker already has the handle, then it's presumed
that you know what you are doing.</li>
<li><code>server.listen(0)</code> Normally, this will cause servers to listen on a
random port.  However, in a cluster, each worker will receive the
same "random" port each time they do <code>listen(0)</code>.  In essence, the
port is random the first time, but predictable thereafter.  If you
want to listen on a unique port, generate a port number based on the
cluster worker ID.</li>
</ol>
<p>There is no routing logic in Node.js, or in your program, and no shared
state between the workers.  Therefore, it is important to design your
program such that it does not rely too heavily on in-memory data objects
for things like sessions and login.</p>
<p>Because workers are all separate processes, they can be killed or
re-spawned depending on your program's needs, without affecting other
workers.  As long as there are some workers still alive, the server will
continue to accept connections.  If no workers are alive, existing connections
will be dropped and new connections will be refused.  Node.js does not
automatically manage the number of workers for you, however.  It is your
responsibility to manage the worker pool for your application's needs.</p>
<h2>Class: Worker<span><a class="mark" href="#cluster_class_worker" id="cluster_class_worker">#</a></span></h2>
<p>A Worker object contains all public information and method about a worker.
In the master it can be obtained using <code>cluster.workers</code>. In a worker
it can be obtained using <code>cluster.worker</code>.</p>
<h3>Event: 'disconnect'<span><a class="mark" href="#cluster_event_disconnect" id="cluster_event_disconnect">#</a></span></h3>
<p>Similar to the <code>cluster.on('disconnect')</code> event, but specific to this worker.</p>
<pre class="sh_sourceCode"><code class="lang-js">cluster<span class="sh_symbol">.</span><span class="sh_function">fork</span><span class="sh_symbol">().</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'disconnect'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// Worker has disconnected</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h3>Event: 'error'<span><a class="mark" href="#cluster_event_error" id="cluster_event_error">#</a></span></h3>
<p>This event is the same as the one provided by <a href="https://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options"><code>child_process.fork()</code></a>.</p>
<p>In a worker you can also use <code>process.on('error')</code>.</p>
<h3>Event: 'exit'<span><a class="mark" href="#cluster_event_exit" id="cluster_event_exit">#</a></span></h3>
<div class="signature"><ul>
<li><code>code</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> the exit code, if it exited normally.</li>
<li><code>signal</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> the name of the signal (eg. <code>'SIGHUP'</code>) that caused
the process to be killed.</li>
</ul>
</div><p>Similar to the <code>cluster.on('exit')</code> event, but specific to this worker.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> worker <span class="sh_symbol">=</span> cluster<span class="sh_symbol">.</span><span class="sh_function">fork</span><span class="sh_symbol">();</span>
worker<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'exit'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>code<span class="sh_symbol">,</span> signal<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>signal<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`worker was killed by signal<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>signal<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>code <span class="sh_symbol">!==</span> <span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`worker exited <span class="sh_keyword">with</span> error code<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>code<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'worker success!'</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h3>Event: 'listening'<span><a class="mark" href="#cluster_event_listening" id="cluster_event_listening">#</a></span></h3>
<div class="signature"><ul>
<li><code>address</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a></li>
</ul>
</div><p>Similar to the <code>cluster.on('listening')</code> event, but specific to this worker.</p>
<pre class="sh_sourceCode"><code class="lang-js">cluster<span class="sh_symbol">.</span><span class="sh_function">fork</span><span class="sh_symbol">().</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'listening'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>address<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// Worker is listening</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>It is not emitted in the worker.</p>
<h3>Event: 'message'<span><a class="mark" href="#cluster_event_message" id="cluster_event_message">#</a></span></h3>
<div class="signature"><ul>
<li><code>message</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a></li>
</ul>
</div><p>Similar to the <code>cluster.on('message')</code> event, but specific to this worker.</p>
<p>This event is the same as the one provided by <a href="https://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options"><code>child_process.fork()</code></a>.</p>
<p>In a worker you can also use <code>process.on('message')</code>.</p>
<p>As an example, here is a cluster that keeps count of the number of requests
in the master process using the message system:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> cluster <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'cluster'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> http <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'http'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>cluster<span class="sh_symbol">.</span>isMaster<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>

  <span class="sh_comment">// Keep track of http requests</span>
  <span class="sh_keyword">var</span> numReqs <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span>
  <span class="sh_function">setInterval</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'numReqs ='</span><span class="sh_symbol">,</span> numReqs<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">1000</span><span class="sh_symbol">);</span>

  <span class="sh_comment">// Count requests</span>
  <span class="sh_keyword">function</span> <span class="sh_function">messageHandler</span><span class="sh_symbol">(</span>msg<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>msg<span class="sh_symbol">.</span>cmd <span class="sh_symbol">&amp;&amp;</span> msg<span class="sh_symbol">.</span>cmd <span class="sh_symbol">==</span> <span class="sh_string">'notifyRequest'</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
      numReqs <span class="sh_symbol">+=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
    <span class="sh_cbracket">}</span>
  <span class="sh_cbracket">}</span>

  <span class="sh_comment">// Start workers and listen for messages containing notifyRequest</span>
  <span class="sh_keyword">const</span> numCPUs <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'os'</span><span class="sh_symbol">).</span><span class="sh_function">cpus</span><span class="sh_symbol">().</span>length<span class="sh_symbol">;</span>
  <span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_keyword">var</span> i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> numCPUs<span class="sh_symbol">;</span> i<span class="sh_symbol">++)</span> <span class="sh_cbracket">{</span>
    cluster<span class="sh_symbol">.</span><span class="sh_function">fork</span><span class="sh_symbol">();</span>
  <span class="sh_cbracket">}</span>

  <span class="sh_predef_func">Object</span><span class="sh_symbol">.</span><span class="sh_function">keys</span><span class="sh_symbol">(</span>cluster<span class="sh_symbol">.</span>workers<span class="sh_symbol">).</span><span class="sh_function">forEach</span><span class="sh_symbol">((</span>id<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    cluster<span class="sh_symbol">.</span>workers<span class="sh_symbol">[</span>id<span class="sh_symbol">].</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'message'</span><span class="sh_symbol">,</span> messageHandler<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>

  <span class="sh_comment">// Worker processes have a http server.</span>
  http<span class="sh_symbol">.</span><span class="sh_function">Server</span><span class="sh_symbol">((</span>req<span class="sh_symbol">,</span> res<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    res<span class="sh_symbol">.</span><span class="sh_function">writeHead</span><span class="sh_symbol">(</span><span class="sh_number">200</span><span class="sh_symbol">);</span>
    res<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'hello world</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>

    <span class="sh_comment">// notify master about the request</span>
    process<span class="sh_symbol">.</span><span class="sh_function">send</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span> cmd<span class="sh_symbol">:</span> <span class="sh_string">'notifyRequest'</span> <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">8000</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>
</code></pre>
<h3>Event: 'online'<span><a class="mark" href="#cluster_event_online" id="cluster_event_online">#</a></span></h3>
<p>Similar to the <code>cluster.on('online')</code> event, but specific to this worker.</p>
<pre class="sh_sourceCode"><code class="lang-js">cluster<span class="sh_symbol">.</span><span class="sh_function">fork</span><span class="sh_symbol">().</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'online'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// Worker is online</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>It is not emitted in the worker.</p>
<h3>worker.disconnect()<span><a class="mark" href="#cluster_worker_disconnect" id="cluster_worker_disconnect">#</a></span></h3>
<p>In a worker, this function will close all servers, wait for the <code>'close'</code> event on
those servers, and then disconnect the IPC channel.</p>
<p>In the master, an internal message is sent to the worker causing it to call
<code>.disconnect()</code> on itself.</p>
<p>Causes <code>.exitedAfterDisconnect</code> to be set.</p>
<p>Note that after a server is closed, it will no longer accept new connections,
but connections may be accepted by any other listening worker. Existing
connections will be allowed to close as usual. When no more connections exist,
see <a href="https://nodejs.org/api/net.html#net_event_close"><code>server.close()</code></a>, the IPC channel to the worker will close allowing it to
die gracefully.</p>
<p>The above applies <em>only</em> to server connections, client connections are not
automatically closed by workers, and disconnect does not wait for them to close
before exiting.</p>
<p>Note that in a worker, <code>process.disconnect</code> exists, but it is not this function,
it is <a href="https://nodejs.org/api/child_process.html#child_process_child_disconnect"><code>disconnect</code></a>.</p>
<p>Because long living server connections may block workers from disconnecting, it
may be useful to send a message, so application specific actions may be taken to
close them. It also may be useful to implement a timeout, killing a worker if
the <code>'disconnect'</code> event has not been emitted after some time.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">if</span> <span class="sh_symbol">(</span>cluster<span class="sh_symbol">.</span>isMaster<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">var</span> worker <span class="sh_symbol">=</span> cluster<span class="sh_symbol">.</span><span class="sh_function">fork</span><span class="sh_symbol">();</span>
  <span class="sh_keyword">var</span> timeout<span class="sh_symbol">;</span>

  worker<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'listening'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>address<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    worker<span class="sh_symbol">.</span><span class="sh_function">send</span><span class="sh_symbol">(</span><span class="sh_string">'shutdown'</span><span class="sh_symbol">);</span>
    worker<span class="sh_symbol">.</span><span class="sh_function">disconnect</span><span class="sh_symbol">();</span>
    timeout <span class="sh_symbol">=</span> <span class="sh_function">setTimeout</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
      worker<span class="sh_symbol">.</span><span class="sh_function">kill</span><span class="sh_symbol">();</span>
    <span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">2000</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

  worker<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'disconnect'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    <span class="sh_function">clearTimeout</span><span class="sh_symbol">(</span>timeout<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>cluster<span class="sh_symbol">.</span>isWorker<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">const</span> net <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'net'</span><span class="sh_symbol">);</span>
  <span class="sh_keyword">var</span> server <span class="sh_symbol">=</span> net<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">((</span>socket<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// connections never end</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

  server<span class="sh_symbol">.</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">8000</span><span class="sh_symbol">);</span>

  process<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'message'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>msg<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>msg <span class="sh_symbol">===</span> <span class="sh_string">'shutdown'</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
      <span class="sh_comment">// initiate graceful close of any connections to server</span>
    <span class="sh_cbracket">}</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>
</code></pre>
<h3>worker.exitedAfterDisconnect<span><a class="mark" href="#cluster_worker_exitedafterdisconnect" id="cluster_worker_exitedafterdisconnect">#</a></span></h3>
<div class="signature"><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a></li>
</ul>
</div><p>Set by calling <code>.kill()</code> or <code>.disconnect()</code>. Until then, it is <code>undefined</code>.</p>
<p>The boolean <code>worker.exitedAfterDisconnect</code> lets you distinguish between voluntary
and accidental exit, the master may choose not to respawn a worker based on
this value.</p>
<pre class="sh_sourceCode"><code class="lang-js">cluster<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'exit'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>worker<span class="sh_symbol">,</span> code<span class="sh_symbol">,</span> signal<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>worker<span class="sh_symbol">.</span>exitedAfterDisconnect <span class="sh_symbol">===</span> <span class="sh_keyword">true</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Oh, it was just voluntary – no need to worry'</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_comment">// kill worker</span>
worker<span class="sh_symbol">.</span><span class="sh_function">kill</span><span class="sh_symbol">();</span>
</code></pre>
<h3>worker.id<span><a class="mark" href="#cluster_worker_id" id="cluster_worker_id">#</a></span></h3>
<div class="signature"><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
</ul>
</div><p>Each new worker is given its own unique id, this id is stored in the
<code>id</code>.</p>
<p>While a worker is alive, this is the key that indexes it in
cluster.workers</p>
<h3>worker.isConnected()<span><a class="mark" href="#cluster_worker_isconnected" id="cluster_worker_isconnected">#</a></span></h3>
<p>This function returns <code>true</code> if the worker is connected to its master via its IPC
channel, <code>false</code> otherwise. A worker is connected to its master after it's been
created. It is disconnected after the <code>'disconnect'</code> event is emitted.</p>
<h3>worker.isDead()<span><a class="mark" href="#cluster_worker_isdead" id="cluster_worker_isdead">#</a></span></h3>
<p>This function returns <code>true</code> if the worker's process has terminated (either
because of exiting or being signaled). Otherwise, it returns <code>false</code>.</p>
<h3>worker.kill([signal='SIGTERM'])<span><a class="mark" href="#cluster_worker_kill_signal_sigterm" id="cluster_worker_kill_signal_sigterm">#</a></span></h3>
<div class="signature"><ul>
<li><code>signal</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> Name of the kill signal to send to the worker
process.</li>
</ul>
</div><p>This function will kill the worker. In the master, it does this by disconnecting
the <code>worker.process</code>, and once disconnected, killing with <code>signal</code>. In the
worker, it does it by disconnecting the channel, and then exiting with code <code>0</code>.</p>
<p>Causes <code>.exitedAfterDisconnect</code> to be set.</p>
<p>This method is aliased as <code>worker.destroy()</code> for backwards compatibility.</p>
<p>Note that in a worker, <code>process.kill()</code> exists, but it is not this function,
it is <a href="https://nodejs.org/api/process.html#process_process_kill_pid_signal"><code>kill</code></a>.</p>
<h3>worker.process<span><a class="mark" href="#cluster_worker_process" id="cluster_worker_process">#</a></span></h3>
<div class="signature"><ul>
<li><a href="https://nodejs.org/api/child_process.html#child_process_class_childprocess" class="type">&lt;ChildProcess&gt;</a></li>
</ul>
</div><p>All workers are created using <a href="https://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options"><code>child_process.fork()</code></a>, the returned object
from this function is stored as <code>.process</code>. In a worker, the global <code>process</code>
is stored.</p>
<p>See: <a href="https://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options">Child Process module</a></p>
<p>Note that workers will call <code>process.exit(0)</code> if the <code>'disconnect'</code> event occurs
on <code>process</code> and <code>.exitedAfterDisconnect</code> is not <code>true</code>. This protects against
accidental disconnection.</p>
<h3>worker.send(message[, sendHandle][, callback])<span><a class="mark" href="#cluster_worker_send_message_sendhandle_callback" id="cluster_worker_send_message_sendhandle_callback">#</a></span></h3>
<div class="signature"><ul>
<li><code>message</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a></li>
<li><code>sendHandle</code> <a href="https://nodejs.org/api/net.html#net_server_listen_handle_backlog_callback" class="type">&lt;Handle&gt;</a></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
<li>Return: Boolean</li>
</ul>
</div><p>Send a message to a worker or master, optionally with a handle.</p>
<p>In the master this sends a message to a specific worker. It is identical to
<a href="https://nodejs.org/api/child_process.html#child_process_child_send_message_sendhandle_options_callback"><code>ChildProcess.send()</code></a>.</p>
<p>In a worker this sends a message to the master. It is identical to
<code>process.send()</code>.</p>
<p>This example will echo back all messages from the master:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">if</span> <span class="sh_symbol">(</span>cluster<span class="sh_symbol">.</span>isMaster<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">var</span> worker <span class="sh_symbol">=</span> cluster<span class="sh_symbol">.</span><span class="sh_function">fork</span><span class="sh_symbol">();</span>
  worker<span class="sh_symbol">.</span><span class="sh_function">send</span><span class="sh_symbol">(</span><span class="sh_string">'hi there'</span><span class="sh_symbol">);</span>

<span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>cluster<span class="sh_symbol">.</span>isWorker<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  process<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'message'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>msg<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    process<span class="sh_symbol">.</span><span class="sh_function">send</span><span class="sh_symbol">(</span>msg<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>
</code></pre>
<h3>worker.suicide<span><a class="mark" href="#cluster_worker_suicide" id="cluster_worker_suicide">#</a></span></h3>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated<span class="sh_symbol">:</span> Use <a href="#cluster_worker_exitedafterdisconnect"><code>worker<span class="sh_symbol">.</span>exitedAfterDisconnect</code></a> instead<span class="sh_symbol">.</span></pre><p>An alias to <a href="#cluster_worker_exitedafterdisconnect"><code>worker.exitedAfterDisconnect</code></a>.</p>
<p>Set by calling <code>.kill()</code> or <code>.disconnect()</code>. Until then, it is <code>undefined</code>.</p>
<p>The boolean <code>worker.suicide</code> lets you distinguish between voluntary
and accidental exit, the master may choose not to respawn a worker based on
this value.</p>
<pre class="sh_sourceCode"><code class="lang-js">cluster<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'exit'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>worker<span class="sh_symbol">,</span> code<span class="sh_symbol">,</span> signal<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>worker<span class="sh_symbol">.</span>suicide <span class="sh_symbol">===</span> <span class="sh_keyword">true</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Oh, it was just voluntary – no need to worry'</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_comment">// kill worker</span>
worker<span class="sh_symbol">.</span><span class="sh_function">kill</span><span class="sh_symbol">();</span>
</code></pre>
<p>This API only exists for backwards compatibility and will be removed in the
future.</p>
<h2>Event: 'disconnect'<span><a class="mark" href="#cluster_event_disconnect_1" id="cluster_event_disconnect_1">#</a></span></h2>
<div class="signature"><ul>
<li><code>worker</code> <a href="https://nodejs.org/api/cluster.html#cluster_class_worker" class="type">&lt;cluster.Worker&gt;</a></li>
</ul>
</div><p>Emitted after the worker IPC channel has disconnected. This can occur when a
worker exits gracefully, is killed, or is disconnected manually (such as with
worker.disconnect()).</p>
<p>There may be a delay between the <code>'disconnect'</code> and <code>'exit'</code> events.  These events
can be used to detect if the process is stuck in a cleanup or if there are
long-living connections.</p>
<pre class="sh_sourceCode"><code class="lang-js">cluster<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'disconnect'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>worker<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`The worker #$<span class="sh_cbracket">{</span>worker<span class="sh_symbol">.</span>id<span class="sh_cbracket">}</span> has disconnected`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h2>Event: 'exit'<span><a class="mark" href="#cluster_event_exit_1" id="cluster_event_exit_1">#</a></span></h2>
<div class="signature"><ul>
<li><code>worker</code> <a href="https://nodejs.org/api/cluster.html#cluster_class_worker" class="type">&lt;cluster.Worker&gt;</a></li>
<li><code>code</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> the exit code, if it exited normally.</li>
<li><code>signal</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> the name of the signal (eg. <code>'SIGHUP'</code>) that caused
the process to be killed.</li>
</ul>
</div><p>When any of the workers die the cluster module will emit the <code>'exit'</code> event.</p>
<p>This can be used to restart the worker by calling <code>.fork()</code> again.</p>
<pre class="sh_sourceCode"><code class="lang-js">cluster<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'exit'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>worker<span class="sh_symbol">,</span> code<span class="sh_symbol">,</span> signal<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'worker %d died (%s). restarting...'</span><span class="sh_symbol">,</span>
    worker<span class="sh_symbol">.</span>process<span class="sh_symbol">.</span>pid<span class="sh_symbol">,</span> signal <span class="sh_symbol">||</span> code<span class="sh_symbol">);</span>
  cluster<span class="sh_symbol">.</span><span class="sh_function">fork</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>See <a href="https://nodejs.org/api/child_process.html#child_process_event_exit">child_process event: 'exit'</a>.</p>
<h2>Event: 'fork'<span><a class="mark" href="#cluster_event_fork" id="cluster_event_fork">#</a></span></h2>
<div class="signature"><ul>
<li><code>worker</code> <a href="https://nodejs.org/api/cluster.html#cluster_class_worker" class="type">&lt;cluster.Worker&gt;</a></li>
</ul>
</div><p>When a new worker is forked the cluster module will emit a <code>'fork'</code> event.
This can be used to log worker activity, and create your own timeout.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">var</span> timeouts <span class="sh_symbol">=</span> <span class="sh_symbol">[];</span>
<span class="sh_keyword">function</span> <span class="sh_function">errorMsg</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span><span class="sh_string">'Something must be wrong with the connection ...'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

cluster<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'fork'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>worker<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  timeouts<span class="sh_symbol">[</span>worker<span class="sh_symbol">.</span>id<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_function">setTimeout</span><span class="sh_symbol">(</span>errorMsg<span class="sh_symbol">,</span> <span class="sh_number">2000</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
cluster<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'listening'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>worker<span class="sh_symbol">,</span> address<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_function">clearTimeout</span><span class="sh_symbol">(</span>timeouts<span class="sh_symbol">[</span>worker<span class="sh_symbol">.</span>id<span class="sh_symbol">]);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
cluster<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'exit'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>worker<span class="sh_symbol">,</span> code<span class="sh_symbol">,</span> signal<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_function">clearTimeout</span><span class="sh_symbol">(</span>timeouts<span class="sh_symbol">[</span>worker<span class="sh_symbol">.</span>id<span class="sh_symbol">]);</span>
  <span class="sh_function">errorMsg</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h2>Event: 'listening'<span><a class="mark" href="#cluster_event_listening_1" id="cluster_event_listening_1">#</a></span></h2>
<div class="signature"><ul>
<li><code>worker</code> <a href="https://nodejs.org/api/cluster.html#cluster_class_worker" class="type">&lt;cluster.Worker&gt;</a></li>
<li><code>address</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a></li>
</ul>
</div><p>After calling <code>listen()</code> from a worker, when the <code>'listening'</code> event is emitted on
the server, a <code>'listening'</code> event will also be emitted on <code>cluster</code> in the master.</p>
<p>The event handler is executed with two arguments, the <code>worker</code> contains the worker
object and the <code>address</code> object contains the following connection properties:
<code>address</code>, <code>port</code> and <code>addressType</code>. This is very useful if the worker is listening
on more than one address.</p>
<pre class="sh_sourceCode"><code class="lang-js">cluster<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'listening'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>worker<span class="sh_symbol">,</span> address<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>
    `A worker is now connected to $<span class="sh_cbracket">{</span>address<span class="sh_symbol">.</span>address<span class="sh_cbracket">}</span><span class="sh_symbol">:</span>$<span class="sh_cbracket">{</span>address<span class="sh_symbol">.</span>port<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>The <code>addressType</code> is one of:</p>
<ul>
<li><code>4</code> (TCPv4)</li>
<li><code>6</code> (TCPv6)</li>
<li><code>-1</code> (unix domain socket)</li>
<li><code>"udp4"</code> or <code>"udp6"</code> (UDP v4 or v6)</li>
</ul>
<h2>Event: 'message'<span><a class="mark" href="#cluster_event_message_1" id="cluster_event_message_1">#</a></span></h2>
<div class="signature"><ul>
<li><code>worker</code> <a href="https://nodejs.org/api/cluster.html#cluster_class_worker" class="type">&lt;cluster.Worker&gt;</a></li>
<li><code>message</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a></li>
<li><code>handle</code> <span class="type">&lt;undefined&gt;</span> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a></li>
</ul>
</div><p>Emitted when any worker receives a message.</p>
<p>See <a href="https://nodejs.org/api/child_process.html#child_process_event_message">child_process event: 'message'</a>.</p>
<p>Before Node.js v6.0, this event emitted only the message and the handle,
but not the worker object, contrary to what the documentation stated.</p>
<p>If you need to support older versions and don't need the worker object,
you can work around the discrepancy by checking the number of arguments:</p>
<pre class="sh_sourceCode"><code class="lang-js">cluster<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'message'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>worker<span class="sh_symbol">,</span> message<span class="sh_symbol">,</span> handle<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span><span class="sh_predef_var">arguments</span><span class="sh_symbol">.</span>length <span class="sh_symbol">===</span> <span class="sh_number">2</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    handle <span class="sh_symbol">=</span> message<span class="sh_symbol">;</span>
    message <span class="sh_symbol">=</span> worker<span class="sh_symbol">;</span>
    worker <span class="sh_symbol">=</span> <span class="sh_predef_var">undefined</span><span class="sh_symbol">;</span>
  <span class="sh_cbracket">}</span>
  <span class="sh_comment">// ...</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h2>Event: 'online'<span><a class="mark" href="#cluster_event_online_1" id="cluster_event_online_1">#</a></span></h2>
<div class="signature"><ul>
<li><code>worker</code> <a href="https://nodejs.org/api/cluster.html#cluster_class_worker" class="type">&lt;cluster.Worker&gt;</a></li>
</ul>
</div><p>After forking a new worker, the worker should respond with an online message.
When the master receives an online message it will emit this event.
The difference between <code>'fork'</code> and <code>'online'</code> is that fork is emitted when the
master forks a worker, and 'online' is emitted when the worker is running.</p>
<pre class="sh_sourceCode"><code class="lang-js">cluster<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'online'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>worker<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Yay, the worker responded after it was forked'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h2>Event: 'setup'<span><a class="mark" href="#cluster_event_setup" id="cluster_event_setup">#</a></span></h2>
<div class="signature"><ul>
<li><code>settings</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a></li>
</ul>
</div><p>Emitted every time <code>.setupMaster()</code> is called.</p>
<p>The <code>settings</code> object is the <code>cluster.settings</code> object at the time
<code>.setupMaster()</code> was called and is advisory only, since multiple calls to
<code>.setupMaster()</code> can be made in a single tick.</p>
<p>If accuracy is important, use <code>cluster.settings</code>.</p>
<h2>cluster.disconnect([callback])<span><a class="mark" href="#cluster_cluster_disconnect_callback" id="cluster_cluster_disconnect_callback">#</a></span></h2>
<div class="signature"><ul>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> called when all workers are disconnected and handles are
closed</li>
</ul>
</div><p>Calls <code>.disconnect()</code> on each worker in <code>cluster.workers</code>.</p>
<p>When they are disconnected all internal handles will be closed, allowing the
master process to die gracefully if no other event is waiting.</p>
<p>The method takes an optional callback argument which will be called when finished.</p>
<p>This can only be called from the master process.</p>
<h2>cluster.fork([env])<span><a class="mark" href="#cluster_cluster_fork_env" id="cluster_cluster_fork_env">#</a></span></h2>
<div class="signature"><ul>
<li><code>env</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> Key/value pairs to add to worker process environment.</li>
<li>return <a href="https://nodejs.org/api/cluster.html#cluster_class_worker" class="type">&lt;cluster.Worker&gt;</a></li>
</ul>
</div><p>Spawn a new worker process.</p>
<p>This can only be called from the master process.</p>
<h2>cluster.isMaster<span><a class="mark" href="#cluster_cluster_ismaster" id="cluster_cluster_ismaster">#</a></span></h2>
<div class="signature"><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a></li>
</ul>
</div><p>True if the process is a master. This is determined
by the <code>process.env.NODE_UNIQUE_ID</code>. If <code>process.env.NODE_UNIQUE_ID</code> is
undefined, then <code>isMaster</code> is <code>true</code>.</p>
<h2>cluster.isWorker<span><a class="mark" href="#cluster_cluster_isworker" id="cluster_cluster_isworker">#</a></span></h2>
<div class="signature"><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a></li>
</ul>
</div><p>True if the process is not a master (it is the negation of <code>cluster.isMaster</code>).</p>
<h2>cluster.schedulingPolicy<span><a class="mark" href="#cluster_cluster_schedulingpolicy" id="cluster_cluster_schedulingpolicy">#</a></span></h2>
<p>The scheduling policy, either <code>cluster.SCHED_RR</code> for round-robin or
<code>cluster.SCHED_NONE</code> to leave it to the operating system. This is a
global setting and effectively frozen once you spawn the first worker
or call <code>cluster.setupMaster()</code>, whatever comes first.</p>
<p><code>SCHED_RR</code> is the default on all operating systems except Windows.
Windows will change to <code>SCHED_RR</code> once libuv is able to effectively
distribute IOCP handles without incurring a large performance hit.</p>
<p><code>cluster.schedulingPolicy</code> can also be set through the
<code>NODE_CLUSTER_SCHED_POLICY</code> environment variable. Valid
values are <code>"rr"</code> and <code>"none"</code>.</p>
<h2>cluster.settings<span><a class="mark" href="#cluster_cluster_settings" id="cluster_cluster_settings">#</a></span></h2>
<div class="signature"><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>execArgv</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" class="type">&lt;Array&gt;</a> list of string arguments passed to the Node.js
executable. (Default=<code>process.execArgv</code>)</li>
<li><code>exec</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> file path to worker file.  (Default=<code>process.argv[1]</code>)</li>
<li><code>args</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" class="type">&lt;Array&gt;</a> string arguments passed to worker.
(Default=<code>process.argv.slice(2)</code>)</li>
<li><code>silent</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> whether or not to send output to parent's stdio.
(Default=<code>false</code>)</li>
<li><code>uid</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Sets the user identity of the process. (See <a href="http://man7.org/linux/man-pages/man2/setuid.2.html">setuid(2)</a>.)</li>
<li><code>gid</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Sets the group identity of the process. (See <a href="http://man7.org/linux/man-pages/man2/setgid.2.html">setgid(2)</a>.)</li>
</ul>
</li>
</ul>
</div><p>After calling <code>.setupMaster()</code> (or <code>.fork()</code>) this settings object will contain
the settings, including the default values.</p>
<p>This object is not supposed to be changed or set manually, by you.</p>
<h2>cluster.setupMaster([settings])<span><a class="mark" href="#cluster_cluster_setupmaster_settings" id="cluster_cluster_setupmaster_settings">#</a></span></h2>
<div class="signature"><ul>
<li><code>settings</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>exec</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> file path to worker file.  (Default=<code>process.argv[1]</code>)</li>
<li><code>args</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" class="type">&lt;Array&gt;</a> string arguments passed to worker.
(Default=<code>process.argv.slice(2)</code>)</li>
<li><code>silent</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> whether or not to send output to parent's stdio.
(Default=<code>false</code>)</li>
</ul>
</li>
</ul>
</div><p><code>setupMaster</code> is used to change the default 'fork' behavior. Once called,
the settings will be present in <code>cluster.settings</code>.</p>
<p>Note that:</p>
<ul>
<li>any settings changes only affect future calls to <code>.fork()</code> and have no
effect on workers that are already running</li>
<li>The <em>only</em> attribute of a worker that cannot be set via <code>.setupMaster()</code> is
the <code>env</code> passed to <code>.fork()</code></li>
<li>the defaults above apply to the first call only, the defaults for later
calls is the current value at the time of <code>cluster.setupMaster()</code> is called</li>
</ul>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> cluster <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'cluster'</span><span class="sh_symbol">);</span>
cluster<span class="sh_symbol">.</span><span class="sh_function">setupMaster</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>
  exec<span class="sh_symbol">:</span> <span class="sh_string">'worker.js'</span><span class="sh_symbol">,</span>
  args<span class="sh_symbol">:</span> <span class="sh_symbol">[</span><span class="sh_string">'--use'</span><span class="sh_symbol">,</span> <span class="sh_string">'https'</span><span class="sh_symbol">],</span>
  silent<span class="sh_symbol">:</span> <span class="sh_keyword">true</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
cluster<span class="sh_symbol">.</span><span class="sh_function">fork</span><span class="sh_symbol">();</span> <span class="sh_comment">// https worker</span>
cluster<span class="sh_symbol">.</span><span class="sh_function">setupMaster</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>
  exec<span class="sh_symbol">:</span> <span class="sh_string">'worker.js'</span><span class="sh_symbol">,</span>
  args<span class="sh_symbol">:</span> <span class="sh_symbol">[</span><span class="sh_string">'--use'</span><span class="sh_symbol">,</span> <span class="sh_string">'http'</span><span class="sh_symbol">]</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
cluster<span class="sh_symbol">.</span><span class="sh_function">fork</span><span class="sh_symbol">();</span> <span class="sh_comment">// http worker</span>
</code></pre>
<p>This can only be called from the master process.</p>
<h2>cluster.worker<span><a class="mark" href="#cluster_cluster_worker" id="cluster_cluster_worker">#</a></span></h2>
<div class="signature"><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a></li>
</ul>
</div><p>A reference to the current worker object. Not available in the master process.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> cluster <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'cluster'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>cluster<span class="sh_symbol">.</span>isMaster<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'I am master'</span><span class="sh_symbol">);</span>
  cluster<span class="sh_symbol">.</span><span class="sh_function">fork</span><span class="sh_symbol">();</span>
  cluster<span class="sh_symbol">.</span><span class="sh_function">fork</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>cluster<span class="sh_symbol">.</span>isWorker<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`I am worker #$<span class="sh_cbracket">{</span>cluster<span class="sh_symbol">.</span>worker<span class="sh_symbol">.</span>id<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>
</code></pre>
<h2>cluster.workers<span><a class="mark" href="#cluster_cluster_workers" id="cluster_cluster_workers">#</a></span></h2>
<div class="signature"><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a></li>
</ul>
</div><p>A hash that stores the active worker objects, keyed by <code>id</code> field. Makes it
easy to loop through all the workers. It is only available in the master
process.</p>
<p>A worker is removed from cluster.workers after the worker has disconnected <em>and</em>
exited. The order between these two events cannot be determined in advance.
However, it is guaranteed that the removal from the cluster.workers list happens
before last <code>'disconnect'</code> or <code>'exit'</code> event is emitted.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// Go through all workers</span>
<span class="sh_keyword">function</span> <span class="sh_function">eachWorker</span><span class="sh_symbol">(</span>callback<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_keyword">var</span> id <span class="sh_keyword">in</span> cluster<span class="sh_symbol">.</span>workers<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_function">callback</span><span class="sh_symbol">(</span>cluster<span class="sh_symbol">.</span>workers<span class="sh_symbol">[</span>id<span class="sh_symbol">]);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>
<span class="sh_function">eachWorker</span><span class="sh_symbol">((</span>worker<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  worker<span class="sh_symbol">.</span><span class="sh_function">send</span><span class="sh_symbol">(</span><span class="sh_string">'big announcement to all workers'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>Should you wish to reference a worker over a communication channel, using
the worker's unique id is the easiest way to find the worker.</p>
<pre class="sh_sourceCode"><code class="lang-js">socket<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>id<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">var</span> worker <span class="sh_symbol">=</span> cluster<span class="sh_symbol">.</span>workers<span class="sh_symbol">[</span>id<span class="sh_symbol">];</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<!-- [end-include:cluster.md] -->
<!-- [start-include:cli.md] -->
<h1>Command Line Options<span><a class="mark" href="#cli_command_line_options" id="cli_command_line_options">#</a></span></h1>
<!--type=misc-->
<p>Node.js comes with a variety of CLI options. These options expose built-in
debugging, multiple ways to execute scripts, and other helpful runtime options.</p>
<p>To view this documentation as a manual page in your terminal, run <code>man node</code>.</p>
<h2>Synopsis<span><a class="mark" href="#cli_synopsis" id="cli_synopsis">#</a></span></h2>
<p><code>node [options] [v8 options] [script.js | -e "script"] [arguments]</code></p>
<p><code>node debug [script.js | -e "script" | &lt;host&gt;:&lt;port&gt;] …</code></p>
<p><code>node --v8-options</code></p>
<p>Execute without arguments to start the <a href="https://nodejs.org/api/repl.html">REPL</a>.</p>
<p><em>For more info about <code>node debug</code>, please see the <a href="https://nodejs.org/api/debugger.html">debugger</a> documentation.</em></p>
<h2>Options<span><a class="mark" href="#cli_options" id="cli_options">#</a></span></h2>
<h3><code>-v</code>, <code>--version</code><span><a class="mark" href="#cli_v_version" id="cli_v_version">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.3</span>
</div><p>Print node's version.</p>
<h3><code>-h</code>, <code>--help</code><span><a class="mark" href="#cli_h_help" id="cli_h_help">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.3</span>
</div><p>Print node command line options.
The output of this option is less detailed than this document.</p>
<h3><code>-e</code>, <code>--eval "script"</code><span><a class="mark" href="#cli_e_eval_script" id="cli_e_eval_script">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.5.2</span>
</div><p>Evaluate the following argument as JavaScript. The modules which are
predefined in the REPL can also be used in <code>script</code>.</p>
<h3><code>-p</code>, <code>--print "script"</code><span><a class="mark" href="#cli_p_print_script" id="cli_p_print_script">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.6.4</span>
</div><p>Identical to <code>-e</code> but prints the result.</p>
<h3><code>-c</code>, <code>--check</code><span><a class="mark" href="#cli_c_check" id="cli_c_check">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v5.0.0</span>
</div><p>Syntax check the script without executing.</p>
<h3><code>-i</code>, <code>--interactive</code><span><a class="mark" href="#cli_i_interactive" id="cli_i_interactive">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.7.7</span>
</div><p>Opens the REPL even if stdin does not appear to be a terminal.</p>
<h3><code>-r</code>, <code>--require module</code><span><a class="mark" href="#cli_r_require_module" id="cli_r_require_module">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v1.6.0</span>
</div><p>Preload the specified module at startup.</p>
<p>Follows <code>require()</code>'s module resolution
rules. <code>module</code> may be either a path to a file, or a node module name.</p>
<h3><code>--no-deprecation</code><span><a class="mark" href="#cli_no_deprecation" id="cli_no_deprecation">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.8.0</span>
</div><p>Silence deprecation warnings.</p>
<h3><code>--trace-deprecation</code><span><a class="mark" href="#cli_trace_deprecation" id="cli_trace_deprecation">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.8.0</span>
</div><p>Print stack traces for deprecations.</p>
<h3><code>--throw-deprecation</code><span><a class="mark" href="#cli_throw_deprecation" id="cli_throw_deprecation">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.11.14</span>
</div><p>Throw errors for deprecations.</p>
<h3><code>--no-warnings</code><span><a class="mark" href="#cli_no_warnings" id="cli_no_warnings">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v6.0.0</span>
</div><p>Silence all process warnings (including deprecations).</p>
<h3><code>--trace-warnings</code><span><a class="mark" href="#cli_trace_warnings" id="cli_trace_warnings">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v6.0.0</span>
</div><p>Print stack traces for process warnings (including deprecations).</p>
<h3><code>--trace-sync-io</code><span><a class="mark" href="#cli_trace_sync_io" id="cli_trace_sync_io">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v2.1.0</span>
</div><p>Prints a stack trace whenever synchronous I/O is detected after the first turn
of the event loop.</p>
<h3><code>--zero-fill-buffers</code><span><a class="mark" href="#cli_zero_fill_buffers" id="cli_zero_fill_buffers">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v6.0.0</span>
</div><p>Automatically zero-fills all newly allocated <a href="https://nodejs.org/api/buffer.html">Buffer</a> and <a href="https://nodejs.org/api/buffer.html#buffer_class_slowbuffer">SlowBuffer</a>
instances.</p>
<h3><code>--preserve-symlinks</code><span><a class="mark" href="#cli_preserve_symlinks" id="cli_preserve_symlinks">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v6.3.0</span>
</div><p>Instructs the module loader to preserve symbolic links when resolving and
caching modules.</p>
<p>By default, when Node.js loads a module from a path that is symbolically linked
to a different on-disk location, Node.js will dereference the link and use the
actual on-disk "real path" of the module as both an identifier and as a root
path to locate other dependency modules. In most cases, this default behavior
is acceptable. However, when using symbolically linked peer dependencies, as
illustrated in the example below, the default behavior causes an exception to
be thrown if <code>moduleA</code> attempts to require <code>moduleB</code> as a peer dependency:</p>
<pre class="sh_sourceCode"><code class="lang-text"><span class="sh_cbracket">{</span>appDir<span class="sh_cbracket">}</span>
 ├── app
 │   ├── index<span class="sh_symbol">.</span>js
 │   └── node_modules
 │       ├── moduleA <span class="sh_symbol">-&gt;</span> <span class="sh_cbracket">{</span>appDir<span class="sh_cbracket">}</span><span class="sh_symbol">/</span>moduleA
 │       └── moduleB
 │           ├── index<span class="sh_symbol">.</span>js
 │           └── package<span class="sh_symbol">.</span>json
 └── moduleA
     ├── index<span class="sh_symbol">.</span>js
     └── package<span class="sh_symbol">.</span>json
</code></pre>
<p>The <code>--preserve-symlinks</code> command line flag instructs Node.js to use the
symlink path for modules as opposed to the real path, allowing symbolically
linked peer dependencies to be found.</p>
<p>Note, however, that using <code>--preserve-symlinks</code> can have other side effects.
Specifically, symbolically linked <em>native</em> modules can fail to load if those
are linked from more than one location in the dependency tree (Node.js would
see those as two separate modules and would attempt to load the module multiple
times, causing an exception to be thrown).</p>
<h3><code>--track-heap-objects</code><span><a class="mark" href="#cli_track_heap_objects" id="cli_track_heap_objects">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v2.4.0</span>
</div><p>Track heap object allocations for heap snapshots.</p>
<h3><code>--prof-process</code><span><a class="mark" href="#cli_prof_process" id="cli_prof_process">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v6.0.0</span>
</div><p>Process v8 profiler output generated using the v8 option <code>--prof</code>.</p>
<h3><code>--v8-options</code><span><a class="mark" href="#cli_v8_options" id="cli_v8_options">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.3</span>
</div><p>Print v8 command line options.</p>
<p>Note: v8 options allow words to be separated by both dashes (<code>-</code>) or underscores
(<code>_</code>).</p>
<p>For example, <code>--stack-trace-limit</code> is equivalent to <code>--stack_trace_limit</code>.</p>
<h3><code>--tls-cipher-list=list</code><span><a class="mark" href="#cli_tls_cipher_list_list" id="cli_tls_cipher_list_list">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v4.0.0</span>
</div><p>Specify an alternative default TLS cipher list. (Requires Node.js to be built
with crypto support. (Default))</p>
<h3><code>--enable-fips</code><span><a class="mark" href="#cli_enable_fips" id="cli_enable_fips">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v6.0.0</span>
</div><p>Enable FIPS-compliant crypto at startup. (Requires Node.js to be built with
<code>./configure --openssl-fips</code>)</p>
<h3><code>--force-fips</code><span><a class="mark" href="#cli_force_fips" id="cli_force_fips">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v6.0.0</span>
</div><p>Force FIPS-compliant crypto on startup. (Cannot be disabled from script code.)
(Same requirements as <code>--enable-fips</code>)</p>
<h3><code>--icu-data-dir=file</code><span><a class="mark" href="#cli_icu_data_dir_file" id="cli_icu_data_dir_file">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.11.15</span>
</div><p>Specify ICU data load path. (overrides <code>NODE_ICU_DATA</code>)</p>
<h2>Environment Variables<span><a class="mark" href="#cli_environment_variables" id="cli_environment_variables">#</a></span></h2>
<h3><code>NODE_DEBUG=module[,…]</code><span><a class="mark" href="#cli_node_debug_module" id="cli_node_debug_module">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.32</span>
</div><p><code>','</code>-separated list of core modules that should print debug information.</p>
<h3><code>NODE_PATH=path[:…]</code><span><a class="mark" href="#cli_node_path_path" id="cli_node_path_path">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.32</span>
</div><p><code>':'</code>-separated list of directories prefixed to the module search path.</p>
<p><em>Note: on Windows, this is a <code>';'</code>-separated list instead.</em></p>
<h3><code>NODE_DISABLE_COLORS=1</code><span><a class="mark" href="#cli_node_disable_colors_1" id="cli_node_disable_colors_1">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.3.0</span>
</div><p>When set to <code>1</code> colors will not be used in the REPL.</p>
<h3><code>NODE_ICU_DATA=file</code><span><a class="mark" href="#cli_node_icu_data_file" id="cli_node_icu_data_file">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.11.15</span>
</div><p>Data path for ICU (Intl object) data. Will extend linked-in data when compiled
with small-icu support.</p>
<h3><code>NODE_REPL_HISTORY=file</code><span><a class="mark" href="#cli_node_repl_history_file" id="cli_node_repl_history_file">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v5.0.0</span>
</div><p>Path to the file used to store the persistent REPL history. The default path is
<code>~/.node_repl_history</code>, which is overridden by this variable. Setting the value
to an empty string (<code>""</code> or <code>" "</code>) disables persistent REPL history.</p>
<!-- [end-include:cli.md] -->
<!-- [start-include:console.md] -->
<h1>Console<span><a class="mark" href="#console_console" id="console_console">#</a></span></h1>
<pre class="api_stability api_stability_2 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> Stable</pre><p>The <code>console</code> module provides a simple debugging console that is similar to the
JavaScript console mechanism provided by web browsers.</p>
<p>The module exports two specific components:</p>
<ul>
<li>A <code>Console</code> class with methods such as <code>console.log()</code>, <code>console.error()</code> and
<code>console.warn()</code> that can be used to write to any Node.js stream.</li>
<li>A global <code>console</code> instance configured to write to <code>stdout</code> and <code>stderr</code>.
Because this object is global, it can be used without calling
<code>require('console')</code>.</li>
</ul>
<p>Example using the global <code>console</code>:</p>
<pre class="sh_sourceCode"><code class="lang-js">console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'hello world'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: hello world, to stdout</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'hello %s'</span><span class="sh_symbol">,</span> <span class="sh_string">'world'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: hello world, to stdout</span>
console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span><span class="sh_keyword">new</span> <span class="sh_predef_func">Error</span><span class="sh_symbol">(</span><span class="sh_string">'Whoops, something bad happened'</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// Prints: [Error: Whoops, something bad happened], to stderr</span>

<span class="sh_keyword">const</span> name <span class="sh_symbol">=</span> <span class="sh_string">'Will Robinson'</span><span class="sh_symbol">;</span>
console<span class="sh_symbol">.</span><span class="sh_function">warn</span><span class="sh_symbol">(</span>`Danger $<span class="sh_cbracket">{</span>name<span class="sh_cbracket">}</span><span class="sh_symbol">!</span> Danger<span class="sh_symbol">!</span>`<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: Danger Will Robinson! Danger!, to stderr</span>
</code></pre>
<p>Example using the <code>Console</code> class:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> out <span class="sh_symbol">=</span> <span class="sh_function">getStreamSomehow</span><span class="sh_symbol">();</span>
<span class="sh_keyword">const</span> err <span class="sh_symbol">=</span> <span class="sh_function">getStreamSomehow</span><span class="sh_symbol">();</span>
<span class="sh_keyword">const</span> myConsole <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> console<span class="sh_symbol">.</span><span class="sh_function">Console</span><span class="sh_symbol">(</span>out<span class="sh_symbol">,</span> err<span class="sh_symbol">);</span>

myConsole<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'hello world'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: hello world, to out</span>
myConsole<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'hello %s'</span><span class="sh_symbol">,</span> <span class="sh_string">'world'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: hello world, to out</span>
myConsole<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span><span class="sh_keyword">new</span> <span class="sh_predef_func">Error</span><span class="sh_symbol">(</span><span class="sh_string">'Whoops, something bad happened'</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// Prints: [Error: Whoops, something bad happened], to err</span>

<span class="sh_keyword">const</span> name <span class="sh_symbol">=</span> <span class="sh_string">'Will Robinson'</span><span class="sh_symbol">;</span>
myConsole<span class="sh_symbol">.</span><span class="sh_function">warn</span><span class="sh_symbol">(</span>`Danger $<span class="sh_cbracket">{</span>name<span class="sh_cbracket">}</span><span class="sh_symbol">!</span> Danger<span class="sh_symbol">!</span>`<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: Danger Will Robinson! Danger!, to err</span>
</code></pre>
<p>While the API for the <code>Console</code> class is designed fundamentally around the
browser <code>console</code> object, the <code>Console</code> in Node.js is <em>not</em> intended to
duplicate the browser's functionality exactly.</p>
<h2>Asynchronous vs Synchronous Consoles<span><a class="mark" href="#console_asynchronous_vs_synchronous_consoles" id="console_asynchronous_vs_synchronous_consoles">#</a></span></h2>
<p>The console functions are usually asynchronous unless the destination is a file.
Disks are fast and operating systems normally employ write-back caching;
it should be a very rare occurrence indeed that a write blocks, but it
is possible.</p>
<p>Additionally, console functions are blocking when outputting to TTYs
(terminals) on OS X as a workaround for the OS's very small, 1kb buffer size.
This is to prevent interleaving between <code>stdout</code> and <code>stderr</code>.</p>
<h2>Class: Console<span><a class="mark" href="#console_class_console" id="console_class_console">#</a></span></h2>
<!--type=class-->
<p>The <code>Console</code> class can be used to create a simple logger with configurable
output streams and can be accessed using either <code>require('console').Console</code>
or <code>console.Console</code>:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> Console <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'console'</span><span class="sh_symbol">).</span>Console<span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> Console <span class="sh_symbol">=</span> console<span class="sh_symbol">.</span>Console<span class="sh_symbol">;</span>
</code></pre>
<h3>new Console(stdout[, stderr])<span><a class="mark" href="#console_new_console_stdout_stderr" id="console_new_console_stdout_stderr">#</a></span></h3>
<p>Creates a new <code>Console</code> by passing one or two writable stream instances.
<code>stdout</code> is a writable stream to print log or info output. <code>stderr</code>
is used for warning or error output. If <code>stderr</code> isn't passed, warning and error
output will be sent to <code>stdout</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> output <span class="sh_symbol">=</span> fs<span class="sh_symbol">.</span><span class="sh_function">createWriteStream</span><span class="sh_symbol">(</span><span class="sh_string">'./stdout.log'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> errorOutput <span class="sh_symbol">=</span> fs<span class="sh_symbol">.</span><span class="sh_function">createWriteStream</span><span class="sh_symbol">(</span><span class="sh_string">'./stderr.log'</span><span class="sh_symbol">);</span>
<span class="sh_comment">// custom simple logger</span>
<span class="sh_keyword">const</span> logger <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Console</span><span class="sh_symbol">(</span>output<span class="sh_symbol">,</span> errorOutput<span class="sh_symbol">);</span>
<span class="sh_comment">// use it like console</span>
<span class="sh_keyword">var</span> count <span class="sh_symbol">=</span> <span class="sh_number">5</span><span class="sh_symbol">;</span>
logger<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'count: %d'</span><span class="sh_symbol">,</span> count<span class="sh_symbol">);</span>
<span class="sh_comment">// in stdout.log: count 5</span>
</code></pre>
<p>The global <code>console</code> is a special <code>Console</code> whose output is sent to
<a href="https://nodejs.org/api/process.html#process_process_stdout"><code>process.stdout</code></a> and <a href="https://nodejs.org/api/process.html#process_process_stderr"><code>process.stderr</code></a>. It is equivalent to calling:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">new</span> <span class="sh_function">Console</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>stdout<span class="sh_symbol">,</span> process<span class="sh_symbol">.</span>stderr<span class="sh_symbol">);</span>
</code></pre>
<h3>console.assert(value[, message][, ...])<span><a class="mark" href="#console_console_assert_value_message" id="console_console_assert_value_message">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.101</span>
</div><p>A simple assertion test that verifies whether <code>value</code> is truthy. If it is not,
an <code>AssertionError</code> is thrown. If provided, the error <code>message</code> is formatted
using <a href="https://nodejs.org/api/util.html#util_util_format_format"><code>util.format()</code></a> and used as the error message.</p>
<pre class="sh_sourceCode"><code class="lang-js">console<span class="sh_symbol">.</span><span class="sh_function">assert</span><span class="sh_symbol">(</span><span class="sh_keyword">true</span><span class="sh_symbol">,</span> <span class="sh_string">'does nothing'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// OK</span>
console<span class="sh_symbol">.</span><span class="sh_function">assert</span><span class="sh_symbol">(</span><span class="sh_keyword">false</span><span class="sh_symbol">,</span> <span class="sh_string">'Whoops %s'</span><span class="sh_symbol">,</span> <span class="sh_string">'didn</span><span class="sh_specialchar">\'</span><span class="sh_string">t work'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// AssertionError: Whoops didn't work</span>
</code></pre>
<p><em>Note: the <code>console.assert()</code> method is implemented differently in Node.js
than the <code>console.assert()</code> method <a href="https://developer.mozilla.org/en-US/docs/Web/API/console/assert">available in browsers</a>.</em></p>
<p>Specifically, in browsers, calling <code>console.assert()</code> with a falsy
assertion will cause the <code>message</code> to be printed to the console without
interrupting execution of subsequent code. In Node.js, however, a falsy
assertion will cause an <code>AssertionError</code> to be thrown.</p>
<p>Functionality approximating that implemented by browsers can be implemented
by extending Node.js' <code>console</code> and overriding the <code>console.assert()</code> method.</p>
<p>In the following example, a simple module is created that extends and overrides
the default behavior of <code>console</code> in Node.js.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_string">'use strict'</span><span class="sh_symbol">;</span>

<span class="sh_comment">// Creates a simple extension of console with a</span>
<span class="sh_comment">// new impl for assert without monkey-patching.</span>
<span class="sh_keyword">const</span> myConsole <span class="sh_symbol">=</span> <span class="sh_predef_func">Object</span><span class="sh_symbol">.</span><span class="sh_function">setPrototypeOf</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>
  <span class="sh_function">assert</span><span class="sh_symbol">(</span>assertion<span class="sh_symbol">,</span> message<span class="sh_symbol">,</span> <span class="sh_symbol">...</span>args<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">try</span> <span class="sh_cbracket">{</span>
      console<span class="sh_symbol">.</span><span class="sh_function">assert</span><span class="sh_symbol">(</span>assertion<span class="sh_symbol">,</span> message<span class="sh_symbol">,</span> <span class="sh_symbol">...</span>args<span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span> <span class="sh_keyword">catch</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
      console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span>err<span class="sh_symbol">.</span>stack<span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">,</span> console<span class="sh_symbol">);</span>

module<span class="sh_symbol">.</span>exports <span class="sh_symbol">=</span> myConsole<span class="sh_symbol">;</span>
</code></pre>
<p>This can then be used as a direct replacement for the built in console:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> console <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./myConsole'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">assert</span><span class="sh_symbol">(</span><span class="sh_keyword">false</span><span class="sh_symbol">,</span> <span class="sh_string">'this message will print, but no error thrown'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'this will also print'</span><span class="sh_symbol">);</span>
</code></pre>
<h3>console.dir(obj[, options])<span><a class="mark" href="#console_console_dir_obj_options" id="console_console_dir_obj_options">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.101</span>
</div><p>Uses <a href="https://nodejs.org/api/util.html#util_util_inspect_object_options"><code>util.inspect()</code></a> on <code>obj</code> and prints the resulting string to <code>stdout</code>.
This function bypasses any custom <code>inspect()</code> function defined on <code>obj</code>. An
optional <code>options</code> object may be passed to alter certain aspects of the
formatted string:</p>
<ul>
<li><p><code>showHidden</code> - if <code>true</code> then the object's non-enumerable and symbol
properties will be shown too. Defaults to <code>false</code>.</p>
</li>
<li><p><code>depth</code> - tells <a href="https://nodejs.org/api/util.html#util_util_inspect_object_options"><code>util.inspect()</code></a> how many times to recurse while
formatting the object. This is useful for inspecting large complicated objects.
Defaults to <code>2</code>. To make it recurse indefinitely, pass <code>null</code>.</p>
</li>
<li><p><code>colors</code> - if <code>true</code>, then the output will be styled with ANSI color codes.
Defaults to <code>false</code>. Colors are customizable; see
<a href="https://nodejs.org/api/util.html#util_customizing_util_inspect_colors">customizing <code>util.inspect()</code> colors</a>.</p>
</li>
</ul>
<h3>console.error([data][, ...])<span><a class="mark" href="#console_console_error_data" id="console_console_error_data">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.100</span>
</div><p>Prints to <code>stderr</code> with newline. Multiple arguments can be passed, with the
first used as the primary message and all additional used as substitution
values similar to <code>printf(3)</code> (the arguments are all passed to
<a href="https://nodejs.org/api/util.html#util_util_format_format"><code>util.format()</code></a>).</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> code <span class="sh_symbol">=</span> <span class="sh_number">5</span><span class="sh_symbol">;</span>
console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span><span class="sh_string">'error #%d'</span><span class="sh_symbol">,</span> code<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: error #5, to stderr</span>
console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> code<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: error 5, to stderr</span>
</code></pre>
<p>If formatting elements (e.g. <code>%d</code>) are not found in the first string then
<a href="https://nodejs.org/api/util.html#util_util_inspect_object_options"><code>util.inspect()</code></a> is called on each argument and the resulting string
values are concatenated. See <a href="https://nodejs.org/api/util.html#util_util_format_format"><code>util.format()</code></a> for more information.</p>
<h3>console.info([data][, ...])<span><a class="mark" href="#console_console_info_data" id="console_console_info_data">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.100</span>
</div><p>The <code>console.info()</code> function is an alias for <a href="https://nodejs.org/api/console.html#console_console_log_data"><code>console.log()</code></a>.</p>
<h3>console.log([data][, ...])<span><a class="mark" href="#console_console_log_data" id="console_console_log_data">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.100</span>
</div><p>Prints to <code>stdout</code> with newline. Multiple arguments can be passed, with the
first used as the primary message and all additional used as substitution
values similar to <code>printf(3)</code> (the arguments are all passed to
<a href="https://nodejs.org/api/util.html#util_util_format_format"><code>util.format()</code></a>).</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">var</span> count <span class="sh_symbol">=</span> <span class="sh_number">5</span><span class="sh_symbol">;</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'count: %d'</span><span class="sh_symbol">,</span> count<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: count: 5, to stdout</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'count: '</span><span class="sh_symbol">,</span> count<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: count: 5, to stdout</span>
</code></pre>
<p>If formatting elements (e.g. <code>%d</code>) are not found in the first string then
<a href="https://nodejs.org/api/util.html#util_util_inspect_object_options"><code>util.inspect()</code></a> is called on each argument and the resulting string
values are concatenated. See <a href="https://nodejs.org/api/util.html#util_util_format_format"><code>util.format()</code></a> for more information.</p>
<h3>console.time(label)<span><a class="mark" href="#console_console_time_label" id="console_console_time_label">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.104</span>
</div><p>Starts a timer that can be used to compute the duration of an operation. Timers
are identified by a unique <code>label</code>. Use the same <code>label</code> when you call
<a href="#console_console_timeend_label"><code>console.timeEnd()</code></a> to stop the timer and output the elapsed time in
milliseconds to <code>stdout</code>. Timer durations are accurate to the sub-millisecond.</p>
<h3>console.timeEnd(label)<span><a class="mark" href="#console_console_timeend_label" id="console_console_timeend_label">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.104</span>
</div><p>Stops a timer that was previously started by calling <a href="#console_console_time_label"><code>console.time()</code></a> and
prints the result to <code>stdout</code>:</p>
<pre class="sh_sourceCode"><code class="lang-js">console<span class="sh_symbol">.</span><span class="sh_function">time</span><span class="sh_symbol">(</span><span class="sh_string">'100-elements'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_keyword">var</span> i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> <span class="sh_number">100</span><span class="sh_symbol">;</span> i<span class="sh_symbol">++)</span> <span class="sh_cbracket">{</span>
  <span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span>
console<span class="sh_symbol">.</span><span class="sh_function">timeEnd</span><span class="sh_symbol">(</span><span class="sh_string">'100-elements'</span><span class="sh_symbol">);</span>
<span class="sh_comment">// prints 100-elements: 225.438ms</span>
</code></pre>
<p><em>Note: As of Node.js v6.0.0, <code>console.timeEnd()</code> deletes the timer to avoid
leaking it. On older versions, the timer persisted. This allowed
<code>console.timeEnd()</code> to be called multiple times for the same label. This
functionality was unintended and is no longer supported.</em></p>
<h3>console.trace(message[, ...])<span><a class="mark" href="#console_console_trace_message" id="console_console_trace_message">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.104</span>
</div><p>Prints to <code>stderr</code> the string <code>'Trace :'</code>, followed by the <a href="https://nodejs.org/api/util.html#util_util_format_format"><code>util.format()</code></a>
formatted message and stack trace to the current position in the code.</p>
<pre class="sh_sourceCode"><code class="lang-js">console<span class="sh_symbol">.</span><span class="sh_function">trace</span><span class="sh_symbol">(</span><span class="sh_string">'Show me'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: (stack trace will vary based on where trace is called)</span>
  <span class="sh_comment">//  Trace: Show me</span>
  <span class="sh_comment">//    at repl:2:9</span>
  <span class="sh_comment">//    at REPLServer.defaultEval (repl.js:248:27)</span>
  <span class="sh_comment">//    at bound (domain.js:287:14)</span>
  <span class="sh_comment">//    at REPLServer.runBound [as eval] (domain.js:300:12)</span>
  <span class="sh_comment">//    at REPLServer.&lt;anonymous&gt; (repl.js:412:12)</span>
  <span class="sh_comment">//    at emitOne (events.js:82:20)</span>
  <span class="sh_comment">//    at REPLServer.emit (events.js:169:7)</span>
  <span class="sh_comment">//    at REPLServer.Interface._onLine (readline.js:210:10)</span>
  <span class="sh_comment">//    at REPLServer.Interface._line (readline.js:549:8)</span>
  <span class="sh_comment">//    at REPLServer.Interface._ttyWrite (readline.js:826:14)</span>
</code></pre>
<h3>console.warn([data][, ...])<span><a class="mark" href="#console_console_warn_data" id="console_console_warn_data">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.100</span>
</div><p>The <code>console.warn()</code> function is an alias for <a href="https://nodejs.org/api/console.html#console_console_error_data"><code>console.error()</code></a>.</p>
<!-- [end-include:console.md] -->
<!-- [start-include:crypto.md] -->
<h1>Crypto<span><a class="mark" href="#crypto_crypto" id="crypto_crypto">#</a></span></h1>
<pre class="api_stability api_stability_2 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> Stable</pre><p>The <code>crypto</code> module provides cryptographic functionality that includes a set of
wrappers for OpenSSL's hash, HMAC, cipher, decipher, sign and verify functions.</p>
<p>Use <code>require('crypto')</code> to access this module.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> crypto <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> secret <span class="sh_symbol">=</span> <span class="sh_string">'abcdefg'</span><span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> hash <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">createHmac</span><span class="sh_symbol">(</span><span class="sh_string">'sha256'</span><span class="sh_symbol">,</span> secret<span class="sh_symbol">)</span>
                   <span class="sh_symbol">.</span><span class="sh_function">update</span><span class="sh_symbol">(</span><span class="sh_string">'I love cupcakes'</span><span class="sh_symbol">)</span>
                   <span class="sh_symbol">.</span><span class="sh_function">digest</span><span class="sh_symbol">(</span><span class="sh_string">'hex'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>hash<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints:</span>
  <span class="sh_comment">//   c0fa1bc00531bd78ef38c628449c5102aeabd49b5dc3a2a516ea6ea959d6658e</span>
</code></pre>
<h2>Determining if crypto support is unavailable<span><a class="mark" href="#crypto_determining_if_crypto_support_is_unavailable" id="crypto_determining_if_crypto_support_is_unavailable">#</a></span></h2>
<p>It is possible for Node.js to be built without including support for the
<code>crypto</code> module. In such cases, calling <code>require('crypto')</code> will result in an
error being thrown.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">var</span> crypto<span class="sh_symbol">;</span>
<span class="sh_keyword">try</span> <span class="sh_cbracket">{</span>
  crypto <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span> <span class="sh_keyword">catch</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'crypto support is disabled!'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>
</code></pre>
<h2>Class: Certificate<span><a class="mark" href="#crypto_class_certificate" id="crypto_class_certificate">#</a></span></h2>
<p>SPKAC is a Certificate Signing Request mechanism originally implemented by
Netscape and now specified formally as part of <a href="http://www.w3.org/TR/html5/forms.html#the-keygen-element">HTML5's <code>keygen</code> element</a>.</p>
<p>The <code>crypto</code> module provides the <code>Certificate</code> class for working with SPKAC
data. The most common usage is handling output generated by the HTML5
<code>&lt;keygen&gt;</code> element. Node.js uses <a href="https://www.openssl.org/docs/apps/spkac.html">OpenSSL's SPKAC implementation</a> internally.</p>
<h3>new crypto.Certificate()<span><a class="mark" href="#crypto_new_crypto_certificate" id="crypto_new_crypto_certificate">#</a></span></h3>
<p>Instances of the <code>Certificate</code> class can be created using the <code>new</code> keyword
or by calling <code>crypto.Certificate()</code> as a function:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> crypto <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> cert1 <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> crypto<span class="sh_symbol">.</span><span class="sh_function">Certificate</span><span class="sh_symbol">();</span>
<span class="sh_keyword">const</span> cert2 <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">Certificate</span><span class="sh_symbol">();</span>
</code></pre>
<h3>certificate.exportChallenge(spkac)<span><a class="mark" href="#crypto_certificate_exportchallenge_spkac" id="crypto_certificate_exportchallenge_spkac">#</a></span></h3>
<p>The <code>spkac</code> data structure includes a public key and a challenge. The
<code>certificate.exportChallenge()</code> returns the challenge component in the
form of a Node.js <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a>. The <code>spkac</code> argument can be either a string
or a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> cert <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">).</span><span class="sh_function">Certificate</span><span class="sh_symbol">();</span>
<span class="sh_keyword">const</span> spkac <span class="sh_symbol">=</span> <span class="sh_function">getSpkacSomehow</span><span class="sh_symbol">();</span>
<span class="sh_keyword">const</span> challenge <span class="sh_symbol">=</span> cert<span class="sh_symbol">.</span><span class="sh_function">exportChallenge</span><span class="sh_symbol">(</span>spkac<span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>challenge<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_string">'utf8'</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// Prints the challenge as a UTF8 string</span>
</code></pre>
<h3>certificate.exportPublicKey(spkac)<span><a class="mark" href="#crypto_certificate_exportpublickey_spkac" id="crypto_certificate_exportpublickey_spkac">#</a></span></h3>
<p>The <code>spkac</code> data structure includes a public key and a challenge. The
<code>certificate.exportPublicKey()</code> returns the public key component in the
form of a Node.js <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a>. The <code>spkac</code> argument can be either a string
or a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> cert <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">).</span><span class="sh_function">Certificate</span><span class="sh_symbol">();</span>
<span class="sh_keyword">const</span> spkac <span class="sh_symbol">=</span> <span class="sh_function">getSpkacSomehow</span><span class="sh_symbol">();</span>
<span class="sh_keyword">const</span> publicKey <span class="sh_symbol">=</span> cert<span class="sh_symbol">.</span><span class="sh_function">exportPublicKey</span><span class="sh_symbol">(</span>spkac<span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>publicKey<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints the public key as &lt;Buffer ...&gt;</span>
</code></pre>
<h3>certificate.verifySpkac(spkac)<span><a class="mark" href="#crypto_certificate_verifyspkac_spkac" id="crypto_certificate_verifyspkac_spkac">#</a></span></h3>
<p>Returns <code>true</code> if the given <code>spkac</code> data structure is valid, <code>false</code> otherwise.
The <code>spkac</code> argument must be a Node.js <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> cert <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">).</span><span class="sh_function">Certificate</span><span class="sh_symbol">();</span>
<span class="sh_keyword">const</span> spkac <span class="sh_symbol">=</span> <span class="sh_function">getSpkacSomehow</span><span class="sh_symbol">();</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>cert<span class="sh_symbol">.</span><span class="sh_function">verifySpkac</span><span class="sh_symbol">(</span>Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span>spkac<span class="sh_symbol">)));</span>
  <span class="sh_comment">// Prints true or false</span>
</code></pre>
<h2>Class: Cipher<span><a class="mark" href="#crypto_class_cipher" id="crypto_class_cipher">#</a></span></h2>
<p>Instances of the <code>Cipher</code> class are used to encrypt data. The class can be
used in one of two ways:</p>
<ul>
<li>As a <a href="https://nodejs.org/api/stream.html#stream_stream">stream</a> that is both readable and writable, where plain unencrypted
data is written to produce encrypted data on the readable side, or</li>
<li>Using the <a href="#crypto_cipher_update_data_input_encoding_output_encoding"><code>cipher.update()</code></a> and <a href="#crypto_cipher_final_output_encoding"><code>cipher.final()</code></a> methods to produce
the encrypted data.</li>
</ul>
<p>The <a href="#crypto_crypto_createcipher_algorithm_password"><code>crypto.createCipher()</code></a> or <a href="#crypto_crypto_createcipheriv_algorithm_key_iv"><code>crypto.createCipheriv()</code></a> methods are
used to create <code>Cipher</code> instances. <code>Cipher</code> objects are not to be created
directly using the <code>new</code> keyword.</p>
<p>Example: Using <code>Cipher</code> objects as streams:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> crypto <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> cipher <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">createCipher</span><span class="sh_symbol">(</span><span class="sh_string">'aes192'</span><span class="sh_symbol">,</span> <span class="sh_string">'a password'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">var</span> encrypted <span class="sh_symbol">=</span> <span class="sh_string">''</span><span class="sh_symbol">;</span>
cipher<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'readable'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">var</span> data <span class="sh_symbol">=</span> cipher<span class="sh_symbol">.</span><span class="sh_function">read</span><span class="sh_symbol">();</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>data<span class="sh_symbol">)</span>
    encrypted <span class="sh_symbol">+=</span> data<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_string">'hex'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
cipher<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>encrypted<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

cipher<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'some clear text data'</span><span class="sh_symbol">);</span>
cipher<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">();</span>
</code></pre>
<p>Example: Using <code>Cipher</code> and piped streams:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> crypto <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> fs <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'fs'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> cipher <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">createCipher</span><span class="sh_symbol">(</span><span class="sh_string">'aes192'</span><span class="sh_symbol">,</span> <span class="sh_string">'a password'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> input <span class="sh_symbol">=</span> fs<span class="sh_symbol">.</span><span class="sh_function">createReadStream</span><span class="sh_symbol">(</span><span class="sh_string">'test.js'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> output <span class="sh_symbol">=</span> fs<span class="sh_symbol">.</span><span class="sh_function">createWriteStream</span><span class="sh_symbol">(</span><span class="sh_string">'test.enc'</span><span class="sh_symbol">);</span>

input<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>cipher<span class="sh_symbol">).</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>output<span class="sh_symbol">);</span>
</code></pre>
<p>Example: Using the <a href="#crypto_cipher_update_data_input_encoding_output_encoding"><code>cipher.update()</code></a> and <a href="#crypto_cipher_final_output_encoding"><code>cipher.final()</code></a> methods:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> crypto <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> cipher <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">createCipher</span><span class="sh_symbol">(</span><span class="sh_string">'aes192'</span><span class="sh_symbol">,</span> <span class="sh_string">'a password'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">var</span> encrypted <span class="sh_symbol">=</span> cipher<span class="sh_symbol">.</span><span class="sh_function">update</span><span class="sh_symbol">(</span><span class="sh_string">'some clear text data'</span><span class="sh_symbol">,</span> <span class="sh_string">'utf8'</span><span class="sh_symbol">,</span> <span class="sh_string">'hex'</span><span class="sh_symbol">);</span>
encrypted <span class="sh_symbol">+=</span> cipher<span class="sh_symbol">.</span><span class="sh_keyword">final</span><span class="sh_symbol">(</span><span class="sh_string">'hex'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>encrypted<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504</span>
</code></pre>
<h3>cipher.final([output_encoding])<span><a class="mark" href="#crypto_cipher_final_output_encoding" id="crypto_cipher_final_output_encoding">#</a></span></h3>
<p>Returns any remaining enciphered contents. If <code>output_encoding</code>
parameter is one of <code>'binary'</code>, <code>'base64'</code> or <code>'hex'</code>, a string is returned.
If an <code>output_encoding</code> is not provided, a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> is returned.</p>
<p>Once the <code>cipher.final()</code> method has been called, the <code>Cipher</code> object can no
longer be used to encrypt data. Attempts to call <code>cipher.final()</code> more than
once will result in an error being thrown.</p>
<h3>cipher.setAAD(buffer)<span><a class="mark" href="#crypto_cipher_setaad_buffer" id="crypto_cipher_setaad_buffer">#</a></span></h3>
<p>When using an authenticated encryption mode (only <code>GCM</code> is currently
supported), the <code>cipher.setAAD()</code> method sets the value used for the
<em>additional authenticated data</em> (AAD) input parameter.</p>
<h3>cipher.getAuthTag()<span><a class="mark" href="#crypto_cipher_getauthtag" id="crypto_cipher_getauthtag">#</a></span></h3>
<p>When using an authenticated encryption mode (only <code>GCM</code> is currently
supported), the <code>cipher.getAuthTag()</code> method returns a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> containing
the <em>authentication tag</em> that has been computed from the given data.</p>
<p>The <code>cipher.getAuthTag()</code> method should only be called after encryption has
been completed using the <a href="#crypto_cipher_final_output_encoding"><code>cipher.final()</code></a> method.</p>
<h3>cipher.setAutoPadding(auto_padding=true)<span><a class="mark" href="#crypto_cipher_setautopadding_auto_padding_true" id="crypto_cipher_setautopadding_auto_padding_true">#</a></span></h3>
<p>When using block encryption algorithms, the <code>Cipher</code> class will automatically
add padding to the input data to the appropriate block size. To disable the
default padding call <code>cipher.setAutoPadding(false)</code>.</p>
<p>When <code>auto_padding</code> is <code>false</code>, the length of the entire input data must be a
multiple of the cipher's block size or <a href="#crypto_cipher_final_output_encoding"><code>cipher.final()</code></a> will throw an Error.
Disabling automatic padding is useful for non-standard padding, for instance
using <code>0x0</code> instead of PKCS padding.</p>
<p>The <code>cipher.setAutoPadding()</code> method must be called before <a href="#crypto_cipher_final_output_encoding"><code>cipher.final()</code></a>.</p>
<h3>cipher.update(data[, input_encoding][, output_encoding])<span><a class="mark" href="#crypto_cipher_update_data_input_encoding_output_encoding" id="crypto_cipher_update_data_input_encoding_output_encoding">#</a></span></h3>
<p>Updates the cipher with <code>data</code>. If the <code>input_encoding</code> argument is given,
it's value must be one of <code>'utf8'</code>, <code>'ascii'</code>, or <code>'binary'</code> and the <code>data</code>
argument is a string using the specified encoding. If the <code>input_encoding</code>
argument is not given, <code>data</code> must be a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a>. If <code>data</code> is a
<a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> then <code>input_encoding</code> is ignored.</p>
<p>The <code>output_encoding</code> specifies the output format of the enciphered
data, and can be <code>'binary'</code>, <code>'base64'</code> or <code>'hex'</code>. If the <code>output_encoding</code>
is specified, a string using the specified encoding is returned. If no
<code>output_encoding</code> is provided, a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> is returned.</p>
<p>The <code>cipher.update()</code> method can be called multiple times with new data until
<a href="#crypto_cipher_final_output_encoding"><code>cipher.final()</code></a> is called. Calling <code>cipher.update()</code> after
<a href="#crypto_cipher_final_output_encoding"><code>cipher.final()</code></a> will result in an error being thrown.</p>
<h2>Class: Decipher<span><a class="mark" href="#crypto_class_decipher" id="crypto_class_decipher">#</a></span></h2>
<p>Instances of the <code>Decipher</code> class are used to decrypt data. The class can be
used in one of two ways:</p>
<ul>
<li>As a <a href="https://nodejs.org/api/stream.html#stream_stream">stream</a> that is both readable and writable, where plain encrypted
data is written to produce unencrypted data on the readable side, or</li>
<li>Using the <a href="#crypto_decipher_update_data_input_encoding_output_encoding"><code>decipher.update()</code></a> and <a href="#crypto_decipher_final_output_encoding"><code>decipher.final()</code></a> methods to
produce the unencrypted data.</li>
</ul>
<p>The <a href="#crypto_crypto_createdecipher_algorithm_password"><code>crypto.createDecipher()</code></a> or <a href="#crypto_crypto_createdecipheriv_algorithm_key_iv"><code>crypto.createDecipheriv()</code></a> methods are
used to create <code>Decipher</code> instances. <code>Decipher</code> objects are not to be created
directly using the <code>new</code> keyword.</p>
<p>Example: Using <code>Decipher</code> objects as streams:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> crypto <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> decipher <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">createDecipher</span><span class="sh_symbol">(</span><span class="sh_string">'aes192'</span><span class="sh_symbol">,</span> <span class="sh_string">'a password'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">var</span> decrypted <span class="sh_symbol">=</span> <span class="sh_string">''</span><span class="sh_symbol">;</span>
decipher<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'readable'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">var</span> data <span class="sh_symbol">=</span> decipher<span class="sh_symbol">.</span><span class="sh_function">read</span><span class="sh_symbol">();</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>data<span class="sh_symbol">)</span>
  decrypted <span class="sh_symbol">+=</span> data<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_string">'utf8'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
decipher<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>decrypted<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: some clear text data</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_keyword">var</span> encrypted <span class="sh_symbol">=</span> <span class="sh_string">'ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504'</span><span class="sh_symbol">;</span>
decipher<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span>encrypted<span class="sh_symbol">,</span> <span class="sh_string">'hex'</span><span class="sh_symbol">);</span>
decipher<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">();</span>
</code></pre>
<p>Example: Using <code>Decipher</code> and piped streams:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> crypto <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> fs <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'fs'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> decipher <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">createDecipher</span><span class="sh_symbol">(</span><span class="sh_string">'aes192'</span><span class="sh_symbol">,</span> <span class="sh_string">'a password'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> input <span class="sh_symbol">=</span> fs<span class="sh_symbol">.</span><span class="sh_function">createReadStream</span><span class="sh_symbol">(</span><span class="sh_string">'test.enc'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> output <span class="sh_symbol">=</span> fs<span class="sh_symbol">.</span><span class="sh_function">createWriteStream</span><span class="sh_symbol">(</span><span class="sh_string">'test.js'</span><span class="sh_symbol">);</span>

input<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>decipher<span class="sh_symbol">).</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>output<span class="sh_symbol">);</span>
</code></pre>
<p>Example: Using the <a href="#crypto_decipher_update_data_input_encoding_output_encoding"><code>decipher.update()</code></a> and <a href="#crypto_decipher_final_output_encoding"><code>decipher.final()</code></a> methods:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> crypto <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> decipher <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">createDecipher</span><span class="sh_symbol">(</span><span class="sh_string">'aes192'</span><span class="sh_symbol">,</span> <span class="sh_string">'a password'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">var</span> encrypted <span class="sh_symbol">=</span> <span class="sh_string">'ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504'</span><span class="sh_symbol">;</span>
<span class="sh_keyword">var</span> decrypted <span class="sh_symbol">=</span> decipher<span class="sh_symbol">.</span><span class="sh_function">update</span><span class="sh_symbol">(</span>encrypted<span class="sh_symbol">,</span> <span class="sh_string">'hex'</span><span class="sh_symbol">,</span> <span class="sh_string">'utf8'</span><span class="sh_symbol">);</span>
decrypted <span class="sh_symbol">+=</span> decipher<span class="sh_symbol">.</span><span class="sh_keyword">final</span><span class="sh_symbol">(</span><span class="sh_string">'utf8'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>decrypted<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: some clear text data</span>
</code></pre>
<h3>decipher.final([output_encoding])<span><a class="mark" href="#crypto_decipher_final_output_encoding" id="crypto_decipher_final_output_encoding">#</a></span></h3>
<p>Returns any remaining deciphered contents. If <code>output_encoding</code>
parameter is one of <code>'binary'</code>, <code>'base64'</code> or <code>'hex'</code>, a string is returned.
If an <code>output_encoding</code> is not provided, a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> is returned.</p>
<p>Once the <code>decipher.final()</code> method has been called, the <code>Decipher</code> object can
no longer be used to decrypt data. Attempts to call <code>decipher.final()</code> more
than once will result in an error being thrown.</p>
<h3>decipher.setAAD(buffer)<span><a class="mark" href="#crypto_decipher_setaad_buffer" id="crypto_decipher_setaad_buffer">#</a></span></h3>
<p>When using an authenticated encryption mode (only <code>GCM</code> is currently
supported), the <code>cipher.setAAD()</code> method sets the value used for the
<em>additional authenticated data</em> (AAD) input parameter.</p>
<h3>decipher.setAuthTag(buffer)<span><a class="mark" href="#crypto_decipher_setauthtag_buffer" id="crypto_decipher_setauthtag_buffer">#</a></span></h3>
<p>When using an authenticated encryption mode (only <code>GCM</code> is currently
supported), the <code>decipher.setAuthTag()</code> method is used to pass in the
received <em>authentication tag</em>. If no tag is provided, or if the cipher text
has been tampered with, <a href="#crypto_decipher_final_output_encoding"><code>decipher.final()</code></a> with throw, indicating that the
cipher text should be discarded due to failed authentication.</p>
<h3>decipher.setAutoPadding(auto_padding=true)<span><a class="mark" href="#crypto_decipher_setautopadding_auto_padding_true" id="crypto_decipher_setautopadding_auto_padding_true">#</a></span></h3>
<p>When data has been encrypted without standard block padding, calling
<code>decipher.setAutoPadding(false)</code> will disable automatic padding to prevent
<a href="#crypto_decipher_final_output_encoding"><code>decipher.final()</code></a> from checking for and removing padding.</p>
<p>Turning auto padding off will only work if the input data's length is a
multiple of the ciphers block size.</p>
<p>The <code>decipher.setAutoPadding()</code> method must be called before
<a href="#crypto_decipher_update_data_input_encoding_output_encoding"><code>decipher.update()</code></a>.</p>
<h3>decipher.update(data[, input_encoding][, output_encoding])<span><a class="mark" href="#crypto_decipher_update_data_input_encoding_output_encoding" id="crypto_decipher_update_data_input_encoding_output_encoding">#</a></span></h3>
<p>Updates the decipher with <code>data</code>. If the <code>input_encoding</code> argument is given,
it's value must be one of <code>'binary'</code>, <code>'base64'</code>, or <code>'hex'</code> and the <code>data</code>
argument is a string using the specified encoding. If the <code>input_encoding</code>
argument is not given, <code>data</code> must be a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a>. If <code>data</code> is a
<a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> then <code>input_encoding</code> is ignored.</p>
<p>The <code>output_encoding</code> specifies the output format of the enciphered
data, and can be <code>'binary'</code>, <code>'ascii'</code> or <code>'utf8'</code>. If the <code>output_encoding</code>
is specified, a string using the specified encoding is returned. If no
<code>output_encoding</code> is provided, a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> is returned.</p>
<p>The <code>decipher.update()</code> method can be called multiple times with new data until
<a href="#crypto_decipher_final_output_encoding"><code>decipher.final()</code></a> is called. Calling <code>decipher.update()</code> after
<a href="#crypto_decipher_final_output_encoding"><code>decipher.final()</code></a> will result in an error being thrown.</p>
<h2>Class: DiffieHellman<span><a class="mark" href="#crypto_class_diffiehellman" id="crypto_class_diffiehellman">#</a></span></h2>
<p>The <code>DiffieHellman</code> class is a utility for creating Diffie-Hellman key
exchanges.</p>
<p>Instances of the <code>DiffieHellman</code> class can be created using the
<a href="#crypto_crypto_creatediffiehellman_prime_prime_encoding_generator_generator_encoding"><code>crypto.createDiffieHellman()</code></a> function.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> crypto <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> assert <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'assert'</span><span class="sh_symbol">);</span>

<span class="sh_comment">// Generate Alice's keys...</span>
<span class="sh_keyword">const</span> alice <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">createDiffieHellman</span><span class="sh_symbol">(</span><span class="sh_number">2048</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> alice_key <span class="sh_symbol">=</span> alice<span class="sh_symbol">.</span><span class="sh_function">generateKeys</span><span class="sh_symbol">();</span>

<span class="sh_comment">// Generate Bob's keys...</span>
<span class="sh_keyword">const</span> bob <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">createDiffieHellman</span><span class="sh_symbol">(</span>alice<span class="sh_symbol">.</span><span class="sh_function">getPrime</span><span class="sh_symbol">(),</span> alice<span class="sh_symbol">.</span><span class="sh_function">getGenerator</span><span class="sh_symbol">());</span>
<span class="sh_keyword">const</span> bob_key <span class="sh_symbol">=</span> bob<span class="sh_symbol">.</span><span class="sh_function">generateKeys</span><span class="sh_symbol">();</span>

<span class="sh_comment">// Exchange and generate the secret...</span>
<span class="sh_keyword">const</span> alice_secret <span class="sh_symbol">=</span> alice<span class="sh_symbol">.</span><span class="sh_function">computeSecret</span><span class="sh_symbol">(</span>bob_key<span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> bob_secret <span class="sh_symbol">=</span> bob<span class="sh_symbol">.</span><span class="sh_function">computeSecret</span><span class="sh_symbol">(</span>alice_key<span class="sh_symbol">);</span>

<span class="sh_comment">// OK</span>
assert<span class="sh_symbol">.</span><span class="sh_function">equal</span><span class="sh_symbol">(</span>alice_secret<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_string">'hex'</span><span class="sh_symbol">),</span> bob_secret<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_string">'hex'</span><span class="sh_symbol">));</span>
</code></pre>
<h3>diffieHellman.computeSecret(other_public_key[, input_encoding][, output_encoding])<span><a class="mark" href="#crypto_diffiehellman_computesecret_other_public_key_input_encoding_output_encoding" id="crypto_diffiehellman_computesecret_other_public_key_input_encoding_output_encoding">#</a></span></h3>
<p>Computes the shared secret using <code>other_public_key</code> as the other
party's public key and returns the computed shared secret. The supplied
key is interpreted using the specified <code>input_encoding</code>, and secret is
encoded using specified <code>output_encoding</code>. Encodings can be
<code>'binary'</code>, <code>'hex'</code>, or <code>'base64'</code>. If the <code>input_encoding</code> is not
provided, <code>other_public_key</code> is expected to be a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a>.</p>
<p>If <code>output_encoding</code> is given a string is returned; otherwise, a
<a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> is returned.</p>
<h3>diffieHellman.generateKeys([encoding])<span><a class="mark" href="#crypto_diffiehellman_generatekeys_encoding" id="crypto_diffiehellman_generatekeys_encoding">#</a></span></h3>
<p>Generates private and public Diffie-Hellman key values, and returns
the public key in the specified <code>encoding</code>. This key should be
transferred to the other party. Encoding can be <code>'binary'</code>, <code>'hex'</code>,
or <code>'base64'</code>. If <code>encoding</code> is provided a string is returned; otherwise a
<a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> is returned.</p>
<h3>diffieHellman.getGenerator([encoding])<span><a class="mark" href="#crypto_diffiehellman_getgenerator_encoding" id="crypto_diffiehellman_getgenerator_encoding">#</a></span></h3>
<p>Returns the Diffie-Hellman generator in the specified <code>encoding</code>, which can
be <code>'binary'</code>, <code>'hex'</code>, or <code>'base64'</code>. If  <code>encoding</code> is provided a string is
returned; otherwise a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> is returned.</p>
<h3>diffieHellman.getPrime([encoding])<span><a class="mark" href="#crypto_diffiehellman_getprime_encoding" id="crypto_diffiehellman_getprime_encoding">#</a></span></h3>
<p>Returns the Diffie-Hellman prime in the specified <code>encoding</code>, which can
be <code>'binary'</code>, <code>'hex'</code>, or <code>'base64'</code>. If <code>encoding</code> is provided a string is
returned; otherwise a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> is returned.</p>
<h3>diffieHellman.getPrivateKey([encoding])<span><a class="mark" href="#crypto_diffiehellman_getprivatekey_encoding" id="crypto_diffiehellman_getprivatekey_encoding">#</a></span></h3>
<p>Returns the Diffie-Hellman private key in the specified <code>encoding</code>,
which can be <code>'binary'</code>, <code>'hex'</code>, or <code>'base64'</code>. If <code>encoding</code> is provided a
string is returned; otherwise a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> is returned.</p>
<h3>diffieHellman.getPublicKey([encoding])<span><a class="mark" href="#crypto_diffiehellman_getpublickey_encoding" id="crypto_diffiehellman_getpublickey_encoding">#</a></span></h3>
<p>Returns the Diffie-Hellman public key in the specified <code>encoding</code>, which
can be <code>'binary'</code>, <code>'hex'</code>, or <code>'base64'</code>. If <code>encoding</code> is provided a
string is returned; otherwise a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> is returned.</p>
<h3>diffieHellman.setPrivateKey(private_key[, encoding])<span><a class="mark" href="#crypto_diffiehellman_setprivatekey_private_key_encoding" id="crypto_diffiehellman_setprivatekey_private_key_encoding">#</a></span></h3>
<p>Sets the Diffie-Hellman private key. If the <code>encoding</code> argument is provided
and is either <code>'binary'</code>, <code>'hex'</code>, or <code>'base64'</code>, <code>private_key</code> is expected
to be a string. If no <code>encoding</code> is provided, <code>private_key</code> is expected
to be a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a>.</p>
<h3>diffieHellman.setPublicKey(public_key[, encoding])<span><a class="mark" href="#crypto_diffiehellman_setpublickey_public_key_encoding" id="crypto_diffiehellman_setpublickey_public_key_encoding">#</a></span></h3>
<p>Sets the Diffie-Hellman public key. If the <code>encoding</code> argument is provided
and is either <code>'binary'</code>, <code>'hex'</code> or <code>'base64'</code>, <code>public_key</code> is expected
to be a string. If no <code>encoding</code> is provided, <code>public_key</code> is expected
to be a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a>.</p>
<h3>diffieHellman.verifyError<span><a class="mark" href="#crypto_diffiehellman_verifyerror" id="crypto_diffiehellman_verifyerror">#</a></span></h3>
<p>A bit field containing any warnings and/or errors resulting from a check
performed during initialization of the <code>DiffieHellman</code> object.</p>
<p>The following values are valid for this property (as defined in <code>constants</code>
module):</p>
<ul>
<li><code>DH_CHECK_P_NOT_SAFE_PRIME</code></li>
<li><code>DH_CHECK_P_NOT_PRIME</code></li>
<li><code>DH_UNABLE_TO_CHECK_GENERATOR</code></li>
<li><code>DH_NOT_SUITABLE_GENERATOR</code></li>
</ul>
<h2>Class: ECDH<span><a class="mark" href="#crypto_class_ecdh" id="crypto_class_ecdh">#</a></span></h2>
<p>The <code>ECDH</code> class is a utility for creating Elliptic Curve Diffie-Hellman (ECDH)
key exchanges.</p>
<p>Instances of the <code>ECDH</code> class can be created using the
<a href="#crypto_crypto_createecdh_curve_name"><code>crypto.createECDH()</code></a> function.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> crypto <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> assert <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'assert'</span><span class="sh_symbol">);</span>

<span class="sh_comment">// Generate Alice's keys...</span>
<span class="sh_keyword">const</span> alice <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">createECDH</span><span class="sh_symbol">(</span><span class="sh_string">'secp521r1'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> alice_key <span class="sh_symbol">=</span> alice<span class="sh_symbol">.</span><span class="sh_function">generateKeys</span><span class="sh_symbol">();</span>

<span class="sh_comment">// Generate Bob's keys...</span>
<span class="sh_keyword">const</span> bob <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">createECDH</span><span class="sh_symbol">(</span><span class="sh_string">'secp521r1'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> bob_key <span class="sh_symbol">=</span> bob<span class="sh_symbol">.</span><span class="sh_function">generateKeys</span><span class="sh_symbol">();</span>

<span class="sh_comment">// Exchange and generate the secret...</span>
<span class="sh_keyword">const</span> alice_secret <span class="sh_symbol">=</span> alice<span class="sh_symbol">.</span><span class="sh_function">computeSecret</span><span class="sh_symbol">(</span>bob_key<span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> bob_secret <span class="sh_symbol">=</span> bob<span class="sh_symbol">.</span><span class="sh_function">computeSecret</span><span class="sh_symbol">(</span>alice_key<span class="sh_symbol">);</span>

<span class="sh_function">assert</span><span class="sh_symbol">(</span>alice_secret<span class="sh_symbol">,</span> bob_secret<span class="sh_symbol">);</span>
  <span class="sh_comment">// OK</span>
</code></pre>
<h3>ecdh.computeSecret(other_public_key[, input_encoding][, output_encoding])<span><a class="mark" href="#crypto_ecdh_computesecret_other_public_key_input_encoding_output_encoding" id="crypto_ecdh_computesecret_other_public_key_input_encoding_output_encoding">#</a></span></h3>
<p>Computes the shared secret using <code>other_public_key</code> as the other
party's public key and returns the computed shared secret. The supplied
key is interpreted using specified <code>input_encoding</code>, and the returned secret
is encoded using the specified <code>output_encoding</code>. Encodings can be
<code>'binary'</code>, <code>'hex'</code>, or <code>'base64'</code>. If the <code>input_encoding</code> is not
provided, <code>other_public_key</code> is expected to be a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a>.</p>
<p>If <code>output_encoding</code> is given a string will be returned; otherwise a
<a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> is returned.</p>
<h3>ecdh.generateKeys([encoding[, format]])<span><a class="mark" href="#crypto_ecdh_generatekeys_encoding_format" id="crypto_ecdh_generatekeys_encoding_format">#</a></span></h3>
<p>Generates private and public EC Diffie-Hellman key values, and returns
the public key in the specified <code>format</code> and <code>encoding</code>. This key should be
transferred to the other party.</p>
<p>The <code>format</code> arguments specifies point encoding and can be <code>'compressed'</code>,
<code>'uncompressed'</code>, or <code>'hybrid'</code>. If <code>format</code> is not specified, the point will
be returned in <code>'uncompressed'</code> format.</p>
<p>The <code>encoding</code> argument can be <code>'binary'</code>, <code>'hex'</code>, or <code>'base64'</code>. If
<code>encoding</code> is provided a string is returned; otherwise a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a>
is returned.</p>
<h3>ecdh.getPrivateKey([encoding])<span><a class="mark" href="#crypto_ecdh_getprivatekey_encoding" id="crypto_ecdh_getprivatekey_encoding">#</a></span></h3>
<p>Returns the EC Diffie-Hellman private key in the specified <code>encoding</code>,
which can be <code>'binary'</code>, <code>'hex'</code>, or <code>'base64'</code>. If <code>encoding</code> is provided
a string is returned; otherwise a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> is returned.</p>
<h3>ecdh.getPublicKey([encoding[, format]])<span><a class="mark" href="#crypto_ecdh_getpublickey_encoding_format" id="crypto_ecdh_getpublickey_encoding_format">#</a></span></h3>
<p>Returns the EC Diffie-Hellman public key in the specified <code>encoding</code> and
<code>format</code>.</p>
<p>The <code>format</code> argument specifies point encoding and can be <code>'compressed'</code>,
<code>'uncompressed'</code>, or <code>'hybrid'</code>. If <code>format</code> is not specified the point will be
returned in <code>'uncompressed'</code> format.</p>
<p>The <code>encoding</code> argument can be <code>'binary'</code>, <code>'hex'</code>, or <code>'base64'</code>. If
<code>encoding</code> is specified, a string is returned; otherwise a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> is
returned.</p>
<h3>ecdh.setPrivateKey(private_key[, encoding])<span><a class="mark" href="#crypto_ecdh_setprivatekey_private_key_encoding" id="crypto_ecdh_setprivatekey_private_key_encoding">#</a></span></h3>
<p>Sets the EC Diffie-Hellman private key. The <code>encoding</code> can be <code>'binary'</code>,
<code>'hex'</code> or <code>'base64'</code>. If <code>encoding</code> is provided, <code>private_key</code> is expected
to be a string; otherwise <code>private_key</code> is expected to be a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a>. If
<code>private_key</code> is not valid for the curve specified when the <code>ECDH</code> object was
created, an error is thrown. Upon setting the private key, the associated
public point (key) is also generated and set in the ECDH object.</p>
<h3>ecdh.setPublicKey(public_key[, encoding])<span><a class="mark" href="#crypto_ecdh_setpublickey_public_key_encoding" id="crypto_ecdh_setpublickey_public_key_encoding">#</a></span></h3>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated</pre><p>Sets the EC Diffie-Hellman public key. Key encoding can be <code>'binary'</code>,
<code>'hex'</code> or <code>'base64'</code>. If <code>encoding</code> is provided <code>public_key</code> is expected to
be a string; otherwise a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> is expected.</p>
<p>Note that there is not normally a reason to call this method because <code>ECDH</code>
only requires a private key and the other party's public key to compute the
shared secret. Typically either <a href="#crypto_ecdh_generatekeys_encoding_format"><code>ecdh.generateKeys()</code></a> or
<a href="#crypto_ecdh_setprivatekey_private_key_encoding"><code>ecdh.setPrivateKey()</code></a> will be called. The <a href="#crypto_ecdh_setprivatekey_private_key_encoding"><code>ecdh.setPrivateKey()</code></a> method
attempts to generate the public point/key associated with the private key being
set.</p>
<p>Example (obtaining a shared secret):</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> crypto <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> alice <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">createECDH</span><span class="sh_symbol">(</span><span class="sh_string">'secp256k1'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> bob <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">createECDH</span><span class="sh_symbol">(</span><span class="sh_string">'secp256k1'</span><span class="sh_symbol">);</span>

<span class="sh_comment">// Note: This is a shortcut way to specify one of Alice's previous private</span>
<span class="sh_comment">// keys. It would be unwise to use such a predictable private key in a real</span>
<span class="sh_comment">// application.</span>
alice<span class="sh_symbol">.</span><span class="sh_function">setPrivateKey</span><span class="sh_symbol">(</span>
  crypto<span class="sh_symbol">.</span><span class="sh_function">createHash</span><span class="sh_symbol">(</span><span class="sh_string">'sha256'</span><span class="sh_symbol">).</span><span class="sh_function">update</span><span class="sh_symbol">(</span><span class="sh_string">'alice'</span><span class="sh_symbol">,</span> <span class="sh_string">'utf8'</span><span class="sh_symbol">).</span><span class="sh_function">digest</span><span class="sh_symbol">()</span>
<span class="sh_symbol">);</span>

<span class="sh_comment">// Bob uses a newly generated cryptographically strong</span>
<span class="sh_comment">// pseudorandom key pair bob.generateKeys();</span>

<span class="sh_keyword">const</span> alice_secret <span class="sh_symbol">=</span> alice<span class="sh_symbol">.</span><span class="sh_function">computeSecret</span><span class="sh_symbol">(</span>bob<span class="sh_symbol">.</span><span class="sh_function">getPublicKey</span><span class="sh_symbol">(),</span> <span class="sh_keyword">null</span><span class="sh_symbol">,</span> <span class="sh_string">'hex'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> bob_secret <span class="sh_symbol">=</span> bob<span class="sh_symbol">.</span><span class="sh_function">computeSecret</span><span class="sh_symbol">(</span>alice<span class="sh_symbol">.</span><span class="sh_function">getPublicKey</span><span class="sh_symbol">(),</span> <span class="sh_keyword">null</span><span class="sh_symbol">,</span> <span class="sh_string">'hex'</span><span class="sh_symbol">);</span>

<span class="sh_comment">// alice_secret and bob_secret should be the same shared secret value</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>alice_secret <span class="sh_symbol">===</span> bob_secret<span class="sh_symbol">);</span>
</code></pre>
<h2>Class: Hash<span><a class="mark" href="#crypto_class_hash" id="crypto_class_hash">#</a></span></h2>
<p>The <code>Hash</code> class is a utility for creating hash digests of data. It can be
used in one of two ways:</p>
<ul>
<li>As a <a href="https://nodejs.org/api/stream.html#stream_stream">stream</a> that is both readable and writable, where data is written
to produce a computed hash digest on the readable side, or</li>
<li>Using the <a href="#crypto_hash_update_data_input_encoding"><code>hash.update()</code></a> and <a href="#crypto_hash_digest_encoding"><code>hash.digest()</code></a> methods to produce the
computed hash.</li>
</ul>
<p>The <a href="#crypto_crypto_createhash_algorithm"><code>crypto.createHash()</code></a> method is used to create <code>Hash</code> instances. <code>Hash</code>
objects are not to be created directly using the <code>new</code> keyword.</p>
<p>Example: Using <code>Hash</code> objects as streams:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> crypto <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> hash <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">createHash</span><span class="sh_symbol">(</span><span class="sh_string">'sha256'</span><span class="sh_symbol">);</span>

hash<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'readable'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">var</span> data <span class="sh_symbol">=</span> hash<span class="sh_symbol">.</span><span class="sh_function">read</span><span class="sh_symbol">();</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>data<span class="sh_symbol">)</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>data<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_string">'hex'</span><span class="sh_symbol">));</span>
    <span class="sh_comment">// Prints:</span>
    <span class="sh_comment">//   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

hash<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'some data to hash'</span><span class="sh_symbol">);</span>
hash<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">();</span>
</code></pre>
<p>Example: Using <code>Hash</code> and piped streams:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> crypto <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> fs <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'fs'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> hash <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">createHash</span><span class="sh_symbol">(</span><span class="sh_string">'sha256'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> input <span class="sh_symbol">=</span> fs<span class="sh_symbol">.</span><span class="sh_function">createReadStream</span><span class="sh_symbol">(</span><span class="sh_string">'test.js'</span><span class="sh_symbol">);</span>
input<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>hash<span class="sh_symbol">).</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>stdout<span class="sh_symbol">);</span>
</code></pre>
<p>Example: Using the <a href="#crypto_hash_update_data_input_encoding"><code>hash.update()</code></a> and <a href="#crypto_hash_digest_encoding"><code>hash.digest()</code></a> methods:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> crypto <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> hash <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">createHash</span><span class="sh_symbol">(</span><span class="sh_string">'sha256'</span><span class="sh_symbol">);</span>

hash<span class="sh_symbol">.</span><span class="sh_function">update</span><span class="sh_symbol">(</span><span class="sh_string">'some data to hash'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>hash<span class="sh_symbol">.</span><span class="sh_function">digest</span><span class="sh_symbol">(</span><span class="sh_string">'hex'</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// Prints:</span>
  <span class="sh_comment">//   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50</span>
</code></pre>
<h3>hash.digest([encoding])<span><a class="mark" href="#crypto_hash_digest_encoding" id="crypto_hash_digest_encoding">#</a></span></h3>
<p>Calculates the digest of all of the data passed to be hashed (using the
<a href="#crypto_hash_update_data_input_encoding"><code>hash.update()</code></a> method). The <code>encoding</code> can be <code>'hex'</code>, <code>'binary'</code> or
<code>'base64'</code>. If <code>encoding</code> is provided a string will be returned; otherwise
a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> is returned.</p>
<p>The <code>Hash</code> object can not be used again after <code>hash.digest()</code> method has been
called. Multiple calls will cause an error to be thrown.</p>
<h3>hash.update(data[, input_encoding])<span><a class="mark" href="#crypto_hash_update_data_input_encoding" id="crypto_hash_update_data_input_encoding">#</a></span></h3>
<p>Updates the hash content with the given <code>data</code>, the encoding of which
is given in <code>input_encoding</code> and can be <code>'utf8'</code>, <code>'ascii'</code> or
<code>'binary'</code>. If <code>encoding</code> is not provided, and the <code>data</code> is a string, an
encoding of <code>'utf8'</code> is enforced. If <code>data</code> is a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> then
<code>input_encoding</code> is ignored.</p>
<p>This can be called many times with new data as it is streamed.</p>
<h2>Class: Hmac<span><a class="mark" href="#crypto_class_hmac" id="crypto_class_hmac">#</a></span></h2>
<p>The <code>Hmac</code> Class is a utility for creating cryptographic HMAC digests. It can
be used in one of two ways:</p>
<ul>
<li>As a <a href="https://nodejs.org/api/stream.html#stream_stream">stream</a> that is both readable and writable, where data is written
to produce a computed HMAC digest on the readable side, or</li>
<li>Using the <a href="#crypto_hmac_update_data_input_encoding"><code>hmac.update()</code></a> and <a href="#crypto_hmac_digest_encoding"><code>hmac.digest()</code></a> methods to produce the
computed HMAC digest.</li>
</ul>
<p>The <a href="#crypto_crypto_createhmac_algorithm_key"><code>crypto.createHmac()</code></a> method is used to create <code>Hmac</code> instances. <code>Hmac</code>
objects are not to be created directly using the <code>new</code> keyword.</p>
<p>Example: Using <code>Hmac</code> objects as streams:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> crypto <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> hmac <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">createHmac</span><span class="sh_symbol">(</span><span class="sh_string">'sha256'</span><span class="sh_symbol">,</span> <span class="sh_string">'a secret'</span><span class="sh_symbol">);</span>

hmac<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'readable'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">var</span> data <span class="sh_symbol">=</span> hmac<span class="sh_symbol">.</span><span class="sh_function">read</span><span class="sh_symbol">();</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>data<span class="sh_symbol">)</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>data<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_string">'hex'</span><span class="sh_symbol">));</span>
    <span class="sh_comment">// Prints:</span>
    <span class="sh_comment">//   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

hmac<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'some data to hash'</span><span class="sh_symbol">);</span>
hmac<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">();</span>
</code></pre>
<p>Example: Using <code>Hmac</code> and piped streams:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> crypto <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> fs <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'fs'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> hmac <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">createHmac</span><span class="sh_symbol">(</span><span class="sh_string">'sha256'</span><span class="sh_symbol">,</span> <span class="sh_string">'a secret'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> input <span class="sh_symbol">=</span> fs<span class="sh_symbol">.</span><span class="sh_function">createReadStream</span><span class="sh_symbol">(</span><span class="sh_string">'test.js'</span><span class="sh_symbol">);</span>
input<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>hmac<span class="sh_symbol">).</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>stdout<span class="sh_symbol">);</span>
</code></pre>
<p>Example: Using the <a href="#crypto_hmac_update_data_input_encoding"><code>hmac.update()</code></a> and <a href="#crypto_hmac_digest_encoding"><code>hmac.digest()</code></a> methods:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> crypto <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> hmac <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">createHmac</span><span class="sh_symbol">(</span><span class="sh_string">'sha256'</span><span class="sh_symbol">,</span> <span class="sh_string">'a secret'</span><span class="sh_symbol">);</span>

hmac<span class="sh_symbol">.</span><span class="sh_function">update</span><span class="sh_symbol">(</span><span class="sh_string">'some data to hash'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>hmac<span class="sh_symbol">.</span><span class="sh_function">digest</span><span class="sh_symbol">(</span><span class="sh_string">'hex'</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// Prints:</span>
  <span class="sh_comment">//   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e</span>
</code></pre>
<h3>hmac.digest([encoding])<span><a class="mark" href="#crypto_hmac_digest_encoding" id="crypto_hmac_digest_encoding">#</a></span></h3>
<p>Calculates the HMAC digest of all of the data passed using <a href="#crypto_hmac_update_data_input_encoding"><code>hmac.update()</code></a>.
The <code>encoding</code> can be <code>'hex'</code>, <code>'binary'</code> or <code>'base64'</code>. If <code>encoding</code> is
provided a string is returned; otherwise a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> is returned;</p>
<p>The <code>Hmac</code> object can not be used again after <code>hmac.digest()</code> has been
called. Multiple calls to <code>hmac.digest()</code> will result in an error being thrown.</p>
<h3>hmac.update(data[, input_encoding])<span><a class="mark" href="#crypto_hmac_update_data_input_encoding" id="crypto_hmac_update_data_input_encoding">#</a></span></h3>
<p>Updates the <code>Hmac</code> content with the given <code>data</code>, the encoding of which
is given in <code>input_encoding</code> and can be <code>'utf8'</code>, <code>'ascii'</code> or
<code>'binary'</code>. If <code>encoding</code> is not provided, and the <code>data</code> is a string, an
encoding of <code>'utf8'</code> is enforced. If <code>data</code> is a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> then
<code>input_encoding</code> is ignored.</p>
<p>This can be called many times with new data as it is streamed.</p>
<h2>Class: Sign<span><a class="mark" href="#crypto_class_sign" id="crypto_class_sign">#</a></span></h2>
<p>The <code>Sign</code> Class is a utility for generating signatures. It can be used in one
of two ways:</p>
<ul>
<li>As a writable <a href="https://nodejs.org/api/stream.html#stream_stream">stream</a>, where data to be signed is written and the
<a href="#crypto_sign_sign_private_key_output_format"><code>sign.sign()</code></a> method is used to generate and return the signature, or</li>
<li>Using the <a href="#crypto_sign_update_data_input_encoding"><code>sign.update()</code></a> and <a href="#crypto_sign_sign_private_key_output_format"><code>sign.sign()</code></a> methods to produce the
signature.</li>
</ul>
<p>The <a href="#crypto_crypto_createsign_algorithm"><code>crypto.createSign()</code></a> method is used to create <code>Sign</code> instances. <code>Sign</code>
objects are not to be created directly using the <code>new</code> keyword.</p>
<p>Example: Using <code>Sign</code> objects as streams:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> crypto <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> sign <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">createSign</span><span class="sh_symbol">(</span><span class="sh_string">'RSA-SHA256'</span><span class="sh_symbol">);</span>

sign<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'some data to sign'</span><span class="sh_symbol">);</span>
sign<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">();</span>

<span class="sh_keyword">const</span> private_key <span class="sh_symbol">=</span> <span class="sh_function">getPrivateKeySomehow</span><span class="sh_symbol">();</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>sign<span class="sh_symbol">.</span><span class="sh_function">sign</span><span class="sh_symbol">(</span>private_key<span class="sh_symbol">,</span> <span class="sh_string">'hex'</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// Prints the calculated signature</span>
</code></pre>
<p>Example: Using the <a href="#crypto_sign_update_data_input_encoding"><code>sign.update()</code></a> and <a href="#crypto_sign_sign_private_key_output_format"><code>sign.sign()</code></a> methods:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> crypto <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> sign <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">createSign</span><span class="sh_symbol">(</span><span class="sh_string">'RSA-SHA256'</span><span class="sh_symbol">);</span>

sign<span class="sh_symbol">.</span><span class="sh_function">update</span><span class="sh_symbol">(</span><span class="sh_string">'some data to sign'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> private_key <span class="sh_symbol">=</span> <span class="sh_function">getPrivateKeySomehow</span><span class="sh_symbol">();</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>sign<span class="sh_symbol">.</span><span class="sh_function">sign</span><span class="sh_symbol">(</span>private_key<span class="sh_symbol">,</span> <span class="sh_string">'hex'</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// Prints the calculated signature</span>
</code></pre>
<p>A <code>Sign</code> instance can also be created by just passing in the digest
algorithm name, in which case OpenSSL will infer the full signature algorithm
from the type of the PEM-formatted private key, including algorithms that
do not have directly exposed name constants, e.g. 'ecdsa-with-SHA256'.</p>
<p>Example: signing using ECDSA with SHA256</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> crypto <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> sign <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">createSign</span><span class="sh_symbol">(</span><span class="sh_string">'sha256'</span><span class="sh_symbol">);</span>

sign<span class="sh_symbol">.</span><span class="sh_function">update</span><span class="sh_symbol">(</span><span class="sh_string">'some data to sign'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> private_key <span class="sh_symbol">=</span> <span class="sh_string">'-----BEGIN EC PRIVATE KEY-----</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span> <span class="sh_symbol">+</span>
        <span class="sh_string">'MHcCAQEEIF+jnWY1D5kbVYDNvxxo/Y+ku2uJPDwS0r/VuPZQrjjVoAoGCCqGSM49</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span> <span class="sh_symbol">+</span>
        <span class="sh_string">'AwEHoUQDQgAEurOxfSxmqIRYzJVagdZfMMSjRNNhB8i3mXyIMq704m2m52FdfKZ2</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span> <span class="sh_symbol">+</span>
        <span class="sh_string">'pQhByd5eyj3lgZ7m7jbchtdgyOF8Io/1ng==</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span> <span class="sh_symbol">+</span>
        <span class="sh_string">'-----END EC PRIVATE KEY-----</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span><span class="sh_symbol">;</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>sign<span class="sh_symbol">.</span><span class="sh_function">sign</span><span class="sh_symbol">(</span>private_key<span class="sh_symbol">).</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_string">'hex'</span><span class="sh_symbol">));</span>
</code></pre>
<h3>sign.sign(private_key[, output_format])<span><a class="mark" href="#crypto_sign_sign_private_key_output_format" id="crypto_sign_sign_private_key_output_format">#</a></span></h3>
<p>Calculates the signature on all the data passed through using either
<a href="#crypto_sign_update_data_input_encoding"><code>sign.update()</code></a> or <a href="https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback"><code>sign.write()</code></a>.</p>
<p>The <code>private_key</code> argument can be an object or a string. If <code>private_key</code> is a
string, it is treated as a raw key with no passphrase. If <code>private_key</code> is an
object, it is interpreted as a hash containing two properties:</p>
<ul>
<li><code>key</code> : <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> - PEM encoded private key</li>
<li><code>passphrase</code> : <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> - passphrase for the private key</li>
</ul>
<p>The <code>output_format</code> can specify one of <code>'binary'</code>, <code>'hex'</code> or <code>'base64'</code>. If
<code>output_format</code> is provided a string is returned; otherwise a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> is
returned.</p>
<p>The <code>Sign</code> object can not be again used after <code>sign.sign()</code> method has been
called. Multiple calls to <code>sign.sign()</code> will result in an error being thrown.</p>
<h3>sign.update(data[, input_encoding])<span><a class="mark" href="#crypto_sign_update_data_input_encoding" id="crypto_sign_update_data_input_encoding">#</a></span></h3>
<p>Updates the <code>Sign</code> content with the given <code>data</code>, the encoding of which
is given in <code>input_encoding</code> and can be <code>'utf8'</code>, <code>'ascii'</code> or
<code>'binary'</code>. If <code>encoding</code> is not provided, and the <code>data</code> is a string, an
encoding of <code>'utf8'</code> is enforced. If <code>data</code> is a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> then
<code>input_encoding</code> is ignored.</p>
<p>This can be called many times with new data as it is streamed.</p>
<h2>Class: Verify<span><a class="mark" href="#crypto_class_verify" id="crypto_class_verify">#</a></span></h2>
<p>The <code>Verify</code> class is a utility for verifying signatures. It can be used in one
of two ways:</p>
<ul>
<li>As a writable <a href="https://nodejs.org/api/stream.html#stream_stream">stream</a> where written data is used to validate against the
supplied signature, or</li>
<li><p>Using the <a href="#crypto_verifier_update_data_input_encoding"><code>verify.update()</code></a> and <a href="#crypto_verifier_verify_object_signature_signature_format"><code>verify.verify()</code></a> methods to verify
the signature.</p>
<p>The <a href="#crypto_crypto_createsign_algorithm"><code>crypto.createSign()</code></a> method is used to create <code>Sign</code> instances.
<code>Sign</code> objects are not to be created directly using the <code>new</code> keyword.</p>
</li>
</ul>
<p>Example: Using <code>Verify</code> objects as streams:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> crypto <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> verify <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">createVerify</span><span class="sh_symbol">(</span><span class="sh_string">'RSA-SHA256'</span><span class="sh_symbol">);</span>

verify<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'some data to sign'</span><span class="sh_symbol">);</span>
verify<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">();</span>

<span class="sh_keyword">const</span> public_key <span class="sh_symbol">=</span> <span class="sh_function">getPublicKeySomehow</span><span class="sh_symbol">();</span>
<span class="sh_keyword">const</span> signature <span class="sh_symbol">=</span> <span class="sh_function">getSignatureToVerify</span><span class="sh_symbol">();</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>sign<span class="sh_symbol">.</span><span class="sh_function">verify</span><span class="sh_symbol">(</span>public_key<span class="sh_symbol">,</span> signature<span class="sh_symbol">));</span>
  <span class="sh_comment">// Prints true or false</span>
</code></pre>
<p>Example: Using the <a href="#crypto_verifier_update_data_input_encoding"><code>verify.update()</code></a> and <a href="#crypto_verifier_verify_object_signature_signature_format"><code>verify.verify()</code></a> methods:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> crypto <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> verify <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">createVerify</span><span class="sh_symbol">(</span><span class="sh_string">'RSA-SHA256'</span><span class="sh_symbol">);</span>

verify<span class="sh_symbol">.</span><span class="sh_function">update</span><span class="sh_symbol">(</span><span class="sh_string">'some data to sign'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> public_key <span class="sh_symbol">=</span> <span class="sh_function">getPublicKeySomehow</span><span class="sh_symbol">();</span>
<span class="sh_keyword">const</span> signature <span class="sh_symbol">=</span> <span class="sh_function">getSignatureToVerify</span><span class="sh_symbol">();</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>verify<span class="sh_symbol">.</span><span class="sh_function">verify</span><span class="sh_symbol">(</span>public_key<span class="sh_symbol">,</span> signature<span class="sh_symbol">));</span>
  <span class="sh_comment">// Prints true or false</span>
</code></pre>
<h3>verifier.update(data[, input_encoding])<span><a class="mark" href="#crypto_verifier_update_data_input_encoding" id="crypto_verifier_update_data_input_encoding">#</a></span></h3>
<p>Updates the <code>Verify</code> content with the given <code>data</code>, the encoding of which
is given in <code>input_encoding</code> and can be <code>'utf8'</code>, <code>'ascii'</code> or
<code>'binary'</code>. If <code>encoding</code> is not provided, and the <code>data</code> is a string, an
encoding of <code>'utf8'</code> is enforced. If <code>data</code> is a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> then
<code>input_encoding</code> is ignored.</p>
<p>This can be called many times with new data as it is streamed.</p>
<h3>verifier.verify(object, signature[, signature_format])<span><a class="mark" href="#crypto_verifier_verify_object_signature_signature_format" id="crypto_verifier_verify_object_signature_signature_format">#</a></span></h3>
<p>Verifies the provided data using the given <code>object</code> and <code>signature</code>.
The <code>object</code> argument is a string containing a PEM encoded object, which can be
one an RSA public key, a DSA public key, or an X.509 certificate.
The <code>signature</code> argument is the previously calculated signature for the data, in
the <code>signature_format</code> which can be <code>'binary'</code>, <code>'hex'</code> or <code>'base64'</code>.
If a <code>signature_format</code> is specified, the <code>signature</code> is expected to be a
string; otherwise <code>signature</code> is expected to be a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a>.</p>
<p>Returns <code>true</code> or <code>false</code> depending on the validity of the signature for
the data and public key.</p>
<p>The <code>verifier</code> object can not be used again after <code>verify.verify()</code> has been
called. Multiple calls to <code>verify.verify()</code> will result in an error being
thrown.</p>
<h2><code>crypto</code> module methods and properties<span><a class="mark" href="#crypto_crypto_module_methods_and_properties" id="crypto_crypto_module_methods_and_properties">#</a></span></h2>
<h3>crypto.DEFAULT_ENCODING<span><a class="mark" href="#crypto_crypto_default_encoding" id="crypto_crypto_default_encoding">#</a></span></h3>
<p>The default encoding to use for functions that can take either strings
or <a href="https://nodejs.org/api/buffer.html#buffer_buffer">buffers</a>. The default value is <code>'buffer'</code>, which makes methods
default to <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> objects.</p>
<p>The <code>crypto.DEFAULT_ENCODING</code> mechanism is provided for backwards compatibility
with legacy programs that expect <code>'binary'</code> to be the default encoding.</p>
<p>New applications should expect the default to be <code>'buffer'</code>. This property may
become deprecated in a future Node.js release.</p>
<h3>crypto.fips<span><a class="mark" href="#crypto_crypto_fips" id="crypto_crypto_fips">#</a></span></h3>
<p>Property for checking and controlling whether a FIPS compliant crypto provider is
currently in use. Setting to true requires a FIPS build of Node.js.</p>
<h3>crypto.createCipher(algorithm, password)<span><a class="mark" href="#crypto_crypto_createcipher_algorithm_password" id="crypto_crypto_createcipher_algorithm_password">#</a></span></h3>
<p>Creates and returns a <code>Cipher</code> object that uses the given <code>algorithm</code> and
<code>password</code>.</p>
<p>The <code>algorithm</code> is dependent on OpenSSL, examples are <code>'aes192'</code>, etc. On
recent OpenSSL releases, <code>openssl list-cipher-algorithms</code> will display the
available cipher algorithms.</p>
<p>The <code>password</code> is used to derive the cipher key and initialization vector (IV).
The value must be either a <code>'binary'</code> encoded string or a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a>.</p>
<p>The implementation of <code>crypto.createCipher()</code> derives keys using the OpenSSL
function <a href="https://www.openssl.org/docs/crypto/EVP_BytesToKey.html"><code>EVP_BytesToKey</code></a> with the digest algorithm set to MD5, one
iteration, and no salt. The lack of salt allows dictionary attacks as the same
password always creates the same key. The low iteration count and
non-cryptographically secure hash algorithm allow passwords to be tested very
rapidly.</p>
<p>In line with OpenSSL's recommendation to use pbkdf2 instead of
<a href="https://www.openssl.org/docs/crypto/EVP_BytesToKey.html"><code>EVP_BytesToKey</code></a> it is recommended that developers derive a key and IV on
their own using <a href="#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback"><code>crypto.pbkdf2()</code></a> and to use <a href="#crypto_crypto_createcipheriv_algorithm_key_iv"><code>crypto.createCipheriv()</code></a>
to create the <code>Cipher</code> object.</p>
<h3>crypto.createCipheriv(algorithm, key, iv)<span><a class="mark" href="#crypto_crypto_createcipheriv_algorithm_key_iv" id="crypto_crypto_createcipheriv_algorithm_key_iv">#</a></span></h3>
<p>Creates and returns a <code>Cipher</code> object, with the given <code>algorithm</code>, <code>key</code> and
initialization vector (<code>iv</code>).</p>
<p>The <code>algorithm</code> is dependent on OpenSSL, examples are <code>'aes192'</code>, etc. On
recent OpenSSL releases, <code>openssl list-cipher-algorithms</code> will display the
available cipher algorithms.</p>
<p>The <code>key</code> is the raw key used by the <code>algorithm</code> and <code>iv</code> is an
<a href="https://en.wikipedia.org/wiki/Initialization_vector">initialization vector</a>. Both arguments must be <code>'binary'</code> encoded strings or
<a href="https://nodejs.org/api/buffer.html#buffer_buffer">buffers</a>.</p>
<h3>crypto.createCredentials(details)<span><a class="mark" href="#crypto_crypto_createcredentials_details" id="crypto_crypto_createcredentials_details">#</a></span></h3>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated<span class="sh_symbol">:</span> Use <a href="#tls_tls_createsecurecontext_options"><code>tls<span class="sh_symbol">.</span><span class="sh_function">createSecureContext</span><span class="sh_symbol">()</span></code></a> instead<span class="sh_symbol">.</span></pre><p>The <code>crypto.createCredentials()</code> method is a deprecated alias for creating
and returning a <code>tls.SecureContext</code> object. The <code>crypto.createCredentials()</code>
method should not be used.</p>
<p>The optional <code>details</code> argument is a hash object with keys:</p>
<ul>
<li><code>pfx</code> : <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> - PFX or PKCS12 encoded private
key, certificate and CA certificates</li>
<li><code>key</code> : <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> - PEM encoded private key</li>
<li><code>passphrase</code> : <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> - passphrase for the private key or PFX</li>
<li><code>cert</code> : <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> - PEM encoded certificate</li>
<li><code>ca</code> : <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" class="type">&lt;Array&gt;</a> - Either a string or array of strings of PEM encoded CA
certificates to trust.</li>
<li><code>crl</code> : <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" class="type">&lt;Array&gt;</a> - Either a string or array of strings of PEM encoded CRLs
(Certificate Revocation List)</li>
<li><code>ciphers</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> using the <a href="https://www.openssl.org/docs/apps/ciphers.html#CIPHER-LIST-FORMAT">OpenSSL cipher list format</a> describing the
cipher algorithms to use or exclude.</li>
</ul>
<p>If no 'ca' details are given, Node.js will use Mozilla's default
<a href="https://mxr.mozilla.org/mozilla/source/security/nss/lib/ckfw/builtins/certdata.txt">publicly trusted list of CAs</a>.</p>
<h3>crypto.createDecipher(algorithm, password)<span><a class="mark" href="#crypto_crypto_createdecipher_algorithm_password" id="crypto_crypto_createdecipher_algorithm_password">#</a></span></h3>
<p>Creates and returns a <code>Decipher</code> object that uses the given <code>algorithm</code> and
<code>password</code> (key).</p>
<p>The implementation of <code>crypto.createDecipher()</code> derives keys using the OpenSSL
function <a href="https://www.openssl.org/docs/crypto/EVP_BytesToKey.html"><code>EVP_BytesToKey</code></a> with the digest algorithm set to MD5, one
iteration, and no salt. The lack of salt allows dictionary attacks as the same
password always creates the same key. The low iteration count and
non-cryptographically secure hash algorithm allow passwords to be tested very
rapidly.</p>
<p>In line with OpenSSL's recommendation to use pbkdf2 instead of
<a href="https://www.openssl.org/docs/crypto/EVP_BytesToKey.html"><code>EVP_BytesToKey</code></a> it is recommended that developers derive a key and IV on
their own using <a href="#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback"><code>crypto.pbkdf2()</code></a> and to use <a href="#crypto_crypto_createdecipheriv_algorithm_key_iv"><code>crypto.createDecipheriv()</code></a>
to create the <code>Decipher</code> object.</p>
<h3>crypto.createDecipheriv(algorithm, key, iv)<span><a class="mark" href="#crypto_crypto_createdecipheriv_algorithm_key_iv" id="crypto_crypto_createdecipheriv_algorithm_key_iv">#</a></span></h3>
<p>Creates and returns a <code>Decipher</code> object that uses the given <code>algorithm</code>, <code>key</code>
and initialization vector (<code>iv</code>).</p>
<p>The <code>algorithm</code> is dependent on OpenSSL, examples are <code>'aes192'</code>, etc. On
recent OpenSSL releases, <code>openssl list-cipher-algorithms</code> will display the
available cipher algorithms.</p>
<p>The <code>key</code> is the raw key used by the <code>algorithm</code> and <code>iv</code> is an
<a href="https://en.wikipedia.org/wiki/Initialization_vector">initialization vector</a>. Both arguments must be <code>'binary'</code> encoded strings or
<a href="https://nodejs.org/api/buffer.html#buffer_buffer">buffers</a>.</p>
<h3>crypto.createDiffieHellman(prime[, prime_encoding][, generator][, generator_encoding])<span><a class="mark" href="#crypto_crypto_creatediffiehellman_prime_prime_encoding_generator_generator_encoding" id="crypto_crypto_creatediffiehellman_prime_prime_encoding_generator_generator_encoding">#</a></span></h3>
<p>Creates a <code>DiffieHellman</code> key exchange object using the supplied <code>prime</code> and an
optional specific <code>generator</code>.</p>
<p>The <code>generator</code> argument can be a number, string, or <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a>. If
<code>generator</code> is not specified, the value <code>2</code> is used.</p>
<p>The <code>prime_encoding</code> and <code>generator_encoding</code> arguments can be <code>'binary'</code>,
<code>'hex'</code>, or <code>'base64'</code>.</p>
<p>If <code>prime_encoding</code> is specified, <code>prime</code> is expected to be a string; otherwise
a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> is expected.</p>
<p>If <code>generator_encoding</code> is specified, <code>generator</code> is expected to be a string;
otherwise either a number or <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> is expected.</p>
<h3>crypto.createDiffieHellman(prime_length[, generator])<span><a class="mark" href="#crypto_crypto_creatediffiehellman_prime_length_generator" id="crypto_crypto_creatediffiehellman_prime_length_generator">#</a></span></h3>
<p>Creates a <code>DiffieHellman</code> key exchange object and generates a prime of
<code>prime_length</code> bits using an optional specific numeric <code>generator</code>.
If <code>generator</code> is not specified, the value <code>2</code> is used.</p>
<h3>crypto.createECDH(curve_name)<span><a class="mark" href="#crypto_crypto_createecdh_curve_name" id="crypto_crypto_createecdh_curve_name">#</a></span></h3>
<p>Creates an Elliptic Curve Diffie-Hellman (<code>ECDH</code>) key exchange object using a
predefined curve specified by the <code>curve_name</code> string. Use
<a href="https://nodejs.org/api/crypto.html#crypto_crypto_getcurves"><code>crypto.getCurves()</code></a> to obtain a list of available curve names. On recent
OpenSSL releases, <code>openssl ecparam -list_curves</code> will also display the name
and description of each available elliptic curve.</p>
<h3>crypto.createHash(algorithm)<span><a class="mark" href="#crypto_crypto_createhash_algorithm" id="crypto_crypto_createhash_algorithm">#</a></span></h3>
<p>Creates and returns a <code>Hash</code> object that can be used to generate hash digests
using the given <code>algorithm</code>.</p>
<p>The <code>algorithm</code> is dependent on the available algorithms supported by the
version of OpenSSL on the platform. Examples are <code>'sha256'</code>, <code>'sha512'</code>, etc.
On recent releases of OpenSSL, <code>openssl list-message-digest-algorithms</code> will
display the available digest algorithms.</p>
<p>Example: generating the sha256 sum of a file</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> filename <span class="sh_symbol">=</span> process<span class="sh_symbol">.</span>argv<span class="sh_symbol">[</span><span class="sh_number">2</span><span class="sh_symbol">];</span>
<span class="sh_keyword">const</span> crypto <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> fs <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'fs'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> hash <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">createHash</span><span class="sh_symbol">(</span><span class="sh_string">'sha256'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> input <span class="sh_symbol">=</span> fs<span class="sh_symbol">.</span><span class="sh_function">createReadStream</span><span class="sh_symbol">(</span>filename<span class="sh_symbol">);</span>
input<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'readable'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">var</span> data <span class="sh_symbol">=</span> input<span class="sh_symbol">.</span><span class="sh_function">read</span><span class="sh_symbol">();</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>data<span class="sh_symbol">)</span>
    hash<span class="sh_symbol">.</span><span class="sh_function">update</span><span class="sh_symbol">(</span>data<span class="sh_symbol">);</span>
  <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`$<span class="sh_cbracket">{</span>hash<span class="sh_symbol">.</span><span class="sh_function">digest</span><span class="sh_symbol">(</span><span class="sh_string">'hex'</span><span class="sh_symbol">)</span><span class="sh_cbracket">}</span> $<span class="sh_cbracket">{</span>filename<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h3>crypto.createHmac(algorithm, key)<span><a class="mark" href="#crypto_crypto_createhmac_algorithm_key" id="crypto_crypto_createhmac_algorithm_key">#</a></span></h3>
<p>Creates and returns an <code>Hmac</code> object that uses the given <code>algorithm</code> and <code>key</code>.</p>
<p>The <code>algorithm</code> is dependent on the available algorithms supported by the
version of OpenSSL on the platform. Examples are <code>'sha256'</code>, <code>'sha512'</code>, etc.
On recent releases of OpenSSL, <code>openssl list-message-digest-algorithms</code> will
display the available digest algorithms.</p>
<p>The <code>key</code> is the HMAC key used to generate the cryptographic HMAC hash.</p>
<p>Example: generating the sha256 HMAC of a file</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> filename <span class="sh_symbol">=</span> process<span class="sh_symbol">.</span>argv<span class="sh_symbol">[</span><span class="sh_number">2</span><span class="sh_symbol">];</span>
<span class="sh_keyword">const</span> crypto <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> fs <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'fs'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> hmac <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">createHmac</span><span class="sh_symbol">(</span><span class="sh_string">'sha256'</span><span class="sh_symbol">,</span> <span class="sh_string">'a secret'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> input <span class="sh_symbol">=</span> fs<span class="sh_symbol">.</span><span class="sh_function">createReadStream</span><span class="sh_symbol">(</span>filename<span class="sh_symbol">);</span>
input<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'readable'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">var</span> data <span class="sh_symbol">=</span> input<span class="sh_symbol">.</span><span class="sh_function">read</span><span class="sh_symbol">();</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>data<span class="sh_symbol">)</span>
    hmac<span class="sh_symbol">.</span><span class="sh_function">update</span><span class="sh_symbol">(</span>data<span class="sh_symbol">);</span>
  <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`$<span class="sh_cbracket">{</span>hmac<span class="sh_symbol">.</span><span class="sh_function">digest</span><span class="sh_symbol">(</span><span class="sh_string">'hex'</span><span class="sh_symbol">)</span><span class="sh_cbracket">}</span> $<span class="sh_cbracket">{</span>filename<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h3>crypto.createSign(algorithm)<span><a class="mark" href="#crypto_crypto_createsign_algorithm" id="crypto_crypto_createsign_algorithm">#</a></span></h3>
<p>Creates and returns a <code>Sign</code> object that uses the given <code>algorithm</code>. On
recent OpenSSL releases, <code>openssl list-public-key-algorithms</code> will
display the available signing algorithms. One example is <code>'RSA-SHA256'</code>.</p>
<h3>crypto.createVerify(algorithm)<span><a class="mark" href="#crypto_crypto_createverify_algorithm" id="crypto_crypto_createverify_algorithm">#</a></span></h3>
<p>Creates and returns a <code>Verify</code> object that uses the given algorithm. On
recent OpenSSL releases, <code>openssl list-public-key-algorithms</code> will
display the available signing algorithms. One example is <code>'RSA-SHA256'</code>.</p>
<h3>crypto.getCiphers()<span><a class="mark" href="#crypto_crypto_getciphers" id="crypto_crypto_getciphers">#</a></span></h3>
<p>Returns an array with the names of the supported cipher algorithms.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> ciphers <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">getCiphers</span><span class="sh_symbol">();</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>ciphers<span class="sh_symbol">);</span> <span class="sh_comment">// ['aes-128-cbc', 'aes-128-ccm', ...]</span>
</code></pre>
<h3>crypto.getCurves()<span><a class="mark" href="#crypto_crypto_getcurves" id="crypto_crypto_getcurves">#</a></span></h3>
<p>Returns an array with the names of the supported elliptic curves.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> curves <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">getCurves</span><span class="sh_symbol">();</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>curves<span class="sh_symbol">);</span> <span class="sh_comment">// ['secp256k1', 'secp384r1', ...]</span>
</code></pre>
<h3>crypto.getDiffieHellman(group_name)<span><a class="mark" href="#crypto_crypto_getdiffiehellman_group_name" id="crypto_crypto_getdiffiehellman_group_name">#</a></span></h3>
<p>Creates a predefined <code>DiffieHellman</code> key exchange object. The
supported groups are: <code>'modp1'</code>, <code>'modp2'</code>, <code>'modp5'</code> (defined in
<a href="https://www.rfc-editor.org/rfc/rfc2412.txt">RFC 2412</a>, but see <a href="#fs_caveats">Caveats</a>) and <code>'modp14'</code>, <code>'modp15'</code>,
<code>'modp16'</code>, <code>'modp17'</code>, <code>'modp18'</code> (defined in <a href="https://www.rfc-editor.org/rfc/rfc3526.txt">RFC 3526</a>). The
returned object mimics the interface of objects created by
<a href="#crypto_crypto_creatediffiehellman_prime_prime_encoding_generator_generator_encoding"><code>crypto.createDiffieHellman()</code></a>, but will not allow changing
the keys (with <a href="#crypto_diffiehellman_setpublickey_public_key_encoding"><code>diffieHellman.setPublicKey()</code></a> for example). The
advantage of using this method is that the parties do not have to
generate nor exchange a group modulus beforehand, saving both processor
and communication time.</p>
<p>Example (obtaining a shared secret):</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> crypto <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> alice <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">getDiffieHellman</span><span class="sh_symbol">(</span><span class="sh_string">'modp14'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> bob <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">getDiffieHellman</span><span class="sh_symbol">(</span><span class="sh_string">'modp14'</span><span class="sh_symbol">);</span>

alice<span class="sh_symbol">.</span><span class="sh_function">generateKeys</span><span class="sh_symbol">();</span>
bob<span class="sh_symbol">.</span><span class="sh_function">generateKeys</span><span class="sh_symbol">();</span>

<span class="sh_keyword">const</span> alice_secret <span class="sh_symbol">=</span> alice<span class="sh_symbol">.</span><span class="sh_function">computeSecret</span><span class="sh_symbol">(</span>bob<span class="sh_symbol">.</span><span class="sh_function">getPublicKey</span><span class="sh_symbol">(),</span> <span class="sh_keyword">null</span><span class="sh_symbol">,</span> <span class="sh_string">'hex'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> bob_secret <span class="sh_symbol">=</span> bob<span class="sh_symbol">.</span><span class="sh_function">computeSecret</span><span class="sh_symbol">(</span>alice<span class="sh_symbol">.</span><span class="sh_function">getPublicKey</span><span class="sh_symbol">(),</span> <span class="sh_keyword">null</span><span class="sh_symbol">,</span> <span class="sh_string">'hex'</span><span class="sh_symbol">);</span>

<span class="sh_comment">/* alice_secret and bob_secret should be the same */</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>alice_secret <span class="sh_symbol">==</span> bob_secret<span class="sh_symbol">);</span>
</code></pre>
<h3>crypto.getHashes()<span><a class="mark" href="#crypto_crypto_gethashes" id="crypto_crypto_gethashes">#</a></span></h3>
<p>Returns an array with the names of the supported hash algorithms.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> hashes <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">getHashes</span><span class="sh_symbol">();</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>hashes<span class="sh_symbol">);</span> <span class="sh_comment">// ['sha', 'sha1', 'sha1WithRSAEncryption', ...]</span>
</code></pre>
<h3>crypto.pbkdf2(password, salt, iterations, keylen, digest, callback)<span><a class="mark" href="#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback" id="crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback">#</a></span></h3>
<p>Provides an asynchronous Password-Based Key Derivation Function 2 (PBKDF2)
implementation. A selected HMAC digest algorithm specified by <code>digest</code> is
applied to derive a key of the requested byte length (<code>keylen</code>) from the
<code>password</code>, <code>salt</code> and <code>iterations</code>.</p>
<p>The supplied <code>callback</code> function is called with two arguments: <code>err</code> and
<code>derivedKey</code>. If an error occurs, <code>err</code> will be set; otherwise <code>err</code> will be
null. The successfully generated <code>derivedKey</code> will be passed as a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a>.</p>
<p>The <code>iterations</code> argument must be a number set as high as possible. The
higher the number of iterations, the more secure the derived key will be,
but will take a longer amount of time to complete.</p>
<p>The <code>salt</code> should also be as unique as possible. It is recommended that the
salts are random and their lengths are greater than 16 bytes. See
<a href="http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf">NIST SP 800-132</a> for details.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> crypto <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">);</span>
crypto<span class="sh_symbol">.</span><span class="sh_function">pbkdf2</span><span class="sh_symbol">(</span><span class="sh_string">'secret'</span><span class="sh_symbol">,</span> <span class="sh_string">'salt'</span><span class="sh_symbol">,</span> <span class="sh_number">100000</span><span class="sh_symbol">,</span> <span class="sh_number">512</span><span class="sh_symbol">,</span> <span class="sh_string">'sha512'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">,</span> key<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_keyword">throw</span> err<span class="sh_symbol">;</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>key<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_string">'hex'</span><span class="sh_symbol">));</span>  <span class="sh_comment">// 'c5e478d...1469e50'</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>An array of supported digest functions can be retrieved using
<a href="#crypto_crypto_gethashes"><code>crypto.getHashes()</code></a>.</p>
<h3>crypto.pbkdf2Sync(password, salt, iterations, keylen, digest)<span><a class="mark" href="#crypto_crypto_pbkdf2sync_password_salt_iterations_keylen_digest" id="crypto_crypto_pbkdf2sync_password_salt_iterations_keylen_digest">#</a></span></h3>
<p>Provides a synchronous Password-Based Key Derivation Function 2 (PBKDF2)
implementation. A selected HMAC digest algorithm specified by <code>digest</code> is
applied to derive a key of the requested byte length (<code>keylen</code>) from the
<code>password</code>, <code>salt</code> and <code>iterations</code>.</p>
<p>If an error occurs an Error will be thrown, otherwise the derived key will be
returned as a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a>.</p>
<p>The <code>iterations</code> argument must be a number set as high as possible. The
higher the number of iterations, the more secure the derived key will be,
but will take a longer amount of time to complete.</p>
<p>The <code>salt</code> should also be as unique as possible. It is recommended that the
salts are random and their lengths are greater than 16 bytes. See
<a href="http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf">NIST SP 800-132</a> for details.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> crypto <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> key <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">pbkdf2Sync</span><span class="sh_symbol">(</span><span class="sh_string">'secret'</span><span class="sh_symbol">,</span> <span class="sh_string">'salt'</span><span class="sh_symbol">,</span> <span class="sh_number">100000</span><span class="sh_symbol">,</span> <span class="sh_number">512</span><span class="sh_symbol">,</span> <span class="sh_string">'sha512'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>key<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_string">'hex'</span><span class="sh_symbol">));</span>  <span class="sh_comment">// 'c5e478d...1469e50'</span>
</code></pre>
<p>An array of supported digest functions can be retrieved using
<a href="#crypto_crypto_gethashes"><code>crypto.getHashes()</code></a>.</p>
<h3>crypto.privateDecrypt(private_key, buffer)<span><a class="mark" href="#crypto_crypto_privatedecrypt_private_key_buffer" id="crypto_crypto_privatedecrypt_private_key_buffer">#</a></span></h3>
<p>Decrypts <code>buffer</code> with <code>private_key</code>.</p>
<p><code>private_key</code> can be an object or a string. If <code>private_key</code> is a string, it is
treated as the key with no passphrase and will use <code>RSA_PKCS1_OAEP_PADDING</code>.
If <code>private_key</code> is an object, it is interpreted as a hash object with the
keys:</p>
<ul>
<li><code>key</code> : <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> - PEM encoded private key</li>
<li><code>passphrase</code> : <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> - Optional passphrase for the private key</li>
<li><code>padding</code> : An optional padding value, one of the following:<ul>
<li><code>constants.RSA_NO_PADDING</code></li>
<li><code>constants.RSA_PKCS1_PADDING</code></li>
<li><code>constants.RSA_PKCS1_OAEP_PADDING</code></li>
</ul>
</li>
</ul>
<p>All paddings are defined in the <code>constants</code> module.</p>
<h3>crypto.privateEncrypt(private_key, buffer)<span><a class="mark" href="#crypto_crypto_privateencrypt_private_key_buffer" id="crypto_crypto_privateencrypt_private_key_buffer">#</a></span></h3>
<p>Encrypts <code>buffer</code> with <code>private_key</code>.</p>
<p><code>private_key</code> can be an object or a string. If <code>private_key</code> is a string, it is
treated as the key with no passphrase and will use <code>RSA_PKCS1_PADDING</code>.
If <code>private_key</code> is an object, it is interpreted as a hash object with the
keys:</p>
<ul>
<li><code>key</code> : <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> - PEM encoded private key</li>
<li><code>passphrase</code> : <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> - Optional passphrase for the private key</li>
<li><code>padding</code> : An optional padding value, one of the following:<ul>
<li><code>constants.RSA_NO_PADDING</code></li>
<li><code>constants.RSA_PKCS1_PADDING</code></li>
<li><code>constants.RSA_PKCS1_OAEP_PADDING</code></li>
</ul>
</li>
</ul>
<p>All paddings are defined in the <code>constants</code> module.</p>
<h3>crypto.publicDecrypt(public_key, buffer)<span><a class="mark" href="#crypto_crypto_publicdecrypt_public_key_buffer" id="crypto_crypto_publicdecrypt_public_key_buffer">#</a></span></h3>
<p>Decrypts <code>buffer</code> with <code>public_key</code>.</p>
<p><code>public_key</code> can be an object or a string. If <code>public_key</code> is a string, it is
treated as the key with no passphrase and will use <code>RSA_PKCS1_PADDING</code>.
If <code>public_key</code> is an object, it is interpreted as a hash object with the
keys:</p>
<ul>
<li><code>key</code> : <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> - PEM encoded public key</li>
<li><code>passphrase</code> : <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> - Optional passphrase for the private key</li>
<li><code>padding</code> : An optional padding value, one of the following:<ul>
<li><code>constants.RSA_NO_PADDING</code></li>
<li><code>constants.RSA_PKCS1_PADDING</code></li>
<li><code>constants.RSA_PKCS1_OAEP_PADDING</code></li>
</ul>
</li>
</ul>
<p>Because RSA public keys can be derived from private keys, a private key may
be passed instead of a public key.</p>
<p>All paddings are defined in the <code>constants</code> module.</p>
<h3>crypto.publicEncrypt(public_key, buffer)<span><a class="mark" href="#crypto_crypto_publicencrypt_public_key_buffer" id="crypto_crypto_publicencrypt_public_key_buffer">#</a></span></h3>
<p>Encrypts <code>buffer</code> with <code>public_key</code>.</p>
<p><code>public_key</code> can be an object or a string. If <code>public_key</code> is a string, it is
treated as the key with no passphrase and will use <code>RSA_PKCS1_OAEP_PADDING</code>.
If <code>public_key</code> is an object, it is interpreted as a hash object with the
keys:</p>
<ul>
<li><code>key</code> : <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> - PEM encoded public key</li>
<li><code>passphrase</code> : <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> - Optional passphrase for the private key</li>
<li><code>padding</code> : An optional padding value, one of the following:<ul>
<li><code>constants.RSA_NO_PADDING</code></li>
<li><code>constants.RSA_PKCS1_PADDING</code></li>
<li><code>constants.RSA_PKCS1_OAEP_PADDING</code></li>
</ul>
</li>
</ul>
<p>Because RSA public keys can be derived from private keys, a private key may
be passed instead of a public key.</p>
<p>All paddings are defined in the <code>constants</code> module.</p>
<h3>crypto.randomBytes(size[, callback])<span><a class="mark" href="#crypto_crypto_randombytes_size_callback" id="crypto_crypto_randombytes_size_callback">#</a></span></h3>
<p>Generates cryptographically strong pseudo-random data. The <code>size</code> argument
is a number indicating the number of bytes to generate.</p>
<p>If a <code>callback</code> function is provided, the bytes are generated asynchronously
and the <code>callback</code> function is invoked with two arguments: <code>err</code> and <code>buf</code>.
If an error occurs, <code>err</code> will be an Error object; otherwise it is null. The
<code>buf</code> argument is a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> containing the generated bytes.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// Asynchronous</span>
<span class="sh_keyword">const</span> crypto <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'crypto'</span><span class="sh_symbol">);</span>
crypto<span class="sh_symbol">.</span><span class="sh_function">randomBytes</span><span class="sh_symbol">(</span><span class="sh_number">256</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">,</span> buf<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_keyword">throw</span> err<span class="sh_symbol">;</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`$<span class="sh_cbracket">{</span>buf<span class="sh_symbol">.</span>length<span class="sh_cbracket">}</span> bytes of random data<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>buf<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_string">'hex'</span><span class="sh_symbol">)</span><span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>If the <code>callback</code> function is not provided, the random bytes are generated
synchronously and returned as a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a>. An error will be thrown if
there is a problem generating the bytes.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// Synchronous</span>
<span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">randomBytes</span><span class="sh_symbol">(</span><span class="sh_number">256</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>
  `$<span class="sh_cbracket">{</span>buf<span class="sh_symbol">.</span>length<span class="sh_cbracket">}</span> bytes of random data<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>buf<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_string">'hex'</span><span class="sh_symbol">)</span><span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
</code></pre>
<p>The <code>crypto.randomBytes()</code> method will block until there is sufficient entropy.
This should normally never take longer than a few milliseconds. The only time
when generating the random bytes may conceivably block for a longer period of
time is right after boot, when the whole system is still low on entropy.</p>
<h3>crypto.setEngine(engine[, flags])<span><a class="mark" href="#crypto_crypto_setengine_engine_flags" id="crypto_crypto_setengine_engine_flags">#</a></span></h3>
<p>Load and set the <code>engine</code> for some or all OpenSSL functions (selected by flags).</p>
<p><code>engine</code> could be either an id or a path to the engine's shared library.</p>
<p>The optional <code>flags</code> argument uses <code>ENGINE_METHOD_ALL</code> by default. The <code>flags</code>
is a bit field taking one of or a mix of the following flags (defined in the
<code>constants</code> module):</p>
<ul>
<li><code>ENGINE_METHOD_RSA</code></li>
<li><code>ENGINE_METHOD_DSA</code></li>
<li><code>ENGINE_METHOD_DH</code></li>
<li><code>ENGINE_METHOD_RAND</code></li>
<li><code>ENGINE_METHOD_ECDH</code></li>
<li><code>ENGINE_METHOD_ECDSA</code></li>
<li><code>ENGINE_METHOD_CIPHERS</code></li>
<li><code>ENGINE_METHOD_DIGESTS</code></li>
<li><code>ENGINE_METHOD_STORE</code></li>
<li><code>ENGINE_METHOD_PKEY_METHS</code></li>
<li><code>ENGINE_METHOD_PKEY_ASN1_METHS</code></li>
<li><code>ENGINE_METHOD_ALL</code></li>
<li><code>ENGINE_METHOD_NONE</code></li>
</ul>
<h2>Notes<span><a class="mark" href="#crypto_notes" id="crypto_notes">#</a></span></h2>
<h3>Legacy Streams API (pre Node.js v0.10)<span><a class="mark" href="#crypto_legacy_streams_api_pre_node_js_v0_10" id="crypto_legacy_streams_api_pre_node_js_v0_10">#</a></span></h3>
<p>The Crypto module was added to Node.js before there was the concept of a
unified Stream API, and before there were <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> objects for handling
binary data. As such, the many of the <code>crypto</code> defined classes have methods not
typically found on other Node.js classes that implement the <a href="https://nodejs.org/api/stream.html#stream_stream">streams</a>
API (e.g. <code>update()</code>, <code>final()</code>, or <code>digest()</code>). Also, many methods accepted
and returned <code>'binary'</code> encoded strings by default rather than Buffers. This
default was changed after Node.js v0.8 to use <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> objects by default
instead.</p>
<h3>Recent ECDH Changes<span><a class="mark" href="#crypto_recent_ecdh_changes" id="crypto_recent_ecdh_changes">#</a></span></h3>
<p>Usage of <code>ECDH</code> with non-dynamically generated key pairs has been simplified.
Now, <a href="#crypto_ecdh_setprivatekey_private_key_encoding"><code>ecdh.setPrivateKey()</code></a> can be called with a preselected private key
and the associated public point (key) will be computed and stored in the object.
This allows code to only store and provide the private part of the EC key pair.
<a href="#crypto_ecdh_setprivatekey_private_key_encoding"><code>ecdh.setPrivateKey()</code></a> now also validates that the private key is valid for
the selected curve.</p>
<p>The <a href="#crypto_ecdh_setpublickey_public_key_encoding"><code>ecdh.setPublicKey()</code></a> method is now deprecated as its inclusion in the
API is not useful. Either a previously stored private key should be set, which
automatically generates the associated public key, or <a href="#crypto_ecdh_generatekeys_encoding_format"><code>ecdh.generateKeys()</code></a>
should be called. The main drawback of using <a href="#crypto_ecdh_setpublickey_public_key_encoding"><code>ecdh.setPublicKey()</code></a> is that
it can be used to put the ECDH key pair into an inconsistent state.</p>
<h3>Support for weak or compromised algorithms<span><a class="mark" href="#crypto_support_for_weak_or_compromised_algorithms" id="crypto_support_for_weak_or_compromised_algorithms">#</a></span></h3>
<p>The <code>crypto</code> module still supports some algorithms which are already
compromised and are not currently recommended for use. The API also allows
the use of ciphers and hashes with a small key size that are considered to be
too weak for safe use.</p>
<p>Users should take full responsibility for selecting the crypto
algorithm and key size according to their security requirements.</p>
<p>Based on the recommendations of <a href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf">NIST SP 800-131A</a>:</p>
<ul>
<li>MD5 and SHA-1 are no longer acceptable where collision resistance is
required such as digital signatures.</li>
<li>The key used with RSA, DSA and DH algorithms is recommended to have
at least 2048 bits and that of the curve of ECDSA and ECDH at least
224 bits, to be safe to use for several years.</li>
<li>The DH groups of <code>modp1</code>, <code>modp2</code> and <code>modp5</code> have a key size
smaller than 2048 bits and are not recommended.</li>
</ul>
<p>See the reference for other recommendations and details.</p>
<!-- [end-include:crypto.md] -->
<!-- [start-include:debugger.md] -->
<h1>Debugger<span><a class="mark" href="#debugger_debugger" id="debugger_debugger">#</a></span></h1>
<pre class="api_stability api_stability_2 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> Stable</pre><!-- type=misc -->
<p>Node.js includes a full-featured out-of-process debugging utility accessible
via a simple <a href="https://github.com/v8/v8/wiki/Debugging-Protocol">TCP-based protocol</a> and built-in debugging client. To use it,
start Node.js with the <code>debug</code> argument followed by the path to the script to
debug; a prompt will be displayed indicating successful launch of the debugger:</p>
<pre class="sh_sourceCode"><code>$ node debug myscript<span class="sh_symbol">.</span>js
<span class="sh_symbol">&lt;</span> <span class="sh_keyword">debugger</span> listening on port <span class="sh_number">5858</span>
connecting<span class="sh_symbol">...</span> ok
<span class="sh_keyword">break</span> <span class="sh_keyword">in</span> <span class="sh_regexp">/home/i</span><span class="sh_normal">ndutny</span><span class="sh_symbol">/</span><span class="sh_normal">Code</span><span class="sh_symbol">/</span><span class="sh_normal">git</span><span class="sh_symbol">/</span><span class="sh_normal">indutny</span><span class="sh_symbol">/</span>myscript<span class="sh_symbol">.</span>js<span class="sh_symbol">:</span><span class="sh_number">1</span>
  <span class="sh_number">1</span> x <span class="sh_symbol">=</span> <span class="sh_number">5</span><span class="sh_symbol">;</span>
  <span class="sh_number">2</span> <span class="sh_function">setTimeout</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_number">3</span>   <span class="sh_keyword">debugger</span><span class="sh_symbol">;</span>
debug<span class="sh_symbol">&gt;</span>
</code></pre><p>Node.js's debugger client is not a full-featured debugger, but simple step and
inspection are possible.</p>
<p>Inserting the statement <code>debugger;</code> into the source code of a script will
enable a breakpoint at that position in the code:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// myscript.js</span>
x <span class="sh_symbol">=</span> <span class="sh_number">5</span><span class="sh_symbol">;</span>
<span class="sh_function">setTimeout</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">debugger</span><span class="sh_symbol">;</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'world'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">1000</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'hello'</span><span class="sh_symbol">);</span>
</code></pre>
<p>Once the debugger is run, a breakpoint will occur at line 4:</p>
<pre class="sh_sourceCode"><code>$ node debug myscript<span class="sh_symbol">.</span>js
<span class="sh_symbol">&lt;</span> <span class="sh_keyword">debugger</span> listening on port <span class="sh_number">5858</span>
connecting<span class="sh_symbol">...</span> ok
<span class="sh_keyword">break</span> <span class="sh_keyword">in</span> <span class="sh_regexp">/home/i</span><span class="sh_normal">ndutny</span><span class="sh_symbol">/</span><span class="sh_normal">Code</span><span class="sh_symbol">/</span><span class="sh_normal">git</span><span class="sh_symbol">/</span><span class="sh_normal">indutny</span><span class="sh_symbol">/</span>myscript<span class="sh_symbol">.</span>js<span class="sh_symbol">:</span><span class="sh_number">1</span>
  <span class="sh_number">1</span> x <span class="sh_symbol">=</span> <span class="sh_number">5</span><span class="sh_symbol">;</span>
  <span class="sh_number">2</span> <span class="sh_function">setTimeout</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_number">3</span>   <span class="sh_keyword">debugger</span><span class="sh_symbol">;</span>
debug<span class="sh_symbol">&gt;</span> cont
<span class="sh_symbol">&lt;</span> hello
<span class="sh_keyword">break</span> <span class="sh_keyword">in</span> <span class="sh_regexp">/home/i</span><span class="sh_normal">ndutny</span><span class="sh_symbol">/</span><span class="sh_normal">Code</span><span class="sh_symbol">/</span><span class="sh_normal">git</span><span class="sh_symbol">/</span><span class="sh_normal">indutny</span><span class="sh_symbol">/</span>myscript<span class="sh_symbol">.</span>js<span class="sh_symbol">:</span><span class="sh_number">3</span>
  <span class="sh_number">1</span> x <span class="sh_symbol">=</span> <span class="sh_number">5</span><span class="sh_symbol">;</span>
  <span class="sh_number">2</span> <span class="sh_function">setTimeout</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_number">3</span>   <span class="sh_keyword">debugger</span><span class="sh_symbol">;</span>
  <span class="sh_number">4</span>   console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'world'</span><span class="sh_symbol">);</span>
  <span class="sh_number">5</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">1000</span><span class="sh_symbol">);</span>
debug<span class="sh_symbol">&gt;</span> next
<span class="sh_keyword">break</span> <span class="sh_keyword">in</span> <span class="sh_regexp">/home/i</span><span class="sh_normal">ndutny</span><span class="sh_symbol">/</span><span class="sh_normal">Code</span><span class="sh_symbol">/</span><span class="sh_normal">git</span><span class="sh_symbol">/</span><span class="sh_normal">indutny</span><span class="sh_symbol">/</span>myscript<span class="sh_symbol">.</span>js<span class="sh_symbol">:</span><span class="sh_number">4</span>
  <span class="sh_number">2</span> <span class="sh_function">setTimeout</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_number">3</span>   <span class="sh_keyword">debugger</span><span class="sh_symbol">;</span>
  <span class="sh_number">4</span>   console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'world'</span><span class="sh_symbol">);</span>
  <span class="sh_number">5</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">1000</span><span class="sh_symbol">);</span>
  <span class="sh_number">6</span> console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'hello'</span><span class="sh_symbol">);</span>
debug<span class="sh_symbol">&gt;</span> repl
Press Ctrl <span class="sh_symbol">+</span> C to leave debug repl
<span class="sh_symbol">&gt;</span> x
<span class="sh_number">5</span>
<span class="sh_symbol">&gt;</span> <span class="sh_number">2+2</span>
<span class="sh_number">4</span>
debug<span class="sh_symbol">&gt;</span> next
<span class="sh_symbol">&lt;</span> world
<span class="sh_keyword">break</span> <span class="sh_keyword">in</span> <span class="sh_regexp">/home/i</span><span class="sh_normal">ndutny</span><span class="sh_symbol">/</span><span class="sh_normal">Code</span><span class="sh_symbol">/</span><span class="sh_normal">git</span><span class="sh_symbol">/</span><span class="sh_normal">indutny</span><span class="sh_symbol">/</span>myscript<span class="sh_symbol">.</span>js<span class="sh_symbol">:</span><span class="sh_number">5</span>
  <span class="sh_number">3</span>   <span class="sh_keyword">debugger</span><span class="sh_symbol">;</span>
  <span class="sh_number">4</span>   console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'world'</span><span class="sh_symbol">);</span>
  <span class="sh_number">5</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">1000</span><span class="sh_symbol">);</span>
  <span class="sh_number">6</span> console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'hello'</span><span class="sh_symbol">);</span>
  <span class="sh_number">7</span>
debug<span class="sh_symbol">&gt;</span> quit
</code></pre><p>The <code>repl</code> command allows code to be evaluated remotely. The <code>next</code> command
steps to the next line. Type <code>help</code> to see what other commands are available.</p>
<p>Pressing <code>enter</code> without typing a command will repeat the previous debugger
command.</p>
<h2>Watchers<span><a class="mark" href="#debugger_watchers" id="debugger_watchers">#</a></span></h2>
<p>It is possible to watch expression and variable values while debugging. On
every breakpoint, each expression from the watchers list will be evaluated
in the current context and displayed immediately before the breakpoint's
source code listing.</p>
<p>To begin watching an expression, type <code>watch('my_expression')</code>. The command
<code>watchers</code> will print the active watchers. To remove a watcher, type
<code>unwatch('my_expression')</code>.</p>
<h2>Command reference<span><a class="mark" href="#debugger_command_reference" id="debugger_command_reference">#</a></span></h2>
<h3>Stepping<span><a class="mark" href="#debugger_stepping" id="debugger_stepping">#</a></span></h3>
<div class="signature"><ul>
<li><code>cont</code>, <code>c</code> - Continue execution</li>
<li><code>next</code>, <code>n</code> - Step next</li>
<li><code>step</code>, <code>s</code> - Step in</li>
<li><code>out</code>, <code>o</code> - Step out</li>
<li><code>pause</code> - Pause running code (like pause button in Developer Tools)</li>
</ul>
</div><h3>Breakpoints<span><a class="mark" href="#debugger_breakpoints" id="debugger_breakpoints">#</a></span></h3>
<div class="signature"><ul>
<li><code>setBreakpoint()</code>, <code>sb()</code> - Set breakpoint on current line</li>
<li><code>setBreakpoint(line)</code>, <code>sb(line)</code> - Set breakpoint on specific line</li>
<li><code>setBreakpoint('fn()')</code>, <code>sb(...)</code> - Set breakpoint on a first statement in
functions body</li>
<li><code>setBreakpoint('script.js', 1)</code>, <code>sb(...)</code> - Set breakpoint on first line of
script.js</li>
<li><code>clearBreakpoint('script.js', 1)</code>, <code>cb(...)</code> - Clear breakpoint in script.js
on line 1</li>
</ul>
</div><p>It is also possible to set a breakpoint in a file (module) that
isn't loaded yet:</p>
<pre class="sh_sourceCode"><code>$ <span class="sh_symbol">.</span><span class="sh_regexp">/node debug test/</span><span class="sh_normal">fixtures</span><span class="sh_symbol">/</span><span class="sh_keyword">break</span><span class="sh_symbol">-</span><span class="sh_keyword">in</span><span class="sh_symbol">-</span><span class="sh_normal">module</span><span class="sh_symbol">/</span>main<span class="sh_symbol">.</span>js
<span class="sh_symbol">&lt;</span> <span class="sh_keyword">debugger</span> listening on port <span class="sh_number">5858</span>
connecting to port <span class="sh_number">5858</span><span class="sh_symbol">...</span> ok
<span class="sh_keyword">break</span> <span class="sh_keyword">in</span> <span class="sh_normal">test</span><span class="sh_symbol">/</span><span class="sh_normal">fixtures</span><span class="sh_symbol">/</span><span class="sh_keyword">break</span><span class="sh_symbol">-</span><span class="sh_keyword">in</span><span class="sh_symbol">-</span><span class="sh_normal">module</span><span class="sh_symbol">/</span>main<span class="sh_symbol">.</span>js<span class="sh_symbol">:</span><span class="sh_number">1</span>
  <span class="sh_number">1</span> <span class="sh_keyword">var</span> mod <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./mod.js'</span><span class="sh_symbol">);</span>
  <span class="sh_number">2</span> mod<span class="sh_symbol">.</span><span class="sh_function">hello</span><span class="sh_symbol">();</span>
  <span class="sh_number">3</span> mod<span class="sh_symbol">.</span><span class="sh_function">hello</span><span class="sh_symbol">();</span>
debug<span class="sh_symbol">&gt;</span> <span class="sh_function">setBreakpoint</span><span class="sh_symbol">(</span><span class="sh_string">'mod.js'</span><span class="sh_symbol">,</span> <span class="sh_number">23</span><span class="sh_symbol">)</span>
Warning<span class="sh_symbol">:</span> script <span class="sh_string">'mod.js'</span> was not loaded yet<span class="sh_symbol">.</span>
  <span class="sh_number">1</span> <span class="sh_keyword">var</span> mod <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./mod.js'</span><span class="sh_symbol">);</span>
  <span class="sh_number">2</span> mod<span class="sh_symbol">.</span><span class="sh_function">hello</span><span class="sh_symbol">();</span>
  <span class="sh_number">3</span> mod<span class="sh_symbol">.</span><span class="sh_function">hello</span><span class="sh_symbol">();</span>
debug<span class="sh_symbol">&gt;</span> c
<span class="sh_keyword">break</span> <span class="sh_keyword">in</span> <span class="sh_normal">test</span><span class="sh_symbol">/</span><span class="sh_normal">fixtures</span><span class="sh_symbol">/</span><span class="sh_keyword">break</span><span class="sh_symbol">-</span><span class="sh_keyword">in</span><span class="sh_symbol">-</span><span class="sh_normal">module</span><span class="sh_symbol">/</span>mod<span class="sh_symbol">.</span>js<span class="sh_symbol">:</span><span class="sh_number">23</span>
 <span class="sh_number">21</span>
 <span class="sh_number">22</span> exports<span class="sh_symbol">.</span>hello <span class="sh_symbol">=</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
 <span class="sh_number">23</span>   <span class="sh_keyword">return</span> <span class="sh_string">'hello from module'</span><span class="sh_symbol">;</span>
 <span class="sh_number">24</span> <span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
 <span class="sh_number">25</span>
debug<span class="sh_symbol">&gt;</span>
</code></pre><h3>Information<span><a class="mark" href="#debugger_information" id="debugger_information">#</a></span></h3>
<div class="signature"><ul>
<li><code>backtrace</code>, <code>bt</code> - Print backtrace of current execution frame</li>
<li><code>list(5)</code> - List scripts source code with 5 line context (5 lines before and
after)</li>
<li><code>watch(expr)</code> - Add expression to watch list</li>
<li><code>unwatch(expr)</code> - Remove expression from watch list</li>
<li><code>watchers</code> - List all watchers and their values (automatically listed on each
breakpoint)</li>
<li><code>repl</code> - Open debugger's repl for evaluation in debugging script's context</li>
<li><code>exec expr</code> - Execute an expression in debugging script's context</li>
</ul>
</div><h3>Execution control<span><a class="mark" href="#debugger_execution_control" id="debugger_execution_control">#</a></span></h3>
<div class="signature"><ul>
<li><code>run</code> - Run script (automatically runs on debugger's start)</li>
<li><code>restart</code> - Restart script</li>
<li><code>kill</code> - Kill script</li>
</ul>
</div><h3>Various<span><a class="mark" href="#debugger_various" id="debugger_various">#</a></span></h3>
<div class="signature"><ul>
<li><code>scripts</code> - List all loaded scripts</li>
<li><code>version</code> - Display V8's version</li>
</ul>
</div><h2>Advanced Usage<span><a class="mark" href="#debugger_advanced_usage" id="debugger_advanced_usage">#</a></span></h2>
<p>An alternative way of enabling and accessing the debugger is to start
Node.js with the <code>--debug</code> command-line flag or by signaling an existing
Node.js process with <code>SIGUSR1</code>.</p>
<p>Once a process has been set in debug mode this way, it can be inspected
using the Node.js debugger by either connecting to the <code>pid</code> of the running
process or via URI reference to the listening debugger:</p>
<ul>
<li><code>node debug -p &lt;pid&gt;</code> - Connects to the process via the <code>pid</code></li>
<li><code>node debug &lt;URI&gt;</code> - Connects to the process via the URI such as
localhost:5858</li>
</ul>
<!-- [end-include:debugger.md] -->
<!-- [start-include:dgram.md] -->
<h1>UDP / Datagram Sockets<span><a class="mark" href="#dgram_udp_datagram_sockets" id="dgram_udp_datagram_sockets">#</a></span></h1>
<pre class="api_stability api_stability_2 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> Stable</pre><!-- name=dgram -->
<p>The <code>dgram</code> module provides an implementation of UDP Datagram sockets.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> dgram <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'dgram'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> server <span class="sh_symbol">=</span> dgram<span class="sh_symbol">.</span><span class="sh_function">createSocket</span><span class="sh_symbol">(</span><span class="sh_string">'udp4'</span><span class="sh_symbol">);</span>

server<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`server error<span class="sh_symbol">:\</span>n$<span class="sh_cbracket">{</span>err<span class="sh_symbol">.</span>stack<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  server<span class="sh_symbol">.</span><span class="sh_function">close</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

server<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'message'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>msg<span class="sh_symbol">,</span> rinfo<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`server got<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>msg<span class="sh_cbracket">}</span> from $<span class="sh_cbracket">{</span>rinfo<span class="sh_symbol">.</span>address<span class="sh_cbracket">}</span><span class="sh_symbol">:</span>$<span class="sh_cbracket">{</span>rinfo<span class="sh_symbol">.</span>port<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

server<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'listening'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">var</span> address <span class="sh_symbol">=</span> server<span class="sh_symbol">.</span><span class="sh_function">address</span><span class="sh_symbol">();</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`server listening $<span class="sh_cbracket">{</span>address<span class="sh_symbol">.</span>address<span class="sh_cbracket">}</span><span class="sh_symbol">:</span>$<span class="sh_cbracket">{</span>address<span class="sh_symbol">.</span>port<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

server<span class="sh_symbol">.</span><span class="sh_function">bind</span><span class="sh_symbol">(</span><span class="sh_number">41234</span><span class="sh_symbol">);</span>
<span class="sh_comment">// server listening 0.0.0.0:41234</span>
</code></pre>
<h2>Class: dgram.Socket<span><a class="mark" href="#dgram_class_dgram_socket" id="dgram_class_dgram_socket">#</a></span></h2>
<p>The <code>dgram.Socket</code> object is an <a href="https://nodejs.org/api/events.html#events_class_eventemitter"><code>EventEmitter</code></a> that encapsulates the
datagram functionality.</p>
<p>New instances of <code>dgram.Socket</code> are created using <a href="#dgram_dgram_createsocket_options_callback"><code>dgram.createSocket()</code></a>.
The <code>new</code> keyword is not to be used to create <code>dgram.Socket</code> instances.</p>
<h3>Event: 'close'<span><a class="mark" href="#dgram_event_close" id="dgram_event_close">#</a></span></h3>
<p>The <code>'close'</code> event is emitted after a socket is closed with <a href="#dgram_socket_close_callback"><code>close()</code></a>.
Once triggered, no new <code>'message'</code> events will be emitted on this socket.</p>
<h3>Event: 'error'<span><a class="mark" href="#dgram_event_error" id="dgram_event_error">#</a></span></h3>
<div class="signature"><ul>
<li><code>exception</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" class="type">&lt;Error&gt;</a></li>
</ul>
</div><p>The <code>'error'</code> event is emitted whenever any error occurs. The event handler
function is passed a single Error object.</p>
<h3>Event: 'listening'<span><a class="mark" href="#dgram_event_listening" id="dgram_event_listening">#</a></span></h3>
<p>The <code>'listening'</code> event is emitted whenever a socket begins listening for
datagram messages. This occurs as soon as UDP sockets are created.</p>
<h3>Event: 'message'<span><a class="mark" href="#dgram_event_message" id="dgram_event_message">#</a></span></h3>
<div class="signature"><ul>
<li><code>msg</code> <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> - The message</li>
<li><code>rinfo</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> - Remote address information</li>
</ul>
</div><p>The <code>'message'</code> event is emitted when a new datagram is available on a socket.
The event handler function is passed two arguments: <code>msg</code> and <code>rinfo</code>. The
<code>msg</code> argument is a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> and <code>rinfo</code> is an object with the sender's
address information provided by the <code>address</code>, <code>family</code> and <code>port</code> properties:</p>
<pre class="sh_sourceCode"><code class="lang-js">socket<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'message'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>msg<span class="sh_symbol">,</span> rinfo<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Received %d bytes from %s:%d</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span><span class="sh_symbol">,</span>
              msg<span class="sh_symbol">.</span>length<span class="sh_symbol">,</span> rinfo<span class="sh_symbol">.</span>address<span class="sh_symbol">,</span> rinfo<span class="sh_symbol">.</span>port<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h3>socket.addMembership(multicastAddress[, multicastInterface])<span><a class="mark" href="#dgram_socket_addmembership_multicastaddress_multicastinterface" id="dgram_socket_addmembership_multicastaddress_multicastinterface">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.6.9</span>
</div><ul>
<li><code>multicastAddress</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
<li><code>multicastInterface</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a>, Optional</li>
</ul>
<p>Tells the kernel to join a multicast group at the given <code>multicastAddress</code>
using the <code>IP_ADD_MEMBERSHIP</code> socket option. If the <code>multicastInterface</code>
argument is not specified, the operating system will try to add membership to
all valid networking interfaces.</p>
<h3>socket.address()<span><a class="mark" href="#dgram_socket_address" id="dgram_socket_address">#</a></span></h3>
<p>Returns an object containing the address information for a socket.
For UDP sockets, this object will contain <code>address</code>, <code>family</code> and <code>port</code>
properties.</p>
<h3>socket.bind([port][, address][, callback])<span><a class="mark" href="#dgram_socket_bind_port_address_callback" id="dgram_socket_bind_port_address_callback">#</a></span></h3>
<div class="signature"><ul>
<li><code>port</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> - Integer, Optional</li>
<li><code>address</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a>, Optional</li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> with no parameters, Optional. Called when
binding is complete.</li>
</ul>
</div><p>For UDP sockets, causes the <code>dgram.Socket</code> to listen for datagram messages on a
named <code>port</code> and optional <code>address</code>. If <code>port</code> is not specified, the operating
system will attempt to bind to a random port. If <code>address</code> is not specified,
the operating system will attempt to listen on all addresses.  Once binding is
complete, a <code>'listening'</code> event is emitted and the optional <code>callback</code> function
is called.</p>
<p>Note that specifying both a <code>'listening'</code> event listener and passing a
<code>callback</code> to the <code>socket.bind()</code> method is not harmful but not very
useful.</p>
<p>A bound datagram socket keeps the Node.js process running to receive
datagram messages.</p>
<p>If binding fails, an <code>'error'</code> event is generated. In rare case (e.g.
attempting to bind with a closed socket), an <a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a> may be thrown.</p>
<p>Example of a UDP server listening on port 41234:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> dgram <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'dgram'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> server <span class="sh_symbol">=</span> dgram<span class="sh_symbol">.</span><span class="sh_function">createSocket</span><span class="sh_symbol">(</span><span class="sh_string">'udp4'</span><span class="sh_symbol">);</span>

server<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`server error<span class="sh_symbol">:\</span>n$<span class="sh_cbracket">{</span>err<span class="sh_symbol">.</span>stack<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  server<span class="sh_symbol">.</span><span class="sh_function">close</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

server<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'message'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>msg<span class="sh_symbol">,</span> rinfo<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`server got<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>msg<span class="sh_cbracket">}</span> from $<span class="sh_cbracket">{</span>rinfo<span class="sh_symbol">.</span>address<span class="sh_cbracket">}</span><span class="sh_symbol">:</span>$<span class="sh_cbracket">{</span>rinfo<span class="sh_symbol">.</span>port<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

server<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'listening'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">var</span> address <span class="sh_symbol">=</span> server<span class="sh_symbol">.</span><span class="sh_function">address</span><span class="sh_symbol">();</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`server listening $<span class="sh_cbracket">{</span>address<span class="sh_symbol">.</span>address<span class="sh_cbracket">}</span><span class="sh_symbol">:</span>$<span class="sh_cbracket">{</span>address<span class="sh_symbol">.</span>port<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

server<span class="sh_symbol">.</span><span class="sh_function">bind</span><span class="sh_symbol">(</span><span class="sh_number">41234</span><span class="sh_symbol">);</span>
<span class="sh_comment">// server listening 0.0.0.0:41234</span>
</code></pre>
<h3>socket.bind(options[, callback])<span><a class="mark" href="#dgram_socket_bind_options_callback" id="dgram_socket_bind_options_callback">#</a></span></h3>
<div class="signature"><ul>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> - Required. Supports the following properties:<ul>
<li><code>port</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> - Required.</li>
<li><code>address</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> - Optional.</li>
<li><code>exclusive</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> - Optional.</li>
</ul>
</li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> - Optional.</li>
</ul>
</div><p>For UDP sockets, causes the <code>dgram.Socket</code> to listen for datagram messages on a
named <code>port</code> and optional <code>address</code> that are passed as properties of an
<code>options</code> object passed as the first argument. If <code>port</code> is not specified, the
operating system will attempt to bind to a random port. If <code>address</code> is not
specified, the operating system will attempt to listen on all addresses.  Once
binding is complete, a <code>'listening'</code> event is emitted and the optional
<code>callback</code> function is called.</p>
<p>The <code>options</code> object may contain an additional <code>exclusive</code> property that is
use when using <code>dgram.Socket</code> objects with the [<code>cluster</code>] module. When
<code>exclusive</code> is set to <code>false</code> (the default), cluster workers will use the same
underlying socket handle allowing connection handling duties to be shared.
When <code>exclusive</code> is <code>true</code>, however, the handle is not shared and attempted
port sharing results in an error.</p>
<p>An example socket listening on an exclusive port is shown below.</p>
<pre class="sh_sourceCode"><code class="lang-js">socket<span class="sh_symbol">.</span><span class="sh_function">bind</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>
  address<span class="sh_symbol">:</span> <span class="sh_string">'localhost'</span><span class="sh_symbol">,</span>
  port<span class="sh_symbol">:</span> <span class="sh_number">8000</span><span class="sh_symbol">,</span>
  exclusive<span class="sh_symbol">:</span> <span class="sh_keyword">true</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h3>socket.close([callback])<span><a class="mark" href="#dgram_socket_close_callback" id="dgram_socket_close_callback">#</a></span></h3>
<p>Close the underlying socket and stop listening for data on it. If a callback is
provided, it is added as a listener for the <a href="#net_event_close"><code>'close'</code></a> event.</p>
<h3>socket.dropMembership(multicastAddress[, multicastInterface])<span><a class="mark" href="#dgram_socket_dropmembership_multicastaddress_multicastinterface" id="dgram_socket_dropmembership_multicastaddress_multicastinterface">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.6.9</span>
</div><ul>
<li><code>multicastAddress</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
<li><code>multicastInterface</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a>, Optional</li>
</ul>
<p>Instructs the kernel to leave a multicast group at <code>multicastAddress</code> using the
<code>IP_DROP_MEMBERSHIP</code> socket option. This method is automatically called by the
kernel when the socket is closed or the process terminates, so most apps will
never have reason to call this.</p>
<p>If <code>multicastInterface</code> is not specified, the operating system will attempt to
drop membership on all valid interfaces.</p>
<h3>socket.send(msg, [offset, length,] port, address[, callback])<span><a class="mark" href="#dgram_socket_send_msg_offset_length_port_address_callback" id="dgram_socket_send_msg_offset_length_port_address_callback">#</a></span></h3>
<div class="signature"><ul>
<li><code>msg</code> <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" class="type">&lt;Array&gt;</a> Message to be sent</li>
<li><code>offset</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Integer. Optional. Offset in the buffer where the message starts.</li>
<li><code>length</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Integer. Optional. Number of bytes in the message.</li>
<li><code>port</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Integer. Destination port.</li>
<li><code>address</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> Destination hostname or IP address.</li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> Called when the message has been sent. Optional.</li>
</ul>
</div><p>Broadcasts a datagram on the socket. The destination <code>port</code> and <code>address</code> must
be specified.</p>
<p>The <code>msg</code> argument contains the message to be sent.
Depending on its type, different behavior can apply. If <code>msg</code> is a <code>Buffer</code>,
the <code>offset</code> and <code>length</code> specify the offset within the <code>Buffer</code> where the
message begins and the number of bytes in the message, respectively.
If <code>msg</code> is a <code>String</code>, then it is automatically converted to a <code>Buffer</code>
with <code>'utf8'</code> encoding. With messages that
contain  multi-byte characters, <code>offset</code> and <code>length</code> will be calculated with
respect to <a href="https://nodejs.org/api/buffer.html#buffer_class_method_buffer_bytelength_string_encoding">byte length</a> and not the character position.
If <code>msg</code> is an array, <code>offset</code> and <code>length</code> must not be specified.</p>
<p>The <code>address</code> argument is a string. If the value of <code>address</code> is a host name,
DNS will be used to resolve the address of the host. If the <code>address</code> is not
specified or is an empty string, <code>'127.0.0.1'</code> or <code>'::1'</code> will be used instead.</p>
<p>If the socket has not been previously bound with a call to <code>bind</code>, the socket
is assigned a random port number and is bound to the "all interfaces" address
(<code>'0.0.0.0'</code> for <code>udp4</code> sockets, <code>'::0'</code> for <code>udp6</code> sockets.)</p>
<p>An optional <code>callback</code> function  may be specified to as a way of reporting
DNS errors or for determining when it is safe to reuse the <code>buf</code> object.
Note that DNS lookups delay the time to send for at least one tick of the
Node.js event loop.</p>
<p>The only way to know for sure that the datagram has been sent is by using a
<code>callback</code>. If an error occurs and a <code>callback</code> is given, the error will be
passed as the first argument to the <code>callback</code>. If a <code>callback</code> is not given,
the error is emitted as an <code>'error'</code> event on the <code>socket</code> object.</p>
<p>Offset and length are optional, but if you specify one you would need to
specify the other. Also, they are supported only when the first
argument is a <code>Buffer</code>.</p>
<p>Example of sending a UDP packet to a random port on <code>localhost</code>;</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> dgram <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'dgram'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> message <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'Some bytes'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> client <span class="sh_symbol">=</span> dgram<span class="sh_symbol">.</span><span class="sh_function">createSocket</span><span class="sh_symbol">(</span><span class="sh_string">'udp4'</span><span class="sh_symbol">);</span>
client<span class="sh_symbol">.</span><span class="sh_function">send</span><span class="sh_symbol">(</span>message<span class="sh_symbol">,</span> <span class="sh_number">41234</span><span class="sh_symbol">,</span> <span class="sh_string">'localhost'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  client<span class="sh_symbol">.</span><span class="sh_function">close</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>Example of sending a UDP packet composed of multiple buffers to a random port on <code>localhost</code>;</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> dgram <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'dgram'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> buf1 <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'Some '</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> buf2 <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'bytes'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> client <span class="sh_symbol">=</span> dgram<span class="sh_symbol">.</span><span class="sh_function">createSocket</span><span class="sh_symbol">(</span><span class="sh_string">'udp4'</span><span class="sh_symbol">);</span>
client<span class="sh_symbol">.</span><span class="sh_function">send</span><span class="sh_symbol">([</span>buf1<span class="sh_symbol">,</span> buf2<span class="sh_symbol">],</span> <span class="sh_number">41234</span><span class="sh_symbol">,</span> <span class="sh_string">'localhost'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  client<span class="sh_symbol">.</span><span class="sh_function">close</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>Sending multiple buffers might be faster or slower depending on your
application and operating system: benchmark it. Usually it is faster.</p>
<p><strong>A Note about UDP datagram size</strong></p>
<p>The maximum size of an <code>IPv4/v6</code> datagram depends on the <code>MTU</code>
(<em>Maximum Transmission Unit</em>) and on the <code>Payload Length</code> field size.</p>
<ul>
<li><p>The <code>Payload Length</code> field is <code>16 bits</code> wide, which means that a normal
payload exceed 64K octets <em>including</em> the internet header and data
(65,507 bytes = 65,535 − 8 bytes UDP header − 20 bytes IP header);
this is generally true for loopback interfaces, but such long datagram
messages are impractical for most hosts and networks.</p>
</li>
<li><p>The <code>MTU</code> is the largest size a given link layer technology can support for
datagram messages. For any link, <code>IPv4</code> mandates a minimum <code>MTU</code> of <code>68</code>
octets, while the recommended <code>MTU</code> for IPv4 is <code>576</code> (typically recommended
as the <code>MTU</code> for dial-up type applications), whether they arrive whole or in
fragments.</p>
<p>For <code>IPv6</code>, the minimum <code>MTU</code> is <code>1280</code> octets, however, the mandatory minimum
fragment reassembly buffer size is <code>1500</code> octets. The value of <code>68</code> octets is
very small, since most current link layer technologies, like Ethernet, have a
minimum <code>MTU</code> of <code>1500</code>.</p>
</li>
</ul>
<p>It is impossible to know in advance the MTU of each link through which
a packet might travel. Sending a datagram greater than the receiver <code>MTU</code> will
not work because the packet will get silently dropped without informing the
source that the data did not reach its intended recipient.</p>
<h3>socket.setBroadcast(flag)<span><a class="mark" href="#dgram_socket_setbroadcast_flag" id="dgram_socket_setbroadcast_flag">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.6.9</span>
</div><ul>
<li><code>flag</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a></li>
</ul>
<p>Sets or clears the <code>SO_BROADCAST</code> socket option.  When set to <code>true</code>, UDP
packets may be sent to a local interface's broadcast address.</p>
<h3>socket.setMulticastLoopback(flag)<span><a class="mark" href="#dgram_socket_setmulticastloopback_flag" id="dgram_socket_setmulticastloopback_flag">#</a></span></h3>
<div class="signature"><ul>
<li><code>flag</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a></li>
</ul>
</div><p>Sets or clears the <code>IP_MULTICAST_LOOP</code> socket option.  When set to <code>true</code>,
multicast packets will also be received on the local interface.</p>
<h3>socket.setMulticastTTL(ttl)<span><a class="mark" href="#dgram_socket_setmulticastttl_ttl" id="dgram_socket_setmulticastttl_ttl">#</a></span></h3>
<div class="signature"><ul>
<li><code>ttl</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Integer</li>
</ul>
</div><p>Sets the <code>IP_MULTICAST_TTL</code> socket option.  While TTL generally stands for
"Time to Live", in this context it specifies the number of IP hops that a
packet is allowed to travel through, specifically for multicast traffic.  Each
router or gateway that forwards a packet decrements the TTL. If the TTL is
decremented to 0 by a router, it will not be forwarded.</p>
<p>The argument passed to to <code>socket.setMulticastTTL()</code> is a number of hops
between 0 and 255. The default on most systems is <code>1</code> but can vary.</p>
<h3>socket.setTTL(ttl)<span><a class="mark" href="#dgram_socket_setttl_ttl" id="dgram_socket_setttl_ttl">#</a></span></h3>
<div class="signature"><ul>
<li><code>ttl</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Integer</li>
</ul>
</div><p>Sets the <code>IP_TTL</code> socket option. While TTL generally stands for "Time to Live",
in this context it specifies the number of IP hops that a packet is allowed to
travel through.  Each router or gateway that forwards a packet decrements the
TTL.  If the TTL is decremented to 0 by a router, it will not be forwarded.
Changing TTL values is typically done for network probes or when multicasting.</p>
<p>The argument to <code>socket.setTTL()</code> is a number of hops between 1 and 255.
The default on most systems is 64 but can vary.</p>
<h3>socket.ref()<span><a class="mark" href="#dgram_socket_ref" id="dgram_socket_ref">#</a></span></h3>
<p>By default, binding a socket will cause it to block the Node.js process from
exiting as long as the socket is open. The <code>socket.unref()</code> method can be used
to exclude the socket from the reference counting that keeps the Node.js
process active. The <code>socket.ref()</code> method adds the socket back to the reference
counting and restores the default behavior.</p>
<p>Calling <code>socket.ref()</code> multiples times will have no additional effect.</p>
<p>The <code>socket.ref()</code> method returns a reference to the socket so calls can be
chained.</p>
<h3>socket.unref()<span><a class="mark" href="#dgram_socket_unref" id="dgram_socket_unref">#</a></span></h3>
<p>By default, binding a socket will cause it to block the Node.js process from
exiting as long as the socket is open. The <code>socket.unref()</code> method can be used
to exclude the socket from the reference counting that keeps the Node.js
process active, allowing the process to exit even if the socket is still
listening.</p>
<p>Calling <code>socket.unref()</code> multiple times will have no addition effect.</p>
<p>The <code>socket.unref()</code> method returns a reference to the socket so calls can be
chained.</p>
<h3>Change to asynchronous <code>socket.bind()</code> behavior<span><a class="mark" href="#dgram_change_to_asynchronous_socket_bind_behavior" id="dgram_change_to_asynchronous_socket_bind_behavior">#</a></span></h3>
<p>As of Node.js v0.10, <a href="#dgram_socket_bind_options_callback"><code>dgram.Socket#bind()</code></a> changed to an asynchronous
execution model. Legacy code that assumes synchronous behavior, as in the
following example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> s <span class="sh_symbol">=</span> dgram<span class="sh_symbol">.</span><span class="sh_function">createSocket</span><span class="sh_symbol">(</span><span class="sh_string">'udp4'</span><span class="sh_symbol">);</span>
s<span class="sh_symbol">.</span><span class="sh_function">bind</span><span class="sh_symbol">(</span><span class="sh_number">1234</span><span class="sh_symbol">);</span>
s<span class="sh_symbol">.</span><span class="sh_function">addMembership</span><span class="sh_symbol">(</span><span class="sh_string">'224.0.0.114'</span><span class="sh_symbol">);</span>
</code></pre>
<p>Must be changed to pass a callback function to the <a href="#dgram_socket_bind_options_callback"><code>dgram.Socket#bind()</code></a>
function:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> s <span class="sh_symbol">=</span> dgram<span class="sh_symbol">.</span><span class="sh_function">createSocket</span><span class="sh_symbol">(</span><span class="sh_string">'udp4'</span><span class="sh_symbol">);</span>
s<span class="sh_symbol">.</span><span class="sh_function">bind</span><span class="sh_symbol">(</span><span class="sh_number">1234</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  s<span class="sh_symbol">.</span><span class="sh_function">addMembership</span><span class="sh_symbol">(</span><span class="sh_string">'224.0.0.114'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h2><code>dgram</code> module functions<span><a class="mark" href="#dgram_dgram_module_functions" id="dgram_dgram_module_functions">#</a></span></h2>
<h3>dgram.createSocket(options[, callback])<span><a class="mark" href="#dgram_dgram_createsocket_options_callback" id="dgram_dgram_createsocket_options_callback">#</a></span></h3>
<div class="signature"><ul>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> Attached as a listener to <code>'message'</code> events.</li>
<li>Returns: <a href="https://nodejs.org/api/dgram.html#dgram_class_dgram_socket" class="type">&lt;dgram.Socket&gt;</a></li>
</ul>
</div><p>Creates a <code>dgram.Socket</code> object. The <code>options</code> argument is an object that
should contain a <code>type</code> field of either <code>udp4</code> or <code>udp6</code> and an optional
boolean <code>reuseAddr</code> field.</p>
<p>When <code>reuseAddr</code> is <code>true</code> <a href="#dgram_socket_bind_port_address_callback"><code>socket.bind()</code></a> will reuse the address, even if
another process has already bound a socket on it. <code>reuseAddr</code> defaults to
<code>false</code>. An optional <code>callback</code> function can be passed specified which is added
as a listener for <code>'message'</code> events.</p>
<p>Once the socket is created, calling <a href="#dgram_socket_bind_port_address_callback"><code>socket.bind()</code></a> will instruct the
socket to begin listening for datagram messages. When <code>address</code> and <code>port</code> are
not passed to  <a href="#dgram_socket_bind_port_address_callback"><code>socket.bind()</code></a> the method will bind the socket to the "all
interfaces" address on a random port (it does the right thing for both <code>udp4</code>
and <code>udp6</code> sockets). The bound address and port can be retrieved using
<a href="#dgram_socket_address"><code>socket.address().address</code></a> and <a href="#dgram_socket_address"><code>socket.address().port</code></a>.</p>
<h3>dgram.createSocket(type[, callback])<span><a class="mark" href="#dgram_dgram_createsocket_type_callback" id="dgram_dgram_createsocket_type_callback">#</a></span></h3>
<div class="signature"><ul>
<li><code>type</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> - Either 'udp4' or 'udp6'</li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> - Attached as a listener to <code>'message'</code> events.
Optional</li>
<li>Returns: <a href="https://nodejs.org/api/dgram.html#dgram_class_dgram_socket" class="type">&lt;dgram.Socket&gt;</a></li>
</ul>
</div><p>Creates a <code>dgram.Socket</code> object of the specified <code>type</code>. The <code>type</code> argument
can be either <code>udp4</code> or <code>udp6</code>. An optional <code>callback</code> function can be passed
which is added as a listener for <code>'message'</code> events.</p>
<p>Once the socket is created, calling <a href="#dgram_socket_bind_port_address_callback"><code>socket.bind()</code></a> will instruct the
socket to begin listening for datagram messages. When <code>address</code> and <code>port</code> are
not passed to  <a href="#dgram_socket_bind_port_address_callback"><code>socket.bind()</code></a> the method will bind the socket to the "all
interfaces" address on a random port (it does the right thing for both <code>udp4</code>
and <code>udp6</code> sockets). The bound address and port can be retrieved using
<a href="#dgram_socket_address"><code>socket.address().address</code></a> and <a href="#dgram_socket_address"><code>socket.address().port</code></a>.</p>
<!-- [end-include:dgram.md] -->
<!-- [start-include:dns.md] -->
<h1>DNS<span><a class="mark" href="#dns_dns" id="dns_dns">#</a></span></h1>
<pre class="api_stability api_stability_2 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> Stable</pre><p>The <code>dns</code> module contains functions belonging to two different categories:</p>
<p>1) Functions that use the underlying operating system facilities to perform
name resolution, and that do not necessarily perform any network communication.
This category contains only one function: <a href="https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback"><code>dns.lookup()</code></a>. <strong>Developers
looking to perform name resolution in the same way that other applications on
the same operating system behave should use <a href="https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback"><code>dns.lookup()</code></a>.</strong></p>
<p>For example, looking up <code>nodejs.org</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> dns <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'dns'</span><span class="sh_symbol">);</span>

dns<span class="sh_symbol">.</span><span class="sh_function">lookup</span><span class="sh_symbol">(</span><span class="sh_string">'nodejs.org'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">,</span> addresses<span class="sh_symbol">,</span> family<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'addresses:'</span><span class="sh_symbol">,</span> addresses<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>2) Functions that connect to an actual DNS server to perform name resolution,
and that <em>always</em> use the network to perform DNS queries. This category
contains all functions in the <code>dns</code> module <em>except</em> <a href="https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback"><code>dns.lookup()</code></a>. These
functions do not use the same set of configuration files used by
<a href="https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback"><code>dns.lookup()</code></a> (e.g. <code>/etc/hosts</code>). These functions should be used by
developers who do not want to use the underlying operating system's facilities
for name resolution, and instead want to <em>always</em> perform DNS queries.</p>
<p>Below is an example that resolves <code>'nodejs.org'</code> then reverse resolves the IP
addresses that are returned.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> dns <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'dns'</span><span class="sh_symbol">);</span>

dns<span class="sh_symbol">.</span><span class="sh_function">resolve4</span><span class="sh_symbol">(</span><span class="sh_string">'nodejs.org'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">,</span> addresses<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_keyword">throw</span> err<span class="sh_symbol">;</span>

  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`addresses<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>JSON<span class="sh_symbol">.</span><span class="sh_function">stringify</span><span class="sh_symbol">(</span>addresses<span class="sh_symbol">)</span><span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>

  addresses<span class="sh_symbol">.</span><span class="sh_function">forEach</span><span class="sh_symbol">((</span>a<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    dns<span class="sh_symbol">.</span><span class="sh_function">reverse</span><span class="sh_symbol">(</span>a<span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">,</span> hostnames<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
      <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
        <span class="sh_keyword">throw</span> err<span class="sh_symbol">;</span>
      <span class="sh_cbracket">}</span>
      console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`reverse <span class="sh_keyword">for</span> $<span class="sh_cbracket">{</span>a<span class="sh_cbracket">}</span><span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>JSON<span class="sh_symbol">.</span><span class="sh_function">stringify</span><span class="sh_symbol">(</span>hostnames<span class="sh_symbol">)</span><span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>There are subtle consequences in choosing one over the other, please consult
the <a href="#dns_implementation_considerations">Implementation considerations section</a> for more information.</p>
<h2>dns.getServers()<span><a class="mark" href="#dns_dns_getservers" id="dns_dns_getservers">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.11.3</span>
</div><p>Returns an array of IP address strings that are being used for name
resolution.</p>
<h2>dns.lookup(hostname[, options], callback)<span><a class="mark" href="#dns_dns_lookup_hostname_options_callback" id="dns_dns_lookup_hostname_options_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><p>Resolves a hostname (e.g. <code>'nodejs.org'</code>) into the first found A (IPv4) or
AAAA (IPv6) record. <code>options</code> can be an object or integer. If <code>options</code> is
not provided, then IPv4 and IPv6 addresses are both valid. If <code>options</code> is
an integer, then it must be <code>4</code> or <code>6</code>.</p>
<p>Alternatively, <code>options</code> can be an object containing these properties:</p>
<ul>
<li><code>family</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> - The record family. If present, must be the integer
<code>4</code> or <code>6</code>. If not provided, both IP v4 and v6 addresses are accepted.</li>
<li><code>hints</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> - If present, it should be one or more of the supported
<code>getaddrinfo</code> flags. If <code>hints</code> is not provided, then no flags are passed to
<code>getaddrinfo</code>. Multiple flags can be passed through <code>hints</code> by logically
<code>OR</code>ing their values.
See <a href="#dns_supported_getaddrinfo_flags">supported <code>getaddrinfo</code> flags</a> for more information on supported
flags.</li>
<li><code>all</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> - When <code>true</code>, the callback returns all resolved addresses
in an array, otherwise returns a single address. Defaults to <code>false</code>.</li>
</ul>
<p>All properties are optional. An example usage of options is shown below.</p>
<pre class="sh_sourceCode"><code><span class="sh_cbracket">{</span>
  family<span class="sh_symbol">:</span> <span class="sh_number">4</span><span class="sh_symbol">,</span>
  hints<span class="sh_symbol">:</span> dns<span class="sh_symbol">.</span>ADDRCONFIG <span class="sh_symbol">|</span> dns<span class="sh_symbol">.</span>V4MAPPED<span class="sh_symbol">,</span>
  all<span class="sh_symbol">:</span> <span class="sh_keyword">false</span>
<span class="sh_cbracket">}</span>
</code></pre><p>The <code>callback</code> function has arguments <code>(err, address, family)</code>. <code>address</code> is a
string representation of an IPv4 or IPv6 address. <code>family</code> is either the
integer <code>4</code> or <code>6</code> and denotes the family of <code>address</code> (not necessarily the
value initially passed to <code>lookup</code>).</p>
<p>With the <code>all</code> option set to <code>true</code>, the arguments change to
<code>(err, addresses)</code>, with <code>addresses</code> being an array of objects with the
properties <code>address</code> and <code>family</code>.</p>
<p>On error, <code>err</code> is an <a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a> object, where <code>err.code</code> is the error code.
Keep in mind that <code>err.code</code> will be set to <code>'ENOENT'</code> not only when
the hostname does not exist but also when the lookup fails in other ways
such as no available file descriptors.</p>
<p><code>dns.lookup()</code> does not necessarily have anything to do with the DNS protocol.
The implementation uses an operating system facility that can associate names
with addresses, and vice versa. This implementation can have subtle but
important consequences on the behavior of any Node.js program. Please take some
time to consult the <a href="#dns_implementation_considerations">Implementation considerations section</a> before using
<code>dns.lookup()</code>.</p>
<h3>Supported getaddrinfo flags<span><a class="mark" href="#dns_supported_getaddrinfo_flags" id="dns_supported_getaddrinfo_flags">#</a></span></h3>
<p>The following flags can be passed as hints to <a href="https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback"><code>dns.lookup()</code></a>.</p>
<ul>
<li><code>dns.ADDRCONFIG</code>: Returned address types are determined by the types
of addresses supported by the current system. For example, IPv4 addresses
are only returned if the current system has at least one IPv4 address
configured. Loopback addresses are not considered.</li>
<li><code>dns.V4MAPPED</code>: If the IPv6 family was specified, but no IPv6 addresses were
found, then return IPv4 mapped IPv6 addresses. Note that it is not supported
on some operating systems (e.g FreeBSD 10.1).</li>
</ul>
<h2>dns.lookupService(address, port, callback)<span><a class="mark" href="#dns_dns_lookupservice_address_port_callback" id="dns_dns_lookupservice_address_port_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.11.14</span>
</div><p>Resolves the given <code>address</code> and <code>port</code> into a hostname and service using
the operating system's underlying <code>getnameinfo</code> implementation.</p>
<p>If <code>address</code> is not a valid IP address, a <code>TypeError</code> will be thrown.
The <code>port</code> will be coerced to a number. If it is not a legal port, a <code>TypeError</code>
will be thrown.</p>
<p>The callback has arguments <code>(err, hostname, service)</code>. The <code>hostname</code> and
<code>service</code> arguments are strings (e.g. <code>'localhost'</code> and <code>'http'</code> respectively).</p>
<p>On error, <code>err</code> is an <a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a> object, where <code>err.code</code> is the error code.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> dns <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'dns'</span><span class="sh_symbol">);</span>
dns<span class="sh_symbol">.</span><span class="sh_function">lookupService</span><span class="sh_symbol">(</span><span class="sh_string">'127.0.0.1'</span><span class="sh_symbol">,</span> <span class="sh_number">22</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">,</span> hostname<span class="sh_symbol">,</span> service<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>hostname<span class="sh_symbol">,</span> service<span class="sh_symbol">);</span>
    <span class="sh_comment">// Prints: localhost ssh</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h2>dns.resolve(hostname[, rrtype], callback)<span><a class="mark" href="#dns_dns_resolve_hostname_rrtype_callback" id="dns_dns_resolve_hostname_rrtype_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.27</span>
</div><p>Uses the DNS protocol to resolve a hostname (e.g. <code>'nodejs.org'</code>) into an
array of the record types specified by <code>rrtype</code>.</p>
<p>Valid values for <code>rrtype</code> are:</p>
<ul>
<li><code>'A'</code> - IPV4 addresses, default</li>
<li><code>'AAAA'</code> - IPV6 addresses</li>
<li><code>'MX'</code> - mail exchange records</li>
<li><code>'TXT'</code> - text records</li>
<li><code>'SRV'</code> - SRV records</li>
<li><code>'PTR'</code> - PTR records</li>
<li><code>'NS'</code> - name server records</li>
<li><code>'CNAME'</code> - canonical name records</li>
<li><code>'SOA'</code> - start of authority record</li>
<li><code>'NAPTR'</code> - name authority pointer record</li>
</ul>
<p>The <code>callback</code> function has arguments <code>(err, addresses)</code>. When successful,
<code>addresses</code> will be an array. The type of each  item in <code>addresses</code> is
determined by the record type, and described in the documentation for the
corresponding lookup methods.</p>
<p>On error, <code>err</code> is an <a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a> object, where <code>err.code</code> is
one of the error codes listed <a href="#dns_error_codes">here</a>.</p>
<h2>dns.resolve4(hostname, callback)<span><a class="mark" href="#dns_dns_resolve4_hostname_callback" id="dns_dns_resolve4_hostname_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.16</span>
</div><p>Uses the DNS protocol to resolve a IPv4 addresses (<code>A</code> records) for the
<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function
will contain an array of IPv4 addresses (e.g.
<code>['74.125.79.104', '74.125.79.105', '74.125.79.106']</code>).</p>
<h2>dns.resolve6(hostname, callback)<span><a class="mark" href="#dns_dns_resolve6_hostname_callback" id="dns_dns_resolve6_hostname_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.16</span>
</div><p>Uses the DNS protocol to resolve a IPv6 addresses (<code>AAAA</code> records) for the
<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function
will contain an array of IPv6 addresses.</p>
<h2>dns.resolveCname(hostname, callback)<span><a class="mark" href="#dns_dns_resolvecname_hostname_callback" id="dns_dns_resolvecname_hostname_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.3.2</span>
</div><p>Uses the DNS protocol to resolve <code>CNAME</code> records for the <code>hostname</code>. The
<code>addresses</code> argument passed to the <code>callback</code> function
will contain an array of canonical name records available for the <code>hostname</code>
(e.g. <code>['bar.example.com']</code>).</p>
<h2>dns.resolveMx(hostname, callback)<span><a class="mark" href="#dns_dns_resolvemx_hostname_callback" id="dns_dns_resolvemx_hostname_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.27</span>
</div><p>Uses the DNS protocol to resolve mail exchange records (<code>MX</code> records) for the
<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will
contain an array of objects containing both a <code>priority</code> and <code>exchange</code>
property (e.g. <code>[{priority: 10, exchange: 'mx.example.com'}, ...]</code>).</p>
<h2>dns.resolveNaptr(hostname, callback)<span><a class="mark" href="#dns_dns_resolvenaptr_hostname_callback" id="dns_dns_resolvenaptr_hostname_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.9.12</span>
</div><p>Uses the DNS protocol to resolve regular expression based records (<code>NAPTR</code>
records) for the <code>hostname</code>. The <code>callback</code> function has arguments
<code>(err, addresses)</code>.  The <code>addresses</code> argument passed to the <code>callback</code> function
will contain an array of objects with the following properties:</p>
<ul>
<li><code>flags</code></li>
<li><code>service</code></li>
<li><code>regexp</code></li>
<li><code>replacement</code></li>
<li><code>order</code></li>
<li><code>preference</code></li>
</ul>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_cbracket">{</span>
  flags<span class="sh_symbol">:</span> <span class="sh_string">'s'</span><span class="sh_symbol">,</span>
  service<span class="sh_symbol">:</span> <span class="sh_string">'SIP+D2U'</span><span class="sh_symbol">,</span>
  regexp<span class="sh_symbol">:</span> <span class="sh_string">''</span><span class="sh_symbol">,</span>
  replacement<span class="sh_symbol">:</span> <span class="sh_string">'_sip._udp.example.com'</span><span class="sh_symbol">,</span>
  order<span class="sh_symbol">:</span> <span class="sh_number">30</span><span class="sh_symbol">,</span>
  preference<span class="sh_symbol">:</span> <span class="sh_number">100</span>
<span class="sh_cbracket">}</span>
</code></pre>
<h2>dns.resolveNs(hostname, callback)<span><a class="mark" href="#dns_dns_resolvens_hostname_callback" id="dns_dns_resolvens_hostname_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><p>Uses the DNS protocol to resolve name server records (<code>NS</code> records) for the
<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will
contain an array of name server records available for <code>hostname</code>
(e.g., <code>['ns1.example.com', 'ns2.example.com']</code>).</p>
<h2>dns.resolveSoa(hostname, callback)<span><a class="mark" href="#dns_dns_resolvesoa_hostname_callback" id="dns_dns_resolvesoa_hostname_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.11.10</span>
</div><p>Uses the DNS protocol to resolve a start of authority record (<code>SOA</code> record) for
the <code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will
be an object with the following properties:</p>
<ul>
<li><code>nsname</code></li>
<li><code>hostmaster</code></li>
<li><code>serial</code></li>
<li><code>refresh</code></li>
<li><code>retry</code></li>
<li><code>expire</code></li>
<li><code>minttl</code></li>
</ul>
<pre class="sh_sourceCode"><code><span class="sh_cbracket">{</span>
  nsname<span class="sh_symbol">:</span> <span class="sh_string">'ns.example.com'</span><span class="sh_symbol">,</span>
  hostmaster<span class="sh_symbol">:</span> <span class="sh_string">'root.example.com'</span><span class="sh_symbol">,</span>
  serial<span class="sh_symbol">:</span> <span class="sh_number">2013101809</span><span class="sh_symbol">,</span>
  refresh<span class="sh_symbol">:</span> <span class="sh_number">10000</span><span class="sh_symbol">,</span>
  retry<span class="sh_symbol">:</span> <span class="sh_number">2400</span><span class="sh_symbol">,</span>
  expire<span class="sh_symbol">:</span> <span class="sh_number">604800</span><span class="sh_symbol">,</span>
  minttl<span class="sh_symbol">:</span> <span class="sh_number">3600</span>
<span class="sh_cbracket">}</span>
</code></pre><h2>dns.resolveSrv(hostname, callback)<span><a class="mark" href="#dns_dns_resolvesrv_hostname_callback" id="dns_dns_resolvesrv_hostname_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.27</span>
</div><p>Uses the DNS protocol to resolve service records (<code>SRV</code> records) for the
<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will
be an array of objects with the following properties:</p>
<ul>
<li><code>priority</code></li>
<li><code>weight</code></li>
<li><code>port</code></li>
<li><code>name</code></li>
</ul>
<pre class="sh_sourceCode"><code><span class="sh_cbracket">{</span>
  priority<span class="sh_symbol">:</span> <span class="sh_number">10</span><span class="sh_symbol">,</span>
  weight<span class="sh_symbol">:</span> <span class="sh_number">5</span><span class="sh_symbol">,</span>
  port<span class="sh_symbol">:</span> <span class="sh_number">21223</span><span class="sh_symbol">,</span>
  name<span class="sh_symbol">:</span> <span class="sh_string">'service.example.com'</span>
<span class="sh_cbracket">}</span>
</code></pre><h2>dns.resolvePtr(hostname, callback)<span><a class="mark" href="#dns_dns_resolveptr_hostname_callback" id="dns_dns_resolveptr_hostname_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v6.0.0</span>
</div><p>Uses the DNS protocol to resolve pointer records (<code>PTR</code> records) for the
<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will
be an array of strings containing the reply records.</p>
<h2>dns.resolveTxt(hostname, callback)<span><a class="mark" href="#dns_dns_resolvetxt_hostname_callback" id="dns_dns_resolvetxt_hostname_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.27</span>
</div><p>Uses the DNS protocol to resolve text queries (<code>TXT</code> records) for the
<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function is
is a two-dimentional array of the text records available for <code>hostname</code> (e.g.,
<code>[ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]</code>). Each sub-array contains TXT chunks of
one record. Depending on the use case, these could be either joined together or
treated separately.</p>
<h2>dns.reverse(ip, callback)<span><a class="mark" href="#dns_dns_reverse_ip_callback" id="dns_dns_reverse_ip_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.16</span>
</div><p>Performs a reverse DNS query that resolves an IPv4 or IPv6 address to an
array of hostnames.</p>
<p>The <code>callback</code> function has arguments <code>(err, hostnames)</code>, where <code>hostnames</code>
is an array of resolved hostnames for the given <code>ip</code>.</p>
<p>On error, <code>err</code> is an <a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a> object, where <code>err.code</code> is
one of the <a href="#dns_error_codes">DNS error codes</a>.</p>
<h2>dns.setServers(servers)<span><a class="mark" href="#dns_dns_setservers_servers" id="dns_dns_setservers_servers">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.11.3</span>
</div><p>Sets the IP addresses of the servers to be used when resolving. The <code>servers</code>
argument is an array of IPv4 or IPv6 addresses.</p>
<p>If a port specified on the address it will be removed.</p>
<p>An error will be thrown if an invalid address is provided.</p>
<p>The <code>dns.setServers()</code> method must not be called while a DNS query is in
progress.</p>
<h2>Error codes<span><a class="mark" href="#dns_error_codes" id="dns_error_codes">#</a></span></h2>
<p>Each DNS query can return one of the following error codes:</p>
<ul>
<li><code>dns.NODATA</code>: DNS server returned answer with no data.</li>
<li><code>dns.FORMERR</code>: DNS server claims query was misformatted.</li>
<li><code>dns.SERVFAIL</code>: DNS server returned general failure.</li>
<li><code>dns.NOTFOUND</code>: Domain name not found.</li>
<li><code>dns.NOTIMP</code>: DNS server does not implement requested operation.</li>
<li><code>dns.REFUSED</code>: DNS server refused query.</li>
<li><code>dns.BADQUERY</code>: Misformatted DNS query.</li>
<li><code>dns.BADNAME</code>: Misformatted hostname.</li>
<li><code>dns.BADFAMILY</code>: Unsupported address family.</li>
<li><code>dns.BADRESP</code>: Misformatted DNS reply.</li>
<li><code>dns.CONNREFUSED</code>: Could not contact DNS servers.</li>
<li><code>dns.TIMEOUT</code>: Timeout while contacting DNS servers.</li>
<li><code>dns.EOF</code>: End of file.</li>
<li><code>dns.FILE</code>: Error reading file.</li>
<li><code>dns.NOMEM</code>: Out of memory.</li>
<li><code>dns.DESTRUCTION</code>: Channel is being destroyed.</li>
<li><code>dns.BADSTR</code>: Misformatted string.</li>
<li><code>dns.BADFLAGS</code>: Illegal flags specified.</li>
<li><code>dns.NONAME</code>: Given hostname is not numeric.</li>
<li><code>dns.BADHINTS</code>: Illegal hints flags specified.</li>
<li><code>dns.NOTINITIALIZED</code>: c-ares library initialization not yet performed.</li>
<li><code>dns.LOADIPHLPAPI</code>: Error loading iphlpapi.dll.</li>
<li><code>dns.ADDRGETNETWORKPARAMS</code>: Could not find GetNetworkParams function.</li>
<li><code>dns.CANCELLED</code>: DNS query cancelled.</li>
</ul>
<h2>Implementation considerations<span><a class="mark" href="#dns_implementation_considerations" id="dns_implementation_considerations">#</a></span></h2>
<p>Although <a href="https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback"><code>dns.lookup()</code></a> and the various <code>dns.resolve*()/dns.reverse()</code>
functions have the same goal of associating a network name with a network
address (or vice versa), their behavior is quite different. These differences
can have subtle but significant consequences on the behavior of Node.js
programs.</p>
<h3><code>dns.lookup()</code><span><a class="mark" href="#dns_dns_lookup" id="dns_dns_lookup">#</a></span></h3>
<p>Under the hood, <a href="https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback"><code>dns.lookup()</code></a> uses the same operating system facilities
as most other programs. For instance, <a href="https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback"><code>dns.lookup()</code></a> will almost always
resolve a given name the same way as the <code>ping</code> command. On most POSIX-like
operating systems, the behavior of the <a href="https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback"><code>dns.lookup()</code></a> function can be
modified by changing settings in <code>nsswitch.conf(5)</code> and/or <code>resolv.conf(5)</code>,
but note that changing these files will change the behavior of <em>all other
programs running on the same operating system</em>.</p>
<p>Though the call to <code>dns.lookup()</code> will be asynchronous from JavaScript's
perspective, it is implemented as a synchronous call to <code>getaddrinfo(3)</code> that
runs on libuv's threadpool. Because libuv's threadpool has a fixed size, it
means that if for whatever reason the call to <code>getaddrinfo(3)</code> takes a long
time, other operations that could run on libuv's threadpool (such as filesystem
operations) will experience degraded performance. In order to mitigate this
issue, one potential solution is to increase the size of libuv's threadpool by
setting the <code>'UV_THREADPOOL_SIZE'</code> environment variable to a value greater than
<code>4</code> (its current default value). For more information on libuv's threadpool, see
<a href="http://docs.libuv.org/en/latest/threadpool.html">the official libuv documentation</a>.</p>
<h3><code>dns.resolve()</code>, <code>dns.resolve*()</code> and <code>dns.reverse()</code><span><a class="mark" href="#dns_dns_resolve_dns_resolve_and_dns_reverse" id="dns_dns_resolve_dns_resolve_and_dns_reverse">#</a></span></h3>
<p>These functions are implemented quite differently than <a href="https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback"><code>dns.lookup()</code></a>. They
do not use <code>getaddrinfo(3)</code> and they <em>always</em> perform a DNS query on the
network. This network communication is always done asynchronously, and does not
use libuv's threadpool.</p>
<p>As a result, these functions cannot have the same negative impact on other
processing that happens on libuv's threadpool that <a href="https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback"><code>dns.lookup()</code></a> can have.</p>
<p>They do not use the same set of configuration files than what <a href="https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback"><code>dns.lookup()</code></a>
uses. For instance, <em>they do not use the configuration from <code>/etc/hosts</code></em>.</p>
<!-- [end-include:dns.md] -->
<!-- [start-include:domain.md] -->
<h1>Domain<span><a class="mark" href="#domain_domain" id="domain_domain">#</a></span></h1>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated</pre><p><strong>This module is pending deprecation</strong>. Once a replacement API has been
finalized, this module will be fully deprecated. Most end users should
<strong>not</strong> have cause to use this module. Users who absolutely must have
the functionality that domains provide may rely on it for the time being
but should expect to have to migrate to a different solution
in the future.</p>
<p>Domains provide a way to handle multiple different IO operations as a
single group.  If any of the event emitters or callbacks registered to a
domain emit an <code>'error'</code> event, or throw an error, then the domain object
will be notified, rather than losing the context of the error in the
<code>process.on('uncaughtException')</code> handler, or causing the program to
exit immediately with an error code.</p>
<h2>Warning: Don't Ignore Errors!<span><a class="mark" href="#domain_warning_don_t_ignore_errors" id="domain_warning_don_t_ignore_errors">#</a></span></h2>
<!-- type=misc -->
<p>Domain error handlers are not a substitute for closing down your
process when an error occurs.</p>
<p>By the very nature of how <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw"><code>throw</code></a> works in JavaScript, there is almost
never any way to safely "pick up where you left off", without leaking
references, or creating some other sort of undefined brittle state.</p>
<p>The safest way to respond to a thrown error is to shut down the
process.  Of course, in a normal web server, you might have many
connections open, and it is not reasonable to abruptly shut those down
because an error was triggered by someone else.</p>
<p>The better approach is to send an error response to the request that
triggered the error, while letting the others finish in their normal
time, and stop listening for new requests in that worker.</p>
<p>In this way, <code>domain</code> usage goes hand-in-hand with the cluster module,
since the master process can fork a new worker when a worker
encounters an error.  For Node.js programs that scale to multiple
machines, the terminating proxy or service registry can take note of
the failure, and react accordingly.</p>
<p>For example, this is not a good idea:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// XXX WARNING!  BAD IDEA!</span>

<span class="sh_keyword">var</span> d <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'domain'</span><span class="sh_symbol">).</span><span class="sh_function">create</span><span class="sh_symbol">();</span>
d<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>er<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// The error won't crash the process, but what it does is worse!</span>
  <span class="sh_comment">// Though we've prevented abrupt process restarting, we are leaking</span>
  <span class="sh_comment">// resources like crazy if this ever happens.</span>
  <span class="sh_comment">// This is no better than process.on('uncaughtException')!</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'error, but oh well'</span><span class="sh_symbol">,</span> er<span class="sh_symbol">.</span>message<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
d<span class="sh_symbol">.</span><span class="sh_function">run</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'http'</span><span class="sh_symbol">).</span><span class="sh_function">createServer</span><span class="sh_symbol">((</span>req<span class="sh_symbol">,</span> res<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    <span class="sh_function">handleRequest</span><span class="sh_symbol">(</span>req<span class="sh_symbol">,</span> res<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">listen</span><span class="sh_symbol">(</span>PORT<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>By using the context of a domain, and the resilience of separating our
program into multiple worker processes, we can react more
appropriately, and handle errors with much greater safety.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// Much better!</span>

<span class="sh_keyword">const</span> cluster <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'cluster'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> PORT <span class="sh_symbol">=</span> <span class="sh_symbol">+</span>process<span class="sh_symbol">.</span>env<span class="sh_symbol">.</span>PORT <span class="sh_symbol">||</span> <span class="sh_number">1337</span><span class="sh_symbol">;</span>

<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>cluster<span class="sh_symbol">.</span>isMaster<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// In real life, you'd probably use more than just 2 workers,</span>
  <span class="sh_comment">// and perhaps not put the master and worker in the same file.</span>
  <span class="sh_comment">//</span>
  <span class="sh_comment">// You can also of course get a bit fancier about logging, and</span>
  <span class="sh_comment">// implement whatever custom logic you need to prevent DoS</span>
  <span class="sh_comment">// attacks and other bad behavior.</span>
  <span class="sh_comment">//</span>
  <span class="sh_comment">// See the options in the cluster documentation.</span>
  <span class="sh_comment">//</span>
  <span class="sh_comment">// The important thing is that the master does very little,</span>
  <span class="sh_comment">// increasing our resilience to unexpected errors.</span>

  cluster<span class="sh_symbol">.</span><span class="sh_function">fork</span><span class="sh_symbol">();</span>
  cluster<span class="sh_symbol">.</span><span class="sh_function">fork</span><span class="sh_symbol">();</span>

  cluster<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'disconnect'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>worker<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span><span class="sh_string">'disconnect!'</span><span class="sh_symbol">);</span>
    cluster<span class="sh_symbol">.</span><span class="sh_function">fork</span><span class="sh_symbol">();</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// the worker</span>
  <span class="sh_comment">//</span>
  <span class="sh_comment">// This is where we put our bugs!</span>

  <span class="sh_keyword">const</span> domain <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'domain'</span><span class="sh_symbol">);</span>

  <span class="sh_comment">// See the cluster documentation for more details about using</span>
  <span class="sh_comment">// worker processes to serve requests.  How it works, caveats, etc.</span>

  <span class="sh_keyword">const</span> server <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'http'</span><span class="sh_symbol">).</span><span class="sh_function">createServer</span><span class="sh_symbol">((</span>req<span class="sh_symbol">,</span> res<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">var</span> d <span class="sh_symbol">=</span> domain<span class="sh_symbol">.</span><span class="sh_function">create</span><span class="sh_symbol">();</span>
    d<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>er<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
      console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> er<span class="sh_symbol">.</span>stack<span class="sh_symbol">);</span>

      <span class="sh_comment">// Note: we're in dangerous territory!</span>
      <span class="sh_comment">// By definition, something unexpected occurred,</span>
      <span class="sh_comment">// which we probably didn't want.</span>
      <span class="sh_comment">// Anything can happen now!  Be very careful!</span>

      <span class="sh_keyword">try</span> <span class="sh_cbracket">{</span>
        <span class="sh_comment">// make sure we close down within 30 seconds</span>
        <span class="sh_keyword">var</span> killtimer <span class="sh_symbol">=</span> <span class="sh_function">setTimeout</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
          process<span class="sh_symbol">.</span><span class="sh_function">exit</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">);</span>
        <span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">30000</span><span class="sh_symbol">);</span>
        <span class="sh_comment">// But don't keep the process open just for that!</span>
        killtimer<span class="sh_symbol">.</span><span class="sh_function">unref</span><span class="sh_symbol">();</span>

        <span class="sh_comment">// stop taking new requests.</span>
        server<span class="sh_symbol">.</span><span class="sh_function">close</span><span class="sh_symbol">();</span>

        <span class="sh_comment">// Let the master know we're dead.  This will trigger a</span>
        <span class="sh_comment">// 'disconnect' in the cluster master, and then it will fork</span>
        <span class="sh_comment">// a new worker.</span>
        cluster<span class="sh_symbol">.</span>worker<span class="sh_symbol">.</span><span class="sh_function">disconnect</span><span class="sh_symbol">();</span>

        <span class="sh_comment">// try to send an error to the request that triggered the problem</span>
        res<span class="sh_symbol">.</span>statusCode <span class="sh_symbol">=</span> <span class="sh_number">500</span><span class="sh_symbol">;</span>
        res<span class="sh_symbol">.</span><span class="sh_function">setHeader</span><span class="sh_symbol">(</span><span class="sh_string">'content-type'</span><span class="sh_symbol">,</span> <span class="sh_string">'text/plain'</span><span class="sh_symbol">);</span>
        res<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'Oops, there was a problem!</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
      <span class="sh_cbracket">}</span> <span class="sh_keyword">catch</span> <span class="sh_symbol">(</span>er2<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
        <span class="sh_comment">// oh well, not much we can do at this point.</span>
        console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span><span class="sh_string">'Error sending 500!'</span><span class="sh_symbol">,</span> er2<span class="sh_symbol">.</span>stack<span class="sh_symbol">);</span>
      <span class="sh_cbracket">}</span>
    <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

    <span class="sh_comment">// Because req and res were created before this domain existed,</span>
    <span class="sh_comment">// we need to explicitly add them.</span>
    <span class="sh_comment">// See the explanation of implicit vs explicit binding below.</span>
    d<span class="sh_symbol">.</span><span class="sh_function">add</span><span class="sh_symbol">(</span>req<span class="sh_symbol">);</span>
    d<span class="sh_symbol">.</span><span class="sh_function">add</span><span class="sh_symbol">(</span>res<span class="sh_symbol">);</span>

    <span class="sh_comment">// Now run the handler function in the domain.</span>
    d<span class="sh_symbol">.</span><span class="sh_function">run</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
      <span class="sh_function">handleRequest</span><span class="sh_symbol">(</span>req<span class="sh_symbol">,</span> res<span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  server<span class="sh_symbol">.</span><span class="sh_function">listen</span><span class="sh_symbol">(</span>PORT<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

<span class="sh_comment">// This part isn't important.  Just an example routing thing.</span>
<span class="sh_comment">// You'd put your fancy application logic here.</span>
<span class="sh_keyword">function</span> <span class="sh_function">handleRequest</span><span class="sh_symbol">(</span>req<span class="sh_symbol">,</span> res<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">switch</span><span class="sh_symbol">(</span>req<span class="sh_symbol">.</span>url<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">case</span> <span class="sh_string">'/error'</span><span class="sh_symbol">:</span>
      <span class="sh_comment">// We do some async stuff, and then...</span>
      <span class="sh_function">setTimeout</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
        <span class="sh_comment">// Whoops!</span>
        flerb<span class="sh_symbol">.</span><span class="sh_function">bark</span><span class="sh_symbol">();</span>
      <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
      <span class="sh_keyword">break</span><span class="sh_symbol">;</span>
    <span class="sh_keyword">default</span><span class="sh_symbol">:</span>
      res<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'ok'</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>
</code></pre>
<h2>Additions to Error objects<span><a class="mark" href="#domain_additions_to_error_objects" id="domain_additions_to_error_objects">#</a></span></h2>
<!-- type=misc -->
<p>Any time an <code>Error</code> object is routed through a domain, a few extra fields
are added to it.</p>
<ul>
<li><code>error.domain</code> The domain that first handled the error.</li>
<li><code>error.domainEmitter</code> The event emitter that emitted an <code>'error'</code> event
with the error object.</li>
<li><code>error.domainBound</code> The callback function which was bound to the
domain, and passed an error as its first argument.</li>
<li><code>error.domainThrown</code> A boolean indicating whether the error was
thrown, emitted, or passed to a bound callback function.</li>
</ul>
<h2>Implicit Binding<span><a class="mark" href="#domain_implicit_binding" id="domain_implicit_binding">#</a></span></h2>
<!--type=misc-->
<p>If domains are in use, then all <strong>new</strong> EventEmitter objects (including
Stream objects, requests, responses, etc.) will be implicitly bound to
the active domain at the time of their creation.</p>
<p>Additionally, callbacks passed to lowlevel event loop requests (such as
to fs.open, or other callback-taking methods) will automatically be
bound to the active domain.  If they throw, then the domain will catch
the error.</p>
<p>In order to prevent excessive memory usage, Domain objects themselves
are not implicitly added as children of the active domain.  If they
were, then it would be too easy to prevent request and response objects
from being properly garbage collected.</p>
<p>If you <em>want</em> to nest Domain objects as children of a parent Domain,
then you must explicitly add them.</p>
<p>Implicit binding routes thrown errors and <code>'error'</code> events to the
Domain's <code>'error'</code> event, but does not register the EventEmitter on the
Domain, so <a href="#domain_domain_dispose"><code>domain.dispose()</code></a> will not shut down the EventEmitter.
Implicit binding only takes care of thrown errors and <code>'error'</code> events.</p>
<h2>Explicit Binding<span><a class="mark" href="#domain_explicit_binding" id="domain_explicit_binding">#</a></span></h2>
<!--type=misc-->
<p>Sometimes, the domain in use is not the one that ought to be used for a
specific event emitter.  Or, the event emitter could have been created
in the context of one domain, but ought to instead be bound to some
other domain.</p>
<p>For example, there could be one domain in use for an HTTP server, but
perhaps we would like to have a separate domain to use for each request.</p>
<p>That is possible via explicit binding.</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// create a top-level domain for the server</span>
<span class="sh_keyword">const</span> domain <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'domain'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> http <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'http'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> serverDomain <span class="sh_symbol">=</span> domain<span class="sh_symbol">.</span><span class="sh_function">create</span><span class="sh_symbol">();</span>

serverDomain<span class="sh_symbol">.</span><span class="sh_function">run</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// server is created in the scope of serverDomain</span>
  http<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">((</span>req<span class="sh_symbol">,</span> res<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// req and res are also created in the scope of serverDomain</span>
    <span class="sh_comment">// however, we'd prefer to have a separate domain for each request.</span>
    <span class="sh_comment">// create it first thing, and add req and res to it.</span>
    <span class="sh_keyword">var</span> reqd <span class="sh_symbol">=</span> domain<span class="sh_symbol">.</span><span class="sh_function">create</span><span class="sh_symbol">();</span>
    reqd<span class="sh_symbol">.</span><span class="sh_function">add</span><span class="sh_symbol">(</span>req<span class="sh_symbol">);</span>
    reqd<span class="sh_symbol">.</span><span class="sh_function">add</span><span class="sh_symbol">(</span>res<span class="sh_symbol">);</span>
    reqd<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>er<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
      console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span><span class="sh_string">'Error'</span><span class="sh_symbol">,</span> er<span class="sh_symbol">,</span> req<span class="sh_symbol">.</span>url<span class="sh_symbol">);</span>
      <span class="sh_keyword">try</span> <span class="sh_cbracket">{</span>
        res<span class="sh_symbol">.</span><span class="sh_function">writeHead</span><span class="sh_symbol">(</span><span class="sh_number">500</span><span class="sh_symbol">);</span>
        res<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'Error occurred, sorry.'</span><span class="sh_symbol">);</span>
      <span class="sh_cbracket">}</span> <span class="sh_keyword">catch</span> <span class="sh_symbol">(</span>er<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
        console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span><span class="sh_string">'Error sending 500'</span><span class="sh_symbol">,</span> er<span class="sh_symbol">,</span> req<span class="sh_symbol">.</span>url<span class="sh_symbol">);</span>
      <span class="sh_cbracket">}</span>
    <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">1337</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h2>domain.create()<span><a class="mark" href="#domain_domain_create" id="domain_domain_create">#</a></span></h2>
<div class="signature"><ul>
<li>return: <span class="type">&lt;Domain&gt;</span></li>
</ul>
</div><p>Returns a new Domain object.</p>
<h2>Class: Domain<span><a class="mark" href="#domain_class_domain" id="domain_class_domain">#</a></span></h2>
<p>The Domain class encapsulates the functionality of routing errors and
uncaught exceptions to the active Domain object.</p>
<p>Domain is a child class of <a href="https://nodejs.org/api/events.html#events_class_eventemitter"><code>EventEmitter</code></a>.  To handle the errors that it
catches, listen to its <code>'error'</code> event.</p>
<h3>domain.run(fn[, arg][, ...])<span><a class="mark" href="#domain_domain_run_fn_arg" id="domain_domain_run_fn_arg">#</a></span></h3>
<div class="signature"><ul>
<li><code>fn</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
</div><p>Run the supplied function in the context of the domain, implicitly
binding all event emitters, timers, and lowlevel requests that are
created in that context. Optionally, arguments can be passed to
the function.</p>
<p>This is the most basic way to use a domain.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> domain <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'domain'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> fs <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'fs'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> d <span class="sh_symbol">=</span> domain<span class="sh_symbol">.</span><span class="sh_function">create</span><span class="sh_symbol">();</span>
d<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>er<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span><span class="sh_string">'Caught error!'</span><span class="sh_symbol">,</span> er<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
d<span class="sh_symbol">.</span><span class="sh_function">run</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  process<span class="sh_symbol">.</span><span class="sh_function">nextTick</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    <span class="sh_function">setTimeout</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span> <span class="sh_comment">// simulating some various async stuff</span>
      fs<span class="sh_symbol">.</span><span class="sh_function">open</span><span class="sh_symbol">(</span><span class="sh_string">'non-existent file'</span><span class="sh_symbol">,</span> <span class="sh_string">'r'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>er<span class="sh_symbol">,</span> fd<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
        <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>er<span class="sh_symbol">)</span> <span class="sh_keyword">throw</span> er<span class="sh_symbol">;</span>
        <span class="sh_comment">// proceed...</span>
      <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">100</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>In this example, the <code>d.on('error')</code> handler will be triggered, rather
than crashing the program.</p>
<h3>domain.members<span><a class="mark" href="#domain_domain_members" id="domain_domain_members">#</a></span></h3>
<div class="signature"><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" class="type">&lt;Array&gt;</a></li>
</ul>
</div><p>An array of timers and event emitters that have been explicitly added
to the domain.</p>
<h3>domain.add(emitter)<span><a class="mark" href="#domain_domain_add_emitter" id="domain_domain_add_emitter">#</a></span></h3>
<div class="signature"><ul>
<li><code>emitter</code> <a href="https://nodejs.org/api/events.html#events_class_eventemitter" class="type">&lt;EventEmitter&gt;</a> | <a href="https://nodejs.org/api/timers.html#timers_timers" class="type">&lt;Timer&gt;</a> emitter or timer to be added to the domain</li>
</ul>
</div><p>Explicitly adds an emitter to the domain.  If any event handlers called by
the emitter throw an error, or if the emitter emits an <code>'error'</code> event, it
will be routed to the domain's <code>'error'</code> event, just like with implicit
binding.</p>
<p>This also works with timers that are returned from <a href="https://nodejs.org/api/timers.html#timers_setinterval_callback_delay_arg"><code>setInterval()</code></a> and
<a href="https://nodejs.org/api/timers.html#timers_settimeout_callback_delay_arg"><code>setTimeout()</code></a>.  If their callback function throws, it will be caught by
the domain 'error' handler.</p>
<p>If the Timer or EventEmitter was already bound to a domain, it is removed
from that one, and bound to this one instead.</p>
<h3>domain.remove(emitter)<span><a class="mark" href="#domain_domain_remove_emitter" id="domain_domain_remove_emitter">#</a></span></h3>
<div class="signature"><ul>
<li><code>emitter</code> <a href="https://nodejs.org/api/events.html#events_class_eventemitter" class="type">&lt;EventEmitter&gt;</a> | <a href="https://nodejs.org/api/timers.html#timers_timers" class="type">&lt;Timer&gt;</a> emitter or timer to be removed from the domain</li>
</ul>
</div><p>The opposite of <a href="#domain_domain_add_emitter"><code>domain.add(emitter)</code></a>.  Removes domain handling from the
specified emitter.</p>
<h3>domain.bind(callback)<span><a class="mark" href="#domain_domain_bind_callback" id="domain_domain_bind_callback">#</a></span></h3>
<div class="signature"><ul>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> The callback function</li>
<li>return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> The bound function</li>
</ul>
</div><p>The returned function will be a wrapper around the supplied callback
function.  When the returned function is called, any errors that are
thrown will be routed to the domain's <code>'error'</code> event.</p>
<h4>Example<span><a class="mark" href="#domain_example" id="domain_example">#</a></span></h4>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> d <span class="sh_symbol">=</span> domain<span class="sh_symbol">.</span><span class="sh_function">create</span><span class="sh_symbol">();</span>

<span class="sh_keyword">function</span> <span class="sh_function">readSomeFile</span><span class="sh_symbol">(</span>filename<span class="sh_symbol">,</span> cb<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  fs<span class="sh_symbol">.</span><span class="sh_function">readFile</span><span class="sh_symbol">(</span>filename<span class="sh_symbol">,</span> <span class="sh_string">'utf8'</span><span class="sh_symbol">,</span> d<span class="sh_symbol">.</span><span class="sh_function">bind</span><span class="sh_symbol">((</span>er<span class="sh_symbol">,</span> data<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// if this throws, it will also be passed to the domain</span>
    <span class="sh_keyword">return</span> <span class="sh_function">cb</span><span class="sh_symbol">(</span>er<span class="sh_symbol">,</span> data <span class="sh_symbol">?</span> JSON<span class="sh_symbol">.</span><span class="sh_function">parse</span><span class="sh_symbol">(</span>data<span class="sh_symbol">)</span> <span class="sh_symbol">:</span> <span class="sh_keyword">null</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">));</span>
<span class="sh_cbracket">}</span>

d<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>er<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// an error occurred somewhere.</span>
  <span class="sh_comment">// if we throw it now, it will crash the program</span>
  <span class="sh_comment">// with the normal line number and stack message.</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h3>domain.intercept(callback)<span><a class="mark" href="#domain_domain_intercept_callback" id="domain_domain_intercept_callback">#</a></span></h3>
<div class="signature"><ul>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> The callback function</li>
<li>return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> The intercepted function</li>
</ul>
</div><p>This method is almost identical to <a href="#domain_domain_bind_callback"><code>domain.bind(callback)</code></a>.  However, in
addition to catching thrown errors, it will also intercept <a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a>
objects sent as the first argument to the function.</p>
<p>In this way, the common <code>if (err) return callback(err);</code> pattern can be replaced
with a single error handler in a single place.</p>
<h4>Example<span><a class="mark" href="#domain_example_1" id="domain_example_1">#</a></span></h4>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> d <span class="sh_symbol">=</span> domain<span class="sh_symbol">.</span><span class="sh_function">create</span><span class="sh_symbol">();</span>

<span class="sh_keyword">function</span> <span class="sh_function">readSomeFile</span><span class="sh_symbol">(</span>filename<span class="sh_symbol">,</span> cb<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  fs<span class="sh_symbol">.</span><span class="sh_function">readFile</span><span class="sh_symbol">(</span>filename<span class="sh_symbol">,</span> <span class="sh_string">'utf8'</span><span class="sh_symbol">,</span> d<span class="sh_symbol">.</span><span class="sh_function">intercept</span><span class="sh_symbol">((</span>data<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// note, the first argument is never passed to the</span>
    <span class="sh_comment">// callback since it is assumed to be the 'Error' argument</span>
    <span class="sh_comment">// and thus intercepted by the domain.</span>

    <span class="sh_comment">// if this throws, it will also be passed to the domain</span>
    <span class="sh_comment">// so the error-handling logic can be moved to the 'error'</span>
    <span class="sh_comment">// event on the domain instead of being repeated throughout</span>
    <span class="sh_comment">// the program.</span>
    <span class="sh_keyword">return</span> <span class="sh_function">cb</span><span class="sh_symbol">(</span><span class="sh_keyword">null</span><span class="sh_symbol">,</span> JSON<span class="sh_symbol">.</span><span class="sh_function">parse</span><span class="sh_symbol">(</span>data<span class="sh_symbol">));</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">));</span>
<span class="sh_cbracket">}</span>

d<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>er<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// an error occurred somewhere.</span>
  <span class="sh_comment">// if we throw it now, it will crash the program</span>
  <span class="sh_comment">// with the normal line number and stack message.</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h3>domain.enter()<span><a class="mark" href="#domain_domain_enter" id="domain_domain_enter">#</a></span></h3>
<p>The <code>enter</code> method is plumbing used by the <code>run</code>, <code>bind</code>, and <code>intercept</code>
methods to set the active domain. It sets <code>domain.active</code> and <code>process.domain</code>
to the domain, and implicitly pushes the domain onto the domain stack managed
by the domain module (see <a href="#domain_domain_exit"><code>domain.exit()</code></a> for details on the domain stack). The
call to <code>enter</code> delimits the beginning of a chain of asynchronous calls and I/O
operations bound to a domain.</p>
<p>Calling <code>enter</code> changes only the active domain, and does not alter the domain
itself. <code>enter</code> and <code>exit</code> can be called an arbitrary number of times on a
single domain.</p>
<p>If the domain on which <code>enter</code> is called has been disposed, <code>enter</code> will return
without setting the domain.</p>
<h3>domain.exit()<span><a class="mark" href="#domain_domain_exit" id="domain_domain_exit">#</a></span></h3>
<p>The <code>exit</code> method exits the current domain, popping it off the domain stack.
Any time execution is going to switch to the context of a different chain of
asynchronous calls, it's important to ensure that the current domain is exited.
The call to <code>exit</code> delimits either the end of or an interruption to the chain
of asynchronous calls and I/O operations bound to a domain.</p>
<p>If there are multiple, nested domains bound to the current execution context,
<code>exit</code> will exit any domains nested within this domain.</p>
<p>Calling <code>exit</code> changes only the active domain, and does not alter the domain
itself. <code>enter</code> and <code>exit</code> can be called an arbitrary number of times on a
single domain.</p>
<p>If the domain on which <code>exit</code> is called has been disposed, <code>exit</code> will return
without exiting the domain.</p>
<h3>domain.dispose()<span><a class="mark" href="#domain_domain_dispose" id="domain_domain_dispose">#</a></span></h3>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated<span class="sh_symbol">.</span>  Please recover from failed IO actions
explicitly via error event handlers set on the domain<span class="sh_symbol">.</span></pre><p>Once <code>dispose</code> has been called, the domain will no longer be used by callbacks
bound into the domain via <code>run</code>, <code>bind</code>, or <code>intercept</code>, and a <code>'dispose'</code> event
is emitted.</p>
<!-- [end-include:domain.md] -->
<!-- [start-include:errors.md] -->
<h1>Errors<span><a class="mark" href="#errors_errors" id="errors_errors">#</a></span></h1>
<!--type=misc-->
<p>Applications running in Node.js will generally experience four categories of
errors:</p>
<ul>
<li>Standard JavaScript errors such as:<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError" class="type">&lt;EvalError&gt;</a> : thrown when a call to <code>eval()</code> fails.</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" class="type">&lt;SyntaxError&gt;</a> : thrown in response to improper JavaScript language
syntax.</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError" class="type">&lt;RangeError&gt;</a> : thrown when a value is not within an expected range</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError" class="type">&lt;ReferenceError&gt;</a> : thrown when using undefined variables</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError" class="type">&lt;TypeError&gt;</a> : thrown when passing arguments of the wrong type</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError" class="type">&lt;URIError&gt;</a> : thrown when a global URI handling function is misused.</li>
</ul>
</li>
<li>System errors triggered by underlying operating system constraints such
as attempting to open a file that does not exist, attempting to send data
over a closed socket, etc;</li>
<li>And User-specified errors triggered by application code.</li>
<li>Assertion Errors are a special class of error that can be triggered whenever
Node.js detects an exceptional logic violation that should never occur. These
are raised typically by the <code>assert</code> module.</li>
</ul>
<p>All JavaScript and System errors raised by Node.js inherit from, or are
instances of, the standard JavaScript <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" class="type">&lt;Error&gt;</a> class and are guaranteed
to provide <em>at least</em> the properties available on that class.</p>
<h2>Error Propagation and Interception<span><a class="mark" href="#errors_error_propagation_and_interception" id="errors_error_propagation_and_interception">#</a></span></h2>
<!--type=misc-->
<p>Node.js supports several mechanisms for propagating and handling errors that
occur while an application is running. How these errors are reported and
handled depends entirely on the type of Error and the style of the API that is
called.</p>
<p>All JavaScript errors are handled as exceptions that <em>immediately</em> generate
and throw an error using the standard JavaScript <code>throw</code> mechanism. These
are handled using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch"><code>try / catch</code> construct</a> provided by the JavaScript
language.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// Throws with a ReferenceError because z is undefined</span>
<span class="sh_keyword">try</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">const</span> m <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
  <span class="sh_keyword">const</span> n <span class="sh_symbol">=</span> m <span class="sh_symbol">+</span> z<span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span> <span class="sh_keyword">catch</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// Handle the error here.</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p>Any use of the JavaScript <code>throw</code> mechanism will raise an exception that
<em>must</em> be handled using <code>try / catch</code> or the Node.js process will exit
immediately.</p>
<p>With few exceptions, <em>Synchronous</em> APIs (any blocking method that does not
accept a <code>callback</code> function, such as <a href="https://nodejs.org/api/fs.html#fs_fs_readfilesync_file_options"><code>fs.readFileSync</code></a>), will use <code>throw</code>
to report errors.</p>
<p>Errors that occur within <em>Asynchronous APIs</em> may be reported in multiple ways:</p>
<ul>
<li><p>Most asynchronous methods that accept a <code>callback</code> function will accept an
<code>Error</code> object passed as the first argument to that function. If that first
argument is not <code>null</code> and is an instance of <code>Error</code>, then an error occurred
that should be handled.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> fs <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'fs'</span><span class="sh_symbol">);</span>
fs<span class="sh_symbol">.</span><span class="sh_function">readFile</span><span class="sh_symbol">(</span><span class="sh_string">'a file that does not exist'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">,</span> data<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span><span class="sh_string">'There was an error reading the file!'</span><span class="sh_symbol">,</span> err<span class="sh_symbol">);</span>
    <span class="sh_keyword">return</span><span class="sh_symbol">;</span>
  <span class="sh_cbracket">}</span>
  <span class="sh_comment">// Otherwise handle the data</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
</li>
<li><p>When an asynchronous method is called on an object that is an <code>EventEmitter</code>,
errors can be routed to that object's <code>'error'</code> event.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> net <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'net'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> connection <span class="sh_symbol">=</span> net<span class="sh_symbol">.</span><span class="sh_function">connect</span><span class="sh_symbol">(</span><span class="sh_string">'localhost'</span><span class="sh_symbol">);</span>

<span class="sh_comment">// Adding an 'error' event handler to a stream:</span>
connection<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// If the connection is reset by the server, or if it can't</span>
  <span class="sh_comment">// connect at all, or on any sort of error encountered by</span>
  <span class="sh_comment">// the connection, the error will be sent here.</span>
  console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span>err<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

connection<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>stdout<span class="sh_symbol">);</span>
</code></pre>
</li>
<li><p>A handful of typically asynchronous methods in the Node.js API may still
use the <code>throw</code> mechanism to raise exceptions that must be handled using
<code>try / catch</code>. There is no comprehensive list of such methods; please
refer to the documentation of each method to determine the appropriate
error handling mechanism required.</p>
</li>
</ul>
<p>The use of the <code>'error'</code> event mechanism is most common for <a href="https://nodejs.org/api/stream.html">stream-based</a>
and <a href="https://nodejs.org/api/events.html#events_class_eventemitter">event emitter-based</a> APIs, which themselves represent a series of
asynchronous operations over time (as opposed to a single operation that may
pass or fail).</p>
<p>For <em>all</em> <code>EventEmitter</code> objects, if an <code>'error'</code> event handler is not
provided, the error will be thrown, causing the Node.js process to report an
unhandled exception and  crash unless either: The <a href="https://nodejs.org/api/domain.html"><code>domain</code></a> module is used
appropriately or a handler has been registered for the
<a href="https://nodejs.org/api/process.html#process_event_uncaughtexception"><code>process.on('uncaughtException')</code></a> event.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> EventEmitter <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'events'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> ee <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">EventEmitter</span><span class="sh_symbol">();</span>

<span class="sh_function">setImmediate</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// This will crash the process because no 'error' event</span>
  <span class="sh_comment">// handler has been added.</span>
  ee<span class="sh_symbol">.</span><span class="sh_function">emit</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_keyword">new</span> <span class="sh_predef_func">Error</span><span class="sh_symbol">(</span><span class="sh_string">'This will crash'</span><span class="sh_symbol">));</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>Errors generated in this way <em>cannot</em> be intercepted using <code>try / catch</code> as
they are thrown <em>after</em> the calling code has already exited.</p>
<p>Developers must refer to the documentation for each method to determine
exactly how errors raised by those methods are propagated.</p>
<h3>Node.js style callbacks<span><a class="mark" href="#errors_node_js_style_callbacks" id="errors_node_js_style_callbacks">#</a></span></h3>
<!--type=misc-->
<p>Most asynchronous methods exposed by the Node.js core API follow an idiomatic
pattern  referred to as a "Node.js style callback". With this pattern, a
callback function is passed to the method as an argument. When the operation
either completes or an error is raised, the callback function is called with
the Error object (if any) passed as the first argument. If no error was raised,
the first argument will be passed as <code>null</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> fs <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'fs'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">function</span> <span class="sh_function">nodeStyleCallback</span><span class="sh_symbol">(</span>err<span class="sh_symbol">,</span> data<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
 <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
   console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span><span class="sh_string">'There was an error'</span><span class="sh_symbol">,</span> err<span class="sh_symbol">);</span>
   <span class="sh_keyword">return</span><span class="sh_symbol">;</span>
 <span class="sh_cbracket">}</span>
 console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>data<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

fs<span class="sh_symbol">.</span><span class="sh_function">readFile</span><span class="sh_symbol">(</span><span class="sh_string">'/some/file/that/does-not-exist'</span><span class="sh_symbol">,</span> nodeStyleCallback<span class="sh_symbol">);</span>
fs<span class="sh_symbol">.</span><span class="sh_function">readFile</span><span class="sh_symbol">(</span><span class="sh_string">'/some/file/that/does-exist'</span><span class="sh_symbol">,</span> nodeStyleCallback<span class="sh_symbol">)</span>
</code></pre>
<p>The JavaScript <code>try / catch</code> mechanism <strong>cannot</strong> be used to intercept errors
generated by asynchronous APIs.  A common mistake for beginners is to try to
use <code>throw</code> inside a Node.js style callback:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// THIS WILL NOT WORK:</span>
<span class="sh_keyword">const</span> fs <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'fs'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">try</span> <span class="sh_cbracket">{</span>
  fs<span class="sh_symbol">.</span><span class="sh_function">readFile</span><span class="sh_symbol">(</span><span class="sh_string">'/some/file/that/does-not-exist'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">,</span> data<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// mistaken assumption: throwing here...</span>
    <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
      <span class="sh_keyword">throw</span> err<span class="sh_symbol">;</span>
    <span class="sh_cbracket">}</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span> <span class="sh_keyword">catch</span><span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// This will not catch the throw!</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>err<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p>This will not work because the callback function passed to <code>fs.readFile()</code> is
called asynchronously. By the time the callback has been called, the
surrounding code (including the <code>try { } catch(err) { }</code> block will have
already exited. Throwing an error inside the callback <strong>can crash the Node.js
process</strong> in most cases. If <a href="https://nodejs.org/api/domain.html">domains</a> are enabled, or a handler has been
registered with <code>process.on('uncaughtException')</code>, such errors can be
intercepted.</p>
<h2>Class: Error<span><a class="mark" href="#errors_class_error" id="errors_class_error">#</a></span></h2>
<!--type=class-->
<p>A generic JavaScript <code>Error</code> object that does not denote any specific
circumstance of why the error occurred. <code>Error</code> objects capture a "stack trace"
detailing the point in the code at which the <code>Error</code> was instantiated, and may
provide a text description of the error.</p>
<p>All errors generated by Node.js, including all System and JavaScript errors,
will either be instances of, or inherit from, the <code>Error</code> class.</p>
<h3>new Error(message)<span><a class="mark" href="#errors_new_error_message" id="errors_new_error_message">#</a></span></h3>
<p>Creates a new <code>Error</code> object and sets the <code>error.message</code> property to the
provided text message. If an object is passed as <code>message</code>, the text message
is generated by calling <code>message.toString()</code>. The <code>error.stack</code> property will
represent the point in the code at which <code>new Error()</code> was called. Stack traces
are dependent on <a href="https://github.com/v8/v8/wiki/Stack-Trace-API">V8's stack trace API</a>. Stack traces extend only to either
(a) the beginning of  <em>synchronous code execution</em>, or (b) the number of frames
given by the property <code>Error.stackTraceLimit</code>, whichever is smaller.</p>
<h3>Error.captureStackTrace(targetObject[, constructorOpt])<span><a class="mark" href="#errors_error_capturestacktrace_targetobject_constructoropt" id="errors_error_capturestacktrace_targetobject_constructoropt">#</a></span></h3>
<p>Creates a <code>.stack</code> property on <code>targetObject</code>, which when accessed returns
a string representing the location in the code at which
<code>Error.captureStackTrace()</code> was called.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> myObject <span class="sh_symbol">=</span> <span class="sh_cbracket">{}</span><span class="sh_symbol">;</span>
<span class="sh_predef_func">Error</span><span class="sh_symbol">.</span><span class="sh_function">captureStackTrace</span><span class="sh_symbol">(</span>myObject<span class="sh_symbol">);</span>
myObject<span class="sh_symbol">.</span>stack  <span class="sh_comment">// similar to `new Error().stack`</span>
</code></pre>
<p>The first line of the trace, instead of being prefixed with <code>ErrorType:
message</code>, will be the result of calling <code>targetObject.toString()</code>.</p>
<p>The optional <code>constructorOpt</code> argument accepts a function. If given, all frames
above <code>constructorOpt</code>, including <code>constructorOpt</code>, will be omitted from the
generated stack trace.</p>
<p>The <code>constructorOpt</code> argument is useful for hiding implementation
details of error generation from an end user. For instance:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">function</span> <span class="sh_function">MyError</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  <span class="sh_predef_func">Error</span><span class="sh_symbol">.</span><span class="sh_function">captureStackTrace</span><span class="sh_symbol">(</span><span class="sh_keyword">this</span><span class="sh_symbol">,</span> MyError<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

<span class="sh_comment">// Without passing MyError to captureStackTrace, the MyError</span>
<span class="sh_comment">// frame would show up in the .stack property. By passing</span>
<span class="sh_comment">// the constructor, we omit that frame and all frames above it.</span>
<span class="sh_keyword">new</span> <span class="sh_function">MyError</span><span class="sh_symbol">().</span>stack
</code></pre>
<h3>Error.stackTraceLimit<span><a class="mark" href="#errors_error_stacktracelimit" id="errors_error_stacktracelimit">#</a></span></h3>
<p>The <code>Error.stackTraceLimit</code> property specifies the number of stack frames
collected by a stack trace (whether generated by <code>new Error().stack</code> or
<code>Error.captureStackTrace(obj)</code>).</p>
<p>The default value is <code>10</code> but may be set to any valid JavaScript number. Changes
will affect any stack trace captured <em>after</em> the value has been changed.</p>
<p>If set to a non-number value, or set to a negative number, stack traces will
not capture any frames.</p>
<h4>error.message<span><a class="mark" href="#errors_error_message" id="errors_error_message">#</a></span></h4>
<p>Returns the string description of error as set by calling <code>new Error(message)</code>.
The <code>message</code> passed to the constructor will also appear in the first line of
the stack trace of the <code>Error</code>, however changing this property after the
<code>Error</code> object is created <em>may not</em> change the first line of the stack trace.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> err <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_predef_func">Error</span><span class="sh_symbol">(</span><span class="sh_string">'The message'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>err<span class="sh_symbol">.</span>message<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: The message</span>
</code></pre>
<h4>error.stack<span><a class="mark" href="#errors_error_stack" id="errors_error_stack">#</a></span></h4>
<p>Returns a string describing the point in the code at which the <code>Error</code> was
instantiated.</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code><span class="sh_predef_func">Error</span><span class="sh_symbol">:</span> Things keep happening<span class="sh_symbol">!</span>
   <span class="sh_normal">at </span><span class="sh_symbol">/</span><span class="sh_normal">home</span><span class="sh_symbol">/</span><span class="sh_normal">gbusey</span><span class="sh_symbol">/</span>file<span class="sh_symbol">.</span>js<span class="sh_symbol">:</span><span class="sh_number">525</span><span class="sh_symbol">:</span><span class="sh_number">2</span>
   at Frobnicator<span class="sh_symbol">.</span><span class="sh_function">refrobulate</span> <span class="sh_symbol">(</span><span class="sh_regexp">/home/g</span><span class="sh_normal">busey</span><span class="sh_symbol">/</span>business<span class="sh_symbol">-</span>logic<span class="sh_symbol">.</span>js<span class="sh_symbol">:</span><span class="sh_number">424</span><span class="sh_symbol">:</span><span class="sh_number">21</span><span class="sh_symbol">)</span>
   at Actor<span class="sh_symbol">.&lt;</span>anonymous<span class="sh_symbol">&gt;</span> <span class="sh_symbol">(</span><span class="sh_regexp">/home/g</span><span class="sh_normal">busey</span><span class="sh_symbol">/</span>actors<span class="sh_symbol">.</span>js<span class="sh_symbol">:</span><span class="sh_number">400</span><span class="sh_symbol">:</span><span class="sh_number">8</span><span class="sh_symbol">)</span>
   at <span class="sh_function">increaseSynergy</span> <span class="sh_symbol">(</span><span class="sh_regexp">/home/g</span><span class="sh_normal">busey</span><span class="sh_symbol">/</span>actors<span class="sh_symbol">.</span>js<span class="sh_symbol">:</span><span class="sh_number">701</span><span class="sh_symbol">:</span><span class="sh_number">6</span><span class="sh_symbol">)</span>
</code></pre><p>The first line is formatted as <code>&lt;error class name&gt;: &lt;error message&gt;</code>, and
is followed by a series of stack frames (each line beginning with "at ").
Each frame describes a call site within the code that lead to the error being
generated. V8 attempts to display a name for each function (by variable name,
function name, or object method name), but occasionally it will not be able to
find a suitable name. If V8 cannot determine a name for the function, only
location information will be displayed for that frame. Otherwise, the
determined function name will be displayed with location information appended
in parentheses.</p>
<p>It is important to note that frames are <strong>only</strong> generated for JavaScript
functions. If, for example, execution synchronously passes through a C++ addon
function called <code>cheetahify</code>, which itself calls a JavaScript function, the
frame representing the <code>cheetahify</code> call will <strong>not</strong> be present in the stack
traces:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> cheetahify <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./native-binding.node'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">function</span> <span class="sh_function">makeFaster</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// cheetahify *synchronously* calls speedy.</span>
  <span class="sh_function">cheetahify</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span> <span class="sh_function">speedy</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">throw</span> <span class="sh_keyword">new</span> <span class="sh_predef_func">Error</span><span class="sh_symbol">(</span><span class="sh_string">'oh no!'</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

<span class="sh_function">makeFaster</span><span class="sh_symbol">();</span> <span class="sh_comment">// will throw:</span>
  <span class="sh_comment">// /home/gbusey/file.js:6</span>
  <span class="sh_comment">//     throw new Error('oh no!');</span>
  <span class="sh_comment">//           ^</span>
  <span class="sh_comment">// Error: oh no!</span>
  <span class="sh_comment">//     at speedy (/home/gbusey/file.js:6:11)</span>
  <span class="sh_comment">//     at makeFaster (/home/gbusey/file.js:5:3)</span>
  <span class="sh_comment">//     at Object.&lt;anonymous&gt; (/home/gbusey/file.js:10:1)</span>
  <span class="sh_comment">//     at Module._compile (module.js:456:26)</span>
  <span class="sh_comment">//     at Object.Module._extensions..js (module.js:474:10)</span>
  <span class="sh_comment">//     at Module.load (module.js:356:32)</span>
  <span class="sh_comment">//     at Function.Module._load (module.js:312:12)</span>
  <span class="sh_comment">//     at Function.Module.runMain (module.js:497:10)</span>
  <span class="sh_comment">//     at startup (node.js:119:16)</span>
  <span class="sh_comment">//     at node.js:906:3</span>
</code></pre>
<p>The location information will be one of:</p>
<ul>
<li><code>native</code>, if the frame represents a call internal to V8 (as in <code>[].forEach</code>).</li>
<li><code>plain-filename.js:line:column</code>, if the frame represents a call internal
 to Node.js.</li>
<li><code>/absolute/path/to/file.js:line:column</code>, if the frame represents a call in
a user program, or its dependencies.</li>
</ul>
<p>The string representing the stack trace is lazily generated when the
<code>error.stack</code> property is <strong>accessed</strong>.</p>
<p>The number of frames captured by the stack trace is bounded by the smaller of
<code>Error.stackTraceLimit</code> or the number of available frames on the current event
loop tick.</p>
<p>System-level errors are generated as augmented <code>Error</code> instances, which are
detailed <a href="#errors_system_errors">here</a>.</p>
<h2>Class: RangeError<span><a class="mark" href="#errors_class_rangeerror" id="errors_class_rangeerror">#</a></span></h2>
<p>A subclass of <code>Error</code> that indicates that a provided argument was not within the
set or range of acceptable values for a function; whether that is a numeric
range, or outside the set of options for a given function parameter.</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'net'</span><span class="sh_symbol">).</span><span class="sh_function">connect</span><span class="sh_symbol">(-</span><span class="sh_number">1</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// throws RangeError, port should be &gt; 0 &amp;&amp; &lt; 65536</span>
</code></pre>
<p>Node.js will generate and throw <code>RangeError</code> instances <em>immediately</em> as a form
of argument validation.</p>
<h2>Class: ReferenceError<span><a class="mark" href="#errors_class_referenceerror" id="errors_class_referenceerror">#</a></span></h2>
<p>A subclass of <code>Error</code> that indicates that an attempt is being made to access a
variable that is not defined. Such errors commonly indicate typos in code, or
an otherwise broken program.</p>
<p>While client code may generate and propagate these errors, in practice, only V8
will do so.</p>
<pre class="sh_sourceCode"><code class="lang-js">doesNotExist<span class="sh_symbol">;</span>
  <span class="sh_comment">// throws ReferenceError, doesNotExist is not a variable in this program.</span>
</code></pre>
<p><code>ReferenceError</code> instances will have an <code>error.arguments</code> property whose value
is an array containing a single element: a string representing the variable
that was not defined.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> assert <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'assert'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">try</span> <span class="sh_cbracket">{</span>
  doesNotExist<span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span> <span class="sh_keyword">catch</span><span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_function">assert</span><span class="sh_symbol">(</span>err<span class="sh_symbol">.</span><span class="sh_predef_var">arguments</span><span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">],</span> <span class="sh_string">'doesNotExist'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p>Unless an application is dynamically generating and running code,
<code>ReferenceError</code> instances should always be considered a bug in the code
or its dependencies.</p>
<h2>Class: SyntaxError<span><a class="mark" href="#errors_class_syntaxerror" id="errors_class_syntaxerror">#</a></span></h2>
<p>A subclass of <code>Error</code> that indicates that a program is not valid JavaScript.
These errors may only be generated and propagated as a result of code
evaluation. Code evaluation may happen as a result of <code>eval</code>, <code>Function</code>,
<code>require</code>, or <a href="https://nodejs.org/api/vm.html">vm</a>. These errors are almost always indicative of a broken
program.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">try</span> <span class="sh_cbracket">{</span>
  <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'vm'</span><span class="sh_symbol">).</span><span class="sh_function">runInThisContext</span><span class="sh_symbol">(</span><span class="sh_string">'binary ! isNotOk'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span> <span class="sh_keyword">catch</span><span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// err will be a SyntaxError</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p><code>SyntaxError</code> instances are unrecoverable in the context that created them –
they may only be caught by other contexts.</p>
<h2>Class: TypeError<span><a class="mark" href="#errors_class_typeerror" id="errors_class_typeerror">#</a></span></h2>
<p>A subclass of <code>Error</code> that indicates that a provided argument is not an
allowable type. For example, passing a function to a parameter which expects a
string would be considered a TypeError.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'url'</span><span class="sh_symbol">).</span><span class="sh_function">parse</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span> <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// throws TypeError, since it expected a string</span>
</code></pre>
<p>Node.js will generate and throw <code>TypeError</code> instances <em>immediately</em> as a form
of argument validation.</p>
<h2>Exceptions vs. Errors<span><a class="mark" href="#errors_exceptions_vs_errors" id="errors_exceptions_vs_errors">#</a></span></h2>
<!--type=misc-->
<p>A JavaScript exception is a value that is thrown as a result of an invalid
operation or as the target of a <code>throw</code> statement. While it is not required
that these values are instances of <code>Error</code> or classes which inherit from
<code>Error</code>, all exceptions thrown by Node.js or the JavaScript runtime <em>will</em> be
instances of Error.</p>
<p>Some exceptions are <em>unrecoverable</em> at the JavaScript layer. Such exceptions
will <em>always</em> cause the Node.js process to crash. Examples include <code>assert()</code>
checks or <code>abort()</code> calls in the C++ layer.</p>
<h2>System Errors<span><a class="mark" href="#errors_system_errors" id="errors_system_errors">#</a></span></h2>
<p>System errors are generated when exceptions occur within the program's
runtime environment. Typically, these are operational errors that occur
when an application violates an operating system constraint such as attempting
to read a file that does not exist or when the user does not have sufficient
permissions.</p>
<p>System errors are typically generated at the syscall level: an exhaustive list
of error codes and their meanings is available by running <code>man 2 intro</code> or
<code>man 3 errno</code> on most Unices; or <a href="http://man7.org/linux/man-pages/man3/errno.3.html">online</a>.</p>
<p>In Node.js, system errors are represented as augmented <code>Error</code> objects with
added properties.</p>
<h3>Class: System Error<span><a class="mark" href="#errors_class_system_error" id="errors_class_system_error">#</a></span></h3>
<h4>error.code<span><a class="mark" href="#errors_error_code" id="errors_error_code">#</a></span></h4>
<h4>error.errno<span><a class="mark" href="#errors_error_errno" id="errors_error_errno">#</a></span></h4>
<p>Returns a string representing the error code, which is always <code>E</code> followed by
a sequence of capital letters, and may be referenced in <code>man 2 intro</code>.</p>
<p>The properties <code>error.code</code> and <code>error.errno</code> are aliases of one another and
return the same value.</p>
<h4>error.syscall<span><a class="mark" href="#errors_error_syscall" id="errors_error_syscall">#</a></span></h4>
<p>Returns a string describing the <a href="http://man7.org/linux/man-pages/man2/syscall.2.html">syscall</a> that failed.</p>
<h3>Common System Errors<span><a class="mark" href="#errors_common_system_errors" id="errors_common_system_errors">#</a></span></h3>
<p>This list is <strong>not exhaustive</strong>, but enumerates many of the common system
errors encountered when writing a Node.js program. An exhaustive list may be
found <a href="http://man7.org/linux/man-pages/man3/errno.3.html">here</a>.</p>
<ul>
<li><p><code>EACCES</code> (Permission denied): An attempt was made to access a file in a way
forbidden by its file access permissions.</p>
</li>
<li><p><code>EADDRINUSE</code> (Address already in use):  An attempt to bind a server
(<a href="https://nodejs.org/api/net.html"><code>net</code></a>, <a href="https://nodejs.org/api/http.html"><code>http</code></a>, or <a href="https://nodejs.org/api/https.html"><code>https</code></a>) to a local address failed due to
another server on the local system already occupying that address.</p>
</li>
<li><p><code>ECONNREFUSED</code> (Connection refused): No connection could be made because the
target machine actively refused it. This usually results from trying to
connect to a service that is inactive on the foreign host.</p>
</li>
<li><p><code>ECONNRESET</code> (Connection reset by peer): A connection was forcibly closed by
a peer. This normally results from a loss of the connection on the remote
socket due to a timeout or reboot. Commonly encountered via the <a href="https://nodejs.org/api/http.html"><code>http</code></a>
and <a href="https://nodejs.org/api/net.html"><code>net</code></a> modules.</p>
</li>
<li><p><code>EEXIST</code> (File exists): An existing file was the target of an operation that
required that the target not exist.</p>
</li>
<li><p><code>EISDIR</code> (Is a directory): An operation expected a file, but the given
pathname was a directory.</p>
</li>
<li><p><code>EMFILE</code> (Too many open files in system): Maximum number of
<a href="https://en.wikipedia.org/wiki/File_descriptor">file descriptors</a> allowable on the system has been reached, and
requests for another descriptor cannot be fulfilled until at least one
has been closed. This is encountered when opening many files at once in
parallel, especially on systems (in particular, OS X) where there is a low
file descriptor limit for processes. To remedy a low limit, run
<code>ulimit -n 2048</code> in the same shell that will run the Node.js process.</p>
</li>
<li><p><code>ENOENT</code> (No such file or directory): Commonly raised by <a href="https://nodejs.org/api/fs.html"><code>fs</code></a> operations
to indicate that a component of the specified pathname does not exist -- no
entity (file or directory) could be found by the given path.</p>
</li>
<li><p><code>ENOTDIR</code> (Not a directory): A component of the given pathname existed, but
was not a directory as expected. Commonly raised by <a href="https://nodejs.org/api/fs.html#fs_fs_readdir_path_options_callback"><code>fs.readdir</code></a>.</p>
</li>
<li><p><code>ENOTEMPTY</code> (Directory not empty): A directory with entries was the target
of an operation that requires an empty directory -- usually <a href="https://nodejs.org/api/fs.html#fs_fs_unlink_path_callback"><code>fs.unlink</code></a>.</p>
</li>
<li><p><code>EPERM</code> (Operation not permitted): An attempt was made to perform an
operation that requires elevated privileges.</p>
</li>
<li><p><code>EPIPE</code> (Broken pipe): A write on a pipe, socket, or FIFO for which there is
no process to read the data. Commonly encountered at the <a href="https://nodejs.org/api/net.html"><code>net</code></a> and
<a href="https://nodejs.org/api/http.html"><code>http</code></a> layers, indicative that the remote side of the stream being
written to has been closed.</p>
</li>
<li><p><code>ETIMEDOUT</code> (Operation timed out): A connect or send request failed because
the connected party did not properly respond after a period of time. Usually
encountered by <a href="https://nodejs.org/api/http.html"><code>http</code></a> or <a href="https://nodejs.org/api/net.html"><code>net</code></a> -- often a sign that a <code>socket.end()</code>
was not properly called.</p>
</li>
</ul>
<!-- [end-include:errors.md] -->
<!-- [start-include:events.md] -->
<h1>Events<span><a class="mark" href="#events_events" id="events_events">#</a></span></h1>
<pre class="api_stability api_stability_2 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> Stable</pre><!--type=module-->
<p>Much of the Node.js core API is built around an idiomatic asynchronous
event-driven architecture in which certain kinds of objects (called "emitters")
periodically emit named events that cause Function objects ("listeners") to be
called.</p>
<p>For instance: a <a href="https://nodejs.org/api/net.html#net_class_net_server"><code>net.Server</code></a> object emits an event each time a peer
connects to it; a <a href="https://nodejs.org/api/fs.html#fs_class_fs_readstream"><code>fs.ReadStream</code></a> emits an event when the file is opened;
a <a href="https://nodejs.org/api/stream.html#stream_stream">stream</a> emits an event whenever data is available to be read.</p>
<p>All objects that emit events are instances of the <code>EventEmitter</code> class. These
objects expose an <code>eventEmitter.on()</code> function that allows one or more
Functions to be attached to named events emitted by the object. Typically,
event names are camel-cased strings but any valid JavaScript property key
can be used.</p>
<p>When the <code>EventEmitter</code> object emits an event, all of the Functions attached
to that specific event are called <em>synchronously</em>. Any values returned by the
called listeners are <em>ignored</em> and will be discarded.</p>
<p>The following example shows a simple <code>EventEmitter</code> instance with a single
listener. The <code>eventEmitter.on()</code> method is used to register listeners, while
the <code>eventEmitter.emit()</code> method is used to trigger the event.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> EventEmitter <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'events'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">class</span> MyEmitter <span class="sh_keyword">extends</span> EventEmitter <span class="sh_cbracket">{}</span>

<span class="sh_keyword">const</span> myEmitter <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">MyEmitter</span><span class="sh_symbol">();</span>
myEmitter<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'event'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'an event occurred!'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
myEmitter<span class="sh_symbol">.</span><span class="sh_function">emit</span><span class="sh_symbol">(</span><span class="sh_string">'event'</span><span class="sh_symbol">);</span>
</code></pre>
<h2>Passing arguments and <code>this</code> to listeners<span><a class="mark" href="#events_passing_arguments_and_this_to_listeners" id="events_passing_arguments_and_this_to_listeners">#</a></span></h2>
<p>The <code>eventEmitter.emit()</code> method allows an arbitrary set of arguments to be
passed to the listener functions. It is important to keep in mind that when an
ordinary listener function is called by the <code>EventEmitter</code>, the standard <code>this</code>
keyword is intentionally set to reference the <code>EventEmitter</code> to which the
listener is attached.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> myEmitter <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">MyEmitter</span><span class="sh_symbol">();</span>
myEmitter<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'event'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>a<span class="sh_symbol">,</span> b<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>a<span class="sh_symbol">,</span> b<span class="sh_symbol">,</span> <span class="sh_keyword">this</span><span class="sh_symbol">);</span>
    <span class="sh_comment">// Prints:</span>
    <span class="sh_comment">//   a b MyEmitter {</span>
    <span class="sh_comment">//     domain: null,</span>
    <span class="sh_comment">//     _events: { event: [Function] },</span>
    <span class="sh_comment">//     _eventsCount: 1,</span>
    <span class="sh_comment">//     _maxListeners: undefined }</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
myEmitter<span class="sh_symbol">.</span><span class="sh_function">emit</span><span class="sh_symbol">(</span><span class="sh_string">'event'</span><span class="sh_symbol">,</span> <span class="sh_string">'a'</span><span class="sh_symbol">,</span> <span class="sh_string">'b'</span><span class="sh_symbol">);</span>
</code></pre>
<p>It is possible to use ES6 Arrow Functions as listeners, however, when doing so,
the <code>this</code> keyword will no longer reference the <code>EventEmitter</code> instance:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> myEmitter <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">MyEmitter</span><span class="sh_symbol">();</span>
myEmitter<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'event'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>a<span class="sh_symbol">,</span> b<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>a<span class="sh_symbol">,</span> b<span class="sh_symbol">,</span> <span class="sh_keyword">this</span><span class="sh_symbol">);</span>
    <span class="sh_comment">// Prints: a b {}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
myEmitter<span class="sh_symbol">.</span><span class="sh_function">emit</span><span class="sh_symbol">(</span><span class="sh_string">'event'</span><span class="sh_symbol">,</span> <span class="sh_string">'a'</span><span class="sh_symbol">,</span> <span class="sh_string">'b'</span><span class="sh_symbol">);</span>
</code></pre>
<h2>Asynchronous vs. Synchronous<span><a class="mark" href="#events_asynchronous_vs_synchronous" id="events_asynchronous_vs_synchronous">#</a></span></h2>
<p>The <code>EventListener</code> calls all listeners synchronously in the order in which
they were registered. This is important to ensure the proper sequencing of
events and to avoid race conditions or logic errors. When appropriate,
listener functions can switch to an asynchronous mode of operation using
the <code>setImmediate()</code> or <code>process.nextTick()</code> methods:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> myEmitter <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">MyEmitter</span><span class="sh_symbol">();</span>
myEmitter<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'event'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>a<span class="sh_symbol">,</span> b<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_function">setImmediate</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'this happens asynchronously'</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
myEmitter<span class="sh_symbol">.</span><span class="sh_function">emit</span><span class="sh_symbol">(</span><span class="sh_string">'event'</span><span class="sh_symbol">,</span> <span class="sh_string">'a'</span><span class="sh_symbol">,</span> <span class="sh_string">'b'</span><span class="sh_symbol">);</span>
</code></pre>
<h2>Handling events only once<span><a class="mark" href="#events_handling_events_only_once" id="events_handling_events_only_once">#</a></span></h2>
<p>When a listener is registered using the <code>eventEmitter.on()</code> method, that
listener will be invoked <em>every time</em> the named event is emitted.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> myEmitter <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">MyEmitter</span><span class="sh_symbol">();</span>
<span class="sh_keyword">var</span> m <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span>
myEmitter<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'event'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(++</span>m<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
myEmitter<span class="sh_symbol">.</span><span class="sh_function">emit</span><span class="sh_symbol">(</span><span class="sh_string">'event'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: 1</span>
myEmitter<span class="sh_symbol">.</span><span class="sh_function">emit</span><span class="sh_symbol">(</span><span class="sh_string">'event'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: 2</span>
</code></pre>
<p>Using the <code>eventEmitter.once()</code> method, it is possible to register a listener
that is unregistered before it is called.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> myEmitter <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">MyEmitter</span><span class="sh_symbol">();</span>
<span class="sh_keyword">var</span> m <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span>
myEmitter<span class="sh_symbol">.</span><span class="sh_function">once</span><span class="sh_symbol">(</span><span class="sh_string">'event'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(++</span>m<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
myEmitter<span class="sh_symbol">.</span><span class="sh_function">emit</span><span class="sh_symbol">(</span><span class="sh_string">'event'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: 1</span>
myEmitter<span class="sh_symbol">.</span><span class="sh_function">emit</span><span class="sh_symbol">(</span><span class="sh_string">'event'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Ignored</span>
</code></pre>
<h2>Error events<span><a class="mark" href="#events_error_events" id="events_error_events">#</a></span></h2>
<p>When an error occurs within an <code>EventEmitter</code> instance, the typical action is
for an <code>'error'</code> event to be emitted. These are treated as a special case
within Node.js.</p>
<p>If an <code>EventEmitter</code> does <em>not</em> have at least one listener registered for the
<code>'error'</code> event, and an <code>'error'</code> event is emitted, the error is thrown, a
stack trace is printed, and the Node.js process exits.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> myEmitter <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">MyEmitter</span><span class="sh_symbol">();</span>
myEmitter<span class="sh_symbol">.</span><span class="sh_function">emit</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_keyword">new</span> <span class="sh_predef_func">Error</span><span class="sh_symbol">(</span><span class="sh_string">'whoops!'</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// Throws and crashes Node.js</span>
</code></pre>
<p>To guard against crashing the Node.js process, developers can either register
a listener for the <code>process.on('uncaughtException')</code> event or use the
<a href="https://nodejs.org/api/domain.html"><code>domain</code></a> module (<em>Note, however, that the <code>domain</code> module has been
deprecated</em>).</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> myEmitter <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">MyEmitter</span><span class="sh_symbol">();</span>

process<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'uncaughtException'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'whoops! there was an error'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

myEmitter<span class="sh_symbol">.</span><span class="sh_function">emit</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_keyword">new</span> <span class="sh_predef_func">Error</span><span class="sh_symbol">(</span><span class="sh_string">'whoops!'</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// Prints: whoops! there was an error</span>
</code></pre>
<p>As a best practice, developers should always register listeners for the
<code>'error'</code> event:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> myEmitter <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">MyEmitter</span><span class="sh_symbol">();</span>
myEmitter<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'whoops! there was an error'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
myEmitter<span class="sh_symbol">.</span><span class="sh_function">emit</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_keyword">new</span> <span class="sh_predef_func">Error</span><span class="sh_symbol">(</span><span class="sh_string">'whoops!'</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// Prints: whoops! there was an error</span>
</code></pre>
<h2>Class: EventEmitter<span><a class="mark" href="#events_class_eventemitter" id="events_class_eventemitter">#</a></span></h2>
<p>The <code>EventEmitter</code> class is defined and exposed by the <code>events</code> module:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> EventEmitter <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'events'</span><span class="sh_symbol">);</span>
</code></pre>
<p>All EventEmitters emit the event <code>'newListener'</code> when new listeners are
added and <code>'removeListener'</code> when a listener is removed.</p>
<h3>Event: 'newListener'<span><a class="mark" href="#events_event_newlistener" id="events_event_newlistener">#</a></span></h3>
<div class="signature"><ul>
<li><code>eventName</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Symbol_type" class="type">&lt;Symbol&gt;</a> The name of the event being listened for</li>
<li><code>listener</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> The event handler function</li>
</ul>
</div><p>The <code>EventEmitter</code> instance will emit it's own <code>'newListener'</code> event <em>before</em>
a listener is added to it's internal array of listeners.</p>
<p>Listeners registered for the <code>'newListener'</code> event will be passed the event
name and a reference to the listener being added.</p>
<p>The fact that the event is triggered before adding the listener has a subtle
but important side effect: any <em>additional</em> listeners registered to the same
<code>name</code> <em>within</em> the <code>'newListener'</code> callback will be inserted <em>before</em> the
listener that is in the process of being added.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> myEmitter <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">MyEmitter</span><span class="sh_symbol">();</span>
<span class="sh_comment">// Only do this once so we don't loop forever</span>
myEmitter<span class="sh_symbol">.</span><span class="sh_function">once</span><span class="sh_symbol">(</span><span class="sh_string">'newListener'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>event<span class="sh_symbol">,</span> listener<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>event <span class="sh_symbol">===</span> <span class="sh_string">'event'</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// Insert a new listener in front</span>
    myEmitter<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'event'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
      console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'B'</span><span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
myEmitter<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'event'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'A'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
myEmitter<span class="sh_symbol">.</span><span class="sh_function">emit</span><span class="sh_symbol">(</span><span class="sh_string">'event'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints:</span>
  <span class="sh_comment">//   B</span>
  <span class="sh_comment">//   A</span>
</code></pre>
<h3>Event: 'removeListener'<span><a class="mark" href="#events_event_removelistener" id="events_event_removelistener">#</a></span></h3>
<div class="signature"><ul>
<li><code>eventName</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Symbol_type" class="type">&lt;Symbol&gt;</a> The event name</li>
<li><code>listener</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> The event handler function</li>
</ul>
</div><p>The <code>'removeListener'</code> event is emitted <em>after</em> a listener is removed.</p>
<h3>EventEmitter.listenerCount(emitter, eventName)<span><a class="mark" href="#events_eventemitter_listenercount_emitter_eventname" id="events_eventemitter_listenercount_emitter_eventname">#</a></span></h3>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated<span class="sh_symbol">:</span> Use <a href="#events_emitter_listenercount_eventname"><code>emitter<span class="sh_symbol">.</span><span class="sh_function">listenerCount</span><span class="sh_symbol">()</span></code></a> instead<span class="sh_symbol">.</span></pre><p>A class method that returns the number of listeners for the given <code>eventName</code>
registered on the given <code>emitter</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> myEmitter <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">MyEmitter</span><span class="sh_symbol">();</span>
myEmitter<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'event'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{}</span><span class="sh_symbol">);</span>
myEmitter<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'event'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{}</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>EventEmitter<span class="sh_symbol">.</span><span class="sh_function">listenerCount</span><span class="sh_symbol">(</span>myEmitter<span class="sh_symbol">,</span> <span class="sh_string">'event'</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// Prints: 2</span>
</code></pre>
<h3>EventEmitter.defaultMaxListeners<span><a class="mark" href="#events_eventemitter_defaultmaxlisteners" id="events_eventemitter_defaultmaxlisteners">#</a></span></h3>
<p>By default, a maximum of <code>10</code> listeners can be registered for any single
event. This limit can be changed for individual <code>EventEmitter</code> instances
using the <a href="#events_emitter_setmaxlisteners_n"><code>emitter.setMaxListeners(n)</code></a> method. To change the default
for <em>all</em> <code>EventEmitter</code> instances, the <code>EventEmitter.defaultMaxListeners</code>
property can be used.</p>
<p>Take caution when setting the <code>EventEmitter.defaultMaxListeners</code> because the
change effects <em>all</em> <code>EventEmitter</code> instances, including those created before
the change is made. However, calling <a href="#events_emitter_setmaxlisteners_n"><code>emitter.setMaxListeners(n)</code></a> still has
precedence over <code>EventEmitter.defaultMaxListeners</code>.</p>
<p>Note that this is not a hard limit. The <code>EventEmitter</code> instance will allow
more listeners to be added but will output a trace warning to stderr indicating
that a <code>possible EventEmitter memory leak</code> has been detected. For any single
<code>EventEmitter</code>, the <code>emitter.getMaxListeners()</code> and <code>emitter.setMaxListeners()</code>
methods can be used to temporarily avoid this warning:</p>
<pre class="sh_sourceCode"><code class="lang-js">emitter<span class="sh_symbol">.</span><span class="sh_function">setMaxListeners</span><span class="sh_symbol">(</span>emitter<span class="sh_symbol">.</span><span class="sh_function">getMaxListeners</span><span class="sh_symbol">()</span> <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">);</span>
emitter<span class="sh_symbol">.</span><span class="sh_function">once</span><span class="sh_symbol">(</span><span class="sh_string">'event'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// do stuff</span>
  emitter<span class="sh_symbol">.</span><span class="sh_function">setMaxListeners</span><span class="sh_symbol">(</span><span class="sh_predef_var">Math</span><span class="sh_symbol">.</span><span class="sh_function">max</span><span class="sh_symbol">(</span>emitter<span class="sh_symbol">.</span><span class="sh_function">getMaxListeners</span><span class="sh_symbol">()</span> <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">));</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h3>emitter.addListener(eventName, listener)<span><a class="mark" href="#events_emitter_addlistener_eventname_listener" id="events_emitter_addlistener_eventname_listener">#</a></span></h3>
<p>Alias for <code>emitter.on(eventName, listener)</code>.</p>
<h3>emitter.emit(eventName[, arg1][, arg2][, ...])<span><a class="mark" href="#events_emitter_emit_eventname_arg1_arg2" id="events_emitter_emit_eventname_arg1_arg2">#</a></span></h3>
<p>Synchronously calls each of the listeners registered for the event named
<code>eventName</code>, in the order they were registered, passing the supplied arguments
to each.</p>
<p>Returns <code>true</code> if the event had listeners, <code>false</code> otherwise.</p>
<h3>emitter.eventNames()<span><a class="mark" href="#events_emitter_eventnames" id="events_emitter_eventnames">#</a></span></h3>
<p>Returns an array listing the events for which the emitter has registered
listeners. The values in the array will be strings or Symbols.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> EventEmitter <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'events'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> myEE <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">EventEmitter</span><span class="sh_symbol">();</span>
myEE<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'foo'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{}</span><span class="sh_symbol">);</span>
myEE<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'bar'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{}</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> sym <span class="sh_symbol">=</span> <span class="sh_function">Symbol</span><span class="sh_symbol">(</span><span class="sh_string">'symbol'</span><span class="sh_symbol">);</span>
myEE<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span>sym<span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{}</span><span class="sh_symbol">);</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>myEE<span class="sh_symbol">.</span><span class="sh_function">eventNames</span><span class="sh_symbol">());</span>
  <span class="sh_comment">// Prints [ 'foo', 'bar', Symbol(symbol) ]</span>
</code></pre>
<h3>emitter.getMaxListeners()<span><a class="mark" href="#events_emitter_getmaxlisteners" id="events_emitter_getmaxlisteners">#</a></span></h3>
<p>Returns the current max listener value for the <code>EventEmitter</code> which is either
set by <a href="#events_emitter_setmaxlisteners_n"><code>emitter.setMaxListeners(n)</code></a> or defaults to
<a href="#events_eventemitter_defaultmaxlisteners"><code>EventEmitter.defaultMaxListeners</code></a>.</p>
<h3>emitter.listenerCount(eventName)<span><a class="mark" href="#events_emitter_listenercount_eventname" id="events_emitter_listenercount_eventname">#</a></span></h3>
<div class="signature"><ul>
<li><code>eventName</code> <span class="type">&lt;Value&gt;</span> The name of the event being listened for</li>
</ul>
</div><p>Returns the number of listeners listening to the event named <code>eventName</code>.</p>
<h3>emitter.listeners(eventName)<span><a class="mark" href="#events_emitter_listeners_eventname" id="events_emitter_listeners_eventname">#</a></span></h3>
<p>Returns a copy of the array of listeners for the event named <code>eventName</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js">server<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'connection'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>stream<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'someone connected!'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>util<span class="sh_symbol">.</span><span class="sh_function">inspect</span><span class="sh_symbol">(</span>server<span class="sh_symbol">.</span><span class="sh_function">listeners</span><span class="sh_symbol">(</span><span class="sh_string">'connection'</span><span class="sh_symbol">)));</span>
  <span class="sh_comment">// Prints: [ [Function] ]</span>
</code></pre>
<h3>emitter.on(eventName, listener)<span><a class="mark" href="#events_emitter_on_eventname_listener" id="events_emitter_on_eventname_listener">#</a></span></h3>
<div class="signature"><ul>
<li><code>eventName</code> <span class="type">&lt;string&gt;</span> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Symbol_type" class="type">&lt;Symbol&gt;</a> The name of the event.</li>
<li><code>listener</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> The callback function</li>
</ul>
</div><p>Adds the <code>listener</code> function to the end of the listeners array for the
event named <code>eventName</code>. No checks are made to see if the <code>listener</code> has
already been added. Multiple calls passing the same combination of <code>eventName</code>
and <code>listener</code> will result in the <code>listener</code> being added, and called, multiple
times.</p>
<pre class="sh_sourceCode"><code class="lang-js">server<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'connection'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>stream<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'someone connected!'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>Returns a reference to the <code>EventEmitter</code> so calls can be chained.</p>
<p>By default, event listeners are invoked in the order they are added. The
<code>emitter.prependListener()</code> method can be used as an alternative to add the
event listener to the beginning of the listeners array.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> myEE <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">EventEmitter</span><span class="sh_symbol">();</span>
myEE<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'foo'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'a'</span><span class="sh_symbol">));</span>
myEE<span class="sh_symbol">.</span><span class="sh_function">prependListener</span><span class="sh_symbol">(</span><span class="sh_string">'foo'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'b'</span><span class="sh_symbol">));</span>
myEE<span class="sh_symbol">.</span><span class="sh_function">emit</span><span class="sh_symbol">(</span><span class="sh_string">'foo'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints:</span>
  <span class="sh_comment">//   b</span>
  <span class="sh_comment">//   a</span>
</code></pre>
<h3>emitter.once(eventName, listener)<span><a class="mark" href="#events_emitter_once_eventname_listener" id="events_emitter_once_eventname_listener">#</a></span></h3>
<div class="signature"><ul>
<li><code>eventName</code> <span class="type">&lt;string&gt;</span> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Symbol_type" class="type">&lt;Symbol&gt;</a> The name of the event.</li>
<li><code>listener</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> The callback function</li>
</ul>
</div><p>Adds a <strong>one time</strong> <code>listener</code> function for the event named <code>eventName</code>. The
next time <code>eventName</code> is triggered, this listener is removed and then invoked.</p>
<pre class="sh_sourceCode"><code class="lang-js">server<span class="sh_symbol">.</span><span class="sh_function">once</span><span class="sh_symbol">(</span><span class="sh_string">'connection'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>stream<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Ah, we have our first user!'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>Returns a reference to the <code>EventEmitter</code> so calls can be chained.</p>
<p>By default, event listeners are invoked in the order they are added. The
<code>emitter.prependOnceListener()</code> method can be used as an alternative to add the
event listener to the beginning of the listeners array.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> myEE <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">EventEmitter</span><span class="sh_symbol">();</span>
myEE<span class="sh_symbol">.</span><span class="sh_function">once</span><span class="sh_symbol">(</span><span class="sh_string">'foo'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'a'</span><span class="sh_symbol">));</span>
myEE<span class="sh_symbol">.</span><span class="sh_function">prependOnceListener</span><span class="sh_symbol">(</span><span class="sh_string">'foo'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'b'</span><span class="sh_symbol">));</span>
myEE<span class="sh_symbol">.</span><span class="sh_function">emit</span><span class="sh_symbol">(</span><span class="sh_string">'foo'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints:</span>
  <span class="sh_comment">//   b</span>
  <span class="sh_comment">//   a</span>
</code></pre>
<h3>emitter.prependListener(eventName, listener)<span><a class="mark" href="#events_emitter_prependlistener_eventname_listener" id="events_emitter_prependlistener_eventname_listener">#</a></span></h3>
<div class="signature"><ul>
<li><code>eventName</code> <span class="type">&lt;string&gt;</span> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Symbol_type" class="type">&lt;Symbol&gt;</a> The name of the event.</li>
<li><code>listener</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> The callback function</li>
</ul>
</div><p>Adds the <code>listener</code> function to the <em>beginning</em> of the listeners array for the
event named <code>eventName</code>. No checks are made to see if the <code>listener</code> has
already been added. Multiple calls passing the same combination of <code>eventName</code>
and <code>listener</code> will result in the <code>listener</code> being added, and called, multiple
times.</p>
<pre class="sh_sourceCode"><code class="lang-js">server<span class="sh_symbol">.</span><span class="sh_function">prependListener</span><span class="sh_symbol">(</span><span class="sh_string">'connection'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>stream<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'someone connected!'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>Returns a reference to the <code>EventEmitter</code> so calls can be chained.</p>
<h3>emitter.prependOnceListener(eventName, listener)<span><a class="mark" href="#events_emitter_prependoncelistener_eventname_listener" id="events_emitter_prependoncelistener_eventname_listener">#</a></span></h3>
<div class="signature"><ul>
<li><code>eventName</code> <span class="type">&lt;string&gt;</span> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Symbol_type" class="type">&lt;Symbol&gt;</a> The name of the event.</li>
<li><code>listener</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> The callback function</li>
</ul>
</div><p>Adds a <strong>one time</strong> <code>listener</code> function for the event named <code>eventName</code> to the
<em>beginning</em> of the listeners array. The next time <code>eventName</code> is triggered, this
listener is removed, and then invoked.</p>
<pre class="sh_sourceCode"><code class="lang-js">server<span class="sh_symbol">.</span><span class="sh_function">prependOnceListener</span><span class="sh_symbol">(</span><span class="sh_string">'connection'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>stream<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Ah, we have our first user!'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>Returns a reference to the <code>EventEmitter</code> so calls can be chained.</p>
<h3>emitter.removeAllListeners([eventName])<span><a class="mark" href="#events_emitter_removealllisteners_eventname" id="events_emitter_removealllisteners_eventname">#</a></span></h3>
<p>Removes all listeners, or those of the specified <code>eventName</code>.</p>
<p>Note that it is bad practice to remove listeners added elsewhere in the code,
particularly when the <code>EventEmitter</code> instance was created by some other
component or module (e.g. sockets or file streams).</p>
<p>Returns a reference to the <code>EventEmitter</code> so calls can be chained.</p>
<h3>emitter.removeListener(eventName, listener)<span><a class="mark" href="#events_emitter_removelistener_eventname_listener" id="events_emitter_removelistener_eventname_listener">#</a></span></h3>
<p>Removes the specified <code>listener</code> from the listener array for the event named
<code>eventName</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">var</span> callback <span class="sh_symbol">=</span> <span class="sh_symbol">(</span>stream<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'someone connected!'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
server<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'connection'</span><span class="sh_symbol">,</span> callback<span class="sh_symbol">);</span>
<span class="sh_comment">// ...</span>
server<span class="sh_symbol">.</span><span class="sh_function">removeListener</span><span class="sh_symbol">(</span><span class="sh_string">'connection'</span><span class="sh_symbol">,</span> callback<span class="sh_symbol">);</span>
</code></pre>
<p><code>removeListener</code> will remove, at most, one instance of a listener from the
listener array. If any single listener has been added multiple times to the
listener array for the specified <code>eventName</code>, then <code>removeListener</code> must be
called multiple times to remove each instance.</p>
<p>Note that once an event has been emitted, all listeners attached to it at the
time of emitting will be called in order. This implies that any <code>removeListener()</code>
or <code>removeAllListeners()</code> calls <em>after</em> emitting and <em>before</em> the last listener
finishes execution will not remove them from <code>emit()</code> in progress. Subsequent
events will behave as expected.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> myEmitter <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">MyEmitter</span><span class="sh_symbol">();</span>

<span class="sh_keyword">var</span> callbackA <span class="sh_symbol">=</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'A'</span><span class="sh_symbol">);</span>
  myEmitter<span class="sh_symbol">.</span><span class="sh_function">removeListener</span><span class="sh_symbol">(</span><span class="sh_string">'event'</span><span class="sh_symbol">,</span> callbackB<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

<span class="sh_keyword">var</span> callbackB <span class="sh_symbol">=</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'B'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

myEmitter<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'event'</span><span class="sh_symbol">,</span> callbackA<span class="sh_symbol">);</span>

myEmitter<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'event'</span><span class="sh_symbol">,</span> callbackB<span class="sh_symbol">);</span>

<span class="sh_comment">// callbackA removes listener callbackB but it will still be called.</span>
<span class="sh_comment">// Internal listener array at time of emit [callbackA, callbackB]</span>
myEmitter<span class="sh_symbol">.</span><span class="sh_function">emit</span><span class="sh_symbol">(</span><span class="sh_string">'event'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints:</span>
  <span class="sh_comment">//   A</span>
  <span class="sh_comment">//   B</span>

<span class="sh_comment">// callbackB is now removed.</span>
<span class="sh_comment">// Internal listener array [callbackA]</span>
myEmitter<span class="sh_symbol">.</span><span class="sh_function">emit</span><span class="sh_symbol">(</span><span class="sh_string">'event'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints:</span>
  <span class="sh_comment">//   A</span>
</code></pre>
<p>Because listeners are managed using an internal array, calling this will
change the position indices of any listener registered <em>after</em> the listener
being removed. This will not impact the order in which listeners are called,
but it will means that any copies of the listener array as returned by
the <code>emitter.listeners()</code> method will need to be recreated.</p>
<p>Returns a reference to the <code>EventEmitter</code> so calls can be chained.</p>
<h3>emitter.setMaxListeners(n)<span><a class="mark" href="#events_emitter_setmaxlisteners_n" id="events_emitter_setmaxlisteners_n">#</a></span></h3>
<p>By default EventEmitters will print a warning if more than <code>10</code> listeners are
added for a particular event. This is a useful default that helps finding
memory leaks. Obviously, not all events should be limited to just 10 listeners.
The <code>emitter.setMaxListeners()</code> method allows the limit to be modified for this
specific <code>EventEmitter</code> instance. The value can be set to <code>Infinity</code> (or <code>0</code>)
for to indicate an unlimited number of listeners.</p>
<p>Returns a reference to the <code>EventEmitter</code> so calls can be chained.</p>
<!-- [end-include:events.md] -->
<!-- [start-include:fs.md] -->
<h1>File System<span><a class="mark" href="#fs_file_system" id="fs_file_system">#</a></span></h1>
<pre class="api_stability api_stability_2 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> Stable</pre><!--name=fs-->
<p>File I/O is provided by simple wrappers around standard POSIX functions.  To
use this module do <code>require('fs')</code>. All the methods have asynchronous and
synchronous forms.</p>
<p>The asynchronous form always takes a completion callback as its last argument.
The arguments passed to the completion callback depend on the method, but the
first argument is always reserved for an exception. If the operation was
completed successfully, then the first argument will be <code>null</code> or <code>undefined</code>.</p>
<p>When using the synchronous form any exceptions are immediately thrown.
You can use try/catch to handle exceptions or allow them to bubble up.</p>
<p>Here is an example of the asynchronous version:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> fs <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'fs'</span><span class="sh_symbol">);</span>

fs<span class="sh_symbol">.</span><span class="sh_function">unlink</span><span class="sh_symbol">(</span><span class="sh_string">'/tmp/hello'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_keyword">throw</span> err<span class="sh_symbol">;</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'successfully deleted /tmp/hello'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>Here is the synchronous version:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> fs <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'fs'</span><span class="sh_symbol">);</span>

fs<span class="sh_symbol">.</span><span class="sh_function">unlinkSync</span><span class="sh_symbol">(</span><span class="sh_string">'/tmp/hello'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'successfully deleted /tmp/hello'</span><span class="sh_symbol">);</span>
</code></pre>
<p>With the asynchronous methods there is no guaranteed ordering. So the
following is prone to error:</p>
<pre class="sh_sourceCode"><code class="lang-js">fs<span class="sh_symbol">.</span><span class="sh_function">rename</span><span class="sh_symbol">(</span><span class="sh_string">'/tmp/hello'</span><span class="sh_symbol">,</span> <span class="sh_string">'/tmp/world'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_keyword">throw</span> err<span class="sh_symbol">;</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'renamed complete'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
fs<span class="sh_symbol">.</span><span class="sh_function">stat</span><span class="sh_symbol">(</span><span class="sh_string">'/tmp/world'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">,</span> stats<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_keyword">throw</span> err<span class="sh_symbol">;</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`stats<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>JSON<span class="sh_symbol">.</span><span class="sh_function">stringify</span><span class="sh_symbol">(</span>stats<span class="sh_symbol">)</span><span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>It could be that <code>fs.stat</code> is executed before <code>fs.rename</code>.
The correct way to do this is to chain the callbacks.</p>
<pre class="sh_sourceCode"><code class="lang-js">fs<span class="sh_symbol">.</span><span class="sh_function">rename</span><span class="sh_symbol">(</span><span class="sh_string">'/tmp/hello'</span><span class="sh_symbol">,</span> <span class="sh_string">'/tmp/world'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_keyword">throw</span> err<span class="sh_symbol">;</span>
  fs<span class="sh_symbol">.</span><span class="sh_function">stat</span><span class="sh_symbol">(</span><span class="sh_string">'/tmp/world'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">,</span> stats<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_keyword">throw</span> err<span class="sh_symbol">;</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`stats<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>JSON<span class="sh_symbol">.</span><span class="sh_function">stringify</span><span class="sh_symbol">(</span>stats<span class="sh_symbol">)</span><span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>In busy processes, the programmer is <em>strongly encouraged</em> to use the
asynchronous versions of these calls. The synchronous versions will block
the entire process until they complete--halting all connections.</p>
<p>The relative path to a filename can be used. Remember, however, that this path
will be relative to <code>process.cwd()</code>.</p>
<p>Most fs functions let you omit the callback argument. If you do, a default
callback is used that rethrows errors. To get a trace to the original call
site, set the <code>NODE_DEBUG</code> environment variable:</p>
<pre class="sh_sourceCode"><code>$ cat script<span class="sh_symbol">.</span>js
<span class="sh_keyword">function</span> <span class="sh_function">bad</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'fs'</span><span class="sh_symbol">).</span><span class="sh_function">readFile</span><span class="sh_symbol">(</span><span class="sh_string">'/'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>
<span class="sh_function">bad</span><span class="sh_symbol">();</span>

$ env NODE_DEBUG<span class="sh_symbol">=</span>fs node script<span class="sh_symbol">.</span>js
fs<span class="sh_symbol">.</span>js<span class="sh_symbol">:</span><span class="sh_number">88</span>
        <span class="sh_keyword">throw</span> backtrace<span class="sh_symbol">;</span>
        <span class="sh_symbol">^</span>
<span class="sh_predef_func">Error</span><span class="sh_symbol">:</span> EISDIR<span class="sh_symbol">:</span> illegal operation on a directory<span class="sh_symbol">,</span> read
    <span class="sh_symbol">&lt;</span>stack trace<span class="sh_symbol">.&gt;</span>
</code></pre><h2>Buffer API<span><a class="mark" href="#fs_buffer_api" id="fs_buffer_api">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v6.0.0</span>
</div><p><code>fs</code> functions support passing and receiving paths as both strings
and Buffers. The latter is intended to make it possible to work with
filesystems that allow for non-UTF-8 filenames. For most typical
uses, working with paths as Buffers will be unnecessary, as the string
API converts to and from UTF-8 automatically.</p>
<p><em>Note</em> that on certain file systems (such as NTFS and HFS+) filenames
will always be encoded as UTF-8. On such file systems, passing
non-UTF-8 encoded Buffers to <code>fs</code> functions will not work as expected.</p>
<h2>Class: fs.FSWatcher<span><a class="mark" href="#fs_class_fs_fswatcher" id="fs_class_fs_fswatcher">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.8</span>
</div><p>Objects returned from <code>fs.watch()</code> are of this type.</p>
<h3>Event: 'change'<span><a class="mark" href="#fs_event_change" id="fs_event_change">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.5.8</span>
</div><ul>
<li><code>event</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The type of fs change</li>
<li><code>filename</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> The filename that changed (if relevant/available)</li>
</ul>
<p>Emitted when something changes in a watched directory or file.
See more details in <a href="#fs_fs_watch_filename_options_listener"><code>fs.watch()</code></a>.</p>
<p>The <code>filename</code> argument may not be provided depending on operating system
support. If <code>filename</code> is provided, it will be provided as a <code>Buffer</code> if
<code>fs.watch()</code> is called with it's <code>encoding</code> option set to <code>'buffer'</code>, otherwise
<code>filename</code> will be a string.</p>
<pre class="sh_sourceCode"><code class="lang-js">fs<span class="sh_symbol">.</span><span class="sh_function">watch</span><span class="sh_symbol">(</span><span class="sh_string">'./tmp'</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{</span>encoding<span class="sh_symbol">:</span> <span class="sh_string">'buffer'</span><span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>event<span class="sh_symbol">,</span> filename<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>filename<span class="sh_symbol">)</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>filename<span class="sh_symbol">);</span>
    <span class="sh_comment">// Prints: &lt;Buffer ...&gt;</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h3>Event: 'error'<span><a class="mark" href="#fs_event_error" id="fs_event_error">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.5.8</span>
</div><ul>
<li><code>error</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" class="type">&lt;Error&gt;</a></li>
</ul>
<p>Emitted when an error occurs.</p>
<h3>watcher.close()<span><a class="mark" href="#fs_watcher_close" id="fs_watcher_close">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.5.8</span>
</div><p>Stop watching for changes on the given <code>fs.FSWatcher</code>.</p>
<h2>Class: fs.ReadStream<span><a class="mark" href="#fs_class_fs_readstream" id="fs_class_fs_readstream">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.93</span>
</div><p><code>ReadStream</code> is a <a href="https://nodejs.org/api/stream.html#stream_class_stream_readable">Readable Stream</a>.</p>
<h3>Event: 'open'<span><a class="mark" href="#fs_event_open" id="fs_event_open">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.93</span>
</div><ul>
<li><code>fd</code> <span class="type">&lt;Integer&gt;</span> Integer file descriptor used by the ReadStream.</li>
</ul>
<p>Emitted when the ReadStream's file is opened.</p>
<h3>Event: 'close'<span><a class="mark" href="#fs_event_close" id="fs_event_close">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.93</span>
</div><p>Emitted when the <code>ReadStream</code>'s underlying file descriptor has been closed
using the <code>fs.close()</code> method.</p>
<h3>readStream.path<span><a class="mark" href="#fs_readstream_path" id="fs_readstream_path">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.93</span>
</div><p>The path to the file the stream is reading from as specified in the first
argument to <code>fs.createReadStream()</code>. If <code>path</code> is passed as a string, then
<code>readStream.path</code> will be a string. If <code>path</code> is passed as a <code>Buffer</code>, then
<code>readStream.path</code> will be a <code>Buffer</code>.</p>
<h2>Class: fs.Stats<span><a class="mark" href="#fs_class_fs_stats" id="fs_class_fs_stats">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.21</span>
</div><p>Objects returned from <a href="#fs_fs_stat_path_callback"><code>fs.stat()</code></a>, <a href="#fs_fs_lstat_path_callback"><code>fs.lstat()</code></a> and <a href="#fs_fs_fstat_fd_callback"><code>fs.fstat()</code></a> and their
synchronous counterparts are of this type.</p>
<ul>
<li><code>stats.isFile()</code></li>
<li><code>stats.isDirectory()</code></li>
<li><code>stats.isBlockDevice()</code></li>
<li><code>stats.isCharacterDevice()</code></li>
<li><code>stats.isSymbolicLink()</code> (only valid with <a href="#fs_fs_lstat_path_callback"><code>fs.lstat()</code></a>)</li>
<li><code>stats.isFIFO()</code></li>
<li><code>stats.isSocket()</code></li>
</ul>
<p>For a regular file <a href="https://nodejs.org/api/util.html#util_util_inspect_object_options"><code>util.inspect(stats)</code></a> would return a string very
similar to this:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_cbracket">{</span>
  dev<span class="sh_symbol">:</span> <span class="sh_number">2114</span><span class="sh_symbol">,</span>
  ino<span class="sh_symbol">:</span> <span class="sh_number">48064969</span><span class="sh_symbol">,</span>
  mode<span class="sh_symbol">:</span> <span class="sh_number">33188</span><span class="sh_symbol">,</span>
  nlink<span class="sh_symbol">:</span> <span class="sh_number">1</span><span class="sh_symbol">,</span>
  uid<span class="sh_symbol">:</span> <span class="sh_number">85</span><span class="sh_symbol">,</span>
  gid<span class="sh_symbol">:</span> <span class="sh_number">100</span><span class="sh_symbol">,</span>
  rdev<span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">,</span>
  size<span class="sh_symbol">:</span> <span class="sh_number">527</span><span class="sh_symbol">,</span>
  blksize<span class="sh_symbol">:</span> <span class="sh_number">4096</span><span class="sh_symbol">,</span>
  blocks<span class="sh_symbol">:</span> <span class="sh_number">8</span><span class="sh_symbol">,</span>
  atime<span class="sh_symbol">:</span> Mon<span class="sh_symbol">,</span> <span class="sh_number">10</span> Oct <span class="sh_number">2011</span> <span class="sh_number">23</span><span class="sh_symbol">:</span><span class="sh_number">24</span><span class="sh_symbol">:</span><span class="sh_number">11</span> GMT<span class="sh_symbol">,</span>
  mtime<span class="sh_symbol">:</span> Mon<span class="sh_symbol">,</span> <span class="sh_number">10</span> Oct <span class="sh_number">2011</span> <span class="sh_number">23</span><span class="sh_symbol">:</span><span class="sh_number">24</span><span class="sh_symbol">:</span><span class="sh_number">11</span> GMT<span class="sh_symbol">,</span>
  ctime<span class="sh_symbol">:</span> Mon<span class="sh_symbol">,</span> <span class="sh_number">10</span> Oct <span class="sh_number">2011</span> <span class="sh_number">23</span><span class="sh_symbol">:</span><span class="sh_number">24</span><span class="sh_symbol">:</span><span class="sh_number">11</span> GMT<span class="sh_symbol">,</span>
  birthtime<span class="sh_symbol">:</span> Mon<span class="sh_symbol">,</span> <span class="sh_number">10</span> Oct <span class="sh_number">2011</span> <span class="sh_number">23</span><span class="sh_symbol">:</span><span class="sh_number">24</span><span class="sh_symbol">:</span><span class="sh_number">11</span> GMT
<span class="sh_cbracket">}</span>
</code></pre>
<p>Please note that <code>atime</code>, <code>mtime</code>, <code>birthtime</code>, and <code>ctime</code> are
instances of <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date"><code>Date</code></a> object and to compare the values of
these objects you should use appropriate methods. For most general
uses <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date/getTime"><code>getTime()</code></a> will return the number of
milliseconds elapsed since <em>1 January 1970 00:00:00 UTC</em> and this
integer should be sufficient for any comparison, however there are
additional methods which can be used for displaying fuzzy information.
More details can be found in the <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date">MDN JavaScript Reference</a>
page.</p>
<h3>Stat Time Values<span><a class="mark" href="#fs_stat_time_values" id="fs_stat_time_values">#</a></span></h3>
<p>The times in the stat object have the following semantics:</p>
<ul>
<li><code>atime</code> "Access Time" - Time when file data last accessed.  Changed
by the <code>mknod(2)</code>, <code>utimes(2)</code>, and <code>read(2)</code> system calls.</li>
<li><code>mtime</code> "Modified Time" - Time when file data last modified.
Changed by the <code>mknod(2)</code>, <code>utimes(2)</code>, and <code>write(2)</code> system calls.</li>
<li><code>ctime</code> "Change Time" - Time when file status was last changed
(inode data modification).  Changed by the <code>chmod(2)</code>, <code>chown(2)</code>,
<code>link(2)</code>, <code>mknod(2)</code>, <code>rename(2)</code>, <code>unlink(2)</code>, <code>utimes(2)</code>,
<code>read(2)</code>, and <code>write(2)</code> system calls.</li>
<li><code>birthtime</code> "Birth Time" -  Time of file creation. Set once when the
file is created.  On filesystems where birthtime is not available,
this field may instead hold either the <code>ctime</code> or
<code>1970-01-01T00:00Z</code> (ie, unix epoch timestamp <code>0</code>). Note that this
value may be greater than <code>atime</code> or <code>mtime</code> in this case. On Darwin
and other FreeBSD variants, also set if the <code>atime</code> is explicitly
set to an earlier value than the current <code>birthtime</code> using the
<code>utimes(2)</code> system call.</li>
</ul>
<p>Prior to Node v0.12, the <code>ctime</code> held the <code>birthtime</code> on Windows
systems.  Note that as of v0.12, <code>ctime</code> is not "creation time", and
on Unix systems, it never was.</p>
<h2>Class: fs.WriteStream<span><a class="mark" href="#fs_class_fs_writestream" id="fs_class_fs_writestream">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.93</span>
</div><p><code>WriteStream</code> is a <a href="https://nodejs.org/api/stream.html#stream_class_stream_writable">Writable Stream</a>.</p>
<h3>Event: 'open'<span><a class="mark" href="#fs_event_open_1" id="fs_event_open_1">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.93</span>
</div><ul>
<li><code>fd</code> <span class="type">&lt;Integer&gt;</span> Integer file descriptor used by the WriteStream.</li>
</ul>
<p>Emitted when the WriteStream's file is opened.</p>
<h3>Event: 'close'<span><a class="mark" href="#fs_event_close_1" id="fs_event_close_1">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.93</span>
</div><p>Emitted when the <code>WriteStream</code>'s underlying file descriptor has been closed
using the <code>fs.close()</code> method.</p>
<h3>writeStream.bytesWritten<span><a class="mark" href="#fs_writestream_byteswritten" id="fs_writestream_byteswritten">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.4.7</span>
</div><p>The number of bytes written so far. Does not include data that is still queued
for writing.</p>
<h3>writeStream.path<span><a class="mark" href="#fs_writestream_path" id="fs_writestream_path">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.93</span>
</div><p>The path to the file the stream is writing to as specified in the first
argument to <code>fs.createWriteStream()</code>. If <code>path</code> is passed as a string, then
<code>writeStream.path</code> will be a string. If <code>path</code> is passed as a <code>Buffer</code>, then
<code>writeStream.path</code> will be a <code>Buffer</code>.</p>
<h2>fs.access(path[, mode], callback)<span><a class="mark" href="#fs_fs_access_path_mode_callback" id="fs_fs_access_path_mode_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v1.0.0</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>mode</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Tests a user's permissions for the file specified by <code>path</code>. <code>mode</code> is an
optional integer that specifies the accessibility checks to be performed. The
following constants define the possible values of <code>mode</code>. It is possible to
create a mask consisting of the bitwise OR of two or more values.</p>
<ul>
<li><code>fs.F_OK</code> - File is visible to the calling process. This is useful for
determining if a file exists, but says nothing about <code>rwx</code> permissions.
Default if no <code>mode</code> is specified.</li>
<li><code>fs.R_OK</code> - File can be read by the calling process.</li>
<li><code>fs.W_OK</code> - File can be written by the calling process.</li>
<li><code>fs.X_OK</code> - File can be executed by the calling process. This has no effect
on Windows (will behave like <code>fs.F_OK</code>).</li>
</ul>
<p>The final argument, <code>callback</code>, is a callback function that is invoked with
a possible error argument. If any of the accessibility checks fail, the error
argument will be populated. The following example checks if the file
<code>/etc/passwd</code> can be read and written by the current process.</p>
<pre class="sh_sourceCode"><code class="lang-js">fs<span class="sh_symbol">.</span><span class="sh_function">access</span><span class="sh_symbol">(</span><span class="sh_string">'/etc/passwd'</span><span class="sh_symbol">,</span> fs<span class="sh_symbol">.</span>R_OK <span class="sh_symbol">|</span> fs<span class="sh_symbol">.</span>W_OK<span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>err <span class="sh_symbol">?</span> <span class="sh_string">'no access!'</span> <span class="sh_symbol">:</span> <span class="sh_string">'can read/write'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h2>fs.accessSync(path[, mode])<span><a class="mark" href="#fs_fs_accesssync_path_mode" id="fs_fs_accesssync_path_mode">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.93</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>mode</code> <span class="type">&lt;Integer&gt;</span></li>
</ul>
<p>Synchronous version of <a href="#fs_fs_access_path_mode_callback"><code>fs.access()</code></a>. This throws if any accessibility checks
fail, and does nothing otherwise.</p>
<h2>fs.appendFile(file, data[, options], callback)<span><a class="mark" href="#fs_fs_appendfile_file_data_options_callback" id="fs_fs_appendfile_file_data_options_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.6.7</span>
</div><ul>
<li><code>file</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> filename or file descriptor</li>
<li><code>data</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a><ul>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type" class="type">&lt;Null&gt;</a> default = <code>'utf8'</code></li>
<li><code>mode</code> <span class="type">&lt;Integer&gt;</span> default = <code>0o666</code></li>
<li><code>flag</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> default = <code>'a'</code></li>
</ul>
</li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Asynchronously append data to a file, creating the file if it does not yet exist.
<code>data</code> can be a string or a buffer.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js">fs<span class="sh_symbol">.</span><span class="sh_function">appendFile</span><span class="sh_symbol">(</span><span class="sh_string">'message.txt'</span><span class="sh_symbol">,</span> <span class="sh_string">'data to append'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_keyword">throw</span> err<span class="sh_symbol">;</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'The "data to append" was appended to file!'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>If <code>options</code> is a string, then it specifies the encoding. Example:</p>
<pre class="sh_sourceCode"><code class="lang-js">fs<span class="sh_symbol">.</span><span class="sh_function">appendFile</span><span class="sh_symbol">(</span><span class="sh_string">'message.txt'</span><span class="sh_symbol">,</span> <span class="sh_string">'data to append'</span><span class="sh_symbol">,</span> <span class="sh_string">'utf8'</span><span class="sh_symbol">,</span> callback<span class="sh_symbol">);</span>
</code></pre>
<p>Any specified file descriptor has to have been opened for appending.</p>
<p><em>Note: Specified file descriptors will not be closed automatically.</em></p>
<h2>fs.appendFileSync(file, data[, options])<span><a class="mark" href="#fs_fs_appendfilesync_file_data_options" id="fs_fs_appendfilesync_file_data_options">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.6.7</span>
</div><ul>
<li><code>file</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> filename or file descriptor</li>
<li><code>data</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a><ul>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type" class="type">&lt;Null&gt;</a> default = <code>'utf8'</code></li>
<li><code>mode</code> <span class="type">&lt;Integer&gt;</span> default = <code>0o666</code></li>
<li><code>flag</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> default = <code>'a'</code></li>
</ul>
</li>
</ul>
<p>The synchronous version of <a href="https://nodejs.org/api/fs.html#fs_fs_appendfile_file_data_options_callback"><code>fs.appendFile()</code></a>. Returns <code>undefined</code>.</p>
<h2>fs.chmod(path, mode, callback)<span><a class="mark" href="#fs_fs_chmod_path_mode_callback" id="fs_fs_chmod_path_mode_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.30</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>mode</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Asynchronous <a href="http://man7.org/linux/man-pages/man2/chmod.2.html">chmod(2)</a>. No arguments other than a possible exception are given
to the completion callback.</p>
<h2>fs.chmodSync(path, mode)<span><a class="mark" href="#fs_fs_chmodsync_path_mode" id="fs_fs_chmodsync_path_mode">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.6.7</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>mode</code> <span class="type">&lt;Integer&gt;</span></li>
</ul>
<p>Synchronous <a href="http://man7.org/linux/man-pages/man2/chmod.2.html">chmod(2)</a>. Returns <code>undefined</code>.</p>
<h2>fs.chown(path, uid, gid, callback)<span><a class="mark" href="#fs_fs_chown_path_uid_gid_callback" id="fs_fs_chown_path_uid_gid_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.97</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>uid</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>gid</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Asynchronous <a href="http://man7.org/linux/man-pages/man2/chown.2.html">chown(2)</a>. No arguments other than a possible exception are given
to the completion callback.</p>
<h2>fs.chownSync(path, uid, gid)<span><a class="mark" href="#fs_fs_chownsync_path_uid_gid" id="fs_fs_chownsync_path_uid_gid">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.97</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>uid</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>gid</code> <span class="type">&lt;Integer&gt;</span></li>
</ul>
<p>Synchronous <a href="http://man7.org/linux/man-pages/man2/chown.2.html">chown(2)</a>. Returns <code>undefined</code>.</p>
<h2>fs.close(fd, callback)<span><a class="mark" href="#fs_fs_close_fd_callback" id="fs_fs_close_fd_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.0.2</span>
</div><ul>
<li><code>fd</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Asynchronous <a href="http://man7.org/linux/man-pages/man2/close.2.html">close(2)</a>.  No arguments other than a possible exception are given
to the completion callback.</p>
<h2>fs.closeSync(fd)<span><a class="mark" href="#fs_fs_closesync_fd" id="fs_fs_closesync_fd">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.21</span>
</div><ul>
<li><code>fd</code> <span class="type">&lt;Integer&gt;</span></li>
</ul>
<p>Synchronous <a href="http://man7.org/linux/man-pages/man2/close.2.html">close(2)</a>. Returns <code>undefined</code>.</p>
<h2>fs.createReadStream(path[, options])<span><a class="mark" href="#fs_fs_createreadstream_path_options" id="fs_fs_createreadstream_path_options">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.31</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>flags</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
<li><code>fd</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>mode</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>autoClose</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a></li>
<li><code>start</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>end</code> <span class="type">&lt;Integer&gt;</span></li>
</ul>
</li>
</ul>
<p>Returns a new <a href="#fs_class_fs_readstream"><code>ReadStream</code></a> object. (See <a href="https://nodejs.org/api/stream.html#stream_class_stream_readable">Readable Stream</a>).</p>
<p>Be aware that, unlike the default value set for <code>highWaterMark</code> on a
readable stream (16 kb), the stream returned by this method has a
default value of 64 kb for the same parameter.</p>
<p><code>options</code> is an object or string with the following defaults:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_cbracket">{</span>
  flags<span class="sh_symbol">:</span> <span class="sh_string">'r'</span><span class="sh_symbol">,</span>
  encoding<span class="sh_symbol">:</span> <span class="sh_keyword">null</span><span class="sh_symbol">,</span>
  fd<span class="sh_symbol">:</span> <span class="sh_keyword">null</span><span class="sh_symbol">,</span>
  mode<span class="sh_symbol">:</span> 0o666<span class="sh_symbol">,</span>
  autoClose<span class="sh_symbol">:</span> <span class="sh_keyword">true</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p><code>options</code> can include <code>start</code> and <code>end</code> values to read a range of bytes from
the file instead of the entire file.  Both <code>start</code> and <code>end</code> are inclusive and
start at 0. The <code>encoding</code> can be any one of those accepted by <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a>.</p>
<p>If <code>fd</code> is specified, <code>ReadStream</code> will ignore the <code>path</code> argument and will use
the specified file descriptor. This means that no <code>'open'</code> event will be emitted.
Note that <code>fd</code> should be blocking; non-blocking <code>fd</code>s should be passed to
<a href="https://nodejs.org/api/net.html#net_class_net_socket"><code>net.Socket</code></a>.</p>
<p>If <code>autoClose</code> is false, then the file descriptor won't be closed, even if
there's an error.  It is your responsibility to close it and make sure
there's no file descriptor leak.  If <code>autoClose</code> is set to true (default
behavior), on <code>error</code> or <code>end</code> the file descriptor will be closed
automatically.</p>
<p><code>mode</code> sets the file mode (permission and sticky bits), but only if the
file was created.</p>
<p>An example to read the last 10 bytes of a file which is 100 bytes long:</p>
<pre class="sh_sourceCode"><code class="lang-js">fs<span class="sh_symbol">.</span><span class="sh_function">createReadStream</span><span class="sh_symbol">(</span><span class="sh_string">'sample.txt'</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{</span>start<span class="sh_symbol">:</span> <span class="sh_number">90</span><span class="sh_symbol">,</span> end<span class="sh_symbol">:</span> <span class="sh_number">99</span><span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>If <code>options</code> is a string, then it specifies the encoding.</p>
<h2>fs.createWriteStream(path[, options])<span><a class="mark" href="#fs_fs_createwritestream_path_options" id="fs_fs_createwritestream_path_options">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.31</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>flags</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
<li><code>defaultEncoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
<li><code>fd</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>mode</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>autoClose</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a></li>
<li><code>start</code> <span class="type">&lt;Integer&gt;</span></li>
</ul>
</li>
</ul>
<p>Returns a new <a href="#fs_class_fs_writestream"><code>WriteStream</code></a> object. (See <a href="https://nodejs.org/api/stream.html#stream_class_stream_writable">Writable Stream</a>).</p>
<p><code>options</code> is an object or string with the following defaults:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_cbracket">{</span>
  flags<span class="sh_symbol">:</span> <span class="sh_string">'w'</span><span class="sh_symbol">,</span>
  defaultEncoding<span class="sh_symbol">:</span> <span class="sh_string">'utf8'</span><span class="sh_symbol">,</span>
  fd<span class="sh_symbol">:</span> <span class="sh_keyword">null</span><span class="sh_symbol">,</span>
  mode<span class="sh_symbol">:</span> 0o666<span class="sh_symbol">,</span>
  autoClose<span class="sh_symbol">:</span> <span class="sh_keyword">true</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p><code>options</code> may also include a <code>start</code> option to allow writing data at
some position past the beginning of the file.  Modifying a file rather
than replacing it may require a <code>flags</code> mode of <code>r+</code> rather than the
default mode <code>w</code>. The <code>defaultEncoding</code> can be any one of those accepted by <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a>.</p>
<p>If <code>autoClose</code> is set to true (default behavior) on <code>error</code> or <code>end</code>
the file descriptor will be closed automatically. If <code>autoClose</code> is false,
then the file descriptor won't be closed, even if there's an error.
It is your responsibility to close it and make sure
there's no file descriptor leak.</p>
<p>Like <a href="#fs_class_fs_readstream"><code>ReadStream</code></a>, if <code>fd</code> is specified, <code>WriteStream</code> will ignore the
<code>path</code> argument and will use the specified file descriptor. This means that no
<code>'open'</code> event will be emitted. Note that <code>fd</code> should be blocking; non-blocking
<code>fd</code>s should be passed to <a href="https://nodejs.org/api/net.html#net_class_net_socket"><code>net.Socket</code></a>.</p>
<p>If <code>options</code> is a string, then it specifies the encoding.</p>
<h2>fs.exists(path, callback)<span><a class="mark" href="#fs_fs_exists_path_callback" id="fs_fs_exists_path_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.0.2</span>
<span>Deprecated since: v1.0.0 </span>
</div><pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated<span class="sh_symbol">:</span> Use <a href="#fs_fs_stat_path_callback"><code>fs<span class="sh_symbol">.</span><span class="sh_function">stat</span><span class="sh_symbol">()</span></code></a> or <a href="#fs_fs_access_path_mode_callback"><code>fs<span class="sh_symbol">.</span><span class="sh_function">access</span><span class="sh_symbol">()</span></code></a> instead<span class="sh_symbol">.</span></pre><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Test whether or not the given path exists by checking with the file system.
Then call the <code>callback</code> argument with either true or false.  Example:</p>
<pre class="sh_sourceCode"><code class="lang-js">fs<span class="sh_symbol">.</span><span class="sh_function">exists</span><span class="sh_symbol">(</span><span class="sh_string">'/etc/passwd'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>exists<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>exists <span class="sh_symbol">?</span> <span class="sh_string">'it</span><span class="sh_specialchar">\'</span><span class="sh_string">s there'</span> <span class="sh_symbol">:</span> <span class="sh_string">'no passwd!'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p><code>fs.exists()</code> should not be used to check if a file exists before calling
<code>fs.open()</code>. Doing so introduces a race condition since other processes may
change the file's state between the two calls. Instead, user code should
call <code>fs.open()</code> directly and handle the error raised if the file is
non-existent.</p>
<h2>fs.existsSync(path)<span><a class="mark" href="#fs_fs_existssync_path" id="fs_fs_existssync_path">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.21</span>
<span>Deprecated since: v1.0.0 </span>
</div><pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated<span class="sh_symbol">:</span> Use <a href="#fs_fs_statsync_path"><code>fs<span class="sh_symbol">.</span><span class="sh_function">statSync</span><span class="sh_symbol">()</span></code></a> or <a href="#fs_fs_accesssync_path_mode"><code>fs<span class="sh_symbol">.</span><span class="sh_function">accessSync</span><span class="sh_symbol">()</span></code></a> instead<span class="sh_symbol">.</span></pre><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
</ul>
<p>Synchronous version of <a href="https://nodejs.org/api/fs.html#fs_fs_exists_path_callback"><code>fs.exists()</code></a>.
Returns <code>true</code> if the file exists, <code>false</code> otherwise.</p>
<h2>fs.fchmod(fd, mode, callback)<span><a class="mark" href="#fs_fs_fchmod_fd_mode_callback" id="fs_fs_fchmod_fd_mode_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.4.7</span>
</div><ul>
<li><code>fd</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>mode</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Asynchronous <a href="http://man7.org/linux/man-pages/man2/fchmod.2.html">fchmod(2)</a>. No arguments other than a possible exception
are given to the completion callback.</p>
<h2>fs.fchmodSync(fd, mode)<span><a class="mark" href="#fs_fs_fchmodsync_fd_mode" id="fs_fs_fchmodsync_fd_mode">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.4.7</span>
</div><ul>
<li><code>fd</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>mode</code> <span class="type">&lt;Integer&gt;</span></li>
</ul>
<p>Synchronous <a href="http://man7.org/linux/man-pages/man2/fchmod.2.html">fchmod(2)</a>. Returns <code>undefined</code>.</p>
<h2>fs.fchown(fd, uid, gid, callback)<span><a class="mark" href="#fs_fs_fchown_fd_uid_gid_callback" id="fs_fs_fchown_fd_uid_gid_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.4.7</span>
</div><ul>
<li><code>fd</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>uid</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>gid</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Asynchronous <a href="http://man7.org/linux/man-pages/man2/fchown.2.html">fchown(2)</a>. No arguments other than a possible exception are given
to the completion callback.</p>
<h2>fs.fchownSync(fd, uid, gid)<span><a class="mark" href="#fs_fs_fchownsync_fd_uid_gid" id="fs_fs_fchownsync_fd_uid_gid">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.4.7</span>
</div><ul>
<li><code>fd</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>uid</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>gid</code> <span class="type">&lt;Integer&gt;</span></li>
</ul>
<p>Synchronous <a href="http://man7.org/linux/man-pages/man2/fchown.2.html">fchown(2)</a>. Returns <code>undefined</code>.</p>
<h2>fs.fdatasync(fd, callback)<span><a class="mark" href="#fs_fs_fdatasync_fd_callback" id="fs_fs_fdatasync_fd_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.96</span>
</div><ul>
<li><code>fd</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Asynchronous <a href="http://man7.org/linux/man-pages/man2/fdatasync.2.html">fdatasync(2)</a>. No arguments other than a possible exception are
given to the completion callback.</p>
<h2>fs.fdatasyncSync(fd)<span><a class="mark" href="#fs_fs_fdatasyncsync_fd" id="fs_fs_fdatasyncsync_fd">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.96</span>
</div><ul>
<li><code>fd</code> <span class="type">&lt;Integer&gt;</span></li>
</ul>
<p>Synchronous <a href="http://man7.org/linux/man-pages/man2/fdatasync.2.html">fdatasync(2)</a>. Returns <code>undefined</code>.</p>
<h2>fs.fstat(fd, callback)<span><a class="mark" href="#fs_fs_fstat_fd_callback" id="fs_fs_fstat_fd_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.95</span>
</div><ul>
<li><code>fd</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Asynchronous <a href="http://man7.org/linux/man-pages/man2/fstat.2.html">fstat(2)</a>. The callback gets two arguments <code>(err, stats)</code> where
<code>stats</code> is a <a href="#fs_class_fs_stats"><code>fs.Stats</code></a> object. <code>fstat()</code> is identical to <a href="https://nodejs.org/api/fs.html#fs_fs_stat_path_callback"><code>stat()</code></a>,
except that the file to be stat-ed is specified by the file descriptor <code>fd</code>.</p>
<h2>fs.fstatSync(fd)<span><a class="mark" href="#fs_fs_fstatsync_fd" id="fs_fs_fstatsync_fd">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.95</span>
</div><ul>
<li><code>fd</code> <span class="type">&lt;Integer&gt;</span></li>
</ul>
<p>Synchronous <a href="http://man7.org/linux/man-pages/man2/fstat.2.html">fstat(2)</a>. Returns an instance of <code>fs.Stats</code>.</p>
<h2>fs.fsync(fd, callback)<span><a class="mark" href="#fs_fs_fsync_fd_callback" id="fs_fs_fsync_fd_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.96</span>
</div><ul>
<li><code>fd</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Asynchronous <a href="http://man7.org/linux/man-pages/man2/fsync.2.html">fsync(2)</a>. No arguments other than a possible exception are given
to the completion callback.</p>
<h2>fs.fsyncSync(fd)<span><a class="mark" href="#fs_fs_fsyncsync_fd" id="fs_fs_fsyncsync_fd">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.96</span>
</div><ul>
<li><code>fd</code> <span class="type">&lt;Integer&gt;</span></li>
</ul>
<p>Synchronous <a href="http://man7.org/linux/man-pages/man2/fsync.2.html">fsync(2)</a>. Returns <code>undefined</code>.</p>
<h2>fs.ftruncate(fd, len, callback)<span><a class="mark" href="#fs_fs_ftruncate_fd_len_callback" id="fs_fs_ftruncate_fd_len_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.8.6</span>
</div><ul>
<li><code>fd</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>len</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Asynchronous <a href="http://man7.org/linux/man-pages/man2/ftruncate.2.html">ftruncate(2)</a>. No arguments other than a possible exception are
given to the completion callback.</p>
<h2>fs.ftruncateSync(fd, len)<span><a class="mark" href="#fs_fs_ftruncatesync_fd_len" id="fs_fs_ftruncatesync_fd_len">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.8.6</span>
</div><ul>
<li><code>fd</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>len</code> <span class="type">&lt;Integer&gt;</span></li>
</ul>
<p>Synchronous <a href="http://man7.org/linux/man-pages/man2/ftruncate.2.html">ftruncate(2)</a>. Returns <code>undefined</code>.</p>
<h2>fs.futimes(fd, atime, mtime, callback)<span><a class="mark" href="#fs_fs_futimes_fd_atime_mtime_callback" id="fs_fs_futimes_fd_atime_mtime_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.4.2</span>
</div><ul>
<li><code>fd</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>atime</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>mtime</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Change the file timestamps of a file referenced by the supplied file
descriptor.</p>
<h2>fs.futimesSync(fd, atime, mtime)<span><a class="mark" href="#fs_fs_futimessync_fd_atime_mtime" id="fs_fs_futimessync_fd_atime_mtime">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.4.2</span>
</div><ul>
<li><code>fd</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>atime</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>mtime</code> <span class="type">&lt;Integer&gt;</span></li>
</ul>
<p>Synchronous version of <a href="#fs_fs_futimes_fd_atime_mtime_callback"><code>fs.futimes()</code></a>. Returns <code>undefined</code>.</p>
<h2>fs.lchmod(path, mode, callback)<span><a class="mark" href="#fs_fs_lchmod_path_mode_callback" id="fs_fs_lchmod_path_mode_callback">#</a></span></h2>
<div class="api_metadata">
<span>Deprecated since: v0.4.7 </span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>mode</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Asynchronous <a href="https://www.freebsd.org/cgi/man.cgi?query=lchmod&amp;sektion=2">lchmod(2)</a>. No arguments other than a possible exception
are given to the completion callback.</p>
<p>Only available on Mac OS X.</p>
<h2>fs.lchmodSync(path, mode)<span><a class="mark" href="#fs_fs_lchmodsync_path_mode" id="fs_fs_lchmodsync_path_mode">#</a></span></h2>
<div class="api_metadata">
<span>Deprecated since: v0.4.7 </span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>mode</code> <span class="type">&lt;Integer&gt;</span></li>
</ul>
<p>Synchronous <a href="https://www.freebsd.org/cgi/man.cgi?query=lchmod&amp;sektion=2">lchmod(2)</a>. Returns <code>undefined</code>.</p>
<h2>fs.lchown(path, uid, gid, callback)<span><a class="mark" href="#fs_fs_lchown_path_uid_gid_callback" id="fs_fs_lchown_path_uid_gid_callback">#</a></span></h2>
<div class="api_metadata">
<span>Deprecated since: v0.4.7 </span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>uid</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>gid</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Asynchronous <a href="http://man7.org/linux/man-pages/man2/lchown.2.html">lchown(2)</a>. No arguments other than a possible exception are given
to the completion callback.</p>
<h2>fs.lchownSync(path, uid, gid)<span><a class="mark" href="#fs_fs_lchownsync_path_uid_gid" id="fs_fs_lchownsync_path_uid_gid">#</a></span></h2>
<div class="api_metadata">
<span>Deprecated since: v0.4.7 </span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>uid</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>gid</code> <span class="type">&lt;Integer&gt;</span></li>
</ul>
<p>Synchronous <a href="http://man7.org/linux/man-pages/man2/lchown.2.html">lchown(2)</a>. Returns <code>undefined</code>.</p>
<h2>fs.link(srcpath, dstpath, callback)<span><a class="mark" href="#fs_fs_link_srcpath_dstpath_callback" id="fs_fs_link_srcpath_dstpath_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.31</span>
</div><ul>
<li><code>srcpath</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>dstpath</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Asynchronous <a href="http://man7.org/linux/man-pages/man2/link.2.html">link(2)</a>. No arguments other than a possible exception are given to
the completion callback.</p>
<h2>fs.linkSync(srcpath, dstpath)<span><a class="mark" href="#fs_fs_linksync_srcpath_dstpath" id="fs_fs_linksync_srcpath_dstpath">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.31</span>
</div><ul>
<li><code>srcpath</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>dstpath</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
</ul>
<p>Synchronous <a href="http://man7.org/linux/man-pages/man2/link.2.html">link(2)</a>. Returns <code>undefined</code>.</p>
<h2>fs.lstat(path, callback)<span><a class="mark" href="#fs_fs_lstat_path_callback" id="fs_fs_lstat_path_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.30</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Asynchronous <a href="http://man7.org/linux/man-pages/man2/lstat.2.html">lstat(2)</a>. The callback gets two arguments <code>(err, stats)</code> where
<code>stats</code> is a <a href="#fs_class_fs_stats"><code>fs.Stats</code></a> object. <code>lstat()</code> is identical to <code>stat()</code>,
except that if <code>path</code> is a symbolic link, then the link itself is stat-ed,
not the file that it refers to.</p>
<h2>fs.lstatSync(path)<span><a class="mark" href="#fs_fs_lstatsync_path" id="fs_fs_lstatsync_path">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.30</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
</ul>
<p>Synchronous <a href="http://man7.org/linux/man-pages/man2/lstat.2.html">lstat(2)</a>. Returns an instance of <code>fs.Stats</code>.</p>
<h2>fs.mkdir(path[, mode], callback)<span><a class="mark" href="#fs_fs_mkdir_path_mode_callback" id="fs_fs_mkdir_path_mode_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.8</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>mode</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Asynchronous <a href="http://man7.org/linux/man-pages/man2/mkdir.2.html">mkdir(2)</a>. No arguments other than a possible exception are given
to the completion callback. <code>mode</code> defaults to <code>0o777</code>.</p>
<h2>fs.mkdirSync(path[, mode])<span><a class="mark" href="#fs_fs_mkdirsync_path_mode" id="fs_fs_mkdirsync_path_mode">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.21</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>mode</code> <span class="type">&lt;Integer&gt;</span></li>
</ul>
<p>Synchronous <a href="http://man7.org/linux/man-pages/man2/mkdir.2.html">mkdir(2)</a>. Returns <code>undefined</code>.</p>
<h2>fs.mkdtemp(prefix, callback)<span><a class="mark" href="#fs_fs_mkdtemp_prefix_callback" id="fs_fs_mkdtemp_prefix_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v5.10.0</span>
</div><p>Creates a unique temporary directory.</p>
<p>Generates six random characters to be appended behind a required
<code>prefix</code> to create a unique temporary directory.</p>
<p>The created folder path is passed as a string to the callback's second
parameter.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js">fs<span class="sh_symbol">.</span><span class="sh_function">mkdtemp</span><span class="sh_symbol">(</span><span class="sh_string">'/tmp/foo-'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">,</span> folder<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>folder<span class="sh_symbol">);</span>
    <span class="sh_comment">// Prints: /tmp/foo-itXde2</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p><em>Note</em>: The <code>fs.mkdtemp()</code> method will append the six randomly selected
characters directly to the <code>prefix</code> string. For instance, given a directory
<code>/tmp</code>, if the intention is to create a temporary directory <em>within</em> <code>/tmp</code>,
the <code>prefix</code> <em>must</em> end with a trailing platform-specific path separator
(<code>require('path').sep</code>).</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// The parent directory for the new temporary directory</span>
<span class="sh_keyword">const</span> tmpDir <span class="sh_symbol">=</span> <span class="sh_string">'/tmp'</span><span class="sh_symbol">;</span>

<span class="sh_comment">// This method is *INCORRECT*:</span>
fs<span class="sh_symbol">.</span><span class="sh_function">mkdtemp</span><span class="sh_symbol">(</span>tmpDir<span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">,</span> folder<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_keyword">throw</span> err<span class="sh_symbol">;</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>folder<span class="sh_symbol">);</span>
    <span class="sh_comment">// Will print something similar to `/tmpabc123`.</span>
    <span class="sh_comment">// Note that a new temporary directory is created</span>
    <span class="sh_comment">// at the file system root rather than *within*</span>
    <span class="sh_comment">// the /tmp directory.</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_comment">// This method is *CORRECT*:</span>
<span class="sh_keyword">const</span> path <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'path'</span><span class="sh_symbol">);</span>
fs<span class="sh_symbol">.</span><span class="sh_function">mkdtemp</span><span class="sh_symbol">(</span>tmpDir <span class="sh_symbol">+</span> path<span class="sh_symbol">.</span>sep<span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">,</span> folder<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_keyword">throw</span> err<span class="sh_symbol">;</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>folder<span class="sh_symbol">);</span>
    <span class="sh_comment">// Will print something similar to `/tmp/abc123`.</span>
    <span class="sh_comment">// A new temporary directory is created within</span>
    <span class="sh_comment">// the /tmp directory.</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h2>fs.mkdtempSync(prefix)<span><a class="mark" href="#fs_fs_mkdtempsync_prefix" id="fs_fs_mkdtempsync_prefix">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v5.10.0</span>
</div><p>The synchronous version of <a href="#fs_fs_mkdtemp_prefix_callback"><code>fs.mkdtemp()</code></a>. Returns the created
folder path.</p>
<h2>fs.open(path, flags[, mode], callback)<span><a class="mark" href="#fs_fs_open_path_flags_mode_callback" id="fs_fs_open_path_flags_mode_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.0.2</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>flags</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
<li><code>mode</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Asynchronous file open. See <a href="http://man7.org/linux/man-pages/man2/open.2.html">open(2)</a>. <code>flags</code> can be:</p>
<ul>
<li><p><code>'r'</code> - Open file for reading.
An exception occurs if the file does not exist.</p>
</li>
<li><p><code>'r+'</code> - Open file for reading and writing.
An exception occurs if the file does not exist.</p>
</li>
<li><p><code>'rs+'</code> - Open file for reading and writing in synchronous mode. Instructs
the operating system to bypass the local file system cache.</p>
<p>This is primarily useful for opening files on NFS mounts as it allows you to
skip the potentially stale local cache. It has a very real impact on I/O
performance so don't use this flag unless you need it.</p>
<p>Note that this doesn't turn <code>fs.open()</code> into a synchronous blocking call.
If that's what you want then you should be using <code>fs.openSync()</code></p>
</li>
<li><p><code>'w'</code> - Open file for writing.
The file is created (if it does not exist) or truncated (if it exists).</p>
</li>
<li><p><code>'wx'</code> - Like <code>'w'</code> but fails if <code>path</code> exists.</p>
</li>
<li><p><code>'w+'</code> - Open file for reading and writing.
The file is created (if it does not exist) or truncated (if it exists).</p>
</li>
<li><p><code>'wx+'</code> - Like <code>'w+'</code> but fails if <code>path</code> exists.</p>
</li>
<li><p><code>'a'</code> - Open file for appending.
The file is created if it does not exist.</p>
</li>
<li><p><code>'ax'</code> - Like <code>'a'</code> but fails if <code>path</code> exists.</p>
</li>
<li><p><code>'a+'</code> - Open file for reading and appending.
The file is created if it does not exist.</p>
</li>
<li><p><code>'ax+'</code> - Like <code>'a+'</code> but fails if <code>path</code> exists.</p>
</li>
</ul>
<p><code>mode</code> sets the file mode (permission and sticky bits), but only if the file was
created. It defaults to <code>0666</code>, readable and writable.</p>
<p>The callback gets two arguments <code>(err, fd)</code>.</p>
<p>The exclusive flag <code>'x'</code> (<code>O_EXCL</code> flag in <a href="http://man7.org/linux/man-pages/man2/open.2.html">open(2)</a>) ensures that <code>path</code> is newly
created. On POSIX systems, <code>path</code> is considered to exist even if it is a symlink
to a non-existent file. The exclusive flag may or may not work with network file
systems.</p>
<p><code>flags</code> can also be a number as documented by <a href="http://man7.org/linux/man-pages/man2/open.2.html">open(2)</a>; commonly used constants
are available from <code>require('constants')</code>.  On Windows, flags are translated to
their equivalent ones where applicable, e.g. <code>O_WRONLY</code> to <code>FILE_GENERIC_WRITE</code>,
or <code>O_EXCL|O_CREAT</code> to <code>CREATE_NEW</code>, as accepted by CreateFileW.</p>
<p>On Linux, positional writes don't work when the file is opened in append mode.
The kernel ignores the position argument and always appends the data to
the end of the file.</p>
<p><em>Note: The behavior of <code>fs.open()</code> is platform specific for some flags. As such,
opening a directory on OS X and Linux with the <code>'a+'</code> flag - see example below -
will return an error. In contrast, on Windows and FreeBSD, a file descriptor
will be returned.</em></p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// OS X and Linux</span>
fs<span class="sh_symbol">.</span><span class="sh_function">open</span><span class="sh_symbol">(</span><span class="sh_string">'&lt;directory&gt;'</span><span class="sh_symbol">,</span> <span class="sh_string">'a+'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">,</span> fd<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// =&gt; [Error: EISDIR: illegal operation on a directory, open &lt;directory&gt;]</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">)</span>

<span class="sh_comment">// Windows and FreeBSD</span>
fs<span class="sh_symbol">.</span><span class="sh_function">open</span><span class="sh_symbol">(</span><span class="sh_string">'&lt;directory&gt;'</span><span class="sh_symbol">,</span> <span class="sh_string">'a+'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">,</span> fd<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// =&gt; null, &lt;fd&gt;</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">)</span>
</code></pre>
<h2>fs.openSync(path, flags[, mode])<span><a class="mark" href="#fs_fs_opensync_path_flags_mode" id="fs_fs_opensync_path_flags_mode">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.21</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>flags</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
<li><code>mode</code> <span class="type">&lt;Integer&gt;</span></li>
</ul>
<p>Synchronous version of <a href="#fs_fs_open_path_flags_mode_callback"><code>fs.open()</code></a>. Returns an integer representing the file
descriptor.</p>
<h2>fs.read(fd, buffer, offset, length, position, callback)<span><a class="mark" href="#fs_fs_read_fd_buffer_offset_length_position_callback" id="fs_fs_read_fd_buffer_offset_length_position_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.0.2</span>
</div><ul>
<li><code>fd</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>buffer</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>offset</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>length</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>position</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Read data from the file specified by <code>fd</code>.</p>
<p><code>buffer</code> is the buffer that the data will be written to.</p>
<p><code>offset</code> is the offset in the buffer to start writing at.</p>
<p><code>length</code> is an integer specifying the number of bytes to read.</p>
<p><code>position</code> is an integer specifying where to begin reading from in the file.
If <code>position</code> is <code>null</code>, data will be read from the current file position.</p>
<p>The callback is given the three arguments, <code>(err, bytesRead, buffer)</code>.</p>
<h2>fs.readdir(path[, options], callback)<span><a class="mark" href="#fs_fs_readdir_path_options_callback" id="fs_fs_readdir_path_options_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.8</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> default = <code>'utf8'</code></li>
</ul>
</li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Asynchronous <a href="http://man7.org/linux/man-pages/man3/readdir.3.html">readdir(3)</a>.  Reads the contents of a directory.
The callback gets two arguments <code>(err, files)</code> where <code>files</code> is an array of
the names of the files in the directory excluding <code>'.'</code> and <code>'..'</code>.</p>
<p>The optional <code>options</code> argument can be a string specifying an encoding, or an
object with an <code>encoding</code> property specifying the character encoding to use for
the filenames passed to the callback. If the <code>encoding</code> is set to <code>'buffer'</code>,
the filenames returned will be passed as <code>Buffer</code> objects.</p>
<h2>fs.readdirSync(path[, options])<span><a class="mark" href="#fs_fs_readdirsync_path_options" id="fs_fs_readdirsync_path_options">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.21</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> default = <code>'utf8'</code></li>
</ul>
</li>
</ul>
<p>Synchronous <a href="http://man7.org/linux/man-pages/man3/readdir.3.html">readdir(3)</a>. Returns an array of filenames excluding <code>'.'</code> and
<code>'..'</code>.</p>
<p>The optional <code>options</code> argument can be a string specifying an encoding, or an
object with an <code>encoding</code> property specifying the character encoding to use for
the filenames passed to the callback. If the <code>encoding</code> is set to <code>'buffer'</code>,
the filenames returned will be passed as <code>Buffer</code> objects.</p>
<h2>fs.readFile(file[, options], callback)<span><a class="mark" href="#fs_fs_readfile_file_options_callback" id="fs_fs_readfile_file_options_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.29</span>
</div><ul>
<li><code>file</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <span class="type">&lt;Integer&gt;</span> filename or file descriptor</li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a><ul>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type" class="type">&lt;Null&gt;</a> default = <code>null</code></li>
<li><code>flag</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> default = <code>'r'</code></li>
</ul>
</li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Asynchronously reads the entire contents of a file. Example:</p>
<pre class="sh_sourceCode"><code class="lang-js">fs<span class="sh_symbol">.</span><span class="sh_function">readFile</span><span class="sh_symbol">(</span><span class="sh_string">'/etc/passwd'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">,</span> data<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_keyword">throw</span> err<span class="sh_symbol">;</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>data<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>The callback is passed two arguments <code>(err, data)</code>, where <code>data</code> is the
contents of the file.</p>
<p>If no encoding is specified, then the raw buffer is returned.</p>
<p>If <code>options</code> is a string, then it specifies the encoding. Example:</p>
<pre class="sh_sourceCode"><code class="lang-js">fs<span class="sh_symbol">.</span><span class="sh_function">readFile</span><span class="sh_symbol">(</span><span class="sh_string">'/etc/passwd'</span><span class="sh_symbol">,</span> <span class="sh_string">'utf8'</span><span class="sh_symbol">,</span> callback<span class="sh_symbol">);</span>
</code></pre>
<p>Any specified file descriptor has to support reading.</p>
<p><em>Note: Specified file descriptors will not be closed automatically.</em></p>
<h2>fs.readFileSync(file[, options])<span><a class="mark" href="#fs_fs_readfilesync_file_options" id="fs_fs_readfilesync_file_options">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.8</span>
</div><ul>
<li><code>file</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <span class="type">&lt;Integer&gt;</span> filename or file descriptor</li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a><ul>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type" class="type">&lt;Null&gt;</a> default = <code>null</code></li>
<li><code>flag</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> default = <code>'r'</code></li>
</ul>
</li>
</ul>
<p>Synchronous version of <a href="#fs_fs_readfile_file_options_callback"><code>fs.readFile</code></a>. Returns the contents of the <code>file</code>.</p>
<p>If the <code>encoding</code> option is specified then this function returns a
string. Otherwise it returns a buffer.</p>
<h2>fs.readlink(path[, options], callback)<span><a class="mark" href="#fs_fs_readlink_path_options_callback" id="fs_fs_readlink_path_options_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.31</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> default = <code>'utf8'</code></li>
</ul>
</li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Asynchronous <a href="http://man7.org/linux/man-pages/man2/readlink.2.html">readlink(2)</a>. The callback gets two arguments <code>(err,
linkString)</code>.</p>
<p>The optional <code>options</code> argument can be a string specifying an encoding, or an
object with an <code>encoding</code> property specifying the character encoding to use for
the link path passed to the callback. If the <code>encoding</code> is set to <code>'buffer'</code>,
the link path returned will be passed as a <code>Buffer</code> object.</p>
<h2>fs.readlinkSync(path[, options])<span><a class="mark" href="#fs_fs_readlinksync_path_options" id="fs_fs_readlinksync_path_options">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.31</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> default = <code>'utf8'</code></li>
</ul>
</li>
</ul>
<p>Synchronous <a href="http://man7.org/linux/man-pages/man2/readlink.2.html">readlink(2)</a>. Returns the symbolic link's string value.</p>
<p>The optional <code>options</code> argument can be a string specifying an encoding, or an
object with an <code>encoding</code> property specifying the character encoding to use for
the link path passed to the callback. If the <code>encoding</code> is set to <code>'buffer'</code>,
the link path returned will be passed as a <code>Buffer</code> object.</p>
<h2>fs.readSync(fd, buffer, offset, length, position)<span><a class="mark" href="#fs_fs_readsync_fd_buffer_offset_length_position" id="fs_fs_readsync_fd_buffer_offset_length_position">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.21</span>
</div><ul>
<li><code>fd</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>buffer</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>offset</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>length</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>position</code> <span class="type">&lt;Integer&gt;</span></li>
</ul>
<p>Synchronous version of <a href="#fs_fs_read_fd_buffer_offset_length_position_callback"><code>fs.read()</code></a>. Returns the number of <code>bytesRead</code>.</p>
<h2>fs.realpath(path[, options], callback)<span><a class="mark" href="#fs_fs_realpath_path_options_callback" id="fs_fs_realpath_path_options_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.31</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> default = <code>'utf8'</code></li>
</ul>
</li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Asynchronous <a href="http://man7.org/linux/man-pages/man3/realpath.3.html">realpath(3)</a>. The <code>callback</code> gets two arguments <code>(err,
resolvedPath)</code>. May use <code>process.cwd</code> to resolve relative paths.</p>
<p>The optional <code>options</code> argument can be a string specifying an encoding, or an
object with an <code>encoding</code> property specifying the character encoding to use for
the path passed to the callback. If the <code>encoding</code> is set to <code>'buffer'</code>,
the path returned will be passed as a <code>Buffer</code> object.</p>
<h2>fs.realpathSync(path[, options])<span><a class="mark" href="#fs_fs_realpathsync_path_options" id="fs_fs_realpathsync_path_options">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.31</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a>;</li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> default = <code>'utf8'</code></li>
</ul>
</li>
</ul>
<p>Synchronous <a href="http://man7.org/linux/man-pages/man3/realpath.3.html">realpath(3)</a>. Returns the resolved path.</p>
<p>The optional <code>options</code> argument can be a string specifying an encoding, or an
object with an <code>encoding</code> property specifying the character encoding to use for
the path passed to the callback. If the <code>encoding</code> is set to <code>'buffer'</code>,
the path returned will be passed as a <code>Buffer</code> object.</p>
<h2>fs.rename(oldPath, newPath, callback)<span><a class="mark" href="#fs_fs_rename_oldpath_newpath_callback" id="fs_fs_rename_oldpath_newpath_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.0.2</span>
</div><ul>
<li><code>oldPath</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>newPath</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Asynchronous <a href="http://man7.org/linux/man-pages/man2/rename.2.html">rename(2)</a>. No arguments other than a possible exception are given
to the completion callback.</p>
<h2>fs.renameSync(oldPath, newPath)<span><a class="mark" href="#fs_fs_renamesync_oldpath_newpath" id="fs_fs_renamesync_oldpath_newpath">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.21</span>
</div><ul>
<li><code>oldPath</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>newPath</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
</ul>
<p>Synchronous <a href="http://man7.org/linux/man-pages/man2/rename.2.html">rename(2)</a>. Returns <code>undefined</code>.</p>
<h2>fs.rmdir(path, callback)<span><a class="mark" href="#fs_fs_rmdir_path_callback" id="fs_fs_rmdir_path_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.0.2</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Asynchronous <a href="http://man7.org/linux/man-pages/man2/rmdir.2.html">rmdir(2)</a>. No arguments other than a possible exception are given
to the completion callback.</p>
<h2>fs.rmdirSync(path)<span><a class="mark" href="#fs_fs_rmdirsync_path" id="fs_fs_rmdirsync_path">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.21</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
</ul>
<p>Synchronous <a href="http://man7.org/linux/man-pages/man2/rmdir.2.html">rmdir(2)</a>. Returns <code>undefined</code>.</p>
<h2>fs.stat(path, callback)<span><a class="mark" href="#fs_fs_stat_path_callback" id="fs_fs_stat_path_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.0.2</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Asynchronous <a href="http://man7.org/linux/man-pages/man2/stat.2.html">stat(2)</a>. The callback gets two arguments <code>(err, stats)</code> where
<code>stats</code> is a <a href="#fs_class_fs_stats"><code>fs.Stats</code></a> object.  See the <a href="#fs_class_fs_stats"><code>fs.Stats</code></a> section for more
information.</p>
<h2>fs.statSync(path)<span><a class="mark" href="#fs_fs_statsync_path" id="fs_fs_statsync_path">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.21</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
</ul>
<p>Synchronous <a href="http://man7.org/linux/man-pages/man2/stat.2.html">stat(2)</a>. Returns an instance of <a href="#fs_class_fs_stats"><code>fs.Stats</code></a>.</p>
<h2>fs.symlink(target, path[, type], callback)<span><a class="mark" href="#fs_fs_symlink_target_path_type_callback" id="fs_fs_symlink_target_path_type_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.31</span>
</div><ul>
<li><code>target</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>type</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Asynchronous <a href="http://man7.org/linux/man-pages/man2/symlink.2.html">symlink(2)</a>. No arguments other than a possible exception are given
to the completion callback.
The <code>type</code> argument can be set to <code>'dir'</code>, <code>'file'</code>, or <code>'junction'</code> (default
is <code>'file'</code>) and is only available on Windows (ignored on other platforms).
Note that Windows junction points require the destination path to be absolute.  When using
<code>'junction'</code>, the <code>target</code> argument will automatically be normalized to absolute path.</p>
<p>Here is an example below:</p>
<pre class="sh_sourceCode"><code class="lang-js">fs<span class="sh_symbol">.</span><span class="sh_function">symlink</span><span class="sh_symbol">(</span><span class="sh_string">'./foo'</span><span class="sh_symbol">,</span> <span class="sh_string">'./new-port'</span><span class="sh_symbol">);</span>
</code></pre>
<p>It creates a symbolic link named "new-port" that points to "foo".</p>
<h2>fs.symlinkSync(target, path[, type])<span><a class="mark" href="#fs_fs_symlinksync_target_path_type" id="fs_fs_symlinksync_target_path_type">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.31</span>
</div><ul>
<li><code>target</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>type</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
</ul>
<p>Synchronous <a href="http://man7.org/linux/man-pages/man2/symlink.2.html">symlink(2)</a>. Returns <code>undefined</code>.</p>
<h2>fs.truncate(path, len, callback)<span><a class="mark" href="#fs_fs_truncate_path_len_callback" id="fs_fs_truncate_path_len_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.8.6</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>len</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Asynchronous <a href="http://man7.org/linux/man-pages/man2/truncate.2.html">truncate(2)</a>. No arguments other than a possible exception are
given to the completion callback. A file descriptor can also be passed as the
first argument. In this case, <code>fs.ftruncate()</code> is called.</p>
<h2>fs.truncateSync(path, len)<span><a class="mark" href="#fs_fs_truncatesync_path_len" id="fs_fs_truncatesync_path_len">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.8.6</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>len</code> <span class="type">&lt;Integer&gt;</span></li>
</ul>
<p>Synchronous <a href="http://man7.org/linux/man-pages/man2/truncate.2.html">truncate(2)</a>. Returns <code>undefined</code>.</p>
<h2>fs.unlink(path, callback)<span><a class="mark" href="#fs_fs_unlink_path_callback" id="fs_fs_unlink_path_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.0.2</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Asynchronous <a href="http://man7.org/linux/man-pages/man2/unlink.2.html">unlink(2)</a>. No arguments other than a possible exception are given
to the completion callback.</p>
<h2>fs.unlinkSync(path)<span><a class="mark" href="#fs_fs_unlinksync_path" id="fs_fs_unlinksync_path">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.21</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
</ul>
<p>Synchronous <a href="http://man7.org/linux/man-pages/man2/unlink.2.html">unlink(2)</a>. Returns <code>undefined</code>.</p>
<h2>fs.unwatchFile(filename[, listener])<span><a class="mark" href="#fs_fs_unwatchfile_filename_listener" id="fs_fs_unwatchfile_filename_listener">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.31</span>
</div><ul>
<li><code>filename</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>listener</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Stop watching for changes on <code>filename</code>. If <code>listener</code> is specified, only that
particular listener is removed. Otherwise, <em>all</em> listeners are removed and you
have effectively stopped watching <code>filename</code>.</p>
<p>Calling <code>fs.unwatchFile()</code> with a filename that is not being watched is a
no-op, not an error.</p>
<p><em>Note: <a href="#fs_fs_watch_filename_options_listener"><code>fs.watch()</code></a> is more efficient than <code>fs.watchFile()</code> and <code>fs.unwatchFile()</code>.
<code>fs.watch()</code> should be used instead of <code>fs.watchFile()</code> and <code>fs.unwatchFile()</code>
when possible.</em></p>
<h2>fs.utimes(path, atime, mtime, callback)<span><a class="mark" href="#fs_fs_utimes_path_atime_mtime_callback" id="fs_fs_utimes_path_atime_mtime_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.4.2</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>atime</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>mtime</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Change file timestamps of the file referenced by the supplied path.</p>
<p>Note: the arguments <code>atime</code> and <code>mtime</code> of the following related functions does
follow the below rules:</p>
<ul>
<li>If the value is a numberable string like <code>'123456789'</code>, the value would get
converted to corresponding number.</li>
<li>If the value is <code>NaN</code> or <code>Infinity</code>, the value would get converted to
<code>Date.now()</code>.</li>
</ul>
<h2>fs.utimesSync(path, atime, mtime)<span><a class="mark" href="#fs_fs_utimessync_path_atime_mtime" id="fs_fs_utimessync_path_atime_mtime">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.4.2</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>atime</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>mtime</code> <span class="type">&lt;Integer&gt;</span></li>
</ul>
<p>Synchronous version of <a href="#fs_fs_futimes_fd_atime_mtime_callback"><code>fs.utimes()</code></a>. Returns <code>undefined</code>.</p>
<h2>fs.watch(filename[, options][, listener])<span><a class="mark" href="#fs_fs_watch_filename_options_listener" id="fs_fs_watch_filename_options_listener">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.10</span>
</div><ul>
<li><code>filename</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>persistent</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Indicates whether the process should continue to run
as long as files are being watched. default = <code>true</code></li>
<li><code>recursive</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Indicates whether all subdirectories should be
watched, or only the current directory. The applies when a directory is
specified, and only on supported platforms (See <a href="#fs_caveats">Caveats</a>). default =
<code>false</code></li>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> Specifies the character encoding to be used for the
 filename passed to the listener. default = <code>'utf8'</code></li>
</ul>
</li>
<li><code>listener</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Watch for changes on <code>filename</code>, where <code>filename</code> is either a file or a
directory.  The returned object is a <a href="#fs_class_fs_fswatcher"><code>fs.FSWatcher</code></a>.</p>
<p>The second argument is optional. If <code>options</code> is provided as a string, it
specifies the <code>encoding</code>. Otherwise <code>options</code> should be passed as an object.</p>
<p>The listener callback gets two arguments <code>(event, filename)</code>.  <code>event</code> is either
<code>'rename'</code> or <code>'change'</code>, and <code>filename</code> is the name of the file which triggered
the event.</p>
<h3>Caveats<span><a class="mark" href="#fs_caveats" id="fs_caveats">#</a></span></h3>
<!--type=misc-->
<p>The <code>fs.watch</code> API is not 100% consistent across platforms, and is
unavailable in some situations.</p>
<p>The recursive option is only supported on OS X and Windows.</p>
<h4>Availability<span><a class="mark" href="#fs_availability" id="fs_availability">#</a></span></h4>
<!--type=misc-->
<p>This feature depends on the underlying operating system providing a way
to be notified of filesystem changes.</p>
<ul>
<li>On Linux systems, this uses <a href="http://man7.org/linux/man-pages/man7/inotify.7.html"><code>inotify</code></a></li>
<li>On BSD systems, this uses <a href="https://www.freebsd.org/cgi/man.cgi?kqueue"><code>kqueue</code></a></li>
<li>On OS X, this uses <a href="https://www.freebsd.org/cgi/man.cgi?kqueue"><code>kqueue</code></a> for files and <a href="https://developer.apple.com/library/mac/documentation/Darwin/Conceptual/FSEvents_ProgGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40005289-CH1-SW1"><code>FSEvents</code></a> for directories.</li>
<li>On SunOS systems (including Solaris and SmartOS), this uses <a href="http://illumos.org/man/port_create"><code>event ports</code></a>.</li>
<li>On Windows systems, this feature depends on <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa365465%28v=vs.85%29.aspx"><code>ReadDirectoryChangesW</code></a>.</li>
<li>On Aix systems, this feature depends on <a href="https://www.ibm.com/developerworks/aix/library/au-aix_event_infrastructure/"><code>AHAFS</code></a>, which must be enabled.</li>
</ul>
<p>If the underlying functionality is not available for some reason, then
<code>fs.watch</code> will not be able to function. For example, watching files or
directories can be unreliable, and in some cases impossible, on network file
systems (NFS, SMB, etc), or host file systems when using virtualization software
such as Vagrant, Docker, etc.</p>
<p>You can still use <code>fs.watchFile</code>, which uses stat polling, but it is slower and
less reliable.</p>
<h4>Inodes<span><a class="mark" href="#fs_inodes" id="fs_inodes">#</a></span></h4>
<!--type=misc-->
<p>On Linux and OS X systems, <code>fs.watch()</code> resolves the path to an <a href="http://www.linux.org/threads/intro-to-inodes.4130">inode</a> and
watches the inode. If the watched path is deleted and recreated, it is assigned
a new inode. The watch will emit an event for the delete but will continue
watching the <em>original</em> inode. Events for the new inode will not be emitted.
This is expected behavior.</p>
<h4>Filename Argument<span><a class="mark" href="#fs_filename_argument" id="fs_filename_argument">#</a></span></h4>
<!--type=misc-->
<p>Providing <code>filename</code> argument in the callback is only supported on Linux and
Windows.  Even on supported platforms, <code>filename</code> is not always guaranteed to
be provided. Therefore, don't assume that <code>filename</code> argument is always
provided in the callback, and have some fallback logic if it is null.</p>
<pre class="sh_sourceCode"><code class="lang-js">fs<span class="sh_symbol">.</span><span class="sh_function">watch</span><span class="sh_symbol">(</span><span class="sh_string">'somedir'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>event<span class="sh_symbol">,</span> filename<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`event is<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>event<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>filename<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`filename provided<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>filename<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'filename not provided'</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h2>fs.watchFile(filename[, options], listener)<span><a class="mark" href="#fs_fs_watchfile_filename_options_listener" id="fs_fs_watchfile_filename_options_listener">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.31</span>
</div><ul>
<li><code>filename</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>persistent</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a></li>
<li><code>interval</code> <span class="type">&lt;Integer&gt;</span></li>
</ul>
</li>
<li><code>listener</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Watch for changes on <code>filename</code>. The callback <code>listener</code> will be called each
time the file is accessed.</p>
<p>The <code>options</code> argument may be omitted. If provided, it should be an object. The
<code>options</code> object may contain a boolean named <code>persistent</code> that indicates
whether the process should continue to run as long as files are being watched.
The <code>options</code> object may specify an <code>interval</code> property indicating how often the
target should be polled in milliseconds. The default is
<code>{ persistent: true, interval: 5007 }</code>.</p>
<p>The <code>listener</code> gets two arguments the current stat object and the previous
stat object:</p>
<pre class="sh_sourceCode"><code class="lang-js">fs<span class="sh_symbol">.</span><span class="sh_function">watchFile</span><span class="sh_symbol">(</span><span class="sh_string">'message.text'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>curr<span class="sh_symbol">,</span> prev<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`the current mtime is<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>curr<span class="sh_symbol">.</span>mtime<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`the previous mtime was<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>prev<span class="sh_symbol">.</span>mtime<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>These stat objects are instances of <code>fs.Stat</code>.</p>
<p>If you want to be notified when the file was modified, not just accessed,
you need to compare <code>curr.mtime</code> and <code>prev.mtime</code>.</p>
<p><em>Note: when an <code>fs.watchFile</code> operation results in an <code>ENOENT</code> error, it will
 invoke the listener once, with all the fields zeroed (or, for dates, the Unix
 Epoch). In Windows, <code>blksize</code> and <code>blocks</code> fields will be <code>undefined</code>, instead
 of zero. If the file is created later on, the listener will be called again,
 with the latest stat objects. This is a change in functionality since v0.10.</em></p>
<p><em>Note: <a href="#fs_fs_watch_filename_options_listener"><code>fs.watch()</code></a> is more efficient than <code>fs.watchFile</code> and <code>fs.unwatchFile</code>.
<code>fs.watch</code> should be used instead of <code>fs.watchFile</code> and <code>fs.unwatchFile</code>
when possible.</em></p>
<h2>fs.write(fd, buffer, offset, length[, position], callback)<span><a class="mark" href="#fs_fs_write_fd_buffer_offset_length_position_callback" id="fs_fs_write_fd_buffer_offset_length_position_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.0.2</span>
</div><ul>
<li><code>fd</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>buffer</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>offset</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>length</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>position</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Write <code>buffer</code> to the file specified by <code>fd</code>.</p>
<p><code>offset</code> and <code>length</code> determine the part of the buffer to be written.</p>
<p><code>position</code> refers to the offset from the beginning of the file where this data
should be written. If <code>typeof position !== 'number'</code>, the data will be written
at the current position. See <a href="http://man7.org/linux/man-pages/man2/pwrite.2.html">pwrite(2)</a>.</p>
<p>The callback will be given three arguments <code>(err, written, buffer)</code> where
<code>written</code> specifies how many <em>bytes</em> were written from <code>buffer</code>.</p>
<p>Note that it is unsafe to use <code>fs.write</code> multiple times on the same file
without waiting for the callback. For this scenario,
<code>fs.createWriteStream</code> is strongly recommended.</p>
<p>On Linux, positional writes don't work when the file is opened in append mode.
The kernel ignores the position argument and always appends the data to
the end of the file.</p>
<h2>fs.write(fd, data[, position[, encoding]], callback)<span><a class="mark" href="#fs_fs_write_fd_data_position_encoding_callback" id="fs_fs_write_fd_data_position_encoding_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.11.5</span>
</div><ul>
<li><code>fd</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>data</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>position</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Write <code>data</code> to the file specified by <code>fd</code>.  If <code>data</code> is not a Buffer instance
then the value will be coerced to a string.</p>
<p><code>position</code> refers to the offset from the beginning of the file where this data
should be written. If <code>typeof position !== 'number'</code> the data will be written at
the current position. See <a href="http://man7.org/linux/man-pages/man2/pwrite.2.html">pwrite(2)</a>.</p>
<p><code>encoding</code> is the expected string encoding.</p>
<p>The callback will receive the arguments <code>(err, written, string)</code> where <code>written</code>
specifies how many <em>bytes</em> the passed string required to be written. Note that
bytes written is not the same as string characters. See <a href="https://nodejs.org/api/buffer.html#buffer_class_method_buffer_bytelength_string_encoding"><code>Buffer.byteLength</code></a>.</p>
<p>Unlike when writing <code>buffer</code>, the entire string must be written. No substring
may be specified. This is because the byte offset of the resulting data may not
be the same as the string offset.</p>
<p>Note that it is unsafe to use <code>fs.write</code> multiple times on the same file
without waiting for the callback. For this scenario,
<code>fs.createWriteStream</code> is strongly recommended.</p>
<p>On Linux, positional writes don't work when the file is opened in append mode.
The kernel ignores the position argument and always appends the data to
the end of the file.</p>
<h2>fs.writeFile(file, data[, options], callback)<span><a class="mark" href="#fs_fs_writefile_file_data_options_callback" id="fs_fs_writefile_file_data_options_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.29</span>
</div><ul>
<li><code>file</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <span class="type">&lt;Integer&gt;</span> filename or file descriptor</li>
<li><code>data</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a><ul>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type" class="type">&lt;Null&gt;</a> default = <code>'utf8'</code></li>
<li><code>mode</code> <span class="type">&lt;Integer&gt;</span> default = <code>0o666</code></li>
<li><code>flag</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> default = <code>'w'</code></li>
</ul>
</li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Asynchronously writes data to a file, replacing the file if it already exists.
<code>data</code> can be a string or a buffer.</p>
<p>The <code>encoding</code> option is ignored if <code>data</code> is a buffer. It defaults
to <code>'utf8'</code>.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js">fs<span class="sh_symbol">.</span><span class="sh_function">writeFile</span><span class="sh_symbol">(</span><span class="sh_string">'message.txt'</span><span class="sh_symbol">,</span> <span class="sh_string">'Hello Node.js'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_keyword">throw</span> err<span class="sh_symbol">;</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'It</span><span class="sh_specialchar">\'</span><span class="sh_string">s saved!'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>If <code>options</code> is a string, then it specifies the encoding. Example:</p>
<pre class="sh_sourceCode"><code class="lang-js">fs<span class="sh_symbol">.</span><span class="sh_function">writeFile</span><span class="sh_symbol">(</span><span class="sh_string">'message.txt'</span><span class="sh_symbol">,</span> <span class="sh_string">'Hello Node.js'</span><span class="sh_symbol">,</span> <span class="sh_string">'utf8'</span><span class="sh_symbol">,</span> callback<span class="sh_symbol">);</span>
</code></pre>
<p>Any specified file descriptor has to support writing.</p>
<p>Note that it is unsafe to use <code>fs.writeFile</code> multiple times on the same file
without waiting for the callback. For this scenario,
<code>fs.createWriteStream</code> is strongly recommended.</p>
<p><em>Note: Specified file descriptors will not be closed automatically.</em></p>
<h2>fs.writeFileSync(file, data[, options])<span><a class="mark" href="#fs_fs_writefilesync_file_data_options" id="fs_fs_writefilesync_file_data_options">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.29</span>
</div><ul>
<li><code>file</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <span class="type">&lt;Integer&gt;</span> filename or file descriptor</li>
<li><code>data</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a><ul>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type" class="type">&lt;Null&gt;</a> default = <code>'utf8'</code></li>
<li><code>mode</code> <span class="type">&lt;Integer&gt;</span> default = <code>0o666</code></li>
<li><code>flag</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> default = <code>'w'</code></li>
</ul>
</li>
</ul>
<p>The synchronous version of <a href="#fs_fs_writefile_file_data_options_callback"><code>fs.writeFile()</code></a>. Returns <code>undefined</code>.</p>
<h2>fs.writeSync(fd, buffer, offset, length[, position])<span><a class="mark" href="#fs_fs_writesync_fd_buffer_offset_length_position" id="fs_fs_writesync_fd_buffer_offset_length_position">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.21</span>
</div><ul>
<li><code>fd</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>buffer</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>offset</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>length</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>position</code> <span class="type">&lt;Integer&gt;</span></li>
</ul>
<h2>fs.writeSync(fd, data[, position[, encoding]])<span><a class="mark" href="#fs_fs_writesync_fd_data_position_encoding" id="fs_fs_writesync_fd_data_position_encoding">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.11.5</span>
</div><ul>
<li><code>fd</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>data</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
<li><code>position</code> <span class="type">&lt;Integer&gt;</span></li>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
</ul>
<p>Synchronous versions of <a href="#fs_fs_write_fd_buffer_offset_length_position_callback"><code>fs.write()</code></a>. Returns the number of bytes written.</p>
<!-- [end-include:fs.md] -->
<!-- [start-include:globals.md] -->
<h1>Global Objects<span><a class="mark" href="#globals_global_objects" id="globals_global_objects">#</a></span></h1>
<!-- type=misc -->
<p>These objects are available in all modules. Some of these objects aren't
actually in the global scope but in the module scope - this will be noted.</p>
<p>The objects listed here are specific to Node.js. There are a number of
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects">built-in objects</a> that are part of the JavaScript language itself, which are
also globally accessible.</p>
<h2>Class: Buffer<span><a class="mark" href="#globals_class_buffer" id="globals_class_buffer">#</a></span></h2>
<!-- type=global -->
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Used to handle binary data. See the <a href="https://nodejs.org/api/buffer.html">buffer section</a>.</p>
<h2>__dirname<span><a class="mark" href="#globals_dirname" id="globals_dirname">#</a></span></h2>
<!-- type=var -->
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
</ul>
<p>The name of the directory that the currently executing script resides in.</p>
<p>Example: running <code>node example.js</code> from <code>/Users/mjr</code></p>
<pre class="sh_sourceCode"><code class="lang-js">console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>__dirname<span class="sh_symbol">);</span>
<span class="sh_comment">// /Users/mjr</span>
</code></pre>
<p><code>__dirname</code> isn't actually a global but rather local to each module.</p>
<p>For instance, given two modules: <code>a</code> and <code>b</code>, where <code>b</code> is a dependency of
<code>a</code> and there is a directory structure of:</p>
<ul>
<li><code>/Users/mjr/app/a.js</code></li>
<li><code>/Users/mjr/app/node_modules/b/b.js</code></li>
</ul>
<p>References to <code>__dirname</code> within <code>b.js</code> will return
<code>/Users/mjr/app/node_modules/b</code> while references to <code>__dirname</code> within <code>a.js</code>
will return <code>/Users/mjr/app</code>.</p>
<h2>__filename<span><a class="mark" href="#globals_filename" id="globals_filename">#</a></span></h2>
<!-- type=var -->
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
</ul>
<p>The filename of the code being executed.  This is the resolved absolute path
of this code file.  For a main program this is not necessarily the same
filename used in the command line.  The value inside a module is the path
to that module file.</p>
<p>Example: running <code>node example.js</code> from <code>/Users/mjr</code></p>
<pre class="sh_sourceCode"><code class="lang-js">console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>__filename<span class="sh_symbol">);</span>
<span class="sh_comment">// /Users/mjr/example.js</span>
</code></pre>
<p><code>__filename</code> isn't actually a global but rather local to each module.</p>
<h2>clearImmediate(immediateObject)<span><a class="mark" href="#globals_clearimmediate_immediateobject" id="globals_clearimmediate_immediateobject">#</a></span></h2>
<!--type=global-->
<p><a href="https://nodejs.org/api/timers.html#timers_clearimmediate_immediateobject"><code>clearImmediate</code></a> is described in the <a href="https://nodejs.org/api/timers.html">timers</a> section.</p>
<h2>clearInterval(intervalObject)<span><a class="mark" href="#globals_clearinterval_intervalobject" id="globals_clearinterval_intervalobject">#</a></span></h2>
<!--type=global-->
<p><a href="https://nodejs.org/api/timers.html#timers_clearinterval_intervalobject"><code>clearInterval</code></a> is described in the <a href="https://nodejs.org/api/timers.html">timers</a> section.</p>
<h2>clearTimeout(timeoutObject)<span><a class="mark" href="#globals_cleartimeout_timeoutobject" id="globals_cleartimeout_timeoutobject">#</a></span></h2>
<!--type=global-->
<p><a href="https://nodejs.org/api/timers.html#timers_cleartimeout_timeoutobject"><code>clearTimeout</code></a> is described in the <a href="https://nodejs.org/api/timers.html">timers</a> section.</p>
<h2>console<span><a class="mark" href="#globals_console" id="globals_console">#</a></span></h2>
<!-- type=global -->
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a></li>
</ul>
<p>Used to print to stdout and stderr. See the <a href="https://nodejs.org/api/console.html"><code>console</code></a> section.</p>
<h2>exports<span><a class="mark" href="#globals_exports" id="globals_exports">#</a></span></h2>
<!-- type=var -->
<p>A reference to the <code>module.exports</code> that is shorter to type.
See <a href="https://nodejs.org/api/modules.html">module system documentation</a> for details on when to use <code>exports</code> and
when to use <code>module.exports</code>.</p>
<p><code>exports</code> isn't actually a global but rather local to each module.</p>
<p>See the <a href="https://nodejs.org/api/modules.html">module system documentation</a> for more information.</p>
<h2>global<span><a class="mark" href="#globals_global" id="globals_global">#</a></span></h2>
<!-- type=global -->
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> The global namespace object.</li>
</ul>
<p>In browsers, the top-level scope is the global scope. That means that in
browsers if you're in the global scope <code>var something</code> will define a global
variable. In Node.js this is different. The top-level scope is not the global
scope; <code>var something</code> inside an Node.js module will be local to that module.</p>
<h2>module<span><a class="mark" href="#globals_module" id="globals_module">#</a></span></h2>
<!-- type=var -->
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a></li>
</ul>
<p>A reference to the current module. In particular
<code>module.exports</code> is used for defining what a module exports and makes
available through <code>require()</code>.</p>
<p><code>module</code> isn't actually a global but rather local to each module.</p>
<p>See the <a href="https://nodejs.org/api/modules.html">module system documentation</a> for more information.</p>
<h2>process<span><a class="mark" href="#globals_process" id="globals_process">#</a></span></h2>
<!-- type=global -->
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a></li>
</ul>
<p>The process object. See the <a href="https://nodejs.org/api/process.html#process_process"><code>process</code> object</a> section.</p>
<h2>require()<span><a class="mark" href="#globals_require" id="globals_require">#</a></span></h2>
<!-- type=var -->
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>To require modules. See the <a href="https://nodejs.org/api/modules.html#modules_modules">Modules</a> section.  <code>require</code> isn't actually a
global but rather local to each module.</p>
<h3>require.cache<span><a class="mark" href="#globals_require_cache" id="globals_require_cache">#</a></span></h3>
<div class="signature"><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a></li>
</ul>
</div><p>Modules are cached in this object when they are required. By deleting a key
value from this object, the next <code>require</code> will reload the module. Note that
this does not apply to <a href="https://nodejs.org/api/addons.html">native addons</a>, for which reloading will result in an
Error.</p>
<h3>require.extensions<span><a class="mark" href="#globals_require_extensions" id="globals_require_extensions">#</a></span></h3>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated</pre><div class="signature"><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a></li>
</ul>
</div><p>Instruct <code>require</code> on how to handle certain file extensions.</p>
<p>Process files with the extension <code>.sjs</code> as <code>.js</code>:</p>
<pre class="sh_sourceCode"><code class="lang-js">require<span class="sh_symbol">.</span>extensions<span class="sh_symbol">[</span><span class="sh_string">'.sjs'</span><span class="sh_symbol">]</span> <span class="sh_symbol">=</span> require<span class="sh_symbol">.</span>extensions<span class="sh_symbol">[</span><span class="sh_string">'.js'</span><span class="sh_symbol">];</span>
</code></pre>
<p><strong>Deprecated</strong>  In the past, this list has been used to load
non-JavaScript modules into Node.js by compiling them on-demand.
However, in practice, there are much better ways to do this, such as
loading modules via some other Node.js program, or compiling them to
JavaScript ahead of time.</p>
<p>Since the Module system is locked, this feature will probably never go
away.  However, it may have subtle bugs and complexities that are best
left untouched.</p>
<h3>require.resolve()<span><a class="mark" href="#globals_require_resolve" id="globals_require_resolve">#</a></span></h3>
<p>Use the internal <code>require()</code> machinery to look up the location of a module,
but rather than loading the module, just return the resolved filename.</p>
<h2>setImmediate(callback[, arg][, ...])<span><a class="mark" href="#globals_setimmediate_callback_arg" id="globals_setimmediate_callback_arg">#</a></span></h2>
<!-- type=global -->
<p><a href="https://nodejs.org/api/timers.html#timers_setimmediate_callback_arg"><code>setImmediate</code></a> is described in the <a href="https://nodejs.org/api/timers.html">timers</a> section.</p>
<h2>setInterval(callback, delay[, arg][, ...])<span><a class="mark" href="#globals_setinterval_callback_delay_arg" id="globals_setinterval_callback_delay_arg">#</a></span></h2>
<!-- type=global -->
<p><a href="https://nodejs.org/api/timers.html#timers_setinterval_callback_delay_arg"><code>setInterval</code></a> is described in the <a href="https://nodejs.org/api/timers.html">timers</a> section.</p>
<h2>setTimeout(callback, delay[, arg][, ...])<span><a class="mark" href="#globals_settimeout_callback_delay_arg" id="globals_settimeout_callback_delay_arg">#</a></span></h2>
<!-- type=global -->
<p><a href="https://nodejs.org/api/timers.html#timers_settimeout_callback_delay_arg"><code>setTimeout</code></a> is described in the <a href="https://nodejs.org/api/timers.html">timers</a> section.</p>
<!-- [end-include:globals.md] -->
<!-- [start-include:http.md] -->
<h1>HTTP<span><a class="mark" href="#http_http" id="http_http">#</a></span></h1>
<pre class="api_stability api_stability_2 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> Stable</pre><p>To use the HTTP server and client one must <code>require('http')</code>.</p>
<p>The HTTP interfaces in Node.js are designed to support many features
of the protocol which have been traditionally difficult to use.
In particular, large, possibly chunk-encoded, messages. The interface is
careful to never buffer entire requests or responses--the
user is able to stream data.</p>
<p>HTTP message headers are represented by an object like this:</p>
<pre class="sh_sourceCode"><code><span class="sh_cbracket">{</span> <span class="sh_string">'content-length'</span><span class="sh_symbol">:</span> <span class="sh_string">'123'</span><span class="sh_symbol">,</span>
  <span class="sh_string">'content-type'</span><span class="sh_symbol">:</span> <span class="sh_string">'text/plain'</span><span class="sh_symbol">,</span>
  <span class="sh_string">'connection'</span><span class="sh_symbol">:</span> <span class="sh_string">'keep-alive'</span><span class="sh_symbol">,</span>
  <span class="sh_string">'host'</span><span class="sh_symbol">:</span> <span class="sh_string">'mysite.com'</span><span class="sh_symbol">,</span>
  <span class="sh_string">'accept'</span><span class="sh_symbol">:</span> <span class="sh_string">'*/*'</span> <span class="sh_cbracket">}</span>
</code></pre><p>Keys are lowercased. Values are not modified.</p>
<p>In order to support the full spectrum of possible HTTP applications, Node.js's
HTTP API is very low-level. It deals with stream handling and message
parsing only. It parses a message into headers and body but it does not
parse the actual headers or the body.</p>
<p>See <a href="#http_message_headers"><code>message.headers</code></a> for details on how duplicate headers are handled.</p>
<p>The raw headers as they were received are retained in the <code>rawHeaders</code>
property, which is an array of <code>[key, value, key2, value2, ...]</code>.  For
example, the previous message header object might have a <code>rawHeaders</code>
list like the following:</p>
<pre class="sh_sourceCode"><code><span class="sh_symbol">[</span> <span class="sh_string">'ConTent-Length'</span><span class="sh_symbol">,</span> <span class="sh_string">'123456'</span><span class="sh_symbol">,</span>
  <span class="sh_string">'content-LENGTH'</span><span class="sh_symbol">,</span> <span class="sh_string">'123'</span><span class="sh_symbol">,</span>
  <span class="sh_string">'content-type'</span><span class="sh_symbol">,</span> <span class="sh_string">'text/plain'</span><span class="sh_symbol">,</span>
  <span class="sh_string">'CONNECTION'</span><span class="sh_symbol">,</span> <span class="sh_string">'keep-alive'</span><span class="sh_symbol">,</span>
  <span class="sh_string">'Host'</span><span class="sh_symbol">,</span> <span class="sh_string">'mysite.com'</span><span class="sh_symbol">,</span>
  <span class="sh_string">'accepT'</span><span class="sh_symbol">,</span> <span class="sh_string">'*/*'</span> <span class="sh_symbol">]</span>
</code></pre><h2>Class: http.Agent<span><a class="mark" href="#http_class_http_agent" id="http_class_http_agent">#</a></span></h2>
<p>The HTTP Agent is used for pooling sockets used in HTTP client
requests.</p>
<p>The HTTP Agent also defaults client requests to using
Connection:keep-alive. If no pending HTTP requests are waiting on a
socket to become free the socket is closed. This means that Node.js's
pool has the benefit of keep-alive when under load but still does not
require developers to manually close the HTTP clients using
KeepAlive.</p>
<p>If you opt into using HTTP KeepAlive, you can create an Agent object
with that flag set to <code>true</code>.  (See the <a href="#http_new_agent_options">constructor options</a>.)
Then, the Agent will keep unused sockets in a pool for later use.  They
will be explicitly marked so as to not keep the Node.js process running.
However, it is still a good idea to explicitly <a href="#net_socket_destroy"><code>destroy()</code></a> KeepAlive
agents when they are no longer in use, so that the Sockets will be shut
down.</p>
<p>Sockets are removed from the agent's pool when the socket emits either
a <code>'close'</code> event or a special <code>'agentRemove'</code> event. This means that if
you intend to keep one HTTP request open for a long time and don't
want it to stay in the pool you can do something along the lines of:</p>
<pre class="sh_sourceCode"><code class="lang-js">http<span class="sh_symbol">.</span><span class="sh_function">get</span><span class="sh_symbol">(</span>options<span class="sh_symbol">,</span> <span class="sh_symbol">(</span>res<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// Do stuff</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'socket'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>socket<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  socket<span class="sh_symbol">.</span><span class="sh_function">emit</span><span class="sh_symbol">(</span><span class="sh_string">'agentRemove'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>Alternatively, you could just opt out of pooling entirely using
<code>agent:false</code>:</p>
<pre class="sh_sourceCode"><code class="lang-js">http<span class="sh_symbol">.</span><span class="sh_function">get</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>
  hostname<span class="sh_symbol">:</span> <span class="sh_string">'localhost'</span><span class="sh_symbol">,</span>
  port<span class="sh_symbol">:</span> <span class="sh_number">80</span><span class="sh_symbol">,</span>
  path<span class="sh_symbol">:</span> <span class="sh_string">'/'</span><span class="sh_symbol">,</span>
  agent<span class="sh_symbol">:</span> <span class="sh_keyword">false</span>  <span class="sh_comment">// create a new agent just for this one request</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>res<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// Do stuff with response</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">)</span>
</code></pre>
<h3>new Agent(<a href="#zlib_class_options">options</a>)<span><a class="mark" href="#http_new_agent_options" id="http_new_agent_options">#</a></span></h3>
<div class="signature"><ul>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> Set of configurable options to set on the agent.
Can have the following fields:<ul>
<li><code>keepAlive</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Keep sockets around in a pool to be used by
other requests in the future. Default = <code>false</code></li>
<li><code>keepAliveMsecs</code> <span class="type">&lt;Integer&gt;</span> When using HTTP KeepAlive, how often
to send TCP KeepAlive packets over sockets being kept alive.
Default = <code>1000</code>.  Only relevant if <code>keepAlive</code> is set to <code>true</code>.</li>
<li><code>maxSockets</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Maximum number of sockets to allow per
host.  Default = <code>Infinity</code>.</li>
<li><code>maxFreeSockets</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Maximum number of sockets to leave open
in a free state.  Only relevant if <code>keepAlive</code> is set to <code>true</code>.
Default = <code>256</code>.</li>
</ul>
</li>
</ul>
</div><p>The default <a href="#http_http_globalagent"><code>http.globalAgent</code></a> that is used by <a href="https://nodejs.org/api/http.html#http_http_request_options_callback"><code>http.request()</code></a> has all
of these values set to their respective defaults.</p>
<p>To configure any of them, you must create your own <a href="https://nodejs.org/api/http.html#http_class_http_agent"><code>http.Agent</code></a> object.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> http <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'http'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">var</span> keepAliveAgent <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> http<span class="sh_symbol">.</span><span class="sh_function">Agent</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span> keepAlive<span class="sh_symbol">:</span> <span class="sh_keyword">true</span> <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
options<span class="sh_symbol">.</span>agent <span class="sh_symbol">=</span> keepAliveAgent<span class="sh_symbol">;</span>
http<span class="sh_symbol">.</span><span class="sh_function">request</span><span class="sh_symbol">(</span>options<span class="sh_symbol">,</span> onResponseCallback<span class="sh_symbol">);</span>
</code></pre>
<h3>agent.createConnection(options[, callback])<span><a class="mark" href="#http_agent_createconnection_options_callback" id="http_agent_createconnection_options_callback">#</a></span></h3>
<p>Produces a socket/stream to be used for HTTP requests.</p>
<p>By default, this function is the same as <a href="https://nodejs.org/api/net.html#net_net_createconnection_options_connectlistener"><code>net.createConnection()</code></a>. However,
custom Agents may override this method in case greater flexibility is desired.</p>
<p>A socket/stream can be supplied in one of two ways: by returning the
socket/stream from this function, or by passing the socket/stream to <code>callback</code>.</p>
<p><code>callback</code> has a signature of <code>(err, stream)</code>.</p>
<h3>agent.destroy()<span><a class="mark" href="#http_agent_destroy" id="http_agent_destroy">#</a></span></h3>
<p>Destroy any sockets that are currently in use by the agent.</p>
<p>It is usually not necessary to do this.  However, if you are using an
agent with KeepAlive enabled, then it is best to explicitly shut down
the agent when you know that it will no longer be used.  Otherwise,
sockets may hang open for quite a long time before the server
terminates them.</p>
<h3>agent.freeSockets<span><a class="mark" href="#http_agent_freesockets" id="http_agent_freesockets">#</a></span></h3>
<p>An object which contains arrays of sockets currently awaiting use by
the Agent when HTTP KeepAlive is used.  Do not modify.</p>
<h3>agent.getName(options)<span><a class="mark" href="#http_agent_getname_options" id="http_agent_getname_options">#</a></span></h3>
<p>Get a unique name for a set of request options, to determine whether a
connection can be reused.  In the http agent, this returns
<code>host:port:localAddress</code>.  In the https agent, the name includes the
CA, cert, ciphers, and other HTTPS/TLS-specific options that determine
socket reusability.</p>
<p>Options:</p>
<ul>
<li><code>host</code>: A domain name or IP address of the server to issue the request to.</li>
<li><code>port</code>: Port of remote server.</li>
<li><code>localAddress</code>: Local interface to bind for network connections when issuing
the request.</li>
</ul>
<h3>agent.maxFreeSockets<span><a class="mark" href="#http_agent_maxfreesockets" id="http_agent_maxfreesockets">#</a></span></h3>
<p>By default set to 256.  For Agents supporting HTTP KeepAlive, this
sets the maximum number of sockets that will be left open in the free
state.</p>
<h3>agent.maxSockets<span><a class="mark" href="#http_agent_maxsockets" id="http_agent_maxsockets">#</a></span></h3>
<p>By default set to Infinity. Determines how many concurrent sockets the agent
can have open per origin. Origin is either a 'host:port' or
'host:port:localAddress' combination.</p>
<h3>agent.requests<span><a class="mark" href="#http_agent_requests" id="http_agent_requests">#</a></span></h3>
<p>An object which contains queues of requests that have not yet been assigned to
sockets. Do not modify.</p>
<h3>agent.sockets<span><a class="mark" href="#http_agent_sockets" id="http_agent_sockets">#</a></span></h3>
<p>An object which contains arrays of sockets currently in use by the
Agent.  Do not modify.</p>
<h2>Class: http.ClientRequest<span><a class="mark" href="#http_class_http_clientrequest" id="http_class_http_clientrequest">#</a></span></h2>
<p>This object is created internally and returned from <a href="https://nodejs.org/api/http.html#http_http_request_options_callback"><code>http.request()</code></a>.  It
represents an <em>in-progress</em> request whose header has already been queued.  The
header is still mutable using the <code>setHeader(name, value)</code>, <code>getHeader(name)</code>,
<code>removeHeader(name)</code> API.  The actual header will be sent along with the first
data chunk or when closing the connection.</p>
<p>To get the response, add a listener for <code>'response'</code> to the request object.
<code>'response'</code> will be emitted from the request object when the response
headers have been received.  The <code>'response'</code> event is executed with one
argument which is an instance of <a href="#http_class_http_incomingmessage"><code>http.IncomingMessage</code></a>.</p>
<p>During the <code>'response'</code> event, one can add listeners to the
response object; particularly to listen for the <code>'data'</code> event.</p>
<p>If no <code>'response'</code> handler is added, then the response will be
entirely discarded.  However, if you add a <code>'response'</code> event handler,
then you <strong>must</strong> consume the data from the response object, either by
calling <code>response.read()</code> whenever there is a <code>'readable'</code> event, or
by adding a <code>'data'</code> handler, or by calling the <code>.resume()</code> method.
Until the data is consumed, the <code>'end'</code> event will not fire.  Also, until
the data is read it will consume memory that can eventually lead to a
'process out of memory' error.</p>
<p>Note: Node.js does not check whether Content-Length and the length of the body
which has been transmitted are equal or not.</p>
<p>The request implements the <a href="https://nodejs.org/api/stream.html#stream_class_stream_writable">Writable Stream</a> interface. This is an
<a href="https://nodejs.org/api/events.html#events_class_eventemitter"><code>EventEmitter</code></a> with the following events:</p>
<h3>Event: 'abort'<span><a class="mark" href="#http_event_abort" id="http_event_abort">#</a></span></h3>
<p><code>function () { }</code></p>
<p>Emitted when the request has been aborted by the client. This event is only
emitted on the first call to <code>abort()</code>.</p>
<h3>Event: 'checkExpectation'<span><a class="mark" href="#http_event_checkexpectation" id="http_event_checkexpectation">#</a></span></h3>
<p><code>function (request, response) { }</code></p>
<p>Emitted each time a request with an http Expect header is received, where the
value is not 100-continue. If this event isn't listened for, the server will
automatically respond with a 417 Expectation Failed as appropriate.</p>
<p>Note that when this event is emitted and handled, the <code>request</code> event will
not be emitted.</p>
<h3>Event: 'connect'<span><a class="mark" href="#http_event_connect" id="http_event_connect">#</a></span></h3>
<p><code>function (response, socket, head) { }</code></p>
<p>Emitted each time a server responds to a request with a <code>CONNECT</code> method. If this
event isn't being listened for, clients receiving a <code>CONNECT</code> method will have
their connections closed.</p>
<p>A client server pair that show you how to listen for the <code>'connect'</code> event.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> http <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'http'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> net <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'net'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> url <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'url'</span><span class="sh_symbol">);</span>

<span class="sh_comment">// Create an HTTP tunneling proxy</span>
<span class="sh_keyword">var</span> proxy <span class="sh_symbol">=</span> http<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">(</span> <span class="sh_symbol">(</span>req<span class="sh_symbol">,</span> res<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  res<span class="sh_symbol">.</span><span class="sh_function">writeHead</span><span class="sh_symbol">(</span><span class="sh_number">200</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{</span><span class="sh_string">'Content-Type'</span><span class="sh_symbol">:</span> <span class="sh_string">'text/plain'</span><span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  res<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'okay'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
proxy<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'connect'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>req<span class="sh_symbol">,</span> cltSocket<span class="sh_symbol">,</span> head<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// connect to an origin server</span>
  <span class="sh_keyword">var</span> srvUrl <span class="sh_symbol">=</span> url<span class="sh_symbol">.</span><span class="sh_function">parse</span><span class="sh_symbol">(</span>`http<span class="sh_symbol">:</span><span class="sh_comment">//${req.url}`);</span>
  <span class="sh_keyword">var</span> srvSocket <span class="sh_symbol">=</span> net<span class="sh_symbol">.</span><span class="sh_function">connect</span><span class="sh_symbol">(</span>srvUrl<span class="sh_symbol">.</span>port<span class="sh_symbol">,</span> srvUrl<span class="sh_symbol">.</span>hostname<span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    cltSocket<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'HTTP/1.1 200 Connection Established</span><span class="sh_specialchar">\r\n</span><span class="sh_string">'</span> <span class="sh_symbol">+</span>
                    <span class="sh_string">'Proxy-agent: Node.js-Proxy</span><span class="sh_specialchar">\r\n</span><span class="sh_string">'</span> <span class="sh_symbol">+</span>
                    <span class="sh_string">'</span><span class="sh_specialchar">\r\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
    srvSocket<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span>head<span class="sh_symbol">);</span>
    srvSocket<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>cltSocket<span class="sh_symbol">);</span>
    cltSocket<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>srvSocket<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_comment">// now that proxy is running</span>
proxy<span class="sh_symbol">.</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">1337</span><span class="sh_symbol">,</span> <span class="sh_string">'127.0.0.1'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>

  <span class="sh_comment">// make a request to a tunneling proxy</span>
  <span class="sh_keyword">var</span> options <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span>
    port<span class="sh_symbol">:</span> <span class="sh_number">1337</span><span class="sh_symbol">,</span>
    hostname<span class="sh_symbol">:</span> <span class="sh_string">'127.0.0.1'</span><span class="sh_symbol">,</span>
    method<span class="sh_symbol">:</span> <span class="sh_string">'CONNECT'</span><span class="sh_symbol">,</span>
    path<span class="sh_symbol">:</span> <span class="sh_string">'www.google.com:80'</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

  <span class="sh_keyword">var</span> req <span class="sh_symbol">=</span> http<span class="sh_symbol">.</span><span class="sh_function">request</span><span class="sh_symbol">(</span>options<span class="sh_symbol">);</span>
  req<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">();</span>

  req<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'connect'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>res<span class="sh_symbol">,</span> socket<span class="sh_symbol">,</span> head<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'got connected!'</span><span class="sh_symbol">);</span>

    <span class="sh_comment">// make a request over an HTTP tunnel</span>
    socket<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'GET / HTTP/1.1</span><span class="sh_specialchar">\r\n</span><span class="sh_string">'</span> <span class="sh_symbol">+</span>
                 <span class="sh_string">'Host: www.google.com:80</span><span class="sh_specialchar">\r\n</span><span class="sh_string">'</span> <span class="sh_symbol">+</span>
                 <span class="sh_string">'Connection: close</span><span class="sh_specialchar">\r\n</span><span class="sh_string">'</span> <span class="sh_symbol">+</span>
                 <span class="sh_string">'</span><span class="sh_specialchar">\r\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
    socket<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>chunk<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
      console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">());</span>
    <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
    socket<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
      proxy<span class="sh_symbol">.</span><span class="sh_function">close</span><span class="sh_symbol">();</span>
    <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h3>Event: 'continue'<span><a class="mark" href="#http_event_continue" id="http_event_continue">#</a></span></h3>
<p><code>function () { }</code></p>
<p>Emitted when the server sends a '100 Continue' HTTP response, usually because
the request contained 'Expect: 100-continue'. This is an instruction that
the client should send the request body.</p>
<h3>Event: 'response'<span><a class="mark" href="#http_event_response" id="http_event_response">#</a></span></h3>
<p><code>function (response) { }</code></p>
<p>Emitted when a response is received to this request. This event is emitted only
once. The <code>response</code> argument will be an instance of <a href="#http_class_http_incomingmessage"><code>http.IncomingMessage</code></a>.</p>
<h3>Event: 'socket'<span><a class="mark" href="#http_event_socket" id="http_event_socket">#</a></span></h3>
<p><code>function (socket) { }</code></p>
<p>Emitted after a socket is assigned to this request.</p>
<h3>Event: 'upgrade'<span><a class="mark" href="#http_event_upgrade" id="http_event_upgrade">#</a></span></h3>
<p><code>function (response, socket, head) { }</code></p>
<p>Emitted each time a server responds to a request with an upgrade. If this
event isn't being listened for, clients receiving an upgrade header will have
their connections closed.</p>
<p>A client server pair that show you how to listen for the <code>'upgrade'</code> event.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> http <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'http'</span><span class="sh_symbol">);</span>

<span class="sh_comment">// Create an HTTP server</span>
<span class="sh_keyword">var</span> srv <span class="sh_symbol">=</span> http<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">(</span> <span class="sh_symbol">(</span>req<span class="sh_symbol">,</span> res<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  res<span class="sh_symbol">.</span><span class="sh_function">writeHead</span><span class="sh_symbol">(</span><span class="sh_number">200</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{</span><span class="sh_string">'Content-Type'</span><span class="sh_symbol">:</span> <span class="sh_string">'text/plain'</span><span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  res<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'okay'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
srv<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'upgrade'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>req<span class="sh_symbol">,</span> socket<span class="sh_symbol">,</span> head<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  socket<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'HTTP/1.1 101 Web Socket Protocol Handshake</span><span class="sh_specialchar">\r\n</span><span class="sh_string">'</span> <span class="sh_symbol">+</span>
               <span class="sh_string">'Upgrade: WebSocket</span><span class="sh_specialchar">\r\n</span><span class="sh_string">'</span> <span class="sh_symbol">+</span>
               <span class="sh_string">'Connection: Upgrade</span><span class="sh_specialchar">\r\n</span><span class="sh_string">'</span> <span class="sh_symbol">+</span>
               <span class="sh_string">'</span><span class="sh_specialchar">\r\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>

  socket<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>socket<span class="sh_symbol">);</span> <span class="sh_comment">// echo back</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_comment">// now that server is running</span>
srv<span class="sh_symbol">.</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">1337</span><span class="sh_symbol">,</span> <span class="sh_string">'127.0.0.1'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>

  <span class="sh_comment">// make a request</span>
  <span class="sh_keyword">var</span> options <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span>
    port<span class="sh_symbol">:</span> <span class="sh_number">1337</span><span class="sh_symbol">,</span>
    hostname<span class="sh_symbol">:</span> <span class="sh_string">'127.0.0.1'</span><span class="sh_symbol">,</span>
    headers<span class="sh_symbol">:</span> <span class="sh_cbracket">{</span>
      <span class="sh_string">'Connection'</span><span class="sh_symbol">:</span> <span class="sh_string">'Upgrade'</span><span class="sh_symbol">,</span>
      <span class="sh_string">'Upgrade'</span><span class="sh_symbol">:</span> <span class="sh_string">'websocket'</span>
    <span class="sh_cbracket">}</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

  <span class="sh_keyword">var</span> req <span class="sh_symbol">=</span> http<span class="sh_symbol">.</span><span class="sh_function">request</span><span class="sh_symbol">(</span>options<span class="sh_symbol">);</span>
  req<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">();</span>

  req<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'upgrade'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>res<span class="sh_symbol">,</span> socket<span class="sh_symbol">,</span> upgradeHead<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'got upgraded!'</span><span class="sh_symbol">);</span>
    socket<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">();</span>
    process<span class="sh_symbol">.</span><span class="sh_function">exit</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h3>request.abort()<span><a class="mark" href="#http_request_abort" id="http_request_abort">#</a></span></h3>
<p>Marks the request as aborting. Calling this will cause remaining data
in the response to be dropped and the socket to be destroyed.</p>
<h3>request.end([data][, encoding][, callback])<span><a class="mark" href="#http_request_end_data_encoding_callback" id="http_request_end_data_encoding_callback">#</a></span></h3>
<p>Finishes sending the request. If any parts of the body are
unsent, it will flush them to the stream. If the request is
chunked, this will send the terminating <code>'0\r\n\r\n'</code>.</p>
<p>If <code>data</code> is specified, it is equivalent to calling
<a href="#http_response_write_chunk_encoding_callback"><code>response.write(data, encoding)</code></a> followed by <code>request.end(callback)</code>.</p>
<p>If <code>callback</code> is specified, it will be called when the request stream
is finished.</p>
<h3>request.flushHeaders()<span><a class="mark" href="#http_request_flushheaders" id="http_request_flushheaders">#</a></span></h3>
<p>Flush the request headers.</p>
<p>For efficiency reasons, Node.js normally buffers the request headers until you
call <code>request.end()</code> or write the first chunk of request data.  It then tries
hard to pack the request headers and data into a single TCP packet.</p>
<p>That's usually what you want (it saves a TCP round-trip) but not when the first
data isn't sent until possibly much later.  <code>request.flushHeaders()</code> lets you bypass
the optimization and kickstart the request.</p>
<h3>request.setNoDelay([noDelay])<span><a class="mark" href="#http_request_setnodelay_nodelay" id="http_request_setnodelay_nodelay">#</a></span></h3>
<p>Once a socket is assigned to this request and is connected
<a href="https://nodejs.org/api/net.html#net_socket_setnodelay_nodelay"><code>socket.setNoDelay()</code></a> will be called.</p>
<h3>request.setSocketKeepAlive([enable][, initialDelay])<span><a class="mark" href="#http_request_setsocketkeepalive_enable_initialdelay" id="http_request_setsocketkeepalive_enable_initialdelay">#</a></span></h3>
<p>Once a socket is assigned to this request and is connected
<a href="https://nodejs.org/api/net.html#net_socket_setkeepalive_enable_initialdelay"><code>socket.setKeepAlive()</code></a> will be called.</p>
<h3>request.setTimeout(timeout[, callback])<span><a class="mark" href="#http_request_settimeout_timeout_callback" id="http_request_settimeout_timeout_callback">#</a></span></h3>
<p>Once a socket is assigned to this request and is connected
<a href="#net_socket_settimeout_timeout_callback"><code>socket.setTimeout()</code></a> will be called.</p>
<ul>
<li><code>timeout</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Milliseconds before a request is considered to be timed out.</li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> Optional function to be called when a timeout occurs. Same as binding to the <code>timeout</code> event.</li>
</ul>
<h3>request.write(chunk[, encoding][, callback])<span><a class="mark" href="#http_request_write_chunk_encoding_callback" id="http_request_write_chunk_encoding_callback">#</a></span></h3>
<p>Sends a chunk of the body.  By calling this method
many times, the user can stream a request body to a
server--in that case it is suggested to use the
<code>['Transfer-Encoding', 'chunked']</code> header line when
creating the request.</p>
<p>The <code>chunk</code> argument should be a <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> or a string.</p>
<p>The <code>encoding</code> argument is optional and only applies when <code>chunk</code> is a string.
Defaults to <code>'utf8'</code>.</p>
<p>The <code>callback</code> argument is optional and will be called when this chunk of data
is flushed.</p>
<p>Returns <code>request</code>.</p>
<h2>Class: http.Server<span><a class="mark" href="#http_class_http_server" id="http_class_http_server">#</a></span></h2>
<p>This class inherits from <a href="https://nodejs.org/api/net.html#net_class_net_server"><code>net.Server</code></a> and has the following additional events:</p>
<h3>Event: 'checkContinue'<span><a class="mark" href="#http_event_checkcontinue" id="http_event_checkcontinue">#</a></span></h3>
<p><code>function (request, response) { }</code></p>
<p>Emitted each time a request with an http Expect: 100-continue is received.
If this event isn't listened for, the server will automatically respond
with a 100 Continue as appropriate.</p>
<p>Handling this event involves calling <a href="#http_response_writecontinue"><code>response.writeContinue()</code></a> if the client
should continue to send the request body, or generating an appropriate HTTP
response (e.g., 400 Bad Request) if the client should not continue to send the
request body.</p>
<p>Note that when this event is emitted and handled, the <code>'request'</code> event will
not be emitted.</p>
<h3>Event: 'clientError'<span><a class="mark" href="#http_event_clienterror" id="http_event_clienterror">#</a></span></h3>
<p><code>function (exception, socket) { }</code></p>
<p>If a client connection emits an <code>'error'</code> event, it will be forwarded here.
Listener of this event is responsible for closing/destroying the underlying
socket. For example, one may wish to more gracefully close the socket with an
HTTP '400 Bad Request' response instead of abruptly severing the connection.</p>
<p>Default behavior is to destroy the socket immediately on malformed request.</p>
<p><code>socket</code> is the <a href="https://nodejs.org/api/net.html#net_class_net_socket"><code>net.Socket</code></a> object that the error originated from.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> http <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'http'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> server <span class="sh_symbol">=</span> http<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">((</span>req<span class="sh_symbol">,</span> res<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  res<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
server<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'clientError'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">,</span> socket<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  socket<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'HTTP/1.1 400 Bad Request</span><span class="sh_specialchar">\r\n\r\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
server<span class="sh_symbol">.</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">8000</span><span class="sh_symbol">);</span>
</code></pre>
<p>When the <code>'clientError'</code> event occurs, there is no <code>request</code> or <code>response</code>
object, so any HTTP response sent, including response headers and payload,
<em>must</em> be written directly to the <code>socket</code> object. Care must be taken to
ensure the response is a properly formatted HTTP response message.</p>
<h3>Event: 'close'<span><a class="mark" href="#http_event_close" id="http_event_close">#</a></span></h3>
<p><code>function () { }</code></p>
<p>Emitted when the server closes.</p>
<h3>Event: 'connect'<span><a class="mark" href="#http_event_connect_1" id="http_event_connect_1">#</a></span></h3>
<p><code>function (request, socket, head) { }</code></p>
<p>Emitted each time a client requests a http <code>CONNECT</code> method. If this event isn't
listened for, then clients requesting a <code>CONNECT</code> method will have their
connections closed.</p>
<ul>
<li><code>request</code> is the arguments for the http request, as it is in the request
event.</li>
<li><code>socket</code> is the network socket between the server and client.</li>
<li><code>head</code> is an instance of Buffer, the first packet of the tunneling stream,
this may be empty.</li>
</ul>
<p>After this event is emitted, the request's socket will not have a <code>'data'</code>
event listener, meaning you will need to bind to it in order to handle data
sent to the server on that socket.</p>
<h3>Event: 'connection'<span><a class="mark" href="#http_event_connection" id="http_event_connection">#</a></span></h3>
<p><code>function (socket) { }</code></p>
<p>When a new TCP stream is established. <code>socket</code> is an object of type
<a href="https://nodejs.org/api/net.html#net_class_net_socket"><code>net.Socket</code></a>. Usually users will not want to access this event. In
particular, the socket will not emit <code>'readable'</code> events because of how
the protocol parser attaches to the socket. The <code>socket</code> can also be
accessed at <code>request.connection</code>.</p>
<h3>Event: 'request'<span><a class="mark" href="#http_event_request" id="http_event_request">#</a></span></h3>
<p><code>function (request, response) { }</code></p>
<p>Emitted each time there is a request. Note that there may be multiple requests
per connection (in the case of keep-alive connections).
 <code>request</code> is an instance of <a href="#http_class_http_incomingmessage"><code>http.IncomingMessage</code></a> and <code>response</code> is
an instance of <a href="#http_class_http_serverresponse"><code>http.ServerResponse</code></a>.</p>
<h3>Event: 'upgrade'<span><a class="mark" href="#http_event_upgrade_1" id="http_event_upgrade_1">#</a></span></h3>
<p><code>function (request, socket, head) { }</code></p>
<p>Emitted each time a client requests a http upgrade. If this event isn't
listened for, then clients requesting an upgrade will have their connections
closed.</p>
<ul>
<li><code>request</code> is the arguments for the http request, as it is in the request
event.</li>
<li><code>socket</code> is the network socket between the server and client.</li>
<li><code>head</code> is an instance of Buffer, the first packet of the upgraded stream,
this may be empty.</li>
</ul>
<p>After this event is emitted, the request's socket will not have a <code>'data'</code>
event listener, meaning you will need to bind to it in order to handle data
sent to the server on that socket.</p>
<h3>server.close([callback])<span><a class="mark" href="#http_server_close_callback" id="http_server_close_callback">#</a></span></h3>
<p>Stops the server from accepting new connections.  See <a href="https://nodejs.org/api/net.html#net_server_close_callback"><code>net.Server.close()</code></a>.</p>
<h3>server.listen(handle[, callback])<span><a class="mark" href="#http_server_listen_handle_callback" id="http_server_listen_handle_callback">#</a></span></h3>
<div class="signature"><ul>
<li><code>handle</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
</div><p>The <code>handle</code> object can be set to either a server or socket (anything
with an underlying <code>_handle</code> member), or a <code>{fd: &lt;n&gt;}</code> object.</p>
<p>This will cause the server to accept connections on the specified
handle, but it is presumed that the file descriptor or handle has
already been bound to a port or domain socket.</p>
<p>Listening on a file descriptor is not supported on Windows.</p>
<p>This function is asynchronous. The last parameter <code>callback</code> will be added as
a listener for the <code>'listening'</code> event. See also <a href="https://nodejs.org/api/net.html#net_server_listen_handle_backlog_callback"><code>net.Server.listen()</code></a>.</p>
<p>Returns <code>server</code>.</p>
<h3>server.listen(path[, callback])<span><a class="mark" href="#http_server_listen_path_callback" id="http_server_listen_path_callback">#</a></span></h3>
<p>Start a UNIX socket server listening for connections on the given <code>path</code>.</p>
<p>This function is asynchronous. The last parameter <code>callback</code> will be added as
a listener for the <code>'listening'</code> event.  See also <a href="https://nodejs.org/api/net.html#net_server_listen_path_backlog_callback"><code>net.Server.listen(path)</code></a>.</p>
<h3>server.listen(port[, hostname][, backlog][, callback])<span><a class="mark" href="#http_server_listen_port_hostname_backlog_callback" id="http_server_listen_port_hostname_backlog_callback">#</a></span></h3>
<p>Begin accepting connections on the specified <code>port</code> and <code>hostname</code>. If the
<code>hostname</code> is omitted, the server will accept connections on any IPv6 address
(<code>::</code>) when IPv6 is available, or any IPv4 address (<code>0.0.0.0</code>) otherwise. Use a
port value of zero to have the operating system assign an available port.</p>
<p>To listen to a unix socket, supply a filename instead of port and hostname.</p>
<p>Backlog is the maximum length of the queue of pending connections.
The actual length will be determined by your OS through sysctl settings such as
<code>tcp_max_syn_backlog</code> and <code>somaxconn</code> on linux. The default value of this
parameter is 511 (not 512).</p>
<p>This function is asynchronous. The last parameter <code>callback</code> will be added as
a listener for the <code>'listening'</code> event.  See also <a href="https://nodejs.org/api/net.html#net_server_listen_port_hostname_backlog_callback"><code>net.Server.listen(port)</code></a>.</p>
<h3>server.listening<span><a class="mark" href="#http_server_listening" id="http_server_listening">#</a></span></h3>
<p>A Boolean indicating whether or not the server is listening for
connections.</p>
<h3>server.maxHeadersCount<span><a class="mark" href="#http_server_maxheaderscount" id="http_server_maxheaderscount">#</a></span></h3>
<p>Limits maximum incoming headers count, equal to 1000 by default. If set to 0 -
no limit will be applied.</p>
<h3>server.setTimeout(msecs, callback)<span><a class="mark" href="#http_server_settimeout_msecs_callback" id="http_server_settimeout_msecs_callback">#</a></span></h3>
<div class="signature"><ul>
<li><code>msecs</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
</div><p>Sets the timeout value for sockets, and emits a <code>'timeout'</code> event on
the Server object, passing the socket as an argument, if a timeout
occurs.</p>
<p>If there is a <code>'timeout'</code> event listener on the Server object, then it
will be called with the timed-out socket as an argument.</p>
<p>By default, the Server's timeout value is 2 minutes, and sockets are
destroyed automatically if they time out.  However, if you assign a
callback to the Server's <code>'timeout'</code> event, then you are responsible
for handling socket timeouts.</p>
<p>Returns <code>server</code>.</p>
<h3>server.timeout<span><a class="mark" href="#http_server_timeout" id="http_server_timeout">#</a></span></h3>
<div class="signature"><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Default = 120000 (2 minutes)</li>
</ul>
</div><p>The number of milliseconds of inactivity before a socket is presumed
to have timed out.</p>
<p>Note that the socket timeout logic is set up on connection, so
changing this value only affects <em>new</em> connections to the server, not
any existing connections.</p>
<p>Set to 0 to disable any kind of automatic timeout behavior on incoming
connections.</p>
<h2>Class: http.ServerResponse<span><a class="mark" href="#http_class_http_serverresponse" id="http_class_http_serverresponse">#</a></span></h2>
<p>This object is created internally by a HTTP server--not by the user. It is
passed as the second parameter to the <code>'request'</code> event.</p>
<p>The response implements, but does not inherit from, the <a href="https://nodejs.org/api/stream.html#stream_class_stream_writable">Writable Stream</a>
interface. This is an <a href="https://nodejs.org/api/events.html#events_class_eventemitter"><code>EventEmitter</code></a> with the following events:</p>
<h3>Event: 'close'<span><a class="mark" href="#http_event_close_1" id="http_event_close_1">#</a></span></h3>
<p><code>function () { }</code></p>
<p>Indicates that the underlying connection was terminated before
<a href="#http_response_end_data_encoding_callback"><code>response.end()</code></a> was called or able to flush.</p>
<h3>Event: 'finish'<span><a class="mark" href="#http_event_finish" id="http_event_finish">#</a></span></h3>
<p><code>function () { }</code></p>
<p>Emitted when the response has been sent. More specifically, this event is
emitted when the last segment of the response headers and body have been
handed off to the operating system for transmission over the network. It
does not imply that the client has received anything yet.</p>
<p>After this event, no more events will be emitted on the response object.</p>
<h3>response.addTrailers(headers)<span><a class="mark" href="#http_response_addtrailers_headers" id="http_response_addtrailers_headers">#</a></span></h3>
<p>This method adds HTTP trailing headers (a header but at the end of the
message) to the response.</p>
<p>Trailers will <strong>only</strong> be emitted if chunked encoding is used for the
response; if it is not (e.g., if the request was HTTP/1.0), they will
be silently discarded.</p>
<p>Note that HTTP requires the <code>Trailer</code> header to be sent if you intend to
emit trailers, with a list of the header fields in its value. E.g.,</p>
<pre class="sh_sourceCode"><code class="lang-js">response<span class="sh_symbol">.</span><span class="sh_function">writeHead</span><span class="sh_symbol">(</span><span class="sh_number">200</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{</span> <span class="sh_string">'Content-Type'</span><span class="sh_symbol">:</span> <span class="sh_string">'text/plain'</span><span class="sh_symbol">,</span>
                          <span class="sh_string">'Trailer'</span><span class="sh_symbol">:</span> <span class="sh_string">'Content-MD5'</span> <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
response<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span>fileData<span class="sh_symbol">);</span>
response<span class="sh_symbol">.</span><span class="sh_function">addTrailers</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span><span class="sh_string">'Content-MD5'</span><span class="sh_symbol">:</span> <span class="sh_string">'7895bf4b8828b55ceaf47747b4bca667'</span><span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
response<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">();</span>
</code></pre>
<p>Attempting to set a header field name or value that contains invalid characters
will result in a <a href="https://nodejs.org/api/errors.html#errors_class_typeerror"><code>TypeError</code></a> being thrown.</p>
<h3>response.end([data][, encoding][, callback])<span><a class="mark" href="#http_response_end_data_encoding_callback" id="http_response_end_data_encoding_callback">#</a></span></h3>
<p>This method signals to the server that all of the response headers and body
have been sent; that server should consider this message complete.
The method, <code>response.end()</code>, MUST be called on each response.</p>
<p>If <code>data</code> is specified, it is equivalent to calling
<a href="#http_response_write_chunk_encoding_callback"><code>response.write(data, encoding)</code></a> followed by <code>response.end(callback)</code>.</p>
<p>If <code>callback</code> is specified, it will be called when the response stream
is finished.</p>
<h3>response.finished<span><a class="mark" href="#http_response_finished" id="http_response_finished">#</a></span></h3>
<p>Boolean value that indicates whether the response has completed. Starts
as <code>false</code>. After <a href="#http_response_end_data_encoding_callback"><code>response.end()</code></a> executes, the value will be <code>true</code>.</p>
<h3>response.getHeader(name)<span><a class="mark" href="#http_response_getheader_name" id="http_response_getheader_name">#</a></span></h3>
<p>Reads out a header that's already been queued but not sent to the client.  Note
that the name is case insensitive.  This can only be called before headers get
implicitly flushed.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">var</span> contentType <span class="sh_symbol">=</span> response<span class="sh_symbol">.</span><span class="sh_function">getHeader</span><span class="sh_symbol">(</span><span class="sh_string">'content-type'</span><span class="sh_symbol">);</span>
</code></pre>
<h3>response.headersSent<span><a class="mark" href="#http_response_headerssent" id="http_response_headerssent">#</a></span></h3>
<p>Boolean (read-only). True if headers were sent, false otherwise.</p>
<h3>response.removeHeader(name)<span><a class="mark" href="#http_response_removeheader_name" id="http_response_removeheader_name">#</a></span></h3>
<p>Removes a header that's queued for implicit sending.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js">response<span class="sh_symbol">.</span><span class="sh_function">removeHeader</span><span class="sh_symbol">(</span><span class="sh_string">'Content-Encoding'</span><span class="sh_symbol">);</span>
</code></pre>
<h3>response.sendDate<span><a class="mark" href="#http_response_senddate" id="http_response_senddate">#</a></span></h3>
<p>When true, the Date header will be automatically generated and sent in
the response if it is not already present in the headers. Defaults to true.</p>
<p>This should only be disabled for testing; HTTP requires the Date header
in responses.</p>
<h3>response.setHeader(name, value)<span><a class="mark" href="#http_response_setheader_name_value" id="http_response_setheader_name_value">#</a></span></h3>
<p>Sets a single header value for implicit headers.  If this header already exists
in the to-be-sent headers, its value will be replaced.  Use an array of strings
here if you need to send multiple headers with the same name.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js">response<span class="sh_symbol">.</span><span class="sh_function">setHeader</span><span class="sh_symbol">(</span><span class="sh_string">'Content-Type'</span><span class="sh_symbol">,</span> <span class="sh_string">'text/html'</span><span class="sh_symbol">);</span>
</code></pre>
<p>or</p>
<pre class="sh_sourceCode"><code class="lang-js">response<span class="sh_symbol">.</span><span class="sh_function">setHeader</span><span class="sh_symbol">(</span><span class="sh_string">'Set-Cookie'</span><span class="sh_symbol">,</span> <span class="sh_symbol">[</span><span class="sh_string">'type=ninja'</span><span class="sh_symbol">,</span> <span class="sh_string">'language=javascript'</span><span class="sh_symbol">]);</span>
</code></pre>
<p>Attempting to set a header field name or value that contains invalid characters
will result in a <a href="https://nodejs.org/api/errors.html#errors_class_typeerror"><code>TypeError</code></a> being thrown.</p>
<p>When headers have been set with <a href="#http_response_setheader_name_value"><code>response.setHeader()</code></a>, they will be merged with
any headers passed to <a href="#http_response_writehead_statuscode_statusmessage_headers"><code>response.writeHead()</code></a>, with the headers passed to
<a href="#http_response_writehead_statuscode_statusmessage_headers"><code>response.writeHead()</code></a> given precedence.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// returns content-type = text/plain</span>
<span class="sh_keyword">const</span> server <span class="sh_symbol">=</span> http<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">((</span>req<span class="sh_symbol">,</span>res<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  res<span class="sh_symbol">.</span><span class="sh_function">setHeader</span><span class="sh_symbol">(</span><span class="sh_string">'Content-Type'</span><span class="sh_symbol">,</span> <span class="sh_string">'text/html'</span><span class="sh_symbol">);</span>
  res<span class="sh_symbol">.</span><span class="sh_function">setHeader</span><span class="sh_symbol">(</span><span class="sh_string">'X-Foo'</span><span class="sh_symbol">,</span> <span class="sh_string">'bar'</span><span class="sh_symbol">);</span>
  res<span class="sh_symbol">.</span><span class="sh_function">writeHead</span><span class="sh_symbol">(</span><span class="sh_number">200</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{</span><span class="sh_string">'Content-Type'</span><span class="sh_symbol">:</span> <span class="sh_string">'text/plain'</span><span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  res<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'ok'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h3>response.setTimeout(msecs, callback)<span><a class="mark" href="#http_response_settimeout_msecs_callback" id="http_response_settimeout_msecs_callback">#</a></span></h3>
<div class="signature"><ul>
<li><code>msecs</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
</div><p>Sets the Socket's timeout value to <code>msecs</code>.  If a callback is
provided, then it is added as a listener on the <code>'timeout'</code> event on
the response object.</p>
<p>If no <code>'timeout'</code> listener is added to the request, the response, or
the server, then sockets are destroyed when they time out.  If you
assign a handler on the request, the response, or the server's
<code>'timeout'</code> events, then it is your responsibility to handle timed out
sockets.</p>
<p>Returns <code>response</code>.</p>
<h3>response.statusCode<span><a class="mark" href="#http_response_statuscode" id="http_response_statuscode">#</a></span></h3>
<p>When using implicit headers (not calling <a href="#http_response_writehead_statuscode_statusmessage_headers"><code>response.writeHead()</code></a> explicitly),
this property controls the status code that will be sent to the client when
the headers get flushed.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js">response<span class="sh_symbol">.</span>statusCode <span class="sh_symbol">=</span> <span class="sh_number">404</span><span class="sh_symbol">;</span>
</code></pre>
<p>After response header was sent to the client, this property indicates the
status code which was sent out.</p>
<h3>response.statusMessage<span><a class="mark" href="#http_response_statusmessage" id="http_response_statusmessage">#</a></span></h3>
<p>When using implicit headers (not calling <a href="#http_response_writehead_statuscode_statusmessage_headers"><code>response.writeHead()</code></a> explicitly), this property
controls the status message that will be sent to the client when the headers get
flushed. If this is left as <code>undefined</code> then the standard message for the status
code will be used.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js">response<span class="sh_symbol">.</span>statusMessage <span class="sh_symbol">=</span> <span class="sh_string">'Not found'</span><span class="sh_symbol">;</span>
</code></pre>
<p>After response header was sent to the client, this property indicates the
status message which was sent out.</p>
<h3>response.write(chunk[, encoding][, callback])<span><a class="mark" href="#http_response_write_chunk_encoding_callback" id="http_response_write_chunk_encoding_callback">#</a></span></h3>
<p>If this method is called and <a href="#http_response_writehead_statuscode_statusmessage_headers"><code>response.writeHead()</code></a> has not been called,
it will switch to implicit header mode and flush the implicit headers.</p>
<p>This sends a chunk of the response body. This method may
be called multiple times to provide successive parts of the body.</p>
<p><code>chunk</code> can be a string or a buffer. If <code>chunk</code> is a string,
the second parameter specifies how to encode it into a byte stream.
By default the <code>encoding</code> is <code>'utf8'</code>. The last parameter <code>callback</code>
will be called when this chunk of data is flushed.</p>
<p><strong>Note</strong>: This is the raw HTTP body and has nothing to do with
higher-level multi-part body encodings that may be used.</p>
<p>The first time <a href="#http_response_write_chunk_encoding_callback"><code>response.write()</code></a> is called, it will send the buffered
header information and the first body to the client. The second time
<a href="#http_response_write_chunk_encoding_callback"><code>response.write()</code></a> is called, Node.js assumes you're going to be streaming
data, and sends that separately. That is, the response is buffered up to the
first chunk of body.</p>
<p>Returns <code>true</code> if the entire data was flushed successfully to the kernel
buffer. Returns <code>false</code> if all or part of the data was queued in user memory.
<code>'drain'</code> will be emitted when the buffer is free again.</p>
<h3>response.writeContinue()<span><a class="mark" href="#http_response_writecontinue" id="http_response_writecontinue">#</a></span></h3>
<p>Sends a HTTP/1.1 100 Continue message to the client, indicating that
the request body should be sent. See the <a href="#http_event_checkcontinue"><code>'checkContinue'</code></a> event on <code>Server</code>.</p>
<h3>response.writeHead(statusCode[, statusMessage][, headers])<span><a class="mark" href="#http_response_writehead_statuscode_statusmessage_headers" id="http_response_writehead_statuscode_statusmessage_headers">#</a></span></h3>
<p>Sends a response header to the request. The status code is a 3-digit HTTP
status code, like <code>404</code>. The last argument, <code>headers</code>, are the response headers.
Optionally one can give a human-readable <code>statusMessage</code> as the second
argument.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">var</span> body <span class="sh_symbol">=</span> <span class="sh_string">'hello world'</span><span class="sh_symbol">;</span>
response<span class="sh_symbol">.</span><span class="sh_function">writeHead</span><span class="sh_symbol">(</span><span class="sh_number">200</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{</span>
  <span class="sh_string">'Content-Length'</span><span class="sh_symbol">:</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">byteLength</span><span class="sh_symbol">(</span>body<span class="sh_symbol">),</span>
  <span class="sh_string">'Content-Type'</span><span class="sh_symbol">:</span> <span class="sh_string">'text/plain'</span> <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>This method must only be called once on a message and it must
be called before <a href="#http_response_end_data_encoding_callback"><code>response.end()</code></a> is called.</p>
<p>If you call <a href="#http_response_write_chunk_encoding_callback"><code>response.write()</code></a> or <a href="#http_response_end_data_encoding_callback"><code>response.end()</code></a> before calling this,
the implicit/mutable headers will be calculated and call this function for you.</p>
<p>When headers have been set with <a href="#http_response_setheader_name_value"><code>response.setHeader()</code></a>, they will be merged with
any headers passed to <a href="#http_response_writehead_statuscode_statusmessage_headers"><code>response.writeHead()</code></a>, with the headers passed to
<a href="#http_response_writehead_statuscode_statusmessage_headers"><code>response.writeHead()</code></a> given precedence.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// returns content-type = text/plain</span>
<span class="sh_keyword">const</span> server <span class="sh_symbol">=</span> http<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">((</span>req<span class="sh_symbol">,</span>res<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  res<span class="sh_symbol">.</span><span class="sh_function">setHeader</span><span class="sh_symbol">(</span><span class="sh_string">'Content-Type'</span><span class="sh_symbol">,</span> <span class="sh_string">'text/html'</span><span class="sh_symbol">);</span>
  res<span class="sh_symbol">.</span><span class="sh_function">setHeader</span><span class="sh_symbol">(</span><span class="sh_string">'X-Foo'</span><span class="sh_symbol">,</span> <span class="sh_string">'bar'</span><span class="sh_symbol">);</span>
  res<span class="sh_symbol">.</span><span class="sh_function">writeHead</span><span class="sh_symbol">(</span><span class="sh_number">200</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{</span><span class="sh_string">'Content-Type'</span><span class="sh_symbol">:</span> <span class="sh_string">'text/plain'</span><span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  res<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'ok'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>Note that Content-Length is given in bytes not characters. The above example
works because the string <code>'hello world'</code> contains only single byte characters.
If the body contains higher coded characters then <code>Buffer.byteLength()</code>
should be used to determine the number of bytes in a given encoding.
And Node.js does not check whether Content-Length and the length of the body
which has been transmitted are equal or not.</p>
<p>Attempting to set a header field name or value that contains invalid characters
will result in a <a href="https://nodejs.org/api/errors.html#errors_class_typeerror"><code>TypeError</code></a> being thrown.</p>
<h2>Class: http.IncomingMessage<span><a class="mark" href="#http_class_http_incomingmessage" id="http_class_http_incomingmessage">#</a></span></h2>
<p>An <code>IncomingMessage</code> object is created by <a href="https://nodejs.org/api/http.html#http_class_http_server"><code>http.Server</code></a> or
<a href="#http_class_http_clientrequest"><code>http.ClientRequest</code></a> and passed as the first argument to the <code>'request'</code>
and <code>'response'</code> event respectively. It may be used to access response status,
headers and data.</p>
<p>It implements the <a href="https://nodejs.org/api/stream.html#stream_class_stream_readable">Readable Stream</a> interface, as well as the
following additional events, methods, and properties.</p>
<h3>Event: 'close'<span><a class="mark" href="#http_event_close_2" id="http_event_close_2">#</a></span></h3>
<p><code>function () { }</code></p>
<p>Indicates that the underlying connection was closed.
Just like <code>'end'</code>, this event occurs only once per response.</p>
<h3>message.destroy([error])<span><a class="mark" href="#http_message_destroy_error" id="http_message_destroy_error">#</a></span></h3>
<div class="signature"><ul>
<li><code>error</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" class="type">&lt;Error&gt;</a></li>
</ul>
</div><p>Calls <code>destroy()</code> on the socket that received the <code>IncomingMessage</code>. If <code>error</code>
is provided, an <code>'error'</code> event is emitted and <code>error</code> is passed as an argument
to any listeners on the event.</p>
<h3>message.headers<span><a class="mark" href="#http_message_headers" id="http_message_headers">#</a></span></h3>
<p>The request/response headers object.</p>
<p>Key-value pairs of header names and values. Header names are lower-cased.
Example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// Prints something like:</span>
<span class="sh_comment">//</span>
<span class="sh_comment">// { 'user-agent': 'curl/7.22.0',</span>
<span class="sh_comment">//   host: '127.0.0.1:8000',</span>
<span class="sh_comment">//   accept: '*/*' }</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>request<span class="sh_symbol">.</span>headers<span class="sh_symbol">);</span>
</code></pre>
<p>Duplicates in raw headers are handled in the following ways, depending on the
header name:</p>
<ul>
<li>Duplicates of <code>age</code>, <code>authorization</code>, <code>content-length</code>, <code>content-type</code>,
<code>etag</code>, <code>expires</code>, <code>from</code>, <code>host</code>, <code>if-modified-since</code>, <code>if-unmodified-since</code>,
<code>last-modified</code>, <code>location</code>, <code>max-forwards</code>, <code>proxy-authorization</code>, <code>referer</code>,
<code>retry-after</code>, or <code>user-agent</code> are discarded.</li>
<li><code>set-cookie</code> is always an array. Duplicates are added to the array.</li>
<li>For all other headers, the values are joined together with ', '.</li>
</ul>
<h3>message.httpVersion<span><a class="mark" href="#http_message_httpversion" id="http_message_httpversion">#</a></span></h3>
<p>In case of server request, the HTTP version sent by the client. In the case of
client response, the HTTP version of the connected-to server.
Probably either <code>'1.1'</code> or <code>'1.0'</code>.</p>
<p>Also <code>message.httpVersionMajor</code> is the first integer and
<code>message.httpVersionMinor</code> is the second.</p>
<h3>message.method<span><a class="mark" href="#http_message_method" id="http_message_method">#</a></span></h3>
<p><strong>Only valid for request obtained from <a href="https://nodejs.org/api/http.html#http_class_http_server"><code>http.Server</code></a>.</strong></p>
<p>The request method as a string. Read only. Example:
<code>'GET'</code>, <code>'DELETE'</code>.</p>
<h3>message.rawHeaders<span><a class="mark" href="#http_message_rawheaders" id="http_message_rawheaders">#</a></span></h3>
<p>The raw request/response headers list exactly as they were received.</p>
<p>Note that the keys and values are in the same list.  It is <em>not</em> a
list of tuples.  So, the even-numbered offsets are key values, and the
odd-numbered offsets are the associated values.</p>
<p>Header names are not lowercased, and duplicates are not merged.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// Prints something like:</span>
<span class="sh_comment">//</span>
<span class="sh_comment">// [ 'user-agent',</span>
<span class="sh_comment">//   'this is invalid because there can be only one',</span>
<span class="sh_comment">//   'User-Agent',</span>
<span class="sh_comment">//   'curl/7.22.0',</span>
<span class="sh_comment">//   'Host',</span>
<span class="sh_comment">//   '127.0.0.1:8000',</span>
<span class="sh_comment">//   'ACCEPT',</span>
<span class="sh_comment">//   '*/*' ]</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>request<span class="sh_symbol">.</span>rawHeaders<span class="sh_symbol">);</span>
</code></pre>
<h3>message.rawTrailers<span><a class="mark" href="#http_message_rawtrailers" id="http_message_rawtrailers">#</a></span></h3>
<p>The raw request/response trailer keys and values exactly as they were
received.  Only populated at the <code>'end'</code> event.</p>
<h3>message.setTimeout(msecs, callback)<span><a class="mark" href="#http_message_settimeout_msecs_callback" id="http_message_settimeout_msecs_callback">#</a></span></h3>
<div class="signature"><ul>
<li><code>msecs</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
</div><p>Calls <code>message.connection.setTimeout(msecs, callback)</code>.</p>
<p>Returns <code>message</code>.</p>
<h3>message.statusCode<span><a class="mark" href="#http_message_statuscode" id="http_message_statuscode">#</a></span></h3>
<p><strong>Only valid for response obtained from <a href="#http_class_http_clientrequest"><code>http.ClientRequest</code></a>.</strong></p>
<p>The 3-digit HTTP response status code. E.G. <code>404</code>.</p>
<h3>message.statusMessage<span><a class="mark" href="#http_message_statusmessage" id="http_message_statusmessage">#</a></span></h3>
<p><strong>Only valid for response obtained from <a href="#http_class_http_clientrequest"><code>http.ClientRequest</code></a>.</strong></p>
<p>The HTTP response status message (reason phrase). E.G. <code>OK</code> or <code>Internal Server Error</code>.</p>
<h3>message.socket<span><a class="mark" href="#http_message_socket" id="http_message_socket">#</a></span></h3>
<p>The <a href="https://nodejs.org/api/net.html#net_class_net_socket"><code>net.Socket</code></a> object associated with the connection.</p>
<p>With HTTPS support, use <a href="https://nodejs.org/api/tls.html#tls_tlssocket_getpeercertificate_detailed"><code>request.socket.getPeerCertificate()</code></a> to obtain the
client's authentication details.</p>
<h3>message.trailers<span><a class="mark" href="#http_message_trailers" id="http_message_trailers">#</a></span></h3>
<p>The request/response trailers object. Only populated at the <code>'end'</code> event.</p>
<h3>message.url<span><a class="mark" href="#http_message_url" id="http_message_url">#</a></span></h3>
<p><strong>Only valid for request obtained from <a href="https://nodejs.org/api/http.html#http_class_http_server"><code>http.Server</code></a>.</strong></p>
<p>Request URL string. This contains only the URL that is
present in the actual HTTP request. If the request is:</p>
<pre class="sh_sourceCode"><code><span class="sh_normal">GET </span><span class="sh_symbol">/</span>status<span class="sh_symbol">?</span>name<span class="sh_symbol">=</span>ryan <span class="sh_normal">HTTP</span><span class="sh_symbol">/</span><span class="sh_number">1.1</span><span class="sh_symbol">\</span>r<span class="sh_symbol">\</span>n
Accept<span class="sh_symbol">:</span> <span class="sh_normal">text</span><span class="sh_symbol">/</span>plain<span class="sh_symbol">\</span>r<span class="sh_symbol">\</span>n
<span class="sh_symbol">\</span>r<span class="sh_symbol">\</span>n
</code></pre><p>Then <code>request.url</code> will be:</p>
<pre class="sh_sourceCode"><code><span class="sh_string">'/status?name=ryan'</span>
</code></pre><p>If you would like to parse the URL into its parts, you can use
<code>require('url').parse(request.url)</code>.  Example:</p>
<pre class="sh_sourceCode"><code>$ node
<span class="sh_symbol">&gt;</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'url'</span><span class="sh_symbol">).</span><span class="sh_function">parse</span><span class="sh_symbol">(</span><span class="sh_string">'/status?name=ryan'</span><span class="sh_symbol">)</span>
<span class="sh_cbracket">{</span>
  href<span class="sh_symbol">:</span> <span class="sh_string">'/status?name=ryan'</span><span class="sh_symbol">,</span>
  search<span class="sh_symbol">:</span> <span class="sh_string">'?name=ryan'</span><span class="sh_symbol">,</span>
  query<span class="sh_symbol">:</span> <span class="sh_string">'name=ryan'</span><span class="sh_symbol">,</span>
  pathname<span class="sh_symbol">:</span> <span class="sh_string">'/status'</span>
<span class="sh_cbracket">}</span>
</code></pre><p>If you would like to extract the params from the query string,
you can use the <code>require('querystring').parse</code> function, or pass
<code>true</code> as the second argument to <code>require('url').parse</code>.  Example:</p>
<pre class="sh_sourceCode"><code>$ node
<span class="sh_symbol">&gt;</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'url'</span><span class="sh_symbol">).</span><span class="sh_function">parse</span><span class="sh_symbol">(</span><span class="sh_string">'/status?name=ryan'</span><span class="sh_symbol">,</span> <span class="sh_keyword">true</span><span class="sh_symbol">)</span>
<span class="sh_cbracket">{</span>
  href<span class="sh_symbol">:</span> <span class="sh_string">'/status?name=ryan'</span><span class="sh_symbol">,</span>
  search<span class="sh_symbol">:</span> <span class="sh_string">'?name=ryan'</span><span class="sh_symbol">,</span>
  query<span class="sh_symbol">:</span> <span class="sh_cbracket">{</span>name<span class="sh_symbol">:</span> <span class="sh_string">'ryan'</span><span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  pathname<span class="sh_symbol">:</span> <span class="sh_string">'/status'</span>
<span class="sh_cbracket">}</span>
</code></pre><h2>http.METHODS<span><a class="mark" href="#http_http_methods" id="http_http_methods">#</a></span></h2>
<div class="signature"><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" class="type">&lt;Array&gt;</a></li>
</ul>
</div><p>A list of the HTTP methods that are supported by the parser.</p>
<h2>http.STATUS_CODES<span><a class="mark" href="#http_http_status_codes" id="http_http_status_codes">#</a></span></h2>
<div class="signature"><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a></li>
</ul>
</div><p>A collection of all the standard HTTP response status codes, and the
short description of each.  For example, <code>http.STATUS_CODES[404] === 'Not
Found'</code>.</p>
<h2>http.createClient([port][, host])<span><a class="mark" href="#http_http_createclient_port_host" id="http_http_createclient_port_host">#</a></span></h2>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated<span class="sh_symbol">:</span> Use <a href="https://nodejs.org/api/http.html#http_http_request_options_callback"><code>http<span class="sh_symbol">.</span><span class="sh_function">request</span><span class="sh_symbol">()</span></code></a> instead<span class="sh_symbol">.</span></pre><p>Constructs a new HTTP client. <code>port</code> and <code>host</code> refer to the server to be
connected to.</p>
<h2>http.createServer([requestListener])<span><a class="mark" href="#http_http_createserver_requestlistener" id="http_http_createserver_requestlistener">#</a></span></h2>
<p>Returns a new instance of <a href="https://nodejs.org/api/http.html#http_class_http_server"><code>http.Server</code></a>.</p>
<p>The <code>requestListener</code> is a function which is automatically
added to the <code>'request'</code> event.</p>
<h2>http.get(options[, callback])<span><a class="mark" href="#http_http_get_options_callback" id="http_http_get_options_callback">#</a></span></h2>
<p>Since most requests are GET requests without bodies, Node.js provides this
convenience method. The only difference between this method and <a href="https://nodejs.org/api/http.html#http_http_request_options_callback"><code>http.request()</code></a>
is that it sets the method to GET and calls <code>req.end()</code> automatically.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js">http<span class="sh_symbol">.</span><span class="sh_function">get</span><span class="sh_symbol">(</span><span class="sh_string">'http://www.google.com/index.html'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>res<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Got response<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>res<span class="sh_symbol">.</span>statusCode<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  <span class="sh_comment">// consume response body</span>
  res<span class="sh_symbol">.</span><span class="sh_function">resume</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>e<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Got error<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>e<span class="sh_symbol">.</span>message<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h2>http.globalAgent<span><a class="mark" href="#http_http_globalagent" id="http_http_globalagent">#</a></span></h2>
<p>Global instance of Agent which is used as the default for all http client
requests.</p>
<h2>http.request(options[, callback])<span><a class="mark" href="#http_http_request_options_callback" id="http_http_request_options_callback">#</a></span></h2>
<p>Node.js maintains several connections per server to make HTTP requests.
This function allows one to transparently issue requests.</p>
<p><code>options</code> can be an object or a string. If <code>options</code> is a string, it is
automatically parsed with <a href="https://nodejs.org/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost"><code>url.parse()</code></a>.</p>
<p>Options:</p>
<ul>
<li><code>protocol</code>: Protocol to use. Defaults to <code>'http:'</code>.</li>
<li><code>host</code>: A domain name or IP address of the server to issue the request to.
Defaults to <code>'localhost'</code>.</li>
<li><code>hostname</code>: Alias for <code>host</code>. To support <a href="https://nodejs.org/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost"><code>url.parse()</code></a> <code>hostname</code> is
preferred over <code>host</code>.</li>
<li><code>family</code>: IP address family to use when resolving <code>host</code> and <code>hostname</code>.
Valid values are <code>4</code> or <code>6</code>. When unspecified, both IP v4 and v6 will be
used.</li>
<li><code>port</code>: Port of remote server. Defaults to 80.</li>
<li><code>localAddress</code>: Local interface to bind for network connections.</li>
<li><code>socketPath</code>: Unix Domain Socket (use one of host:port or socketPath).</li>
<li><code>method</code>: A string specifying the HTTP request method. Defaults to <code>'GET'</code>.</li>
<li><code>path</code>: Request path. Defaults to <code>'/'</code>. Should include query string if any.
E.G. <code>'/index.html?page=12'</code>. An exception is thrown when the request path
contains illegal characters. Currently, only spaces are rejected but that
may change in the future.</li>
<li><code>headers</code>: An object containing request headers.</li>
<li><code>auth</code>: Basic authentication i.e. <code>'user:password'</code> to compute an
Authorization header.</li>
<li><code>agent</code>: Controls <a href="#https_class_https_agent"><code>Agent</code></a> behavior. When an Agent is used request will
default to <code>Connection: keep-alive</code>. Possible values:<ul>
<li><code>undefined</code> (default): use <a href="#http_http_globalagent"><code>http.globalAgent</code></a> for this host and port.</li>
<li><code>Agent</code> object: explicitly use the passed in <code>Agent</code>.</li>
<li><code>false</code>: opts out of connection pooling with an Agent, defaults request to
<code>Connection: close</code>.</li>
</ul>
</li>
<li><code>createConnection</code>: A function that produces a socket/stream to use for the
request when the <code>agent</code> option is not used. This can be used to avoid
creating a custom Agent class just to override the default <code>createConnection</code>
function. See <a href="#http_agent_createconnection_options_callback"><code>agent.createConnection()</code></a> for more details.</li>
</ul>
<p>The optional <code>callback</code> parameter will be added as a one time listener for
the <code>'response'</code> event.</p>
<p><code>http.request()</code> returns an instance of the <a href="#http_class_http_clientrequest"><code>http.ClientRequest</code></a>
class. The <code>ClientRequest</code> instance is a writable stream. If one needs to
upload a file with a POST request, then write to the <code>ClientRequest</code> object.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">var</span> postData <span class="sh_symbol">=</span> querystring<span class="sh_symbol">.</span><span class="sh_function">stringify</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>
  <span class="sh_string">'msg'</span> <span class="sh_symbol">:</span> <span class="sh_string">'Hello World!'</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_keyword">var</span> options <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span>
  hostname<span class="sh_symbol">:</span> <span class="sh_string">'www.google.com'</span><span class="sh_symbol">,</span>
  port<span class="sh_symbol">:</span> <span class="sh_number">80</span><span class="sh_symbol">,</span>
  path<span class="sh_symbol">:</span> <span class="sh_string">'/upload'</span><span class="sh_symbol">,</span>
  method<span class="sh_symbol">:</span> <span class="sh_string">'POST'</span><span class="sh_symbol">,</span>
  headers<span class="sh_symbol">:</span> <span class="sh_cbracket">{</span>
    <span class="sh_string">'Content-Type'</span><span class="sh_symbol">:</span> <span class="sh_string">'application/x-www-form-urlencoded'</span><span class="sh_symbol">,</span>
    <span class="sh_string">'Content-Length'</span><span class="sh_symbol">:</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">byteLength</span><span class="sh_symbol">(</span>postData<span class="sh_symbol">)</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

<span class="sh_keyword">var</span> req <span class="sh_symbol">=</span> http<span class="sh_symbol">.</span><span class="sh_function">request</span><span class="sh_symbol">(</span>options<span class="sh_symbol">,</span> <span class="sh_symbol">(</span>res<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`STATUS<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>res<span class="sh_symbol">.</span>statusCode<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`HEADERS<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>JSON<span class="sh_symbol">.</span><span class="sh_function">stringify</span><span class="sh_symbol">(</span>res<span class="sh_symbol">.</span>headers<span class="sh_symbol">)</span><span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  res<span class="sh_symbol">.</span><span class="sh_function">setEncoding</span><span class="sh_symbol">(</span><span class="sh_string">'utf8'</span><span class="sh_symbol">);</span>
  res<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>chunk<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`BODY<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>chunk<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  res<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'No more data in response.'</span><span class="sh_symbol">)</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">)</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

req<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>e<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`problem <span class="sh_keyword">with</span> request<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>e<span class="sh_symbol">.</span>message<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_comment">// write data to request body</span>
req<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span>postData<span class="sh_symbol">);</span>
req<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">();</span>
</code></pre>
<p>Note that in the example <code>req.end()</code> was called. With <code>http.request()</code> one
must always call <code>req.end()</code> to signify that you're done with the request -
even if there is no data being written to the request body.</p>
<p>If any error is encountered during the request (be that with DNS resolution,
TCP level errors, or actual HTTP parse errors) an <code>'error'</code> event is emitted
on the returned request object. As with all <code>'error'</code> events, if no listeners
are registered the error will be thrown.</p>
<p>There are a few special headers that should be noted.</p>
<ul>
<li><p>Sending a 'Connection: keep-alive' will notify Node.js that the connection to
the server should be persisted until the next request.</p>
</li>
<li><p>Sending a 'Content-length' header will disable the default chunked encoding.</p>
</li>
<li><p>Sending an 'Expect' header will immediately send the request headers.
Usually, when sending 'Expect: 100-continue', you should both set a timeout
and listen for the <code>'continue'</code> event. See RFC2616 Section 8.2.3 for more
information.</p>
</li>
<li><p>Sending an Authorization header will override using the <code>auth</code> option
to compute basic authentication.</p>
</li>
</ul>
<!-- [end-include:http.md] -->
<!-- [start-include:https.md] -->
<h1>HTTPS<span><a class="mark" href="#https_https" id="https_https">#</a></span></h1>
<pre class="api_stability api_stability_2 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> Stable</pre><p>HTTPS is the HTTP protocol over TLS/SSL. In Node.js this is implemented as a
separate module.</p>
<h2>Class: https.Agent<span><a class="mark" href="#https_class_https_agent" id="https_class_https_agent">#</a></span></h2>
<p>An Agent object for HTTPS similar to <a href="https://nodejs.org/api/http.html#http_class_http_agent"><code>http.Agent</code></a>.  See <a href="#https_https_request_options_callback"><code>https.request()</code></a>
for more information.</p>
<h2>Class: https.Server<span><a class="mark" href="#https_class_https_server" id="https_class_https_server">#</a></span></h2>
<p>This class is a subclass of <code>tls.Server</code> and emits events same as
<a href="https://nodejs.org/api/http.html#http_class_http_server"><code>http.Server</code></a>. See <a href="https://nodejs.org/api/http.html#http_class_http_server"><code>http.Server</code></a> for more information.</p>
<h3>server.setTimeout(msecs, callback)<span><a class="mark" href="#https_server_settimeout_msecs_callback" id="https_server_settimeout_msecs_callback">#</a></span></h3>
<p>See <a href="https://nodejs.org/api/http.html#http_server_settimeout_msecs_callback"><code>http.Server#setTimeout()</code></a>.</p>
<h3>server.timeout<span><a class="mark" href="#https_server_timeout" id="https_server_timeout">#</a></span></h3>
<p>See <a href="https://nodejs.org/api/http.html#http_server_timeout"><code>http.Server#timeout</code></a>.</p>
<h2>https.createServer(options[, requestListener])<span><a class="mark" href="#https_https_createserver_options_requestlistener" id="https_https_createserver_options_requestlistener">#</a></span></h2>
<p>Returns a new HTTPS web server object. The <code>options</code> is similar to
<a href="#tls_tls_createserver_options_secureconnectionlistener"><code>tls.createServer()</code></a>.  The <code>requestListener</code> is a function which is
automatically added to the <code>'request'</code> event.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// curl -k https://localhost:8000/</span>
<span class="sh_keyword">const</span> https <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'https'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> fs <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'fs'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> options <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span>
  key<span class="sh_symbol">:</span> fs<span class="sh_symbol">.</span><span class="sh_function">readFileSync</span><span class="sh_symbol">(</span><span class="sh_string">'test/fixtures/keys/agent2-key.pem'</span><span class="sh_symbol">),</span>
  cert<span class="sh_symbol">:</span> fs<span class="sh_symbol">.</span><span class="sh_function">readFileSync</span><span class="sh_symbol">(</span><span class="sh_string">'test/fixtures/keys/agent2-cert.pem'</span><span class="sh_symbol">)</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

https<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">(</span>options<span class="sh_symbol">,</span> <span class="sh_symbol">(</span>req<span class="sh_symbol">,</span> res<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  res<span class="sh_symbol">.</span><span class="sh_function">writeHead</span><span class="sh_symbol">(</span><span class="sh_number">200</span><span class="sh_symbol">);</span>
  res<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'hello world</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">8000</span><span class="sh_symbol">);</span>
</code></pre>
<p>Or</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> https <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'https'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> fs <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'fs'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> options <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span>
  pfx<span class="sh_symbol">:</span> fs<span class="sh_symbol">.</span><span class="sh_function">readFileSync</span><span class="sh_symbol">(</span><span class="sh_string">'server.pfx'</span><span class="sh_symbol">)</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

https<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">(</span>options<span class="sh_symbol">,</span> <span class="sh_symbol">(</span>req<span class="sh_symbol">,</span> res<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  res<span class="sh_symbol">.</span><span class="sh_function">writeHead</span><span class="sh_symbol">(</span><span class="sh_number">200</span><span class="sh_symbol">);</span>
  res<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'hello world</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">8000</span><span class="sh_symbol">);</span>
</code></pre>
<h3>server.close([callback])<span><a class="mark" href="#https_server_close_callback" id="https_server_close_callback">#</a></span></h3>
<p>See <a href="https://nodejs.org/api/http.html#http_server_close_callback"><code>http.close()</code></a> for details.</p>
<h3>server.listen(handle[, callback])<span><a class="mark" href="#https_server_listen_handle_callback" id="https_server_listen_handle_callback">#</a></span></h3>
<h3>server.listen(path[, callback])<span><a class="mark" href="#https_server_listen_path_callback" id="https_server_listen_path_callback">#</a></span></h3>
<h3>server.listen(port[, host][, backlog][, callback])<span><a class="mark" href="#https_server_listen_port_host_backlog_callback" id="https_server_listen_port_host_backlog_callback">#</a></span></h3>
<p>See <a href="https://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback"><code>http.listen()</code></a> for details.</p>
<h2>https.get(options, callback)<span><a class="mark" href="#https_https_get_options_callback" id="https_https_get_options_callback">#</a></span></h2>
<p>Like <a href="https://nodejs.org/api/http.html#http_http_get_options_callback"><code>http.get()</code></a> but for HTTPS.</p>
<p><code>options</code> can be an object or a string. If <code>options</code> is a string, it is
automatically parsed with <a href="https://nodejs.org/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost"><code>url.parse()</code></a>.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> https <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'https'</span><span class="sh_symbol">);</span>

https<span class="sh_symbol">.</span><span class="sh_function">get</span><span class="sh_symbol">(</span><span class="sh_string">'https://encrypted.google.com/'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>res<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'statusCode: '</span><span class="sh_symbol">,</span> res<span class="sh_symbol">.</span>statusCode<span class="sh_symbol">);</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'headers: '</span><span class="sh_symbol">,</span> res<span class="sh_symbol">.</span>headers<span class="sh_symbol">);</span>

  res<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>d<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    process<span class="sh_symbol">.</span>stdout<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span>d<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>e<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span>e<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h2>https.globalAgent<span><a class="mark" href="#https_https_globalagent" id="https_https_globalagent">#</a></span></h2>
<p>Global instance of <a href="#https_class_https_agent"><code>https.Agent</code></a> for all HTTPS client requests.</p>
<h2>https.request(options, callback)<span><a class="mark" href="#https_https_request_options_callback" id="https_https_request_options_callback">#</a></span></h2>
<p>Makes a request to a secure web server.</p>
<p><code>options</code> can be an object or a string. If <code>options</code> is a string, it is
automatically parsed with <a href="https://nodejs.org/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost"><code>url.parse()</code></a>.</p>
<p>All options from <a href="https://nodejs.org/api/http.html#http_http_request_options_callback"><code>http.request()</code></a> are valid.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> https <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'https'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">var</span> options <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span>
  hostname<span class="sh_symbol">:</span> <span class="sh_string">'encrypted.google.com'</span><span class="sh_symbol">,</span>
  port<span class="sh_symbol">:</span> <span class="sh_number">443</span><span class="sh_symbol">,</span>
  path<span class="sh_symbol">:</span> <span class="sh_string">'/'</span><span class="sh_symbol">,</span>
  method<span class="sh_symbol">:</span> <span class="sh_string">'GET'</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

<span class="sh_keyword">var</span> req <span class="sh_symbol">=</span> https<span class="sh_symbol">.</span><span class="sh_function">request</span><span class="sh_symbol">(</span>options<span class="sh_symbol">,</span> <span class="sh_symbol">(</span>res<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'statusCode: '</span><span class="sh_symbol">,</span> res<span class="sh_symbol">.</span>statusCode<span class="sh_symbol">);</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'headers: '</span><span class="sh_symbol">,</span> res<span class="sh_symbol">.</span>headers<span class="sh_symbol">);</span>

  res<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>d<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    process<span class="sh_symbol">.</span>stdout<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span>d<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
req<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">();</span>

req<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>e<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span>e<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>The options argument has the following options</p>
<ul>
<li><code>host</code>: A domain name or IP address of the server to issue the request to.
Defaults to <code>'localhost'</code>.</li>
<li><code>hostname</code>: Alias for <code>host</code>. To support <code>url.parse()</code> <code>hostname</code> is
preferred over <code>host</code>.</li>
<li><code>family</code>: IP address family to use when resolving <code>host</code> and <code>hostname</code>.
Valid values are <code>4</code> or <code>6</code>. When unspecified, both IP v4 and v6 will be
used.</li>
<li><code>port</code>: Port of remote server. Defaults to 443.</li>
<li><code>localAddress</code>: Local interface to bind for network connections.</li>
<li><code>socketPath</code>: Unix Domain Socket (use one of host:port or socketPath).</li>
<li><code>method</code>: A string specifying the HTTP request method. Defaults to <code>'GET'</code>.</li>
<li><code>path</code>: Request path. Defaults to <code>'/'</code>. Should include query string if any.
E.G. <code>'/index.html?page=12'</code>. An exception is thrown when the request path
contains illegal characters. Currently, only spaces are rejected but that
may change in the future.</li>
<li><code>headers</code>: An object containing request headers.</li>
<li><code>auth</code>: Basic authentication i.e. <code>'user:password'</code> to compute an
Authorization header.</li>
<li><code>agent</code>: Controls <a href="#https_class_https_agent"><code>Agent</code></a> behavior. When an Agent is used request will
default to <code>Connection: keep-alive</code>. Possible values:<ul>
<li><code>undefined</code> (default): use <a href="#https_https_globalagent"><code>globalAgent</code></a> for this host and port.</li>
<li><code>Agent</code> object: explicitly use the passed in <code>Agent</code>.</li>
<li><code>false</code>: opts out of connection pooling with an Agent, defaults request to
<code>Connection: close</code>.</li>
</ul>
</li>
</ul>
<p>The following options from <a href="#tls_tls_connect_options_callback"><code>tls.connect()</code></a> can also be specified. However, a
<a href="#https_https_globalagent"><code>globalAgent</code></a> silently ignores these.</p>
<ul>
<li><code>pfx</code>: Certificate, Private key and CA certificates to use for SSL. Default <code>null</code>.</li>
<li><code>key</code>: Private key to use for SSL. Default <code>null</code>.</li>
<li><code>passphrase</code>: A string of passphrase for the private key or pfx. Default <code>null</code>.</li>
<li><code>cert</code>: Public x509 certificate to use. Default <code>null</code>.</li>
<li><code>ca</code>: A string, <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a> or array of strings or <a href="https://nodejs.org/api/buffer.html#buffer_buffer"><code>Buffer</code></a>s of trusted
certificates in PEM format. If this is omitted several well known "root"
CAs will be used, like VeriSign. These are used to authorize connections.</li>
<li><code>ciphers</code>: A string describing the ciphers to use or exclude. Consult
<a href="https://www.openssl.org/docs/apps/ciphers.html#CIPHER-LIST-FORMAT">https://www.openssl.org/docs/apps/ciphers.html#CIPHER-LIST-FORMAT</a> for
details on the format.</li>
<li><code>rejectUnauthorized</code>: If <code>true</code>, the server certificate is verified against
the list of supplied CAs. An <code>'error'</code> event is emitted if verification
fails. Verification happens at the connection level, <em>before</em> the HTTP
request is sent. Default <code>true</code>.</li>
<li><code>secureProtocol</code>: The SSL method to use, e.g. <code>SSLv3_method</code> to force
SSL version 3. The possible values depend on your installation of
OpenSSL and are defined in the constant <a href="https://www.openssl.org/docs/ssl/ssl.html#DEALING-WITH-PROTOCOL-METHODS"><code>SSL_METHODS</code></a>.</li>
<li><code>servername</code>: Servername for SNI (Server Name Indication) TLS extension.</li>
</ul>
<p>In order to specify these options, use a custom <a href="#https_class_https_agent"><code>Agent</code></a>.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">var</span> options <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span>
  hostname<span class="sh_symbol">:</span> <span class="sh_string">'encrypted.google.com'</span><span class="sh_symbol">,</span>
  port<span class="sh_symbol">:</span> <span class="sh_number">443</span><span class="sh_symbol">,</span>
  path<span class="sh_symbol">:</span> <span class="sh_string">'/'</span><span class="sh_symbol">,</span>
  method<span class="sh_symbol">:</span> <span class="sh_string">'GET'</span><span class="sh_symbol">,</span>
  key<span class="sh_symbol">:</span> fs<span class="sh_symbol">.</span><span class="sh_function">readFileSync</span><span class="sh_symbol">(</span><span class="sh_string">'test/fixtures/keys/agent2-key.pem'</span><span class="sh_symbol">),</span>
  cert<span class="sh_symbol">:</span> fs<span class="sh_symbol">.</span><span class="sh_function">readFileSync</span><span class="sh_symbol">(</span><span class="sh_string">'test/fixtures/keys/agent2-cert.pem'</span><span class="sh_symbol">)</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
options<span class="sh_symbol">.</span>agent <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> https<span class="sh_symbol">.</span><span class="sh_function">Agent</span><span class="sh_symbol">(</span>options<span class="sh_symbol">);</span>

<span class="sh_keyword">var</span> req <span class="sh_symbol">=</span> https<span class="sh_symbol">.</span><span class="sh_function">request</span><span class="sh_symbol">(</span>options<span class="sh_symbol">,</span> <span class="sh_symbol">(</span>res<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_symbol">...</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p>Alternatively, opt out of connection pooling by not using an <code>Agent</code>.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">var</span> options <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span>
  hostname<span class="sh_symbol">:</span> <span class="sh_string">'encrypted.google.com'</span><span class="sh_symbol">,</span>
  port<span class="sh_symbol">:</span> <span class="sh_number">443</span><span class="sh_symbol">,</span>
  path<span class="sh_symbol">:</span> <span class="sh_string">'/'</span><span class="sh_symbol">,</span>
  method<span class="sh_symbol">:</span> <span class="sh_string">'GET'</span><span class="sh_symbol">,</span>
  key<span class="sh_symbol">:</span> fs<span class="sh_symbol">.</span><span class="sh_function">readFileSync</span><span class="sh_symbol">(</span><span class="sh_string">'test/fixtures/keys/agent2-key.pem'</span><span class="sh_symbol">),</span>
  cert<span class="sh_symbol">:</span> fs<span class="sh_symbol">.</span><span class="sh_function">readFileSync</span><span class="sh_symbol">(</span><span class="sh_string">'test/fixtures/keys/agent2-cert.pem'</span><span class="sh_symbol">),</span>
  agent<span class="sh_symbol">:</span> <span class="sh_keyword">false</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

<span class="sh_keyword">var</span> req <span class="sh_symbol">=</span> https<span class="sh_symbol">.</span><span class="sh_function">request</span><span class="sh_symbol">(</span>options<span class="sh_symbol">,</span> <span class="sh_symbol">(</span>res<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_symbol">...</span>
<span class="sh_cbracket">}</span>
</code></pre>
<!-- [end-include:https.md] -->
<!-- [start-include:modules.md] -->
<h1>Modules<span><a class="mark" href="#modules_modules" id="modules_modules">#</a></span></h1>
<pre class="api_stability api_stability_3 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">3</span> <span class="sh_symbol">-</span> Locked</pre><!--name=module-->
<p>Node.js has a simple module loading system.  In Node.js, files and modules are
in one-to-one correspondence.  As an example, <code>foo.js</code> loads the module
<code>circle.js</code> in the same directory.</p>
<p>The contents of <code>foo.js</code>:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> circle <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./circle.js'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span> `The area of a circle of radius <span class="sh_number">4</span> is $<span class="sh_cbracket">{</span>circle<span class="sh_symbol">.</span><span class="sh_function">area</span><span class="sh_symbol">(</span><span class="sh_number">4</span><span class="sh_symbol">)</span><span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
</code></pre>
<p>The contents of <code>circle.js</code>:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> PI <span class="sh_symbol">=</span> <span class="sh_predef_var">Math</span><span class="sh_symbol">.</span>PI<span class="sh_symbol">;</span>

exports<span class="sh_symbol">.</span>area <span class="sh_symbol">=</span> <span class="sh_symbol">(</span>r<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> PI <span class="sh_symbol">*</span> r <span class="sh_symbol">*</span> r<span class="sh_symbol">;</span>

exports<span class="sh_symbol">.</span>circumference <span class="sh_symbol">=</span> <span class="sh_symbol">(</span>r<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_number">2</span> <span class="sh_symbol">*</span> PI <span class="sh_symbol">*</span> r<span class="sh_symbol">;</span>
</code></pre>
<p>The module <code>circle.js</code> has exported the functions <code>area()</code> and
<code>circumference()</code>.  To add functions and objects to the root of your module,
you can add them to the special <code>exports</code> object.</p>
<p>Variables local to the module will be private, because the module is wrapped
in a function by Node.js (see <a href="#modules_the_module_wrapper">module wrapper</a>).
In this example, the variable <code>PI</code> is private to <code>circle.js</code>.</p>
<p>If you want the root of your module's export to be a function (such as a
constructor) or if you want to export a complete object in one assignment
instead of building it one property at a time, assign it to <code>module.exports</code>
instead of <code>exports</code>.</p>
<p>Below, <code>bar.js</code> makes use of the <code>square</code> module, which exports a constructor:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> square <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./square.js'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">var</span> mySquare <span class="sh_symbol">=</span> <span class="sh_function">square</span><span class="sh_symbol">(</span><span class="sh_number">2</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`The area of my square is $<span class="sh_cbracket">{</span>mySquare<span class="sh_symbol">.</span><span class="sh_function">area</span><span class="sh_symbol">()</span><span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
</code></pre>
<p>The <code>square</code> module is defined in <code>square.js</code>:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// assigning to exports will not modify module, must use module.exports</span>
module<span class="sh_symbol">.</span>exports <span class="sh_symbol">=</span> <span class="sh_symbol">(</span>width<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">return</span> <span class="sh_cbracket">{</span>
    area<span class="sh_symbol">:</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> width <span class="sh_symbol">*</span> width
  <span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p>The module system is implemented in the <code>require("module")</code> module.</p>
<h2>Accessing the main module<span><a class="mark" href="#modules_accessing_the_main_module" id="modules_accessing_the_main_module">#</a></span></h2>
<!-- type=misc -->
<p>When a file is run directly from Node.js, <code>require.main</code> is set to its
<code>module</code>. That means that you can determine whether a file has been run
directly by testing</p>
<pre class="sh_sourceCode"><code class="lang-js">require<span class="sh_symbol">.</span>main <span class="sh_symbol">===</span> module
</code></pre>
<p>For a file <code>foo.js</code>, this will be <code>true</code> if run via <code>node foo.js</code>, but
<code>false</code> if run by <code>require('./foo')</code>.</p>
<p>Because <code>module</code> provides a <code>filename</code> property (normally equivalent to
<code>__filename</code>), the entry point of the current application can be obtained
by checking <code>require.main.filename</code>.</p>
<h2>Addenda: Package Manager Tips<span><a class="mark" href="#modules_addenda_package_manager_tips" id="modules_addenda_package_manager_tips">#</a></span></h2>
<!-- type=misc -->
<p>The semantics of Node.js's <code>require()</code> function were designed to be general
enough to support a number of reasonable directory structures. Package manager
programs such as <code>dpkg</code>, <code>rpm</code>, and <code>npm</code> will hopefully find it possible to
build native packages from Node.js modules without modification.</p>
<p>Below we give a suggested directory structure that could work:</p>
<p>Let's say that we wanted to have the folder at
<code>/usr/lib/node/&lt;some-package&gt;/&lt;some-version&gt;</code> hold the contents of a
specific version of a package.</p>
<p>Packages can depend on one another. In order to install package <code>foo</code>, you
may have to install a specific version of package <code>bar</code>.  The <code>bar</code> package
may itself have dependencies, and in some cases, these dependencies may even
collide or form cycles.</p>
<p>Since Node.js looks up the <code>realpath</code> of any modules it loads (that is,
resolves symlinks), and then looks for their dependencies in the <code>node_modules</code>
folders as described <a href="#modules_loading_from_node_modules_folders">here</a>, this
situation is very simple to resolve with the following architecture:</p>
<ul>
<li><code>/usr/lib/node/foo/1.2.3/</code> - Contents of the <code>foo</code> package, version 1.2.3.</li>
<li><code>/usr/lib/node/bar/4.3.2/</code> - Contents of the <code>bar</code> package that <code>foo</code>
depends on.</li>
<li><code>/usr/lib/node/foo/1.2.3/node_modules/bar</code> - Symbolic link to
<code>/usr/lib/node/bar/4.3.2/</code>.</li>
<li><code>/usr/lib/node/bar/4.3.2/node_modules/*</code> - Symbolic links to the packages
that <code>bar</code> depends on.</li>
</ul>
<p>Thus, even if a cycle is encountered, or if there are dependency
conflicts, every module will be able to get a version of its dependency
that it can use.</p>
<p>When the code in the <code>foo</code> package does <code>require('bar')</code>, it will get the
version that is symlinked into <code>/usr/lib/node/foo/1.2.3/node_modules/bar</code>.
Then, when the code in the <code>bar</code> package calls <code>require('quux')</code>, it'll get
the version that is symlinked into
<code>/usr/lib/node/bar/4.3.2/node_modules/quux</code>.</p>
<p>Furthermore, to make the module lookup process even more optimal, rather
than putting packages directly in <code>/usr/lib/node</code>, we could put them in
<code>/usr/lib/node_modules/&lt;name&gt;/&lt;version&gt;</code>.  Then Node.js will not bother
looking for missing dependencies in <code>/usr/node_modules</code> or <code>/node_modules</code>.</p>
<p>In order to make modules available to the Node.js REPL, it might be useful to
also add the <code>/usr/lib/node_modules</code> folder to the <code>$NODE_PATH</code> environment
variable.  Since the module lookups using <code>node_modules</code> folders are all
relative, and based on the real path of the files making the calls to
<code>require()</code>, the packages themselves can be anywhere.</p>
<h2>All Together...<span><a class="mark" href="#modules_all_together" id="modules_all_together">#</a></span></h2>
<!-- type=misc -->
<p>To get the exact filename that will be loaded when <code>require()</code> is called, use
the <code>require.resolve()</code> function.</p>
<p>Putting together all of the above, here is the high-level algorithm
in pseudocode of what require.resolve does:</p>
<pre class="sh_sourceCode"><code><span class="sh_function">require</span><span class="sh_symbol">(</span>X<span class="sh_symbol">)</span> from module at path Y
<span class="sh_number">1</span><span class="sh_symbol">.</span> If X is a core module<span class="sh_symbol">,</span>
   a<span class="sh_symbol">.</span> <span class="sh_keyword">return</span> the core module
   b<span class="sh_symbol">.</span> STOP
<span class="sh_number">2</span><span class="sh_symbol">.</span> If X begins <span class="sh_keyword">with</span> <span class="sh_string">'./'</span> or <span class="sh_string">'/'</span> or <span class="sh_string">'../'</span>
   a<span class="sh_symbol">.</span> <span class="sh_function">LOAD_AS_FILE</span><span class="sh_symbol">(</span>Y <span class="sh_symbol">+</span> X<span class="sh_symbol">)</span>
   b<span class="sh_symbol">.</span> <span class="sh_function">LOAD_AS_DIRECTORY</span><span class="sh_symbol">(</span>Y <span class="sh_symbol">+</span> X<span class="sh_symbol">)</span>
<span class="sh_number">3</span><span class="sh_symbol">.</span> <span class="sh_function">LOAD_NODE_MODULES</span><span class="sh_symbol">(</span>X<span class="sh_symbol">,</span> <span class="sh_function">dirname</span><span class="sh_symbol">(</span>Y<span class="sh_symbol">))</span>
<span class="sh_number">4</span><span class="sh_symbol">.</span> THROW <span class="sh_string">"not found"</span>

<span class="sh_function">LOAD_AS_FILE</span><span class="sh_symbol">(</span>X<span class="sh_symbol">)</span>
<span class="sh_number">1</span><span class="sh_symbol">.</span> If X is a file<span class="sh_symbol">,</span> load X as JavaScript text<span class="sh_symbol">.</span>  STOP
<span class="sh_number">2</span><span class="sh_symbol">.</span> If X<span class="sh_symbol">.</span>js is a file<span class="sh_symbol">,</span> load X<span class="sh_symbol">.</span>js as JavaScript text<span class="sh_symbol">.</span>  STOP
<span class="sh_number">3</span><span class="sh_symbol">.</span> If X<span class="sh_symbol">.</span>json is a file<span class="sh_symbol">,</span> parse X<span class="sh_symbol">.</span>json to a JavaScript <span class="sh_predef_func">Object</span><span class="sh_symbol">.</span>  STOP
<span class="sh_number">4</span><span class="sh_symbol">.</span> If X<span class="sh_symbol">.</span>node is a file<span class="sh_symbol">,</span> load X<span class="sh_symbol">.</span>node as binary addon<span class="sh_symbol">.</span>  STOP

<span class="sh_function">LOAD_AS_DIRECTORY</span><span class="sh_symbol">(</span>X<span class="sh_symbol">)</span>
<span class="sh_number">1</span><span class="sh_symbol">.</span> If <span class="sh_normal">X</span><span class="sh_symbol">/</span>package<span class="sh_symbol">.</span>json is a file<span class="sh_symbol">,</span>
   a<span class="sh_symbol">.</span> Parse <span class="sh_normal">X</span><span class="sh_symbol">/</span>package<span class="sh_symbol">.</span>json<span class="sh_symbol">,</span> and look <span class="sh_keyword">for</span> <span class="sh_string">"main"</span> field<span class="sh_symbol">.</span>
   b<span class="sh_symbol">.</span> let M <span class="sh_symbol">=</span> X <span class="sh_symbol">+</span> <span class="sh_symbol">(</span>json main field<span class="sh_symbol">)</span>
   c<span class="sh_symbol">.</span> <span class="sh_function">LOAD_AS_FILE</span><span class="sh_symbol">(</span>M<span class="sh_symbol">)</span>
<span class="sh_number">2</span><span class="sh_symbol">.</span> If <span class="sh_normal">X</span><span class="sh_symbol">/</span>index<span class="sh_symbol">.</span>js is a file<span class="sh_symbol">,</span> load <span class="sh_normal">X</span><span class="sh_symbol">/</span>index<span class="sh_symbol">.</span>js as JavaScript text<span class="sh_symbol">.</span>  STOP
<span class="sh_number">3</span><span class="sh_symbol">.</span> If <span class="sh_normal">X</span><span class="sh_symbol">/</span>index<span class="sh_symbol">.</span>json is a file<span class="sh_symbol">,</span> parse <span class="sh_normal">X</span><span class="sh_symbol">/</span>index<span class="sh_symbol">.</span>json to a JavaScript object<span class="sh_symbol">.</span> STOP
<span class="sh_number">4</span><span class="sh_symbol">.</span> If <span class="sh_normal">X</span><span class="sh_symbol">/</span>index<span class="sh_symbol">.</span>node is a file<span class="sh_symbol">,</span> load <span class="sh_normal">X</span><span class="sh_symbol">/</span>index<span class="sh_symbol">.</span>node as binary addon<span class="sh_symbol">.</span>  STOP

<span class="sh_function">LOAD_NODE_MODULES</span><span class="sh_symbol">(</span>X<span class="sh_symbol">,</span> START<span class="sh_symbol">)</span>
<span class="sh_number">1</span><span class="sh_symbol">.</span> let DIRS<span class="sh_symbol">=</span><span class="sh_function">NODE_MODULES_PATHS</span><span class="sh_symbol">(</span>START<span class="sh_symbol">)</span>
<span class="sh_number">2</span><span class="sh_symbol">.</span> <span class="sh_keyword">for</span> each DIR <span class="sh_keyword">in</span> DIRS<span class="sh_symbol">:</span>
   a<span class="sh_symbol">.</span> <span class="sh_function">LOAD_AS_FILE</span><span class="sh_symbol">(</span><span class="sh_normal">DIR</span><span class="sh_symbol">/</span>X<span class="sh_symbol">)</span>
   b<span class="sh_symbol">.</span> <span class="sh_function">LOAD_AS_DIRECTORY</span><span class="sh_symbol">(</span><span class="sh_normal">DIR</span><span class="sh_symbol">/</span>X<span class="sh_symbol">)</span>

<span class="sh_function">NODE_MODULES_PATHS</span><span class="sh_symbol">(</span>START<span class="sh_symbol">)</span>
<span class="sh_number">1</span><span class="sh_symbol">.</span> let PARTS <span class="sh_symbol">=</span> path <span class="sh_function">split</span><span class="sh_symbol">(</span>START<span class="sh_symbol">)</span>
<span class="sh_number">2</span><span class="sh_symbol">.</span> let I <span class="sh_symbol">=</span> count of PARTS <span class="sh_symbol">-</span> <span class="sh_number">1</span>
<span class="sh_number">3</span><span class="sh_symbol">.</span> let DIRS <span class="sh_symbol">=</span> <span class="sh_symbol">[]</span>
<span class="sh_number">4</span><span class="sh_symbol">.</span> <span class="sh_keyword">while</span> I <span class="sh_symbol">&gt;=</span> <span class="sh_number">0</span><span class="sh_symbol">,</span>
   a<span class="sh_symbol">.</span> <span class="sh_keyword">if</span> PARTS<span class="sh_symbol">[</span>I<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_string">"node_modules"</span> CONTINUE
   c<span class="sh_symbol">.</span> DIR <span class="sh_symbol">=</span> path <span class="sh_function">join</span><span class="sh_symbol">(</span>PARTS<span class="sh_symbol">[</span><span class="sh_number">0</span> <span class="sh_symbol">..</span> I<span class="sh_symbol">]</span> <span class="sh_symbol">+</span> <span class="sh_string">"node_modules"</span><span class="sh_symbol">)</span>
   b<span class="sh_symbol">.</span> DIRS <span class="sh_symbol">=</span> DIRS <span class="sh_symbol">+</span> DIR
   c<span class="sh_symbol">.</span> let I <span class="sh_symbol">=</span> I <span class="sh_symbol">-</span> <span class="sh_number">1</span>
<span class="sh_number">5</span><span class="sh_symbol">.</span> <span class="sh_keyword">return</span> DIRS
</code></pre><h2>Caching<span><a class="mark" href="#modules_caching" id="modules_caching">#</a></span></h2>
<!--type=misc-->
<p>Modules are cached after the first time they are loaded.  This means
(among other things) that every call to <code>require('foo')</code> will get
exactly the same object returned, if it would resolve to the same file.</p>
<p>Multiple calls to <code>require('foo')</code> may not cause the module code to be
executed multiple times.  This is an important feature.  With it,
"partially done" objects can be returned, thus allowing transitive
dependencies to be loaded even when they would cause cycles.</p>
<p>If you want to have a module execute code multiple times, then export a
function, and call that function.</p>
<h3>Module Caching Caveats<span><a class="mark" href="#modules_module_caching_caveats" id="modules_module_caching_caveats">#</a></span></h3>
<!--type=misc-->
<p>Modules are cached based on their resolved filename.  Since modules may
resolve to a different filename based on the location of the calling
module (loading from <code>node_modules</code> folders), it is not a <em>guarantee</em>
that <code>require('foo')</code> will always return the exact same object, if it
would resolve to different files.</p>
<p>Additionally, on case-insensitive file systems or operating systems, different
resolved filenames can point to the same file, but the cache will still treat
them as different modules and will reload the file multiple times. For example,
<code>require('./foo')</code> and <code>require('./FOO')</code> return two different objects,
irrespective of whether or not <code>./foo</code> and <code>./FOO</code> are the same file.</p>
<h2>Core Modules<span><a class="mark" href="#modules_core_modules" id="modules_core_modules">#</a></span></h2>
<!--type=misc-->
<p>Node.js has several modules compiled into the binary.  These modules are
described in greater detail elsewhere in this documentation.</p>
<p>The core modules are defined within Node.js's source and are located in the
<code>lib/</code> folder.</p>
<p>Core modules are always preferentially loaded if their identifier is
passed to <code>require()</code>.  For instance, <code>require('http')</code> will always
return the built in HTTP module, even if there is a file by that name.</p>
<h2>Cycles<span><a class="mark" href="#modules_cycles" id="modules_cycles">#</a></span></h2>
<!--type=misc-->
<p>When there are circular <code>require()</code> calls, a module might not have finished
executing when it is returned.</p>
<p>Consider this situation:</p>
<p><code>a.js</code>:</p>
<pre class="sh_sourceCode"><code>console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'a starting'</span><span class="sh_symbol">);</span>
exports<span class="sh_symbol">.</span>done <span class="sh_symbol">=</span> <span class="sh_keyword">false</span><span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> b <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./b.js'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'in a, b.done = %j'</span><span class="sh_symbol">,</span> b<span class="sh_symbol">.</span>done<span class="sh_symbol">);</span>
exports<span class="sh_symbol">.</span>done <span class="sh_symbol">=</span> <span class="sh_keyword">true</span><span class="sh_symbol">;</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'a done'</span><span class="sh_symbol">);</span>
</code></pre><p><code>b.js</code>:</p>
<pre class="sh_sourceCode"><code>console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'b starting'</span><span class="sh_symbol">);</span>
exports<span class="sh_symbol">.</span>done <span class="sh_symbol">=</span> <span class="sh_keyword">false</span><span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> a <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./a.js'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'in b, a.done = %j'</span><span class="sh_symbol">,</span> a<span class="sh_symbol">.</span>done<span class="sh_symbol">);</span>
exports<span class="sh_symbol">.</span>done <span class="sh_symbol">=</span> <span class="sh_keyword">true</span><span class="sh_symbol">;</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'b done'</span><span class="sh_symbol">);</span>
</code></pre><p><code>main.js</code>:</p>
<pre class="sh_sourceCode"><code>console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'main starting'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> a <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./a.js'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> b <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./b.js'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'in main, a.done=%j, b.done=%j'</span><span class="sh_symbol">,</span> a<span class="sh_symbol">.</span>done<span class="sh_symbol">,</span> b<span class="sh_symbol">.</span>done<span class="sh_symbol">);</span>
</code></pre><p>When <code>main.js</code> loads <code>a.js</code>, then <code>a.js</code> in turn loads <code>b.js</code>.  At that
point, <code>b.js</code> tries to load <code>a.js</code>.  In order to prevent an infinite
loop, an <strong>unfinished copy</strong> of the <code>a.js</code> exports object is returned to the
<code>b.js</code> module.  <code>b.js</code> then finishes loading, and its <code>exports</code> object is
provided to the <code>a.js</code> module.</p>
<p>By the time <code>main.js</code> has loaded both modules, they're both finished.
The output of this program would thus be:</p>
<pre class="sh_sourceCode"><code>$ node main<span class="sh_symbol">.</span>js
main starting
a starting
b starting
<span class="sh_keyword">in</span> b<span class="sh_symbol">,</span> a<span class="sh_symbol">.</span>done <span class="sh_symbol">=</span> <span class="sh_keyword">false</span>
b done
<span class="sh_keyword">in</span> a<span class="sh_symbol">,</span> b<span class="sh_symbol">.</span>done <span class="sh_symbol">=</span> <span class="sh_keyword">true</span>
a done
<span class="sh_keyword">in</span> main<span class="sh_symbol">,</span> a<span class="sh_symbol">.</span>done<span class="sh_symbol">=</span><span class="sh_keyword">true</span><span class="sh_symbol">,</span> b<span class="sh_symbol">.</span>done<span class="sh_symbol">=</span><span class="sh_keyword">true</span>
</code></pre><p>If you have cyclic module dependencies in your program, make sure to
plan accordingly.</p>
<h2>File Modules<span><a class="mark" href="#modules_file_modules" id="modules_file_modules">#</a></span></h2>
<!--type=misc-->
<p>If the exact filename is not found, then Node.js will attempt to load the
required filename with the added extensions: <code>.js</code>, <code>.json</code>, and finally
<code>.node</code>.</p>
<p><code>.js</code> files are interpreted as JavaScript text files, and <code>.json</code> files are
parsed as JSON text files. <code>.node</code> files are interpreted as compiled addon
modules loaded with <code>dlopen</code>.</p>
<p>A required module prefixed with <code>'/'</code> is an absolute path to the file.  For
example, <code>require('/home/marco/foo.js')</code> will load the file at
<code>/home/marco/foo.js</code>.</p>
<p>A required module prefixed with <code>'./'</code> is relative to the file calling
<code>require()</code>. That is, <code>circle.js</code> must be in the same directory as <code>foo.js</code> for
<code>require('./circle')</code> to find it.</p>
<p>Without a leading '/', './', or '../' to indicate a file, the module must
either be a core module or is loaded from a <code>node_modules</code> folder.</p>
<p>If the given path does not exist, <code>require()</code> will throw an <a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a> with its
<code>code</code> property set to <code>'MODULE_NOT_FOUND'</code>.</p>
<h2>Folders as Modules<span><a class="mark" href="#modules_folders_as_modules" id="modules_folders_as_modules">#</a></span></h2>
<!--type=misc-->
<p>It is convenient to organize programs and libraries into self-contained
directories, and then provide a single entry point to that library.
There are three ways in which a folder may be passed to <code>require()</code> as
an argument.</p>
<p>The first is to create a <code>package.json</code> file in the root of the folder,
which specifies a <code>main</code> module.  An example package.json file might
look like this:</p>
<pre class="sh_sourceCode"><code><span class="sh_cbracket">{</span> <span class="sh_string">"name"</span> <span class="sh_symbol">:</span> <span class="sh_string">"some-library"</span><span class="sh_symbol">,</span>
  <span class="sh_string">"main"</span> <span class="sh_symbol">:</span> <span class="sh_string">"./lib/some-library.js"</span> <span class="sh_cbracket">}</span>
</code></pre><p>If this was in a folder at <code>./some-library</code>, then
<code>require('./some-library')</code> would attempt to load
<code>./some-library/lib/some-library.js</code>.</p>
<p>This is the extent of Node.js's awareness of package.json files.</p>
<p>Note: If the file specified by the <code>"main"</code> entry of <code>package.json</code> is missing
and can not be resolved, Node.js will report the entire module as missing with
the default error:</p>
<pre class="sh_sourceCode"><code><span class="sh_predef_func">Error</span><span class="sh_symbol">:</span> Cannot find module <span class="sh_string">'some-library'</span>
</code></pre><p>If there is no package.json file present in the directory, then Node.js
will attempt to load an <code>index.js</code> or <code>index.node</code> file out of that
directory.  For example, if there was no package.json file in the above
example, then <code>require('./some-library')</code> would attempt to load:</p>
<ul>
<li><code>./some-library/index.js</code></li>
<li><code>./some-library/index.node</code></li>
</ul>
<h2>Loading from <code>node_modules</code> Folders<span><a class="mark" href="#modules_loading_from_node_modules_folders" id="modules_loading_from_node_modules_folders">#</a></span></h2>
<!--type=misc-->
<p>If the module identifier passed to <code>require()</code> is not a native module,
and does not begin with <code>'/'</code>, <code>'../'</code>, or <code>'./'</code>, then Node.js starts at the
parent directory of the current module, and adds <code>/node_modules</code>, and
attempts to load the module from that location. Node will not append
<code>node_modules</code> to a path already ending in <code>node_modules</code>.</p>
<p>If it is not found there, then it moves to the parent directory, and so
on, until the root of the file system is reached.</p>
<p>For example, if the file at <code>'/home/ry/projects/foo.js'</code> called
<code>require('bar.js')</code>, then Node.js would look in the following locations, in
this order:</p>
<ul>
<li><code>/home/ry/projects/node_modules/bar.js</code></li>
<li><code>/home/ry/node_modules/bar.js</code></li>
<li><code>/home/node_modules/bar.js</code></li>
<li><code>/node_modules/bar.js</code></li>
</ul>
<p>This allows programs to localize their dependencies, so that they do not
clash.</p>
<p>You can require specific files or sub modules distributed with a module by
including a path suffix after the module name. For instance
<code>require('example-module/path/to/file')</code> would resolve <code>path/to/file</code>
relative to where <code>example-module</code> is located. The suffixed path follows the
same module resolution semantics.</p>
<h2>Loading from the global folders<span><a class="mark" href="#modules_loading_from_the_global_folders" id="modules_loading_from_the_global_folders">#</a></span></h2>
<!-- type=misc -->
<p>If the <code>NODE_PATH</code> environment variable is set to a colon-delimited list
of absolute paths, then Node.js will search those paths for modules if they
are not found elsewhere.  (Note: On Windows, <code>NODE_PATH</code> is delimited by
semicolons instead of colons.)</p>
<p><code>NODE_PATH</code> was originally created to support loading modules from
varying paths before the current <a href="#modules_all_together">module resolution</a> algorithm was frozen.</p>
<p><code>NODE_PATH</code> is still supported, but is less necessary now that the Node.js
ecosystem has settled on a convention for locating dependent modules.
Sometimes deployments that rely on <code>NODE_PATH</code> show surprising behavior
when people are unaware that <code>NODE_PATH</code> must be set.  Sometimes a
module's dependencies change, causing a different version (or even a
different module) to be loaded as the <code>NODE_PATH</code> is searched.</p>
<p>Additionally, Node.js will search in the following locations:</p>
<ul>
<li>1: <code>$HOME/.node_modules</code></li>
<li>2: <code>$HOME/.node_libraries</code></li>
<li>3: <code>$PREFIX/lib/node</code></li>
</ul>
<p>Where <code>$HOME</code> is the user's home directory, and <code>$PREFIX</code> is Node.js's
configured <code>node_prefix</code>.</p>
<p>These are mostly for historic reasons.  <strong>You are highly encouraged
to place your dependencies locally in <code>node_modules</code> folders.</strong>  They
will be loaded faster, and more reliably.</p>
<h2>The module wrapper<span><a class="mark" href="#modules_the_module_wrapper" id="modules_the_module_wrapper">#</a></span></h2>
<!-- type=misc -->
<p>Before a module's code is executed, Node.js will wrap it with a function
wrapper that looks like the following:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_symbol">(</span><span class="sh_keyword">function</span> <span class="sh_symbol">(</span>exports<span class="sh_symbol">,</span> require<span class="sh_symbol">,</span> module<span class="sh_symbol">,</span> __filename<span class="sh_symbol">,</span> __dirname<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
<span class="sh_comment">// Your module code actually lives in here</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>By doing this, Node.js achieves a few things:</p>
<ul>
<li>It keeps top-level variables (defined with <code>var</code>, <code>const</code> or <code>let</code>) scoped to
the module rather than the global object.</li>
<li>It helps to provide some global-looking variables that are actually specific
to the module, such as:<ul>
<li>The <code>module</code> and <code>exports</code> objects that the implementor can use to export
values from the module.</li>
<li>The convenience variables <code>__filename</code> and <code>__dirname</code>, containing the
module's absolute filename and directory path.</li>
</ul>
</li>
</ul>
<h2>The <code>module</code> Object<span><a class="mark" href="#modules_the_module_object" id="modules_the_module_object">#</a></span></h2>
<!-- type=var -->
<!-- name=module -->
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a></li>
</ul>
<p>In each module, the <code>module</code> free variable is a reference to the object
representing the current module.  For convenience, <code>module.exports</code> is
also accessible via the <code>exports</code> module-global. <code>module</code> isn't actually
a global but rather local to each module.</p>
<h3>module.children<span><a class="mark" href="#modules_module_children" id="modules_module_children">#</a></span></h3>
<div class="signature"><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" class="type">&lt;Array&gt;</a></li>
</ul>
</div><p>The module objects required by this one.</p>
<h3>module.exports<span><a class="mark" href="#modules_module_exports" id="modules_module_exports">#</a></span></h3>
<div class="signature"><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a></li>
</ul>
</div><p>The <code>module.exports</code> object is created by the Module system. Sometimes this is
not acceptable; many want their module to be an instance of some class. To do
this, assign the desired export object to <code>module.exports</code>. Note that assigning
the desired object to <code>exports</code> will simply rebind the local <code>exports</code> variable,
which is probably not what you want to do.</p>
<p>For example suppose we were making a module called <code>a.js</code></p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> EventEmitter <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'events'</span><span class="sh_symbol">);</span>

module<span class="sh_symbol">.</span>exports <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">EventEmitter</span><span class="sh_symbol">();</span>

<span class="sh_comment">// Do some work, and after some time emit</span>
<span class="sh_comment">// the 'ready' event from the module itself.</span>
<span class="sh_function">setTimeout</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  module<span class="sh_symbol">.</span>exports<span class="sh_symbol">.</span><span class="sh_function">emit</span><span class="sh_symbol">(</span><span class="sh_string">'ready'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">1000</span><span class="sh_symbol">);</span>
</code></pre>
<p>Then in another file we could do</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> a <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./a'</span><span class="sh_symbol">);</span>
a<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'ready'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'module a is ready'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>Note that assignment to <code>module.exports</code> must be done immediately. It cannot be
done in any callbacks.  This does not work:</p>
<p>x.js:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_function">setTimeout</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  module<span class="sh_symbol">.</span>exports <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span> a<span class="sh_symbol">:</span> <span class="sh_string">'hello'</span> <span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">);</span>
</code></pre>
<p>y.js:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> x <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./x'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>x<span class="sh_symbol">.</span>a<span class="sh_symbol">);</span>
</code></pre>
<h4>exports alias<span><a class="mark" href="#modules_exports_alias" id="modules_exports_alias">#</a></span></h4>
<p>The <code>exports</code> variable that is available within a module starts as a reference
to <code>module.exports</code>. As with any variable, if you assign a new value to it, it
is no longer bound to the previous value.</p>
<p>To illustrate the behavior, imagine this hypothetical implementation of
<code>require()</code>:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">function</span> <span class="sh_function">require</span><span class="sh_symbol">(...)</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// ...</span>
  <span class="sh_symbol">((</span>module<span class="sh_symbol">,</span> exports<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// Your module code here</span>
    exports <span class="sh_symbol">=</span> some_func<span class="sh_symbol">;</span>        <span class="sh_comment">// re-assigns exports, exports is no longer</span>
                                <span class="sh_comment">// a shortcut, and nothing is exported.</span>
    module<span class="sh_symbol">.</span>exports <span class="sh_symbol">=</span> some_func<span class="sh_symbol">;</span> <span class="sh_comment">// makes your module export 0</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">)(</span>module<span class="sh_symbol">,</span> module<span class="sh_symbol">.</span>exports<span class="sh_symbol">);</span>
  <span class="sh_keyword">return</span> module<span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p>As a guideline, if the relationship between <code>exports</code> and <code>module.exports</code>
seems like magic to you, ignore <code>exports</code> and only use <code>module.exports</code>.</p>
<h3>module.filename<span><a class="mark" href="#modules_module_filename" id="modules_module_filename">#</a></span></h3>
<div class="signature"><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
</ul>
</div><p>The fully resolved filename to the module.</p>
<h3>module.id<span><a class="mark" href="#modules_module_id" id="modules_module_id">#</a></span></h3>
<div class="signature"><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
</ul>
</div><p>The identifier for the module.  Typically this is the fully resolved
filename.</p>
<h3>module.loaded<span><a class="mark" href="#modules_module_loaded" id="modules_module_loaded">#</a></span></h3>
<div class="signature"><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a></li>
</ul>
</div><p>Whether or not the module is done loading, or is in the process of
loading.</p>
<h3>module.parent<span><a class="mark" href="#modules_module_parent" id="modules_module_parent">#</a></span></h3>
<div class="signature"><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> Module object</li>
</ul>
</div><p>The module that first required this one.</p>
<h3>module.require(id)<span><a class="mark" href="#modules_module_require_id" id="modules_module_require_id">#</a></span></h3>
<div class="signature"><ul>
<li><code>id</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> <code>module.exports</code> from the resolved module</li>
</ul>
</div><p>The <code>module.require</code> method provides a way to load a module as if
<code>require()</code> was called from the original module.</p>
<p>Note that in order to do this, you must get a reference to the <code>module</code>
object.  Since <code>require()</code> returns the <code>module.exports</code>, and the <code>module</code> is
typically <em>only</em> available within a specific module's code, it must be
explicitly exported in order to be used.</p>
<!-- [end-include:modules.md] -->
<!-- [start-include:net.md] -->
<h1>net<span><a class="mark" href="#net_net" id="net_net">#</a></span></h1>
<pre class="api_stability api_stability_2 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> Stable</pre><p>The <code>net</code> module provides you with an asynchronous network wrapper. It contains
functions for creating both servers and clients (called streams). You can include
this module with <code>require('net');</code>.</p>
<h2>Class: net.Server<span><a class="mark" href="#net_class_net_server" id="net_class_net_server">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><p>This class is used to create a TCP or local server.</p>
<p><code>net.Server</code> is an <a href="https://nodejs.org/api/events.html#events_class_eventemitter"><code>EventEmitter</code></a> with the following events:</p>
<h3>Event: 'close'<span><a class="mark" href="#net_event_close" id="net_event_close">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.5.0</span>
</div><p>Emitted when the server closes. Note that if connections exist, this
event is not emitted until all connections are ended.</p>
<h3>Event: 'connection'<span><a class="mark" href="#net_event_connection" id="net_event_connection">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><ul>
<li><a href="https://nodejs.org/api/net.html#net_class_net_socket" class="type">&lt;net.Socket&gt;</a> The connection object</li>
</ul>
<p>Emitted when a new connection is made. <code>socket</code> is an instance of
<code>net.Socket</code>.</p>
<h3>Event: 'error'<span><a class="mark" href="#net_event_error" id="net_event_error">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" class="type">&lt;Error&gt;</a></li>
</ul>
<p>Emitted when an error occurs.  The <a href="#net_event_close"><code>'close'</code></a> event will be called directly
following this event.  See example in discussion of <code>server.listen</code>.</p>
<h3>Event: 'listening'<span><a class="mark" href="#net_event_listening" id="net_event_listening">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><p>Emitted when the server has been bound after calling <code>server.listen</code>.</p>
<h3>server.address()<span><a class="mark" href="#net_server_address" id="net_server_address">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><p>Returns the bound address, the address family name, and port of the server
as reported by the operating system.
Useful to find which port was assigned when getting an OS-assigned address.
Returns an object with <code>port</code>, <code>family</code>, and <code>address</code> properties:
<code>{ port: 12346, family: 'IPv4', address: '127.0.0.1' }</code></p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">var</span> server <span class="sh_symbol">=</span> net<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">((</span>socket<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  socket<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'goodbye</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// handle errors here</span>
  <span class="sh_keyword">throw</span> err<span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_comment">// grab a random port.</span>
server<span class="sh_symbol">.</span><span class="sh_function">listen</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  address <span class="sh_symbol">=</span> server<span class="sh_symbol">.</span><span class="sh_function">address</span><span class="sh_symbol">();</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'opened server on %j'</span><span class="sh_symbol">,</span> address<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>Don't call <code>server.address()</code> until the <code>'listening'</code> event has been emitted.</p>
<h3>server.close([callback])<span><a class="mark" href="#net_server_close_callback" id="net_server_close_callback">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><p>Stops the server from accepting new connections and keeps existing
connections. This function is asynchronous, the server is finally
closed when all connections are ended and the server emits a <a href="#net_event_close"><code>'close'</code></a> event.
The optional <code>callback</code> will be called once the <code>'close'</code> event occurs. Unlike
that event, it will be called with an Error as its only argument if the server
was not open when it was closed.</p>
<h3>server.connections<span><a class="mark" href="#net_server_connections" id="net_server_connections">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.2.0</span>
<span>Deprecated since: v0.9.7 </span>
</div><pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated<span class="sh_symbol">:</span> Use <a href="#net_server_getconnections_callback"><code>server<span class="sh_symbol">.</span><span class="sh_function">getConnections</span><span class="sh_symbol">()</span></code></a> instead<span class="sh_symbol">.</span></pre><p>The number of concurrent connections on the server.</p>
<p>This becomes <code>null</code> when sending a socket to a child with
<a href="https://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options"><code>child_process.fork()</code></a>. To poll forks and get current number of active
connections use asynchronous <code>server.getConnections</code> instead.</p>
<h3>server.getConnections(callback)<span><a class="mark" href="#net_server_getconnections_callback" id="net_server_getconnections_callback">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.9.7</span>
</div><p>Asynchronously get the number of concurrent connections on the server. Works
when sockets were sent to forks.</p>
<p>Callback should take two arguments <code>err</code> and <code>count</code>.</p>
<h3>server.listen(handle[, backlog][, callback])<span><a class="mark" href="#net_server_listen_handle_backlog_callback" id="net_server_listen_handle_backlog_callback">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.5.10</span>
</div><ul>
<li><code>handle</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a></li>
<li><code>backlog</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>The <code>handle</code> object can be set to either a server or socket (anything
with an underlying <code>_handle</code> member), or a <code>{fd: &lt;n&gt;}</code> object.</p>
<p>This will cause the server to accept connections on the specified
handle, but it is presumed that the file descriptor or handle has
already been bound to a port or domain socket.</p>
<p>Listening on a file descriptor is not supported on Windows.</p>
<p>This function is asynchronous.  When the server has been bound,
<a href="#net_event_listening"><code>'listening'</code></a> event will be emitted.
The last parameter <code>callback</code> will be added as a listener for the
<a href="#net_event_listening"><code>'listening'</code></a> event.</p>
<p>The parameter <code>backlog</code> behaves the same as in
<a href="#net_server_listen_port_hostname_backlog_callback"><code>server.listen(port[, hostname][, backlog][, callback])</code></a>.</p>
<h3>server.listen(options[, callback])<span><a class="mark" href="#net_server_listen_options_callback" id="net_server_listen_options_callback">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.11.14</span>
</div><ul>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> - Required. Supports the following properties:<ul>
<li><code>port</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> - Optional.</li>
<li><code>host</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> - Optional.</li>
<li><code>backlog</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> - Optional.</li>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> - Optional.</li>
<li><code>exclusive</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> - Optional.</li>
</ul>
</li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> - Optional.</li>
</ul>
<p>The <code>port</code>, <code>host</code>, and <code>backlog</code> properties of <code>options</code>, as well as the
optional callback function, behave as they do on a call to
<a href="#net_server_listen_port_hostname_backlog_callback"><code>server.listen(port[, hostname][, backlog][, callback])</code></a>.
Alternatively, the <code>path</code> option can be used to specify a UNIX socket.</p>
<p>If <code>exclusive</code> is <code>false</code> (default), then cluster workers will use the same
underlying handle, allowing connection handling duties to be shared. When
<code>exclusive</code> is <code>true</code>, the handle is not shared, and attempted port sharing
results in an error. An example which listens on an exclusive port is
shown below.</p>
<pre class="sh_sourceCode"><code class="lang-js">server<span class="sh_symbol">.</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>
  host<span class="sh_symbol">:</span> <span class="sh_string">'localhost'</span><span class="sh_symbol">,</span>
  port<span class="sh_symbol">:</span> <span class="sh_number">80</span><span class="sh_symbol">,</span>
  exclusive<span class="sh_symbol">:</span> <span class="sh_keyword">true</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h3>server.listen(path[, backlog][, callback])<span><a class="mark" href="#net_server_listen_path_backlog_callback" id="net_server_listen_path_backlog_callback">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
<li><code>backlog</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Start a local socket server listening for connections on the given <code>path</code>.</p>
<p>This function is asynchronous.  When the server has been bound,
<a href="#net_event_listening"><code>'listening'</code></a> event will be emitted.  The last parameter <code>callback</code>
will be added as a listener for the <a href="#net_event_listening"><code>'listening'</code></a> event.</p>
<p>On UNIX, the local domain is usually known as the UNIX domain. The path is a
filesystem path name. It gets truncated to <code>sizeof(sockaddr_un.sun_path)</code>
bytes, decreased by 1. It varies on different operating system between 91 and
107 bytes. The typical values are 107 on Linux and 103 on OS X. The path is
subject to the same naming conventions and permissions checks as would be done
on file creation, will be visible in the filesystem, and will <em>persist until
unlinked</em>.</p>
<p>On Windows, the local domain is implemented using a named pipe. The path <em>must</em>
refer to an entry in <code>\\?\pipe\</code> or <code>\\.\pipe\</code>. Any characters are permitted,
but the latter may do some processing of pipe names, such as resolving <code>..</code>
sequences. Despite appearances, the pipe name space is flat.  Pipes will <em>not
persist</em>, they are removed when the last reference to them is closed. Do not
forget JavaScript string escaping requires paths to be specified with
double-backslashes, such as:</p>
<pre class="sh_sourceCode"><code>net<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">().</span><span class="sh_function">listen</span><span class="sh_symbol">(</span>
    path<span class="sh_symbol">.</span><span class="sh_function">join</span><span class="sh_symbol">(</span><span class="sh_string">'</span><span class="sh_specialchar">\\\\</span><span class="sh_string">?</span><span class="sh_specialchar">\\</span><span class="sh_string">pipe'</span><span class="sh_symbol">,</span> process<span class="sh_symbol">.</span><span class="sh_function">cwd</span><span class="sh_symbol">(),</span> <span class="sh_string">'myctl'</span><span class="sh_symbol">))</span>
</code></pre><p>The parameter <code>backlog</code> behaves the same as in
<a href="#net_server_listen_port_hostname_backlog_callback"><code>server.listen(port[, hostname][, backlog][, callback])</code></a>.</p>
<h3>server.listen(port[, hostname][, backlog][, callback])<span><a class="mark" href="#net_server_listen_port_hostname_backlog_callback" id="net_server_listen_port_hostname_backlog_callback">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><p>Begin accepting connections on the specified <code>port</code> and <code>hostname</code>. If the
<code>hostname</code> is omitted, the server will accept connections on any IPv6 address
(<code>::</code>) when IPv6 is available, or any IPv4 address (<code>0.0.0.0</code>) otherwise. Use a
port value of <code>0</code> to have the operating system assign an available port.</p>
<p>Backlog is the maximum length of the queue of pending connections.
The actual length will be determined by the OS through sysctl settings such as
<code>tcp_max_syn_backlog</code> and <code>somaxconn</code> on Linux. The default value of this
parameter is 511 (not 512).</p>
<p>This function is asynchronous.  When the server has been bound,
<a href="#net_event_listening"><code>'listening'</code></a> event will be emitted.  The last parameter <code>callback</code>
will be added as a listener for the <a href="#net_event_listening"><code>'listening'</code></a> event.</p>
<p>One issue some users run into is getting <code>EADDRINUSE</code> errors. This means that
another server is already running on the requested port. One way of handling this
would be to wait a second and then try again:</p>
<pre class="sh_sourceCode"><code class="lang-js">server<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>e<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>e<span class="sh_symbol">.</span>code <span class="sh_symbol">==</span> <span class="sh_string">'EADDRINUSE'</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Address in use, retrying...'</span><span class="sh_symbol">);</span>
    <span class="sh_function">setTimeout</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
      server<span class="sh_symbol">.</span><span class="sh_function">close</span><span class="sh_symbol">();</span>
      server<span class="sh_symbol">.</span><span class="sh_function">listen</span><span class="sh_symbol">(</span>PORT<span class="sh_symbol">,</span> HOST<span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">1000</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>(Note: All sockets in Node.js are set <code>SO_REUSEADDR</code>.)</p>
<h3>server.listening<span><a class="mark" href="#net_server_listening" id="net_server_listening">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v5.7.0</span>
</div><p>A Boolean indicating whether or not the server is listening for
connections.</p>
<h3>server.maxConnections<span><a class="mark" href="#net_server_maxconnections" id="net_server_maxconnections">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.2.0</span>
</div><p>Set this property to reject connections when the server's connection count gets
high.</p>
<p>It is not recommended to use this option once a socket has been sent to a child
with <a href="https://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options"><code>child_process.fork()</code></a>.</p>
<h3>server.ref()<span><a class="mark" href="#net_server_ref" id="net_server_ref">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.9.1</span>
</div><p>Opposite of <code>unref</code>, calling <code>ref</code> on a previously <code>unref</code>d server will <em>not</em>
let the program exit if it's the only server left (the default behavior). If
the server is <code>ref</code>d calling <code>ref</code> again will have no effect.</p>
<p>Returns <code>server</code>.</p>
<h3>server.unref()<span><a class="mark" href="#net_server_unref" id="net_server_unref">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.9.1</span>
</div><p>Calling <code>unref</code> on a server will allow the program to exit if this is the only
active server in the event system. If the server is already <code>unref</code>d calling
<code>unref</code> again will have no effect.</p>
<p>Returns <code>server</code>.</p>
<h2>Class: net.Socket<span><a class="mark" href="#net_class_net_socket" id="net_class_net_socket">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.3.4</span>
</div><p>This object is an abstraction of a TCP or local socket.  <code>net.Socket</code>
instances implement a duplex Stream interface.  They can be created by the
user and used as a client (with <a href="#net_socket_connect_options_connectlistener"><code>connect()</code></a>) or they can be created by Node.js
and passed to the user through the <code>'connection'</code> event of a server.</p>
<h3>new net.Socket(<a href="#zlib_class_options">options</a>)<span><a class="mark" href="#net_new_net_socket_options" id="net_new_net_socket_options">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.3.4</span>
</div><p>Construct a new socket object.</p>
<p><code>options</code> is an object with the following defaults:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_cbracket">{</span>
  fd<span class="sh_symbol">:</span> <span class="sh_keyword">null</span><span class="sh_symbol">,</span>
  allowHalfOpen<span class="sh_symbol">:</span> <span class="sh_keyword">false</span><span class="sh_symbol">,</span>
  readable<span class="sh_symbol">:</span> <span class="sh_keyword">false</span><span class="sh_symbol">,</span>
  writable<span class="sh_symbol">:</span> <span class="sh_keyword">false</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p><code>fd</code> allows you to specify the existing file descriptor of socket.
Set <code>readable</code> and/or <code>writable</code> to <code>true</code> to allow reads and/or writes on this
socket (NOTE: Works only when <code>fd</code> is passed).
About <code>allowHalfOpen</code>, refer to <code>createServer()</code> and <code>'end'</code> event.</p>
<p><code>net.Socket</code> instances are <a href="https://nodejs.org/api/events.html#events_class_eventemitter"><code>EventEmitter</code></a> with the following events:</p>
<h3>Event: 'close'<span><a class="mark" href="#net_event_close_1" id="net_event_close_1">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><ul>
<li><code>had_error</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> <code>true</code> if the socket had a transmission error.</li>
</ul>
<p>Emitted once the socket is fully closed. The argument <code>had_error</code> is a boolean
which says if the socket was closed due to a transmission error.</p>
<h3>Event: 'connect'<span><a class="mark" href="#net_event_connect" id="net_event_connect">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><p>Emitted when a socket connection is successfully established.
See <a href="#net_socket_connect_options_connectlistener"><code>connect()</code></a>.</p>
<h3>Event: 'data'<span><a class="mark" href="#net_event_data" id="net_event_data">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><ul>
<li><a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a></li>
</ul>
<p>Emitted when data is received.  The argument <code>data</code> will be a <code>Buffer</code> or
<code>String</code>.  Encoding of data is set by <code>socket.setEncoding()</code>.
(See the <a href="https://nodejs.org/api/stream.html#stream_class_stream_readable">Readable Stream</a> section for more information.)</p>
<p>Note that the <strong>data will be lost</strong> if there is no listener when a <code>Socket</code>
emits a <code>'data'</code> event.</p>
<h3>Event: 'drain'<span><a class="mark" href="#net_event_drain" id="net_event_drain">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><p>Emitted when the write buffer becomes empty. Can be used to throttle uploads.</p>
<p>See also: the return values of <code>socket.write()</code></p>
<h3>Event: 'end'<span><a class="mark" href="#net_event_end" id="net_event_end">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><p>Emitted when the other end of the socket sends a FIN packet.</p>
<p>By default (<code>allowHalfOpen == false</code>) the socket will destroy its file
descriptor  once it has written out its pending write queue.  However, by
setting <code>allowHalfOpen == true</code> the socket will not automatically <code>end()</code>
its side allowing the user to write arbitrary amounts of data, with the
caveat that the user is required to <code>end()</code> their side now.</p>
<h3>Event: 'error'<span><a class="mark" href="#net_event_error_1" id="net_event_error_1">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" class="type">&lt;Error&gt;</a></li>
</ul>
<p>Emitted when an error occurs.  The <code>'close'</code> event will be called directly
following this event.</p>
<h3>Event: 'lookup'<span><a class="mark" href="#net_event_lookup" id="net_event_lookup">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.11.3</span>
</div><p>Emitted after resolving the hostname but before connecting.
Not applicable to UNIX sockets.</p>
<ul>
<li><code>err</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" class="type">&lt;Error&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type" class="type">&lt;Null&gt;</a> The error object.  See <a href="https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback"><code>dns.lookup()</code></a>.</li>
<li><code>address</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The IP address.</li>
<li><code>family</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type" class="type">&lt;Null&gt;</a> The address type.  See <a href="https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback"><code>dns.lookup()</code></a>.</li>
<li><code>host</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The hostname.</li>
</ul>
<h3>Event: 'timeout'<span><a class="mark" href="#net_event_timeout" id="net_event_timeout">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><p>Emitted if the socket times out from inactivity. This is only to notify that
the socket has been idle. The user must manually close the connection.</p>
<p>See also: <a href="#net_socket_settimeout_timeout_callback"><code>socket.setTimeout()</code></a></p>
<h3>socket.address()<span><a class="mark" href="#net_socket_address" id="net_socket_address">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><p>Returns the bound address, the address family name and port of the
socket as reported by the operating system. Returns an object with
three properties, e.g.
<code>{ port: 12346, family: 'IPv4', address: '127.0.0.1' }</code></p>
<h3>socket.bufferSize<span><a class="mark" href="#net_socket_buffersize" id="net_socket_buffersize">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.3.8</span>
</div><p><code>net.Socket</code> has the property that <code>socket.write()</code> always works. This is to
help users get up and running quickly. The computer cannot always keep up
with the amount of data that is written to a socket - the network connection
simply might be too slow. Node.js will internally queue up the data written to a
socket and send it out over the wire when it is possible. (Internally it is
polling on the socket's file descriptor for being writable).</p>
<p>The consequence of this internal buffering is that memory may grow. This
property shows the number of characters currently buffered to be written.
(Number of characters is approximately equal to the number of bytes to be
written, but the buffer may contain strings, and the strings are lazily
encoded, so the exact number of bytes is not known.)</p>
<p>Users who experience large or growing <code>bufferSize</code> should attempt to
"throttle" the data flows in their program with <a href="#net_socket_pause"><code>pause()</code></a> and <a href="#net_socket_resume"><code>resume()</code></a>.</p>
<h3>socket.bytesRead<span><a class="mark" href="#net_socket_bytesread" id="net_socket_bytesread">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.5.3</span>
</div><p>The amount of received bytes.</p>
<h3>socket.bytesWritten<span><a class="mark" href="#net_socket_byteswritten" id="net_socket_byteswritten">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.5.3</span>
</div><p>The amount of bytes sent.</p>
<h3>socket.connect(options[, connectListener])<span><a class="mark" href="#net_socket_connect_options_connectlistener" id="net_socket_connect_options_connectlistener">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><p>Opens the connection for a given socket.</p>
<p>For TCP sockets, <code>options</code> argument should be an object which specifies:</p>
<ul>
<li><p><code>port</code>: Port the client should connect to (Required).</p>
</li>
<li><p><code>host</code>: Host the client should connect to. Defaults to <code>'localhost'</code>.</p>
</li>
<li><p><code>localAddress</code>: Local interface to bind to for network connections.</p>
</li>
<li><p><code>localPort</code>: Local port to bind to for network connections.</p>
</li>
<li><p><code>family</code> : Version of IP stack. Defaults to <code>4</code>.</p>
</li>
<li><p><code>hints</code>: <a href="https://nodejs.org/api/dns.html#dns_supported_getaddrinfo_flags"><code>dns.lookup()</code> hints</a>. Defaults to <code>0</code>.</p>
</li>
<li><p><code>lookup</code> : Custom lookup function. Defaults to <code>dns.lookup</code>.</p>
</li>
</ul>
<p>For local domain sockets, <code>options</code> argument should be an object which
specifies:</p>
<ul>
<li><code>path</code>: Path the client should connect to (Required).</li>
</ul>
<p>Normally this method is not needed, as <code>net.createConnection</code> opens the
socket. Use this only if you are implementing a custom Socket.</p>
<p>This function is asynchronous. When the <a href="#net_event_connect"><code>'connect'</code></a> event is emitted the
socket is established. If there is a problem connecting, the <code>'connect'</code> event
will not be emitted, the <a href="#net_event_error_1"><code>'error'</code></a> event will be emitted with the exception.</p>
<p>The <code>connectListener</code> parameter will be added as a listener for the
<a href="#net_event_connect"><code>'connect'</code></a> event.</p>
<h3>socket.connect(path[, connectListener])<span><a class="mark" href="#net_socket_connect_path_connectlistener" id="net_socket_connect_path_connectlistener">#</a></span></h3>
<h3>socket.connect(port[, host][, connectListener])<span><a class="mark" href="#net_socket_connect_port_host_connectlistener" id="net_socket_connect_port_host_connectlistener">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><p>As <a href="#net_socket_connect_options_connectlistener"><code>socket.connect(options[, connectListener])</code></a>,
with options either as either <code>{port: port, host: host}</code> or <code>{path: path}</code>.</p>
<h3>socket.connecting<span><a class="mark" href="#net_socket_connecting" id="net_socket_connecting">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v6.1.0</span>
</div><p>If <code>true</code> - <a href="#net_socket_connect_options_connectlistener"><code>socket.connect(options[, connectListener])</code></a> was called and
haven't yet finished. Will be set to <code>false</code> before emitting <code>connect</code> event
and/or calling <a href="#net_socket_connect_options_connectlistener"><code>socket.connect(options[, connectListener])</code></a>'s callback.</p>
<h3>socket.destroy()<span><a class="mark" href="#net_socket_destroy" id="net_socket_destroy">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><p>Ensures that no more I/O activity happens on this socket. Only necessary in
case of errors (parse error or so).</p>
<h3>socket.end([data][, encoding])<span><a class="mark" href="#net_socket_end_data_encoding" id="net_socket_end_data_encoding">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><p>Half-closes the socket. i.e., it sends a FIN packet. It is possible the
server will still send some data.</p>
<p>If <code>data</code> is specified, it is equivalent to calling
<code>socket.write(data, encoding)</code> followed by <code>socket.end()</code>.</p>
<h3>socket.localAddress<span><a class="mark" href="#net_socket_localaddress" id="net_socket_localaddress">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.9.6</span>
</div><p>The string representation of the local IP address the remote client is
connecting on. For example, if you are listening on <code>'0.0.0.0'</code> and the
client connects on <code>'192.168.1.1'</code>, the value would be <code>'192.168.1.1'</code>.</p>
<h3>socket.localPort<span><a class="mark" href="#net_socket_localport" id="net_socket_localport">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.9.6</span>
</div><p>The numeric representation of the local port. For example,
<code>80</code> or <code>21</code>.</p>
<h3>socket.pause()<span><a class="mark" href="#net_socket_pause" id="net_socket_pause">#</a></span></h3>
<p>Pauses the reading of data. That is, <a href="#stream_event_data"><code>'data'</code></a> events will not be emitted.
Useful to throttle back an upload.</p>
<h3>socket.ref()<span><a class="mark" href="#net_socket_ref" id="net_socket_ref">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.9.1</span>
</div><p>Opposite of <code>unref</code>, calling <code>ref</code> on a previously <code>unref</code>d socket will <em>not</em>
let the program exit if it's the only socket left (the default behavior). If
the socket is <code>ref</code>d calling <code>ref</code> again will have no effect.</p>
<p>Returns <code>socket</code>.</p>
<h3>socket.remoteAddress<span><a class="mark" href="#net_socket_remoteaddress" id="net_socket_remoteaddress">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.5.10</span>
</div><p>The string representation of the remote IP address. For example,
<code>'74.125.127.100'</code> or <code>'2001:4860:a005::68'</code>. Value may be <code>undefined</code> if
the socket is destroyed (for example, if the client disconnected).</p>
<h3>socket.remoteFamily<span><a class="mark" href="#net_socket_remotefamily" id="net_socket_remotefamily">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.11.14</span>
</div><p>The string representation of the remote IP family. <code>'IPv4'</code> or <code>'IPv6'</code>.</p>
<h3>socket.remotePort<span><a class="mark" href="#net_socket_remoteport" id="net_socket_remoteport">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.5.10</span>
</div><p>The numeric representation of the remote port. For example,
<code>80</code> or <code>21</code>.</p>
<h3>socket.resume()<span><a class="mark" href="#net_socket_resume" id="net_socket_resume">#</a></span></h3>
<p>Resumes reading after a call to <a href="#net_socket_pause"><code>pause()</code></a>.</p>
<h3>socket.setEncoding([encoding])<span><a class="mark" href="#net_socket_setencoding_encoding" id="net_socket_setencoding_encoding">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><p>Set the encoding for the socket as a <a href="https://nodejs.org/api/stream.html#stream_class_stream_readable">Readable Stream</a>. See
<a href="https://nodejs.org/api/stream.html#stream_readable_setencoding_encoding"><code>stream.setEncoding()</code></a> for more information.</p>
<h3>socket.setKeepAlive([enable][, initialDelay])<span><a class="mark" href="#net_socket_setkeepalive_enable_initialdelay" id="net_socket_setkeepalive_enable_initialdelay">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.92</span>
</div><p>Enable/disable keep-alive functionality, and optionally set the initial
delay before the first keepalive probe is sent on an idle socket.
<code>enable</code> defaults to <code>false</code>.</p>
<p>Set <code>initialDelay</code> (in milliseconds) to set the delay between the last
data packet received and the first keepalive probe. Setting 0 for
initialDelay will leave the value unchanged from the default
(or previous) setting. Defaults to <code>0</code>.</p>
<p>Returns <code>socket</code>.</p>
<h3>socket.setNoDelay([noDelay])<span><a class="mark" href="#net_socket_setnodelay_nodelay" id="net_socket_setnodelay_nodelay">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><p>Disables the Nagle algorithm. By default TCP connections use the Nagle
algorithm, they buffer data before sending it off. Setting <code>true</code> for
<code>noDelay</code> will immediately fire off data each time <code>socket.write()</code> is called.
<code>noDelay</code> defaults to <code>true</code>.</p>
<p>Returns <code>socket</code>.</p>
<h3>socket.setTimeout(timeout[, callback])<span><a class="mark" href="#net_socket_settimeout_timeout_callback" id="net_socket_settimeout_timeout_callback">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><p>Sets the socket to timeout after <code>timeout</code> milliseconds of inactivity on
the socket. By default <code>net.Socket</code> do not have a timeout.</p>
<p>When an idle timeout is triggered the socket will receive a <a href="#net_event_timeout"><code>'timeout'</code></a>
event but the connection will not be severed. The user must manually <a href="https://nodejs.org/api/stream.html#stream_writable_end_chunk_encoding_callback"><code>end()</code></a>
or <a href="#net_socket_destroy"><code>destroy()</code></a> the socket.</p>
<p>If <code>timeout</code> is 0, then the existing idle timeout is disabled.</p>
<p>The optional <code>callback</code> parameter will be added as a one time listener for the
<a href="#net_event_timeout"><code>'timeout'</code></a> event.</p>
<p>Returns <code>socket</code>.</p>
<h3>socket.unref()<span><a class="mark" href="#net_socket_unref" id="net_socket_unref">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.9.1</span>
</div><p>Calling <code>unref</code> on a socket will allow the program to exit if this is the only
active socket in the event system. If the socket is already <code>unref</code>d calling
<code>unref</code> again will have no effect.</p>
<p>Returns <code>socket</code>.</p>
<h3>socket.write(data[, encoding][, callback])<span><a class="mark" href="#net_socket_write_data_encoding_callback" id="net_socket_write_data_encoding_callback">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><p>Sends data on the socket. The second parameter specifies the encoding in the
case of a string--it defaults to UTF8 encoding.</p>
<p>Returns <code>true</code> if the entire data was flushed successfully to the kernel
buffer. Returns <code>false</code> if all or part of the data was queued in user memory.
<a href="#stream_event_drain"><code>'drain'</code></a> will be emitted when the buffer is again free.</p>
<p>The optional <code>callback</code> parameter will be executed when the data is finally
written out - this may not be immediately.</p>
<h2>net.connect(options[, connectListener])<span><a class="mark" href="#net_net_connect_options_connectlistener" id="net_net_connect_options_connectlistener">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.7.0</span>
</div><p>A factory function, which returns a new <a href="https://nodejs.org/api/net.html#net_class_net_socket"><code>net.Socket</code></a> and automatically
connects with the supplied <code>options</code>.</p>
<p>The options are passed to both the <a href="https://nodejs.org/api/net.html#net_class_net_socket"><code>net.Socket</code></a> constructor and the
<a href="#net_socket_connect_options_connectlistener"><code>socket.connect</code></a> method.</p>
<p>The <code>connectListener</code> parameter will be added as a listener for the
<a href="#net_event_connect"><code>'connect'</code></a> event once.</p>
<p>Here is an example of a client of the previously described echo server:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> net <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'net'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> client <span class="sh_symbol">=</span> net<span class="sh_symbol">.</span><span class="sh_function">connect</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>port<span class="sh_symbol">:</span> <span class="sh_number">8124</span><span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// 'connect' listener</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'connected to server!'</span><span class="sh_symbol">);</span>
  client<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'world!</span><span class="sh_specialchar">\r\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
client<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>data<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>data<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">());</span>
  client<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
client<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'disconnected from server'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>To connect on the socket <code>/tmp/echo.sock</code> the second line would just be
changed to</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> client <span class="sh_symbol">=</span> net<span class="sh_symbol">.</span><span class="sh_function">connect</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>path<span class="sh_symbol">:</span> <span class="sh_string">'/tmp/echo.sock'</span><span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h2>net.connect(path[, connectListener])<span><a class="mark" href="#net_net_connect_path_connectlistener" id="net_net_connect_path_connectlistener">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><p>A factory function, which returns a new unix <a href="https://nodejs.org/api/net.html#net_class_net_socket"><code>net.Socket</code></a> and automatically
connects to the supplied <code>path</code>.</p>
<p>The <code>connectListener</code> parameter will be added as a listener for the
<a href="#net_event_connect"><code>'connect'</code></a> event once.</p>
<h2>net.connect(port[, host][, connectListener])<span><a class="mark" href="#net_net_connect_port_host_connectlistener" id="net_net_connect_port_host_connectlistener">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><p>A factory function, which returns a new <a href="https://nodejs.org/api/net.html#net_class_net_socket"><code>net.Socket</code></a> and automatically
connects to the supplied <code>port</code> and <code>host</code>.</p>
<p>If <code>host</code> is omitted, <code>'localhost'</code> will be assumed.</p>
<p>The <code>connectListener</code> parameter will be added as a listener for the
<a href="#net_event_connect"><code>'connect'</code></a> event once.</p>
<h2>net.createConnection(options[, connectListener])<span><a class="mark" href="#net_net_createconnection_options_connectlistener" id="net_net_createconnection_options_connectlistener">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><p>A factory function, which returns a new <a href="https://nodejs.org/api/net.html#net_class_net_socket"><code>net.Socket</code></a> and automatically
connects with the supplied <code>options</code>.</p>
<p>The options are passed to both the <a href="https://nodejs.org/api/net.html#net_class_net_socket"><code>net.Socket</code></a> constructor and the
<a href="#net_socket_connect_options_connectlistener"><code>socket.connect</code></a> method.</p>
<p>The <code>connectListener</code> parameter will be added as a listener for the
<a href="#net_event_connect"><code>'connect'</code></a> event once.</p>
<p>Here is an example of a client of the previously described echo server:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> net <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'net'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> client <span class="sh_symbol">=</span> net<span class="sh_symbol">.</span><span class="sh_function">createConnection</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>port<span class="sh_symbol">:</span> <span class="sh_number">8124</span><span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">//'connect' listener</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'connected to server!'</span><span class="sh_symbol">);</span>
  client<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'world!</span><span class="sh_specialchar">\r\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
client<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>data<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>data<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">());</span>
  client<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
client<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'disconnected from server'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>To connect on the socket <code>/tmp/echo.sock</code> the second line would just be
changed to</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> client <span class="sh_symbol">=</span> net<span class="sh_symbol">.</span><span class="sh_function">connect</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>path<span class="sh_symbol">:</span> <span class="sh_string">'/tmp/echo.sock'</span><span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h2>net.createConnection(path[, connectListener])<span><a class="mark" href="#net_net_createconnection_path_connectlistener" id="net_net_createconnection_path_connectlistener">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><p>A factory function, which returns a new unix <a href="https://nodejs.org/api/net.html#net_class_net_socket"><code>net.Socket</code></a> and automatically
connects to the supplied <code>path</code>.</p>
<p>The <code>connectListener</code> parameter will be added as a listener for the
<a href="#net_event_connect"><code>'connect'</code></a> event once.</p>
<h2>net.createConnection(port[, host][, connectListener])<span><a class="mark" href="#net_net_createconnection_port_host_connectlistener" id="net_net_createconnection_port_host_connectlistener">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.90</span>
</div><p>A factory function, which returns a new <a href="https://nodejs.org/api/net.html#net_class_net_socket"><code>net.Socket</code></a> and automatically
connects to the supplied <code>port</code> and <code>host</code>.</p>
<p>If <code>host</code> is omitted, <code>'localhost'</code> will be assumed.</p>
<p>The <code>connectListener</code> parameter will be added as a listener for the
<a href="#net_event_connect"><code>'connect'</code></a> event once.</p>
<h2>net.createServer([options][, connectionListener])<span><a class="mark" href="#net_net_createserver_options_connectionlistener" id="net_net_createserver_options_connectionlistener">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.0</span>
</div><p>Creates a new server. The <code>connectionListener</code> argument is
automatically set as a listener for the <a href="#net_event_connection"><code>'connection'</code></a> event.</p>
<p><code>options</code> is an object with the following defaults:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_cbracket">{</span>
  allowHalfOpen<span class="sh_symbol">:</span> <span class="sh_keyword">false</span><span class="sh_symbol">,</span>
  pauseOnConnect<span class="sh_symbol">:</span> <span class="sh_keyword">false</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p>If <code>allowHalfOpen</code> is <code>true</code>, then the socket won't automatically send a FIN
packet when the other end of the socket sends a FIN packet. The socket becomes
non-readable, but still writable. You should call the <a href="https://nodejs.org/api/stream.html#stream_writable_end_chunk_encoding_callback"><code>end()</code></a> method explicitly.
See <a href="#stream_event_end"><code>'end'</code></a> event for more information.</p>
<p>If <code>pauseOnConnect</code> is <code>true</code>, then the socket associated with each incoming
connection will be paused, and no data will be read from its handle. This allows
connections to be passed between processes without any data being read by the
original process. To begin reading data from a paused socket, call <a href="#net_socket_resume"><code>resume()</code></a>.</p>
<p>Here is an example of an echo server which listens for connections
on port 8124:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> net <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'net'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> server <span class="sh_symbol">=</span> net<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">((</span>c<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// 'connection' listener</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'client connected'</span><span class="sh_symbol">);</span>
  c<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'client disconnected'</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  c<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'hello</span><span class="sh_specialchar">\r\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
  c<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>c<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
server<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">throw</span> err<span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
server<span class="sh_symbol">.</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">8124</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'server bound'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>Test this by using <code>telnet</code>:</p>
<pre class="sh_sourceCode"><code>telnet localhost <span class="sh_number">8124</span>
</code></pre><p>To listen on the socket <code>/tmp/echo.sock</code> the third line from the last would
just be changed to</p>
<pre class="sh_sourceCode"><code class="lang-js">server<span class="sh_symbol">.</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_string">'/tmp/echo.sock'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'server bound'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>Use <code>nc</code> to connect to a UNIX domain socket server:</p>
<pre class="sh_sourceCode"><code class="lang-js">nc <span class="sh_symbol">-</span><span class="sh_normal">U </span><span class="sh_symbol">/</span><span class="sh_normal">tmp</span><span class="sh_symbol">/</span>echo<span class="sh_symbol">.</span>sock
</code></pre>
<h2>net.isIP(input)<span><a class="mark" href="#net_net_isip_input" id="net_net_isip_input">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.3.0</span>
</div><p>Tests if input is an IP address. Returns 0 for invalid strings,
returns 4 for IP version 4 addresses, and returns 6 for IP version 6 addresses.</p>
<h2>net.isIPv4(input)<span><a class="mark" href="#net_net_isipv4_input" id="net_net_isipv4_input">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.3.0</span>
</div><p>Returns true if input is a version 4 IP address, otherwise returns false.</p>
<h2>net.isIPv6(input)<span><a class="mark" href="#net_net_isipv6_input" id="net_net_isipv6_input">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.3.0</span>
</div><p>Returns true if input is a version 6 IP address, otherwise returns false.</p>
<!-- [end-include:net.md] -->
<!-- [start-include:os.md] -->
<h1>OS<span><a class="mark" href="#os_os" id="os_os">#</a></span></h1>
<pre class="api_stability api_stability_2 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> Stable</pre><p>Provides a few basic operating-system related utility functions.</p>
<p>Use <code>require('os')</code> to access this module.</p>
<h2>os.EOL<span><a class="mark" href="#os_os_eol" id="os_os_eol">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.7.8</span>
</div><p>A constant defining the appropriate End-of-line marker for the operating
system.</p>
<h2>os.arch()<span><a class="mark" href="#os_os_arch" id="os_os_arch">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.0</span>
</div><p>Returns the operating system CPU architecture. Possible values are <code>'x64'</code>,
<code>'arm'</code> and <code>'ia32'</code>. Returns the value of <a href="https://nodejs.org/api/process.html#process_process_arch"><code>process.arch</code></a>.</p>
<h2>os.cpus()<span><a class="mark" href="#os_os_cpus" id="os_os_cpus">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.3.3</span>
</div><p>Returns an array of objects containing information about each CPU/core
installed: model, speed (in MHz), and times (an object containing the number of
milliseconds the CPU/core spent in: user, nice, sys, idle, and irq).</p>
<p>Example inspection of os.cpus:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_symbol">[</span> <span class="sh_cbracket">{</span> model<span class="sh_symbol">:</span> <span class="sh_string">'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz'</span><span class="sh_symbol">,</span>
    speed<span class="sh_symbol">:</span> <span class="sh_number">2926</span><span class="sh_symbol">,</span>
    times<span class="sh_symbol">:</span>
     <span class="sh_cbracket">{</span> user<span class="sh_symbol">:</span> <span class="sh_number">252020</span><span class="sh_symbol">,</span>
       nice<span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">,</span>
       sys<span class="sh_symbol">:</span> <span class="sh_number">30340</span><span class="sh_symbol">,</span>
       idle<span class="sh_symbol">:</span> <span class="sh_number">1070356870</span><span class="sh_symbol">,</span>
       irq<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_cbracket">}</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_cbracket">{</span> model<span class="sh_symbol">:</span> <span class="sh_string">'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz'</span><span class="sh_symbol">,</span>
    speed<span class="sh_symbol">:</span> <span class="sh_number">2926</span><span class="sh_symbol">,</span>
    times<span class="sh_symbol">:</span>
     <span class="sh_cbracket">{</span> user<span class="sh_symbol">:</span> <span class="sh_number">306960</span><span class="sh_symbol">,</span>
       nice<span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">,</span>
       sys<span class="sh_symbol">:</span> <span class="sh_number">26980</span><span class="sh_symbol">,</span>
       idle<span class="sh_symbol">:</span> <span class="sh_number">1071569080</span><span class="sh_symbol">,</span>
       irq<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_cbracket">}</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_cbracket">{</span> model<span class="sh_symbol">:</span> <span class="sh_string">'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz'</span><span class="sh_symbol">,</span>
    speed<span class="sh_symbol">:</span> <span class="sh_number">2926</span><span class="sh_symbol">,</span>
    times<span class="sh_symbol">:</span>
     <span class="sh_cbracket">{</span> user<span class="sh_symbol">:</span> <span class="sh_number">248450</span><span class="sh_symbol">,</span>
       nice<span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">,</span>
       sys<span class="sh_symbol">:</span> <span class="sh_number">21750</span><span class="sh_symbol">,</span>
       idle<span class="sh_symbol">:</span> <span class="sh_number">1070919370</span><span class="sh_symbol">,</span>
       irq<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_cbracket">}</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_cbracket">{</span> model<span class="sh_symbol">:</span> <span class="sh_string">'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz'</span><span class="sh_symbol">,</span>
    speed<span class="sh_symbol">:</span> <span class="sh_number">2926</span><span class="sh_symbol">,</span>
    times<span class="sh_symbol">:</span>
     <span class="sh_cbracket">{</span> user<span class="sh_symbol">:</span> <span class="sh_number">256880</span><span class="sh_symbol">,</span>
       nice<span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">,</span>
       sys<span class="sh_symbol">:</span> <span class="sh_number">19430</span><span class="sh_symbol">,</span>
       idle<span class="sh_symbol">:</span> <span class="sh_number">1070905480</span><span class="sh_symbol">,</span>
       irq<span class="sh_symbol">:</span> <span class="sh_number">20</span> <span class="sh_cbracket">}</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_cbracket">{</span> model<span class="sh_symbol">:</span> <span class="sh_string">'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz'</span><span class="sh_symbol">,</span>
    speed<span class="sh_symbol">:</span> <span class="sh_number">2926</span><span class="sh_symbol">,</span>
    times<span class="sh_symbol">:</span>
     <span class="sh_cbracket">{</span> user<span class="sh_symbol">:</span> <span class="sh_number">511580</span><span class="sh_symbol">,</span>
       nice<span class="sh_symbol">:</span> <span class="sh_number">20</span><span class="sh_symbol">,</span>
       sys<span class="sh_symbol">:</span> <span class="sh_number">40900</span><span class="sh_symbol">,</span>
       idle<span class="sh_symbol">:</span> <span class="sh_number">1070842510</span><span class="sh_symbol">,</span>
       irq<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_cbracket">}</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_cbracket">{</span> model<span class="sh_symbol">:</span> <span class="sh_string">'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz'</span><span class="sh_symbol">,</span>
    speed<span class="sh_symbol">:</span> <span class="sh_number">2926</span><span class="sh_symbol">,</span>
    times<span class="sh_symbol">:</span>
     <span class="sh_cbracket">{</span> user<span class="sh_symbol">:</span> <span class="sh_number">291660</span><span class="sh_symbol">,</span>
       nice<span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">,</span>
       sys<span class="sh_symbol">:</span> <span class="sh_number">34360</span><span class="sh_symbol">,</span>
       idle<span class="sh_symbol">:</span> <span class="sh_number">1070888000</span><span class="sh_symbol">,</span>
       irq<span class="sh_symbol">:</span> <span class="sh_number">10</span> <span class="sh_cbracket">}</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_cbracket">{</span> model<span class="sh_symbol">:</span> <span class="sh_string">'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz'</span><span class="sh_symbol">,</span>
    speed<span class="sh_symbol">:</span> <span class="sh_number">2926</span><span class="sh_symbol">,</span>
    times<span class="sh_symbol">:</span>
     <span class="sh_cbracket">{</span> user<span class="sh_symbol">:</span> <span class="sh_number">308260</span><span class="sh_symbol">,</span>
       nice<span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">,</span>
       sys<span class="sh_symbol">:</span> <span class="sh_number">55410</span><span class="sh_symbol">,</span>
       idle<span class="sh_symbol">:</span> <span class="sh_number">1071129970</span><span class="sh_symbol">,</span>
       irq<span class="sh_symbol">:</span> <span class="sh_number">880</span> <span class="sh_cbracket">}</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_cbracket">{</span> model<span class="sh_symbol">:</span> <span class="sh_string">'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz'</span><span class="sh_symbol">,</span>
    speed<span class="sh_symbol">:</span> <span class="sh_number">2926</span><span class="sh_symbol">,</span>
    times<span class="sh_symbol">:</span>
     <span class="sh_cbracket">{</span> user<span class="sh_symbol">:</span> <span class="sh_number">266450</span><span class="sh_symbol">,</span>
       nice<span class="sh_symbol">:</span> <span class="sh_number">1480</span><span class="sh_symbol">,</span>
       sys<span class="sh_symbol">:</span> <span class="sh_number">34920</span><span class="sh_symbol">,</span>
       idle<span class="sh_symbol">:</span> <span class="sh_number">1072572010</span><span class="sh_symbol">,</span>
       irq<span class="sh_symbol">:</span> <span class="sh_number">30</span> <span class="sh_cbracket">}</span> <span class="sh_cbracket">}</span> <span class="sh_symbol">]</span>
</code></pre>
<p>Note that since <code>nice</code> values are UNIX centric in Windows the <code>nice</code> values of
all processors are always 0.</p>
<h2>os.endianness()<span><a class="mark" href="#os_os_endianness" id="os_os_endianness">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.9.4</span>
</div><p>Returns the endianness of the CPU. Possible values are <code>'BE'</code> for big endian
or <code>'LE'</code> for little endian.</p>
<h2>os.freemem()<span><a class="mark" href="#os_os_freemem" id="os_os_freemem">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.3.3</span>
</div><p>Returns the amount of free system memory in bytes.</p>
<h2>os.homedir()<span><a class="mark" href="#os_os_homedir" id="os_os_homedir">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v2.3.0</span>
</div><p>Returns the home directory of the current user.</p>
<h2>os.hostname()<span><a class="mark" href="#os_os_hostname" id="os_os_hostname">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.3.3</span>
</div><p>Returns the hostname of the operating system.</p>
<h2>os.loadavg()<span><a class="mark" href="#os_os_loadavg" id="os_os_loadavg">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.3.3</span>
</div><p>Returns an array containing the 1, 5, and 15 minute load averages.</p>
<p>The load average is a measure of system activity, calculated by the operating
system and expressed as a fractional number.  As a rule of thumb, the load
average should ideally be less than the number of logical CPUs in the system.</p>
<p>The load average is a very UNIX-y concept; there is no real equivalent on
Windows platforms.  That is why this function always returns <code>[0, 0, 0]</code> on
Windows.</p>
<h2>os.networkInterfaces()<span><a class="mark" href="#os_os_networkinterfaces" id="os_os_networkinterfaces">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.6.0</span>
</div><p>Get a list of network interfaces:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_cbracket">{</span> lo<span class="sh_symbol">:</span>
   <span class="sh_symbol">[</span> <span class="sh_cbracket">{</span> address<span class="sh_symbol">:</span> <span class="sh_string">'127.0.0.1'</span><span class="sh_symbol">,</span>
       netmask<span class="sh_symbol">:</span> <span class="sh_string">'255.0.0.0'</span><span class="sh_symbol">,</span>
       family<span class="sh_symbol">:</span> <span class="sh_string">'IPv4'</span><span class="sh_symbol">,</span>
       mac<span class="sh_symbol">:</span> <span class="sh_string">'00:00:00:00:00:00'</span><span class="sh_symbol">,</span>
       internal<span class="sh_symbol">:</span> <span class="sh_keyword">true</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
     <span class="sh_cbracket">{</span> address<span class="sh_symbol">:</span> <span class="sh_string">'::1'</span><span class="sh_symbol">,</span>
       netmask<span class="sh_symbol">:</span> <span class="sh_string">'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff'</span><span class="sh_symbol">,</span>
       family<span class="sh_symbol">:</span> <span class="sh_string">'IPv6'</span><span class="sh_symbol">,</span>
       mac<span class="sh_symbol">:</span> <span class="sh_string">'00:00:00:00:00:00'</span><span class="sh_symbol">,</span>
       internal<span class="sh_symbol">:</span> <span class="sh_keyword">true</span> <span class="sh_cbracket">}</span> <span class="sh_symbol">],</span>
  eth0<span class="sh_symbol">:</span>
   <span class="sh_symbol">[</span> <span class="sh_cbracket">{</span> address<span class="sh_symbol">:</span> <span class="sh_string">'192.168.1.108'</span><span class="sh_symbol">,</span>
       netmask<span class="sh_symbol">:</span> <span class="sh_string">'255.255.255.0'</span><span class="sh_symbol">,</span>
       family<span class="sh_symbol">:</span> <span class="sh_string">'IPv4'</span><span class="sh_symbol">,</span>
       mac<span class="sh_symbol">:</span> <span class="sh_string">'01:02:03:0a:0b:0c'</span><span class="sh_symbol">,</span>
       internal<span class="sh_symbol">:</span> <span class="sh_keyword">false</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
     <span class="sh_cbracket">{</span> address<span class="sh_symbol">:</span> <span class="sh_string">'fe80::a00:27ff:fe4e:66a1'</span><span class="sh_symbol">,</span>
       netmask<span class="sh_symbol">:</span> <span class="sh_string">'ffff:ffff:ffff:ffff::'</span><span class="sh_symbol">,</span>
       family<span class="sh_symbol">:</span> <span class="sh_string">'IPv6'</span><span class="sh_symbol">,</span>
       mac<span class="sh_symbol">:</span> <span class="sh_string">'01:02:03:0a:0b:0c'</span><span class="sh_symbol">,</span>
       internal<span class="sh_symbol">:</span> <span class="sh_keyword">false</span> <span class="sh_cbracket">}</span> <span class="sh_symbol">]</span> <span class="sh_cbracket">}</span>
</code></pre>
<p>Note that due to the underlying implementation this will only return network
interfaces that have been assigned an address.</p>
<h2>os.platform()<span><a class="mark" href="#os_os_platform" id="os_os_platform">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.0</span>
</div><p>Returns the operating system platform. Possible values are <code>'darwin'</code>,
<code>'freebsd'</code>, <code>'linux'</code>, <code>'sunos'</code> or <code>'win32'</code>. Returns the value of
<a href="https://nodejs.org/api/process.html#process_process_platform"><code>process.platform</code></a>.</p>
<h2>os.release()<span><a class="mark" href="#os_os_release" id="os_os_release">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.3.3</span>
</div><p>Returns the operating system release.</p>
<h2>os.tmpdir()<span><a class="mark" href="#os_os_tmpdir" id="os_os_tmpdir">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.9.9</span>
</div><p>Returns the operating system's default directory for temporary files.</p>
<h2>os.totalmem()<span><a class="mark" href="#os_os_totalmem" id="os_os_totalmem">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.3.3</span>
</div><p>Returns the total amount of system memory in bytes.</p>
<h2>os.type()<span><a class="mark" href="#os_os_type" id="os_os_type">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.3.3</span>
</div><p>Returns the operating system name. For example <code>'Linux'</code> on Linux, <code>'Darwin'</code>
on OS X and <code>'Windows_NT'</code> on Windows.</p>
<h2>os.uptime()<span><a class="mark" href="#os_os_uptime" id="os_os_uptime">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.3.3</span>
</div><p>Returns the system uptime in seconds.</p>
<h2>os.userInfo(<a href="#zlib_class_options">options</a>)<span><a class="mark" href="#os_os_userinfo_options" id="os_os_userinfo_options">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v6.0.0</span>
</div><ul>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> Character encoding used to interpret resulting strings.
If <code>encoding</code> is set to <code>'buffer'</code>, the <code>username</code>, <code>shell</code>, and <code>homedir</code>
values will be <code>Buffer</code> instances. (Default: 'utf8')</li>
</ul>
</li>
</ul>
<p>Returns a subset of the password file entry for the current effective user. The
returned object includes the <code>username</code>, <code>uid</code>, <code>gid</code>, <code>shell</code>, and <code>homedir</code>.
On Windows, the <code>uid</code> and <code>gid</code> fields are <code>-1</code>, and <code>shell</code> is <code>null</code>.</p>
<p>The value of <code>homedir</code> returned by <code>userInfo()</code> comes directly from the
operating system. This differs from the result of <code>os.homedir()</code>, which queries
several environment variables for the home directory before falling back to the
operating system response.</p>
<!-- [end-include:os.md] -->
<!-- [start-include:path.md] -->
<h1>Path<span><a class="mark" href="#path_path" id="path_path">#</a></span></h1>
<pre class="api_stability api_stability_2 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> Stable</pre><p>The <code>path</code> module provides utilities for working with file and directory paths.
It can be accessed using:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> path <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'path'</span><span class="sh_symbol">);</span>
</code></pre>
<h2>Windows vs. POSIX<span><a class="mark" href="#path_windows_vs_posix" id="path_windows_vs_posix">#</a></span></h2>
<p>The default operation of the <code>path</code> module varies based on the operating system
on which a Node.js application is running. Specifically, when running on a
Windows operating system, the <code>path</code> module will assume that Windows-style
paths are being used.</p>
<p>For example, using the <code>path.basename()</code> function with the Windows file path
<code>C:\temp\myfile.html</code>, will yield different results when running on POSIX than
when run on Windows:</p>
<p>On POSIX:</p>
<pre class="sh_sourceCode"><code class="lang-js">path<span class="sh_symbol">.</span><span class="sh_function">basename</span><span class="sh_symbol">(</span><span class="sh_string">'C:</span><span class="sh_specialchar">\\</span><span class="sh_string">temp</span><span class="sh_specialchar">\\</span><span class="sh_string">myfile.html'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// returns 'C:\temp\myfile.html'</span>
</code></pre>
<p>On Windows:</p>
<pre class="sh_sourceCode"><code class="lang-js">path<span class="sh_symbol">.</span><span class="sh_function">basename</span><span class="sh_symbol">(</span><span class="sh_string">'C:</span><span class="sh_specialchar">\\</span><span class="sh_string">temp</span><span class="sh_specialchar">\\</span><span class="sh_string">myfile.html'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// returns 'myfile.html'</span>
</code></pre>
<p>To achieve consistent results when working with Windows file paths on any
operating system, use <a href="#path_path_win32"><code>path.win32</code></a>:</p>
<p>On POSIX and Windows:</p>
<pre class="sh_sourceCode"><code class="lang-js">path<span class="sh_symbol">.</span>win32<span class="sh_symbol">.</span><span class="sh_function">basename</span><span class="sh_symbol">(</span><span class="sh_string">'C:</span><span class="sh_specialchar">\\</span><span class="sh_string">temp</span><span class="sh_specialchar">\\</span><span class="sh_string">myfile.html'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// returns 'myfile.html'</span>
</code></pre>
<p>To achieve consistent results when working with POSIX file paths on any
operating system, use <a href="#path_path_posix"><code>path.posix</code></a>:</p>
<p>On POSIX and Windows:</p>
<pre class="sh_sourceCode"><code class="lang-js">path<span class="sh_symbol">.</span>posix<span class="sh_symbol">.</span><span class="sh_function">basename</span><span class="sh_symbol">(</span><span class="sh_string">'/tmp/myfile.html'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// returns 'myfile.html'</span>
</code></pre>
<h2>path.basename(path[, ext])<span><a class="mark" href="#path_path_basename_path_ext" id="path_path_basename_path_ext">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.25</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
<li><code>ext</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> An optional file extension</li>
</ul>
<p>The <code>path.basename()</code> methods returns the last portion of a <code>path</code>, similar to
the Unix <code>basename</code> command.</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js">path<span class="sh_symbol">.</span><span class="sh_function">basename</span><span class="sh_symbol">(</span><span class="sh_string">'/foo/bar/baz/asdf/quux.html'</span><span class="sh_symbol">)</span>
  <span class="sh_comment">// returns 'quux.html'</span>

path<span class="sh_symbol">.</span><span class="sh_function">basename</span><span class="sh_symbol">(</span><span class="sh_string">'/foo/bar/baz/asdf/quux.html'</span><span class="sh_symbol">,</span> <span class="sh_string">'.html'</span><span class="sh_symbol">)</span>
  <span class="sh_comment">// returns 'quux'</span>
</code></pre>
<p>A <a href="https://nodejs.org/api/errors.html#errors_class_typeerror"><code>TypeError</code></a> is thrown if <code>path</code> is not a string or if <code>ext</code> is given
and is not a string.</p>
<h2>path.delimiter<span><a class="mark" href="#path_path_delimiter" id="path_path_delimiter">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.9.3</span>
</div><p>Provides the platform-specific path delimiter:</p>
<ul>
<li><code>;</code> for Windows</li>
<li><code>:</code> for POSIX</li>
</ul>
<p>For example, on POSIX:</p>
<pre class="sh_sourceCode"><code class="lang-js">console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>env<span class="sh_symbol">.</span>PATH<span class="sh_symbol">)</span>
<span class="sh_comment">// '/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin'</span>

process<span class="sh_symbol">.</span>env<span class="sh_symbol">.</span>PATH<span class="sh_symbol">.</span><span class="sh_function">split</span><span class="sh_symbol">(</span>path<span class="sh_symbol">.</span>delimiter<span class="sh_symbol">)</span>
<span class="sh_comment">// returns ['/usr/bin', '/bin', '/usr/sbin', '/sbin', '/usr/local/bin']</span>
</code></pre>
<p>On Windows:</p>
<pre class="sh_sourceCode"><code class="lang-js">console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>env<span class="sh_symbol">.</span>PATH<span class="sh_symbol">)</span>
<span class="sh_comment">// 'C:\Windows\system32;C:\Windows;C:\Program Files\node\'</span>

process<span class="sh_symbol">.</span>env<span class="sh_symbol">.</span>PATH<span class="sh_symbol">.</span><span class="sh_function">split</span><span class="sh_symbol">(</span>path<span class="sh_symbol">.</span>delimiter<span class="sh_symbol">)</span>
<span class="sh_comment">// returns ['C:\\Windows\\system32', 'C:\\Windows', 'C:\\Program Files\\node\\']</span>
</code></pre>
<h2>path.dirname(path)<span><a class="mark" href="#path_path_dirname_path" id="path_path_dirname_path">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.16</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
</ul>
<p>The <code>path.dirname()</code> method returns the directory name of a <code>path</code>, similar to
the Unix <code>dirname</code> command.</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js">path<span class="sh_symbol">.</span><span class="sh_function">dirname</span><span class="sh_symbol">(</span><span class="sh_string">'/foo/bar/baz/asdf/quux'</span><span class="sh_symbol">)</span>
<span class="sh_comment">// returns '/foo/bar/baz/asdf'</span>
</code></pre>
<p>A <a href="https://nodejs.org/api/errors.html#errors_class_typeerror"><code>TypeError</code></a> is thrown if <code>path</code> is not a string.</p>
<h2>path.extname(path)<span><a class="mark" href="#path_path_extname_path" id="path_path_extname_path">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.25</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
</ul>
<p>The <code>path.extname()</code> method returns the extension of the <code>path</code>, from the last
occurance of the <code>.</code> (period) character to end of string in the last portion of
the <code>path</code>.  If there is no <code>.</code> in the last portion of the <code>path</code>, or if the
first character of the basename of <code>path</code> (see <code>path.basename()</code>) is <code>.</code>, then
an empty string is returned.</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js">path<span class="sh_symbol">.</span><span class="sh_function">extname</span><span class="sh_symbol">(</span><span class="sh_string">'index.html'</span><span class="sh_symbol">)</span>
<span class="sh_comment">// returns '.html'</span>

path<span class="sh_symbol">.</span><span class="sh_function">extname</span><span class="sh_symbol">(</span><span class="sh_string">'index.coffee.md'</span><span class="sh_symbol">)</span>
<span class="sh_comment">// returns '.md'</span>

path<span class="sh_symbol">.</span><span class="sh_function">extname</span><span class="sh_symbol">(</span><span class="sh_string">'index.'</span><span class="sh_symbol">)</span>
<span class="sh_comment">// returns '.'</span>

path<span class="sh_symbol">.</span><span class="sh_function">extname</span><span class="sh_symbol">(</span><span class="sh_string">'index'</span><span class="sh_symbol">)</span>
<span class="sh_comment">// returns ''</span>

path<span class="sh_symbol">.</span><span class="sh_function">extname</span><span class="sh_symbol">(</span><span class="sh_string">'.index'</span><span class="sh_symbol">)</span>
<span class="sh_comment">// returns ''</span>
</code></pre>
<p>A <a href="https://nodejs.org/api/errors.html#errors_class_typeerror"><code>TypeError</code></a> is thrown if <code>path</code> is not a string.</p>
<h2>path.format(pathObject)<span><a class="mark" href="#path_path_format_pathobject" id="path_path_format_pathobject">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.11.15</span>
</div><ul>
<li><code>pathObject</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>dir</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
<li><code>root</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> </li>
<li><code>base</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
<li><code>name</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
<li><code>ext</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
</ul>
</li>
</ul>
<p>The <code>path.format()</code> method returns a path string from an object. This is the
opposite of <a href="#path_path_parse_path"><code>path.parse()</code></a>.</p>
<p>The following process is used when constructing the path string:</p>
<ul>
<li><code>output</code> is set to an empty string.</li>
<li>If <code>pathObject.dir</code> is specified, <code>pathObject.dir</code> is appended to <code>output</code>
followed by the value of <code>path.sep</code>;</li>
<li>Otherwise, if <code>pathObject.root</code> is specified, <code>pathObject.root</code> is appended
to <code>output</code>.</li>
<li>If <code>pathObject.base</code> is specified, <code>pathObject.base</code> is appended to <code>output</code>;</li>
<li>Otherwise:<ul>
<li>If <code>pathObject.name</code> is specified, <code>pathObject.name</code> is appended to <code>output</code></li>
<li>If <code>pathObject.ext</code> is specified, <code>pathObject.ext</code> is appended to <code>output</code>.</li>
</ul>
</li>
<li>Return <code>output</code></li>
</ul>
<p>For example, on POSIX:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// If `dir` and `base` are provided,</span>
<span class="sh_comment">// `${dir}${path.sep}${base}`</span>
<span class="sh_comment">// will be returned.</span>
path<span class="sh_symbol">.</span><span class="sh_function">format</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>
  dir<span class="sh_symbol">:</span> <span class="sh_string">'/home/user/dir'</span><span class="sh_symbol">,</span>
  base<span class="sh_symbol">:</span> <span class="sh_string">'file.txt'</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_comment">// returns '/home/user/dir/file.txt'</span>

<span class="sh_comment">// `root` will be used if `dir` is not specified.</span>
<span class="sh_comment">// If only `root` is provided or `dir` is equal to `root` then the</span>
<span class="sh_comment">// platform separator will not be included.</span>
path<span class="sh_symbol">.</span><span class="sh_function">format</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>
  root<span class="sh_symbol">:</span> <span class="sh_string">'/'</span><span class="sh_symbol">,</span>
  base<span class="sh_symbol">:</span> <span class="sh_string">'file.txt'</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_comment">// returns '/file.txt'</span>

<span class="sh_comment">// `name` + `ext` will be used if `base` is not specified.</span>
path<span class="sh_symbol">.</span><span class="sh_function">format</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>
  root<span class="sh_symbol">:</span> <span class="sh_string">'/'</span><span class="sh_symbol">,</span>
  name<span class="sh_symbol">:</span> <span class="sh_string">'file'</span><span class="sh_symbol">,</span>
  ext<span class="sh_symbol">:</span> <span class="sh_string">'.txt'</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_comment">// returns '/file.txt'</span>

<span class="sh_comment">// `base` will be returned if `dir` or `root` are not provided.</span>
path<span class="sh_symbol">.</span><span class="sh_function">format</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>
  base<span class="sh_symbol">:</span> <span class="sh_string">'file.txt'</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_comment">// returns 'file.txt'</span>
</code></pre>
<p>On Windows:</p>
<pre class="sh_sourceCode"><code class="lang-js">path<span class="sh_symbol">.</span><span class="sh_function">format</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>
    root <span class="sh_symbol">:</span> <span class="sh_string">"C:</span><span class="sh_specialchar">\\</span><span class="sh_string">"</span><span class="sh_symbol">,</span>
    dir <span class="sh_symbol">:</span> <span class="sh_string">"C:</span><span class="sh_specialchar">\\</span><span class="sh_string">path</span><span class="sh_specialchar">\\</span><span class="sh_string">dir"</span><span class="sh_symbol">,</span>
    base <span class="sh_symbol">:</span> <span class="sh_string">"file.txt"</span><span class="sh_symbol">,</span>
    ext <span class="sh_symbol">:</span> <span class="sh_string">".txt"</span><span class="sh_symbol">,</span>
    name <span class="sh_symbol">:</span> <span class="sh_string">"file"</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">)</span>
<span class="sh_comment">// returns 'C:\\path\\dir\\file.txt'</span>
</code></pre>
<h2>path.isAbsolute(path)<span><a class="mark" href="#path_path_isabsolute_path" id="path_path_isabsolute_path">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.11.2</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
</ul>
<p>The <code>path.isAbsolute()</code> method determines if <code>path</code> is an absolute path.</p>
<p>If the given <code>path</code> is a zero-length string, <code>false</code> will be returned.</p>
<p>For example on POSIX:</p>
<pre class="sh_sourceCode"><code class="lang-js">path<span class="sh_symbol">.</span><span class="sh_function">isAbsolute</span><span class="sh_symbol">(</span><span class="sh_string">'/foo/bar'</span><span class="sh_symbol">)</span> <span class="sh_comment">// true</span>
path<span class="sh_symbol">.</span><span class="sh_function">isAbsolute</span><span class="sh_symbol">(</span><span class="sh_string">'/baz/..'</span><span class="sh_symbol">)</span>  <span class="sh_comment">// true</span>
path<span class="sh_symbol">.</span><span class="sh_function">isAbsolute</span><span class="sh_symbol">(</span><span class="sh_string">'qux/'</span><span class="sh_symbol">)</span>     <span class="sh_comment">// false</span>
path<span class="sh_symbol">.</span><span class="sh_function">isAbsolute</span><span class="sh_symbol">(</span><span class="sh_string">'.'</span><span class="sh_symbol">)</span>        <span class="sh_comment">// false</span>
</code></pre>
<p>On Windows:</p>
<pre class="sh_sourceCode"><code class="lang-js">path<span class="sh_symbol">.</span><span class="sh_function">isAbsolute</span><span class="sh_symbol">(</span><span class="sh_string">'//server'</span><span class="sh_symbol">)</span>  <span class="sh_comment">// true</span>
path<span class="sh_symbol">.</span><span class="sh_function">isAbsolute</span><span class="sh_symbol">(</span><span class="sh_string">'C:/foo/..'</span><span class="sh_symbol">)</span> <span class="sh_comment">// true</span>
path<span class="sh_symbol">.</span><span class="sh_function">isAbsolute</span><span class="sh_symbol">(</span><span class="sh_string">'bar</span><span class="sh_specialchar">\\</span><span class="sh_string">baz'</span><span class="sh_symbol">)</span>  <span class="sh_comment">// false</span>
path<span class="sh_symbol">.</span><span class="sh_function">isAbsolute</span><span class="sh_symbol">(</span><span class="sh_string">'.'</span><span class="sh_symbol">)</span>         <span class="sh_comment">// false</span>
</code></pre>
<p>A <a href="https://nodejs.org/api/errors.html#errors_class_typeerror"><code>TypeError</code></a> is thrown if <code>path</code> is not a string.</p>
<h2>path.join([path[, ...]])<span><a class="mark" href="#path_path_join_path" id="path_path_join_path">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.16</span>
</div><ul>
<li><code>[path[, ...]]</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> A sequence of path segments</li>
</ul>
<p>The <code>path.join()</code> method join all given <code>path</code> segments together using the
platform specific separator as a delimiter, then normalizes the resulting path.</p>
<p>Zero-length <code>path</code> segments are ignored. If the joined path string is a
zero-length string then <code>'.'</code> will be returned, representing the current
working directory.</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js">path<span class="sh_symbol">.</span><span class="sh_function">join</span><span class="sh_symbol">(</span><span class="sh_string">'/foo'</span><span class="sh_symbol">,</span> <span class="sh_string">'bar'</span><span class="sh_symbol">,</span> <span class="sh_string">'baz/asdf'</span><span class="sh_symbol">,</span> <span class="sh_string">'quux'</span><span class="sh_symbol">,</span> <span class="sh_string">'..'</span><span class="sh_symbol">)</span>
<span class="sh_comment">// returns '/foo/bar/baz/asdf'</span>

path<span class="sh_symbol">.</span><span class="sh_function">join</span><span class="sh_symbol">(</span><span class="sh_string">'foo'</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{}</span><span class="sh_symbol">,</span> <span class="sh_string">'bar'</span><span class="sh_symbol">)</span>
<span class="sh_comment">// throws TypeError: Arguments to path.join must be strings</span>
</code></pre>
<p>A <a href="https://nodejs.org/api/errors.html#errors_class_typeerror"><code>TypeError</code></a> is thrown if any of the path segments is not a string.</p>
<h2>path.normalize(path)<span><a class="mark" href="#path_path_normalize_path" id="path_path_normalize_path">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.23</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
</ul>
<p>The <code>path.normalize()</code> method normalizes the given <code>path</code>, resolving <code>'..'</code> and
<code>'.'</code> segments.</p>
<p>When multiple, sequential path segment separation characters are found (e.g.
<code>/</code> on POSIX and <code>\</code> on Windows), they are replaced by a single instance of the
platform specific path segment separator. Trailing separators are preserved.</p>
<p>If the <code>path</code> is a zero-length string, <code>'.'</code> is returned, representing the
current working directory.</p>
<p>For example on POSIX:</p>
<pre class="sh_sourceCode"><code class="lang-js">path<span class="sh_symbol">.</span><span class="sh_function">normalize</span><span class="sh_symbol">(</span><span class="sh_string">'/foo/bar//baz/asdf/quux/..'</span><span class="sh_symbol">)</span>
<span class="sh_comment">// returns '/foo/bar/baz/asdf'</span>
</code></pre>
<p>On Windows:</p>
<pre class="sh_sourceCode"><code class="lang-js">path<span class="sh_symbol">.</span><span class="sh_function">normalize</span><span class="sh_symbol">(</span><span class="sh_string">'C:</span><span class="sh_specialchar">\\</span><span class="sh_string">temp</span><span class="sh_specialchar">\\\\</span><span class="sh_string">foo</span><span class="sh_specialchar">\\</span><span class="sh_string">bar</span><span class="sh_specialchar">\\</span><span class="sh_string">..</span><span class="sh_specialchar">\\</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
<span class="sh_comment">// returns 'C:\\temp\\foo\\'</span>
</code></pre>
<p>A <a href="https://nodejs.org/api/errors.html#errors_class_typeerror"><code>TypeError</code></a> is thrown if <code>path</code> is not a string.</p>
<h2>path.parse(path)<span><a class="mark" href="#path_path_parse_path" id="path_path_parse_path">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.11.15</span>
</div><ul>
<li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
</ul>
<p>The <code>path.parse()</code> method returns an object whose properties represent
significant elements of the <code>path</code>.</p>
<p>The returned object will have the following properties:</p>
<ul>
<li><code>root</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
<li><code>dir</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
<li><code>base</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
<li><code>ext</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
<li><code>name</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
</ul>
<p>For example on POSIX:</p>
<pre class="sh_sourceCode"><code class="lang-js">path<span class="sh_symbol">.</span><span class="sh_function">parse</span><span class="sh_symbol">(</span><span class="sh_string">'/home/user/dir/file.txt'</span><span class="sh_symbol">)</span>
<span class="sh_comment">// returns</span>
<span class="sh_comment">// {</span>
<span class="sh_comment">//    root : "/",</span>
<span class="sh_comment">//    dir : "/home/user/dir",</span>
<span class="sh_comment">//    base : "file.txt",</span>
<span class="sh_comment">//    ext : ".txt",</span>
<span class="sh_comment">//    name : "file"</span>
<span class="sh_comment">// }</span>
</code></pre>
<pre class="sh_sourceCode"><code class="lang-text">┌─────────────────────┬────────────┐
│          dir        │    base    │
├──────┬              ├──────┬─────┤
│ root │              │ name │ ext │
<span class="sh_string">"  /    home/user/dir / file  .txt "</span>
└──────┴──────────────┴──────┴─────┘
<span class="sh_symbol">(</span>all spaces <span class="sh_keyword">in</span> the <span class="sh_string">""</span> line should be ignored <span class="sh_symbol">--</span> they<span class="sh_string">'re purely for formatting)</span>
</code></pre>
<p>On Windows:</p>
<pre class="sh_sourceCode"><code class="lang-js">path<span class="sh_symbol">.</span><span class="sh_function">parse</span><span class="sh_symbol">(</span><span class="sh_string">'C:</span><span class="sh_specialchar">\\</span><span class="sh_string">path</span><span class="sh_specialchar">\\</span><span class="sh_string">dir</span><span class="sh_specialchar">\\</span><span class="sh_string">file.txt'</span><span class="sh_symbol">)</span>
<span class="sh_comment">// returns</span>
<span class="sh_comment">// {</span>
<span class="sh_comment">//    root : "C:\\",</span>
<span class="sh_comment">//    dir : "C:\\path\\dir",</span>
<span class="sh_comment">//    base : "file.txt",</span>
<span class="sh_comment">//    ext : ".txt",</span>
<span class="sh_comment">//    name : "file"</span>
<span class="sh_comment">// }</span>
</code></pre>
<pre class="sh_sourceCode"><code class="lang-text">┌─────────────────────┬────────────┐
│          dir        │    base    │
├──────┬              ├──────┬─────┤
│ root │              │ name │ ext │
<span class="sh_string">" C:</span><span class="sh_specialchar">\ </span><span class="sh_string">     path</span><span class="sh_specialchar">\d</span><span class="sh_string">ir   </span><span class="sh_specialchar">\ </span><span class="sh_string">file  .txt "</span>
└──────┴──────────────┴──────┴─────┘
<span class="sh_symbol">(</span>all spaces <span class="sh_keyword">in</span> the <span class="sh_string">""</span> line should be ignored <span class="sh_symbol">--</span> they<span class="sh_string">'re purely for formatting)</span>
</code></pre>
<p>A <a href="https://nodejs.org/api/errors.html#errors_class_typeerror"><code>TypeError</code></a> is thrown if <code>path</code> is not a string.</p>
<h2>path.posix<span><a class="mark" href="#path_path_posix" id="path_path_posix">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.11.15</span>
</div><p>The <code>path.posix</code> property provides access to POSIX specific implementations
of the <code>path</code> methods.</p>
<h2>path.relative(from, to)<span><a class="mark" href="#path_path_relative_from_to" id="path_path_relative_from_to">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.0</span>
</div><ul>
<li><code>from</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
<li><code>to</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
</ul>
<p>The <code>path.relative()</code> method returns the relative path from <code>from</code> to <code>to</code>.
If <code>from</code> and <code>to</code> each resolve to the same path (after calling <code>path.resolve()</code>
on each), a zero-length string is returned.</p>
<p>If a zero-length string is passed as <code>from</code> or <code>to</code>, the current working
directory will be used instead of the zero-length strings.</p>
<p>For example on POSIX:</p>
<pre class="sh_sourceCode"><code class="lang-js">path<span class="sh_symbol">.</span><span class="sh_function">relative</span><span class="sh_symbol">(</span><span class="sh_string">'/data/orandea/test/aaa'</span><span class="sh_symbol">,</span> <span class="sh_string">'/data/orandea/impl/bbb'</span><span class="sh_symbol">)</span>
<span class="sh_comment">// returns '../../impl/bbb'</span>
</code></pre>
<p>On Windows:</p>
<pre class="sh_sourceCode"><code class="lang-js">path<span class="sh_symbol">.</span><span class="sh_function">relative</span><span class="sh_symbol">(</span><span class="sh_string">'C:</span><span class="sh_specialchar">\\</span><span class="sh_string">orandea</span><span class="sh_specialchar">\\</span><span class="sh_string">test</span><span class="sh_specialchar">\\</span><span class="sh_string">aaa'</span><span class="sh_symbol">,</span> <span class="sh_string">'C:</span><span class="sh_specialchar">\\</span><span class="sh_string">orandea</span><span class="sh_specialchar">\\</span><span class="sh_string">impl</span><span class="sh_specialchar">\\</span><span class="sh_string">bbb'</span><span class="sh_symbol">)</span>
<span class="sh_comment">// returns '..\\..\\impl\\bbb'</span>
</code></pre>
<p>A <a href="https://nodejs.org/api/errors.html#errors_class_typeerror"><code>TypeError</code></a> is thrown if neither <code>from</code> nor <code>to</code> is a string.</p>
<h2>path.resolve([path[, ...]])<span><a class="mark" href="#path_path_resolve_path" id="path_path_resolve_path">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.3.4</span>
</div><ul>
<li><code>[path[, ...]]</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> A sequence of paths or path segments</li>
</ul>
<p>The <code>path.resolve()</code> method resolves a sequence of paths or path segments into
an absolute path.</p>
<p>The given sequence of paths is processed from right to left, with each
subsequent <code>path</code> prepended until an absolute path is constructed.
For instance, given the sequence of path segments: <code>/foo</code>, <code>/bar</code>, <code>baz</code>,
calling <code>path.resolve('/foo', '/bar', 'baz')</code> would return <code>/bar/baz</code>.</p>
<p>If after processing all given <code>path</code> segments an absolute path has not yet
been generated, the current working directory is used.</p>
<p>The resulting path is normalized and trailing slashes are removed unless the
path is resolved to the root directory.</p>
<p>Zero-length <code>path</code> segments are ignored.</p>
<p>If no <code>path</code> segments are passed, <code>path.resolve()</code> will return the absolute path
of the current working directory.</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js">path<span class="sh_symbol">.</span><span class="sh_function">resolve</span><span class="sh_symbol">(</span><span class="sh_string">'/foo/bar'</span><span class="sh_symbol">,</span> <span class="sh_string">'./baz'</span><span class="sh_symbol">)</span>
<span class="sh_comment">// returns '/foo/bar/baz'</span>

path<span class="sh_symbol">.</span><span class="sh_function">resolve</span><span class="sh_symbol">(</span><span class="sh_string">'/foo/bar'</span><span class="sh_symbol">,</span> <span class="sh_string">'/tmp/file/'</span><span class="sh_symbol">)</span>
<span class="sh_comment">// returns '/tmp/file'</span>

path<span class="sh_symbol">.</span><span class="sh_function">resolve</span><span class="sh_symbol">(</span><span class="sh_string">'wwwroot'</span><span class="sh_symbol">,</span> <span class="sh_string">'static_files/png/'</span><span class="sh_symbol">,</span> <span class="sh_string">'../gif/image.gif'</span><span class="sh_symbol">)</span>
<span class="sh_comment">// if the current working directory is /home/myself/node,</span>
<span class="sh_comment">// this returns '/home/myself/node/wwwroot/static_files/gif/image.gif'</span>
</code></pre>
<p>A <a href="https://nodejs.org/api/errors.html#errors_class_typeerror"><code>TypeError</code></a> is thrown if any of the arguments is not a string.</p>
<h2>path.sep<span><a class="mark" href="#path_path_sep" id="path_path_sep">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.7.9</span>
</div><p>Provides the platform-specific path segment separator:</p>
<ul>
<li><code>\</code> on Windows</li>
<li><code>/</code> on POSIX</li>
</ul>
<p>For example on POSIX:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_string">'foo/bar/baz'</span><span class="sh_symbol">.</span><span class="sh_function">split</span><span class="sh_symbol">(</span>path<span class="sh_symbol">.</span>sep<span class="sh_symbol">)</span>
<span class="sh_comment">// returns ['foo', 'bar', 'baz']</span>
</code></pre>
<p>On Windows:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_string">'foo</span><span class="sh_specialchar">\\</span><span class="sh_string">bar</span><span class="sh_specialchar">\\</span><span class="sh_string">baz'</span><span class="sh_symbol">.</span><span class="sh_function">split</span><span class="sh_symbol">(</span>path<span class="sh_symbol">.</span>sep<span class="sh_symbol">)</span>
<span class="sh_comment">// returns ['foo', 'bar', 'baz']</span>
</code></pre>
<h2>path.win32<span><a class="mark" href="#path_path_win32" id="path_path_win32">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.11.15</span>
</div><p>The <code>path.win32</code> property provides access to Windows-specific implementations
of the <code>path</code> methods.</p>
<!-- [end-include:path.md] -->
<!-- [start-include:process.md] -->
<h1>process<span><a class="mark" href="#process_process" id="process_process">#</a></span></h1>
<!-- type=global -->
<p>The <code>process</code> object is a <code>global</code> that provides information about, and control
over, the current Node.js process. As a global, it is always available to
Node.js applications without using <code>require()</code>.</p>
<h2>Process Events<span><a class="mark" href="#process_process_events" id="process_process_events">#</a></span></h2>
<p>The <code>process</code> object is an instance of <a href="https://nodejs.org/api/events.html#events_class_eventemitter"><code>EventEmitter</code></a>.</p>
<h3>Event: 'beforeExit'<span><a class="mark" href="#process_event_beforeexit" id="process_event_beforeexit">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.11.12</span>
</div><p>The <code>'beforeExit'</code> event is emitted when Node.js empties its event loop and has
no additional work to schedule. Normally, the Node.js process will exit when
there is no work scheduled, but a listener registered on the <code>'beforeExit'</code>
event can make asynchronous calls, and thereby cause the Node.js process to
continue.</p>
<p>The listener callback function is invoked with the value of
[<code>process.exitCode</code>][] passed as the only argument.</p>
<p>The <code>'beforeExit'</code> event is <em>not</em> emitted for conditions causing explicit
termination, such as calling <a href="#process_process_exit_code"><code>process.exit()</code></a> or uncaught exceptions.</p>
<p>The <code>'beforeExit'</code> should <em>not</em> be used as an alternative to the <code>'exit'</code> event
unless the intention is to schedule additional work.</p>
<h3>Event: 'disconnect'<span><a class="mark" href="#process_event_disconnect" id="process_event_disconnect">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.7.7</span>
</div><p>If the Node.js process is spawned with an IPC channel (see the <a href="https://nodejs.org/api/child_process.html">Child Process</a>
and <a href="https://nodejs.org/api/cluster.html">Cluster</a> documentation), the <code>'disconnect'</code> event will be emitted when
the IPC channel is closed.</p>
<h3>Event: 'exit'<span><a class="mark" href="#process_event_exit" id="process_event_exit">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.7</span>
</div><p>The <code>'exit'</code> event is emitted when the Node.js process is about to exit as a
result of either:</p>
<ul>
<li>The <code>process.exit()</code> method being called explicitly;</li>
<li>The Node.js event loop no longer having any additional work to perform.</li>
</ul>
<p>There is no way to prevent the exiting of the event loop at this point, and once
all <code>'exit'</code> listeners have finished running the Node.js process will terminate.</p>
<p>The listener callback function is invoked with the exit code specified either
by the [<code>process.exitCode</code>][] property, or the <code>exitCode</code> argument passed to the
<a href="#process_process_exit_code"><code>process.exit()</code></a> method, as the only argument.</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js">process<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'exit'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>code<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`About to exit <span class="sh_keyword">with</span> code<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>code<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>Listener functions <strong>must</strong> only perform <strong>synchronous</strong> operations. The Node.js
process will exit immediately after calling the <code>'exit'</code> event listeners
causing any additional work still queued in the event loop to be abandoned.
In the following example, for instance, the timeout will never occur:</p>
<pre class="sh_sourceCode"><code class="lang-js">process<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'exit'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>code<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_function">setTimeout</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'This will not run'</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h3>Event: 'message'<span><a class="mark" href="#process_event_message" id="process_event_message">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.5.10</span>
</div><p>If the Node.js process is spawned with an IPC channel (see the <a href="https://nodejs.org/api/child_process.html">Child Process</a>
and <a href="https://nodejs.org/api/cluster.html">Cluster</a> documentation), the <code>'message'</code> event is emitted whenever a
message sent by a parent process using <a href="https://nodejs.org/api/child_process.html#child_process_child_send_message_sendhandle_options_callback"><code>childprocess.send()</code></a> is received by
the child process.</p>
<p>The listener callback is invoked with the following arguments:</p>
<ul>
<li><code>message</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> a parsed JSON object or primitive value</li>
<li><code>sendHandle</code> <span class="type">&lt;Handle object&gt;</span> a <a href="https://nodejs.org/api/net.html#net_class_net_socket"><code>net.Socket</code></a> or <a href="https://nodejs.org/api/net.html#net_class_net_server"><code>net.Server</code></a> object, or
undefined.</li>
</ul>
<h3>Event: 'rejectionHandled'<span><a class="mark" href="#process_event_rejectionhandled" id="process_event_rejectionhandled">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v1.4.1</span>
</div><p>The <code>'rejectionHandled'</code> event is emitted whenever a <code>Promise</code> has been rejected
and an error handler was attached to it (using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch"><code>promise.catch()</code></a>, for
example) later than one turn of the Node.js event loop.</p>
<p>The listener callback is invoked with a reference to the rejected <code>Promise</code> as
the only argument.</p>
<p>The <code>Promise</code> object would have previously been emitted in an
<code>'unhandledRejection'</code> event, but during the course of processing gained a
rejection handler.</p>
<p>There is no notion of a top level for a <code>Promise</code> chain at which rejections can
always be handled. Being inherently asynchronous in nature, a <code>Promise</code>
rejection can be handled at a future point in time — possibly much later than
the event loop turn it takes for the <code>'unhandledRejection'</code> event to be emitted.</p>
<p>Another way of stating this is that, unlike in synchronous code where there is
an ever-growing list of unhandled exceptions, with Promises there can be a
growing-and-shrinking list of unhandled rejections.</p>
<p>In synchronous code, the <code>'uncaughtException'</code> event is emitted when the list of
unhandled exceptions grows.</p>
<p>In asynchronous code, the <code>'unhandledRejection'</code> event is emitted when the list
of unhandled rejections grows, and the <code>'rejectionHandled'</code> event is emitted
when the list of unhandled rejections shrinks.</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> unhandledRejections <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Map</span><span class="sh_symbol">();</span>
process<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'unhandledRejection'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>reason<span class="sh_symbol">,</span> p<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  unhandledRejections<span class="sh_symbol">.</span><span class="sh_function">set</span><span class="sh_symbol">(</span>p<span class="sh_symbol">,</span> reason<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
process<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'rejectionHandled'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>p<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  unhandledRejections<span class="sh_symbol">.</span><span class="sh_keyword">delete</span><span class="sh_symbol">(</span>p<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>In this example, the <code>unhandledRejections</code> <code>Map</code> will grow and shrink over time,
reflecting rejections that start unhandled and then become handled. It is
possible to record such errors in an error log, either periodically (which is
likely best for long-running application) or upon process exit (which is likely
most convenient for scripts).</p>
<h3>Event: 'uncaughtException'<span><a class="mark" href="#process_event_uncaughtexception" id="process_event_uncaughtexception">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.18</span>
</div><p>The <code>'uncaughtException'</code> event is emitted when an exception bubbles all the
way back to the event loop. By default, Node.js handles such exceptions by
printing the stack trace to <code>stderr</code> and exiting. Adding a handler for the
<code>'uncaughtException'</code> event overrides this default behavior.</p>
<p>The listener function is called with the <code>Error</code> object passed as the only
argument.</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js">process<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'uncaughtException'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Caught exception<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>err<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_function">setTimeout</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'This will still run.'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">500</span><span class="sh_symbol">);</span>

<span class="sh_comment">// Intentionally cause an exception, but don't catch it.</span>
<span class="sh_function">nonexistentFunc</span><span class="sh_symbol">();</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'This will not run.'</span><span class="sh_symbol">);</span>
</code></pre>
<h4>Warning: Using <code>'uncaughtException'</code> correctly<span><a class="mark" href="#process_warning_using_uncaughtexception_correctly" id="process_warning_using_uncaughtexception_correctly">#</a></span></h4>
<p>Note that <code>'uncaughtException'</code> is a crude mechanism for exception handling
intended to be used only as a last resort. The event <em>should not</em> be used as
an equivalent to <code>On Error Resume Next</code>. Unhandled exceptions inherently mean
that an application is in an undefined state. Attempting to resume application
code without properly recovering from the exception can cause additional
unforeseen and unpredictable issues.</p>
<p>Exceptions thrown from within the event handler will not be caught. Instead the
process will exit with a non zero exit code and the stack trace will be printed.
This is to avoid infinite recursion.</p>
<p>Attempting to resume normally after an uncaught exception can be similar to
pulling out of the power cord when upgrading a computer -- nine out of ten
times nothing happens - but the 10th time, the system becomes corrupted.</p>
<p>The correct use of <code>'uncaughtException'</code> is to perform synchronous cleanup
of allocated resources (e.g. file descriptors, handles, etc) before shutting
down the process. It is not safe to resume normal operation after
<code>'uncaughtException'</code>.</p>
<h3>Event: 'unhandledRejection'<span><a class="mark" href="#process_event_unhandledrejection" id="process_event_unhandledrejection">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v1.4.1</span>
</div><p>The <code>'unhandledRejection</code>' event is emitted whenever a <code>Promise</code> is rejected and
no error handler is attached to the promise within a turn of the event loop. 
When programming with Promises, exceptions are encapsulated as "rejected
promises". Rejections can be caught and handled using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch"><code>promise.catch()</code></a> and
are propagated through a <code>Promise</code> chain. The <code>'unhandledRejection'</code> event is
useful for detecting and keeping track of promises that were rejected whose 
rejections have not yet been handled.</p>
<p>The listener function is called with the following arguments:</p>
<ul>
<li><code>reason</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" class="type">&lt;Error&gt;</a> | <span class="type">&lt;any&gt;</span> The object with which the promise was rejected
(typically an <a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a> objet).</li>
<li><code>p</code> the <code>Promise</code> that was rejected.</li>
</ul>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js">process<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'unhandledRejection'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>reason<span class="sh_symbol">,</span> p<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">"Unhandled Rejection at: Promise "</span><span class="sh_symbol">,</span> p<span class="sh_symbol">,</span> <span class="sh_string">" reason: "</span><span class="sh_symbol">,</span> reason<span class="sh_symbol">);</span>
    <span class="sh_comment">// application specific logging, throwing an error, or other logic here</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

somePromise<span class="sh_symbol">.</span><span class="sh_function">then</span><span class="sh_symbol">((</span>res<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">return</span> <span class="sh_function">reportToUser</span><span class="sh_symbol">(</span>JSON<span class="sh_symbol">.</span><span class="sh_function">pasre</span><span class="sh_symbol">(</span>res<span class="sh_symbol">));</span> <span class="sh_comment">// note the typo (`pasre`)</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span> <span class="sh_comment">// no `.catch` or `.then`</span>
</code></pre>
<p>The following will also trigger the <code>'unhandledRejection'</code> event to be
emitted:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">function</span> <span class="sh_function">SomeResource</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// Initially set the loaded status to a rejected promise</span>
  <span class="sh_keyword">this</span><span class="sh_symbol">.</span>loaded <span class="sh_symbol">=</span> Promise<span class="sh_symbol">.</span><span class="sh_function">reject</span><span class="sh_symbol">(</span><span class="sh_keyword">new</span> <span class="sh_predef_func">Error</span><span class="sh_symbol">(</span><span class="sh_string">'Resource not yet loaded!'</span><span class="sh_symbol">));</span>
<span class="sh_cbracket">}</span>

<span class="sh_keyword">var</span> resource <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">SomeResource</span><span class="sh_symbol">();</span>
<span class="sh_comment">// no .catch or .then on resource.loaded for at least a turn</span>
</code></pre>
<p>In this example case, it is possible to track the rejection as a developer error
as would typically be the case for other <code>'unhandledRejection'</code> events. To
address such failures, a non-operational
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch"><code>.catch(() =&gt; { })</code></a> handler may be attached to
<code>resource.loaded</code>, which would prevent the <code>'unhandledRejection'</code> event from
being emitted. Alternatively, the <a href="#process_event_rejectionhandled"><code>'rejectionHandled'</code></a> event may be used.</p>
<h3>Event: 'warning'<span><a class="mark" href="#process_event_warning" id="process_event_warning">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v6.0.0</span>
</div><p>The <code>'warning'</code> event is emitted whenever Node.js emits a process warning.</p>
<p>A process warning is similar to an error in that it describes exceptional
conditions that are being brought to the user's attention. However, warnings
are not part of the normal Node.js and JavaScript error handling flow.
Node.js can emit warnings whenever it detects bad coding practices that could
lead to sub-optimal application performance, bugs or security vulnerabilities.</p>
<p>The listener function is called with a single <code>warning</code> argument whose value is
an <code>Error</code> object. There are three key properties that describe the warning:</p>
<ul>
<li><code>name</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The name of the warning (currently <code>Warning</code> by default).</li>
<li><code>message</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> A system-provided description of the warning.</li>
<li><code>stack</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> A stack trace to the location in the code where the warning
was issued.</li>
</ul>
<pre class="sh_sourceCode"><code class="lang-js">process<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'warning'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>warning<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">warn</span><span class="sh_symbol">(</span>warning<span class="sh_symbol">.</span>name<span class="sh_symbol">);</span>    <span class="sh_comment">// Print the warning name</span>
  console<span class="sh_symbol">.</span><span class="sh_function">warn</span><span class="sh_symbol">(</span>warning<span class="sh_symbol">.</span>message<span class="sh_symbol">);</span> <span class="sh_comment">// Print the warning message</span>
  console<span class="sh_symbol">.</span><span class="sh_function">warn</span><span class="sh_symbol">(</span>warning<span class="sh_symbol">.</span>stack<span class="sh_symbol">);</span>   <span class="sh_comment">// Print the stack trace</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>By default, Node.js will print process warnings to <code>stderr</code>. The <code>--no-warnings</code>
command-line option can be used to suppress the default console output but the
<code>'warning'</code> event will still be emitted by the <code>process</code> object.</p>
<p>The following example illustrates the warning that is printed to <code>stderr</code> when
too many listeners have been added to an event</p>
<pre class="sh_sourceCode"><code>$ node
<span class="sh_symbol">&gt;</span> event<span class="sh_symbol">.</span>defaultMaxListeners <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
<span class="sh_symbol">&gt;</span> process<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'foo'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{}</span><span class="sh_symbol">);</span>
<span class="sh_symbol">&gt;</span> process<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'foo'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{}</span><span class="sh_symbol">);</span>
<span class="sh_symbol">&gt;</span> <span class="sh_symbol">(</span>node<span class="sh_symbol">:</span><span class="sh_number">38638</span><span class="sh_symbol">)</span> Warning<span class="sh_symbol">:</span> Possible EventEmitter memory leak detected<span class="sh_symbol">.</span> <span class="sh_number">2</span> foo
<span class="sh_symbol">...</span> listeners added<span class="sh_symbol">.</span> Use emitter<span class="sh_symbol">.</span><span class="sh_function">setMaxListeners</span><span class="sh_symbol">()</span> to increase limit
</code></pre><p>In contrast, the following example turns off the default warning output and
adds a custom handler to the <code>'warning'</code> event:</p>
<pre class="sh_sourceCode"><code>$ node <span class="sh_symbol">--</span>no<span class="sh_symbol">-</span>warnings
<span class="sh_symbol">&gt;</span> <span class="sh_keyword">var</span> p <span class="sh_symbol">=</span> process<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'warning'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>warning<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> console<span class="sh_symbol">.</span><span class="sh_function">warn</span><span class="sh_symbol">(</span><span class="sh_string">'Do not do that!'</span><span class="sh_symbol">));</span>
<span class="sh_symbol">&gt;</span> event<span class="sh_symbol">.</span>defaultMaxListeners <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
<span class="sh_symbol">&gt;</span> process<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'foo'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{}</span><span class="sh_symbol">);</span>
<span class="sh_symbol">&gt;</span> process<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'foo'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{}</span><span class="sh_symbol">);</span>
<span class="sh_symbol">&gt;</span> Do not <span class="sh_keyword">do</span> that<span class="sh_symbol">!</span>
</code></pre><p>The <code>--trace-warnings</code> command-line option can be used to have the default
console output for warnings include the full stack trace of the warning.</p>
<h4>Emitting custom warnings<span><a class="mark" href="#process_emitting_custom_warnings" id="process_emitting_custom_warnings">#</a></span></h4>
<p>The <a href="#process_process_emitwarning_warning_name_ctor"><code>process.emitWarning()</code></a> method can be used to issue
custom or application specific warnings.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// Emit a warning using a string...</span>
process<span class="sh_symbol">.</span><span class="sh_function">emitWarning</span><span class="sh_symbol">(</span><span class="sh_string">'Something happened!'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: (node 12345) Warning: Something happened!</span>

<span class="sh_comment">// Emit a warning using an object...</span>
process<span class="sh_symbol">.</span><span class="sh_function">emitWarning</span><span class="sh_symbol">(</span><span class="sh_string">'Something Happened!'</span><span class="sh_symbol">,</span> <span class="sh_string">'CustomWarning'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: (node 12345) CustomWarning: Something happened!</span>

<span class="sh_comment">// Emit a warning using a custom Error object...</span>
<span class="sh_keyword">class</span> CustomWarning <span class="sh_keyword">extends</span> <span class="sh_predef_func">Error</span> <span class="sh_cbracket">{</span>
  <span class="sh_function">constructor</span><span class="sh_symbol">(</span>message<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">super</span><span class="sh_symbol">(</span>message<span class="sh_symbol">);</span>
    <span class="sh_keyword">this</span><span class="sh_symbol">.</span>name <span class="sh_symbol">=</span> <span class="sh_string">'CustomWarning'</span><span class="sh_symbol">;</span>
    <span class="sh_predef_func">Error</span><span class="sh_symbol">.</span><span class="sh_function">captureStackTrace</span><span class="sh_symbol">(</span><span class="sh_keyword">this</span><span class="sh_symbol">,</span> CustomWarning<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>
<span class="sh_keyword">const</span> myWarning <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">CustomWarning</span><span class="sh_symbol">(</span><span class="sh_string">'Something happened!'</span><span class="sh_symbol">);</span>
process<span class="sh_symbol">.</span><span class="sh_function">emitWarning</span><span class="sh_symbol">(</span>myWarning<span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: (node 12345) CustomWarning: Something happened!</span>
</code></pre>
<h4>Emitting custom deprecation warnings<span><a class="mark" href="#process_emitting_custom_deprecation_warnings" id="process_emitting_custom_deprecation_warnings">#</a></span></h4>
<p>Custom deprecation warnings can be emitted by setting the <code>name</code> of a custom
warning to <code>DeprecationWarning</code>. For instance:</p>
<pre class="sh_sourceCode"><code class="lang-js">process<span class="sh_symbol">.</span><span class="sh_function">emitWarning</span><span class="sh_symbol">(</span><span class="sh_string">'This API is deprecated'</span><span class="sh_symbol">,</span> <span class="sh_string">'DeprecationWarning'</span><span class="sh_symbol">);</span>
</code></pre>
<p>Or,</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> err <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_predef_func">Error</span><span class="sh_symbol">(</span><span class="sh_string">'This API is deprecated'</span><span class="sh_symbol">);</span>
err<span class="sh_symbol">.</span>name <span class="sh_symbol">=</span> <span class="sh_string">'DeprecationWarning'</span><span class="sh_symbol">;</span>
process<span class="sh_symbol">.</span><span class="sh_function">emitWarning</span><span class="sh_symbol">(</span>err<span class="sh_symbol">);</span>
</code></pre>
<p>Launching Node.js using the <code>--throw-deprecation</code> command line flag will
cause custom deprecation warnings to be thrown as exceptions.</p>
<p>Using the <code>--trace-deprecation</code> command line flag will cause the custom
deprecation to be printed to <code>stderr</code> along with the stack trace.</p>
<p>Using the <code>--no-deprecation</code> command line flag will suppress all reporting
of the custom deprecation.</p>
<p>The <code>*-deprecation</code> command line flags only affect warnings that use the name
<code>DeprecationWarning</code>.</p>
<h3>Signal Events<span><a class="mark" href="#process_signal_events" id="process_signal_events">#</a></span></h3>
<!--type=event-->
<!--name=SIGINT, SIGHUP, etc.-->
<p>Signal events will be emitted when the Node.js process receives a signal. Please
refer to <a href="http://man7.org/linux/man-pages/man2/sigaction.2.html">sigaction(2)</a> for a listing of standard POSIX signal names such as
<code>SIGINT</code>, <code>SIGHUP</code>, etc.</p>
<p>The name of each event will be the uppercase common name for the signal (e.g.
<code>'SIGINT'</code> for <code>SIGINT</code> signals).</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// Begin reading from stdin so the process does not exit.</span>
process<span class="sh_symbol">.</span>stdin<span class="sh_symbol">.</span><span class="sh_function">resume</span><span class="sh_symbol">();</span>

process<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'SIGINT'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Received SIGINT.  Press Control-D to exit.'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p><em>Note</em>: An easy way to send the <code>SIGINT</code> signal is with <code>&lt;Ctrl&gt;-C</code> in most
terminal programs.</p>
<p>It is important to take note of the following:</p>
<ul>
<li><code>SIGUSR1</code> is reserved by Node.js to start the debugger.  It's possible to
install a listener but doing so will <em>not</em> stop the debugger from starting.</li>
<li><code>SIGTERM</code> and <code>SIGINT</code> have default handlers on non-Windows platforms that
resets the terminal mode before exiting with code <code>128 + signal number</code>. If
one of these signals has a listener installed, its default behavior will be
removed (Node.js will no longer exit).</li>
<li><code>SIGPIPE</code> is ignored by default. It can have a listener installed.</li>
<li><code>SIGHUP</code> is generated on Windows when the console window is closed, and on
other platforms under various similar conditions, see <a href="http://man7.org/linux/man-pages/man7/signal.7.html">signal(7)</a>. It can have a
listener installed, however Node.js will be unconditionally terminated by
Windows about 10 seconds later. On non-Windows platforms, the default
behavior of <code>SIGHUP</code> is to terminate Node.js, but once a listener has been
installed its default behavior will be removed.</li>
<li><code>SIGTERM</code> is not supported on Windows, it can be listened on.</li>
<li><code>SIGINT</code> from the terminal is supported on all platforms, and can usually be
generated with <code>CTRL+C</code> (though this may be configurable). It is not generated
when terminal raw mode is enabled.</li>
<li><code>SIGBREAK</code> is delivered on Windows when <code>&lt;Ctrl&gt;+&lt;Break&gt;</code> is pressed, on
non-Windows platforms it can be listened on, but there is no way to send or
generate it.</li>
<li><code>SIGWINCH</code> is delivered when the console has been resized. On Windows, this
will only happen on write to the console when the cursor is being moved, or
when a readable tty is used in raw mode.</li>
<li><code>SIGKILL</code> cannot have a listener installed, it will unconditionally terminate
Node.js on all platforms.</li>
<li><code>SIGSTOP</code> cannot have a listener installed.</li>
</ul>
<p><em>Note</em>: Windows does not support sending signals, but Node.js offers some
emulation with <a href="#process_process_kill_pid_signal"><code>process.kill()</code></a>, and <a href="https://nodejs.org/api/child_process.html#child_process_child_kill_signal"><code>ChildProcess.kill()</code></a>. Sending
signal <code>0</code> can be used to test for the existence of a process. Sending <code>SIGINT</code>,
<code>SIGTERM</code>, and <code>SIGKILL</code> cause the unconditional termination of the target
process.</p>
<h2>process.abort()<span><a class="mark" href="#process_process_abort" id="process_process_abort">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.7.0</span>
</div><p>The <code>process.abort()</code> method causes the Node.js process to exit immediately and
generate a core file.</p>
<h2>process.arch<span><a class="mark" href="#process_process_arch" id="process_process_arch">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.0</span>
</div><p>The <code>process.arch</code> property returns a String identifying the processor
architecture that the Node.js process is currently running on. For instance
<code>'arm'</code>, <code>'ia32'</code>, or <code>'x64'</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js">console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`This processor architecture is $<span class="sh_cbracket">{</span>process<span class="sh_symbol">.</span>arch<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
</code></pre>
<h2>process.argv<span><a class="mark" href="#process_process_argv" id="process_process_argv">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.27</span>
</div><p>The <code>process.argv</code> property returns a array containing the command line
arguments passed when the Node.js process was launched. The first element will
be 'node', the second element will be the name of the JavaScript file. The
remaining elements will be any additional command line arguments.</p>
<p>For example, assuming the following script for <code>process-args.js</code>:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// print process.argv</span>
process<span class="sh_symbol">.</span>argv<span class="sh_symbol">.</span><span class="sh_function">forEach</span><span class="sh_symbol">((</span>val<span class="sh_symbol">,</span> index<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`$<span class="sh_cbracket">{</span>index<span class="sh_cbracket">}</span><span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>val<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>Launching the Node.js process as:</p>
<pre class="sh_sourceCode"><code>$ node process<span class="sh_number">-2</span><span class="sh_symbol">.</span>js one two<span class="sh_symbol">=</span>three four
</code></pre><p>Would generate the output:</p>
<pre class="sh_sourceCode"><code class="lang-text"><span class="sh_number">0</span><span class="sh_symbol">:</span> node
<span class="sh_number">1</span><span class="sh_symbol">:</span> <span class="sh_regexp">/Users/m</span><span class="sh_normal">jr</span><span class="sh_symbol">/</span><span class="sh_normal">work</span><span class="sh_symbol">/</span><span class="sh_normal">node</span><span class="sh_symbol">/</span>process<span class="sh_number">-2</span><span class="sh_symbol">.</span>js
<span class="sh_number">2</span><span class="sh_symbol">:</span> one
<span class="sh_number">3</span><span class="sh_symbol">:</span> two<span class="sh_symbol">=</span>three
<span class="sh_number">4</span><span class="sh_symbol">:</span> four
</code></pre>
<h2>process.chdir(directory)<span><a class="mark" href="#process_process_chdir_directory" id="process_process_chdir_directory">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.17</span>
</div><ul>
<li><code>directory</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
</ul>
<p>The <code>process.chdir()</code> method changes the current working directory of the
Node.js process or throws an exception if doing so fails (for instance, if
the specified <code>directory</code> does not exist).</p>
<pre class="sh_sourceCode"><code class="lang-js">console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Starting directory<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>process<span class="sh_symbol">.</span><span class="sh_function">cwd</span><span class="sh_symbol">()</span><span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_keyword">try</span> <span class="sh_cbracket">{</span>
  process<span class="sh_symbol">.</span><span class="sh_function">chdir</span><span class="sh_symbol">(</span><span class="sh_string">'/tmp'</span><span class="sh_symbol">);</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`New directory<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>process<span class="sh_symbol">.</span><span class="sh_function">cwd</span><span class="sh_symbol">()</span><span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>
<span class="sh_keyword">catch</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`chdir<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>err<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>
</code></pre>
<h2>process.config<span><a class="mark" href="#process_process_config" id="process_process_config">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.7.7</span>
</div><p>The <code>process.config</code> property returns an Object containing the JavaScript
representation of the configure options used to compile the current Node.js
executable. This is the same as the <code>config.gypi</code> file that was produced when
running the <code>./configure</code> script.</p>
<p>An example of the possible output looks like:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_cbracket">{</span>
  target_defaults<span class="sh_symbol">:</span>
   <span class="sh_cbracket">{</span> cflags<span class="sh_symbol">:</span> <span class="sh_symbol">[],</span>
     default_configuration<span class="sh_symbol">:</span> <span class="sh_string">'Release'</span><span class="sh_symbol">,</span>
     defines<span class="sh_symbol">:</span> <span class="sh_symbol">[],</span>
     include_dirs<span class="sh_symbol">:</span> <span class="sh_symbol">[],</span>
     libraries<span class="sh_symbol">:</span> <span class="sh_symbol">[]</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  variables<span class="sh_symbol">:</span>
   <span class="sh_cbracket">{</span>
     host_arch<span class="sh_symbol">:</span> <span class="sh_string">'x64'</span><span class="sh_symbol">,</span>
     node_install_npm<span class="sh_symbol">:</span> <span class="sh_string">'true'</span><span class="sh_symbol">,</span>
     node_prefix<span class="sh_symbol">:</span> <span class="sh_string">''</span><span class="sh_symbol">,</span>
     node_shared_cares<span class="sh_symbol">:</span> <span class="sh_string">'false'</span><span class="sh_symbol">,</span>
     node_shared_http_parser<span class="sh_symbol">:</span> <span class="sh_string">'false'</span><span class="sh_symbol">,</span>
     node_shared_libuv<span class="sh_symbol">:</span> <span class="sh_string">'false'</span><span class="sh_symbol">,</span>
     node_shared_zlib<span class="sh_symbol">:</span> <span class="sh_string">'false'</span><span class="sh_symbol">,</span>
     node_use_dtrace<span class="sh_symbol">:</span> <span class="sh_string">'false'</span><span class="sh_symbol">,</span>
     node_use_openssl<span class="sh_symbol">:</span> <span class="sh_string">'true'</span><span class="sh_symbol">,</span>
     node_shared_openssl<span class="sh_symbol">:</span> <span class="sh_string">'false'</span><span class="sh_symbol">,</span>
     strict_aliasing<span class="sh_symbol">:</span> <span class="sh_string">'true'</span><span class="sh_symbol">,</span>
     target_arch<span class="sh_symbol">:</span> <span class="sh_string">'x64'</span><span class="sh_symbol">,</span>
     v8_use_snapshot<span class="sh_symbol">:</span> <span class="sh_string">'true'</span>
   <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p><em>Note</em>: The <code>process.config</code> property is <strong>not</strong> read-only and there are
existing modules in the ecosystem that are known to extend, modify, or entirely
replace the value of <code>process.config</code>.</p>
<h2>process.connected<span><a class="mark" href="#process_process_connected" id="process_process_connected">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.7.2</span>
</div><p>If the Node.js process is spawned with an IPC channel (see the <a href="https://nodejs.org/api/child_process.html">Child Process</a>
and <a href="https://nodejs.org/api/cluster.html">Cluster</a> documentation), the <code>process.connected</code> property will return
<code>true</code> so long as the IPC channel is connected and will return <code>false</code> after
<code>process.disconnect()</code> is called.</p>
<p>Once <code>process.connected</code> is <code>false</code>, it is no longer possible to send messages
over the IPC channel using <code>process.send()</code>.</p>
<h2>process.cpuUsage([previousValue])<span><a class="mark" href="#process_process_cpuusage_previousvalue" id="process_process_cpuusage_previousvalue">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v6.1.0</span>
</div><ul>
<li><code>previousValue</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" class="type">&lt;Array&gt;</a> A previous return value from calling
<code>process.cpuUsage()</code></li>
</ul>
<p>The <code>process.cpuUsage()</code> method returns the user and system CPU time usage of
the current process, in an object with properties <code>user</code> and <code>system</code>, whose
values are microsecond values (millionth of a second). These values measure time
spent in user and system code respectively, and may end up being greater than
actual elapsed time if multiple CPU cores are performing work for this process.</p>
<p>The result of a previous call to <code>process.cpuUsage()</code> can be passed as the
argument to the function, to get a diff reading.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> startUsage <span class="sh_symbol">=</span> process<span class="sh_symbol">.</span><span class="sh_function">cpuUsage</span><span class="sh_symbol">();</span>
<span class="sh_comment">// { user: 38579, system: 6986 }</span>

<span class="sh_comment">// spin the CPU for 500 milliseconds</span>
<span class="sh_keyword">const</span> now <span class="sh_symbol">=</span> <span class="sh_predef_func">Date</span><span class="sh_symbol">.</span><span class="sh_function">now</span><span class="sh_symbol">();</span>
<span class="sh_keyword">while</span> <span class="sh_symbol">(</span><span class="sh_predef_func">Date</span><span class="sh_symbol">.</span><span class="sh_function">now</span><span class="sh_symbol">()</span> <span class="sh_symbol">-</span> now <span class="sh_symbol">&lt;</span> <span class="sh_number">500</span><span class="sh_symbol">);</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span><span class="sh_function">cpuUsage</span><span class="sh_symbol">(</span>startUsage<span class="sh_symbol">));</span>
<span class="sh_comment">// { user: 514883, system: 11226 }</span>
</code></pre>
<h2>process.cwd()<span><a class="mark" href="#process_process_cwd" id="process_process_cwd">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.8</span>
</div><p>The <code>process.cwd()</code> method returns the current working directory of the Node.js
process.</p>
<pre class="sh_sourceCode"><code class="lang-js">console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Current directory<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>process<span class="sh_symbol">.</span><span class="sh_function">cwd</span><span class="sh_symbol">()</span><span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
</code></pre>
<h2>process.disconnect()<span><a class="mark" href="#process_process_disconnect" id="process_process_disconnect">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.7.2</span>
</div><p>If the Node.js process is spawned with an IPC channel (see the <a href="https://nodejs.org/api/child_process.html">Child Process</a>
and <a href="https://nodejs.org/api/cluster.html">Cluster</a> documentation), the <code>process.disconnect()</code> method will close the
IPC channel to the parent process, allowing the child process to exit gracefully
once there are no other connections keeping it alive.</p>
<p>The effect of calling <code>process.disconnect()</code> is that same as calling the parent
process's <a href="https://nodejs.org/api/child_process.html#child_process_child_disconnect"><code>ChildProcess.disconnect()</code></a>.</p>
<p>If the Node.js process was not spawned with an IPC channel,
<code>process.disconnect()</code> will be <code>undefined</code>.</p>
<h2>process.env<span><a class="mark" href="#process_process_env" id="process_process_env">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.27</span>
</div><p>The <code>process.env</code> property returns an object containing the user environment.
See <a href="http://man7.org/linux/man-pages/man7/environ.7.html">environ(7)</a>.</p>
<p>An example of this object looks like:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_cbracket">{</span>
  TERM<span class="sh_symbol">:</span> <span class="sh_string">'xterm-256color'</span><span class="sh_symbol">,</span>
  SHELL<span class="sh_symbol">:</span> <span class="sh_string">'/usr/local/bin/bash'</span><span class="sh_symbol">,</span>
  USER<span class="sh_symbol">:</span> <span class="sh_string">'maciej'</span><span class="sh_symbol">,</span>
  PATH<span class="sh_symbol">:</span> <span class="sh_string">'~/.bin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin'</span><span class="sh_symbol">,</span>
  PWD<span class="sh_symbol">:</span> <span class="sh_string">'/Users/maciej'</span><span class="sh_symbol">,</span>
  EDITOR<span class="sh_symbol">:</span> <span class="sh_string">'vim'</span><span class="sh_symbol">,</span>
  SHLVL<span class="sh_symbol">:</span> <span class="sh_string">'1'</span><span class="sh_symbol">,</span>
  HOME<span class="sh_symbol">:</span> <span class="sh_string">'/Users/maciej'</span><span class="sh_symbol">,</span>
  LOGNAME<span class="sh_symbol">:</span> <span class="sh_string">'maciej'</span><span class="sh_symbol">,</span>
  _<span class="sh_symbol">:</span> <span class="sh_string">'/usr/local/bin/node'</span> 
<span class="sh_cbracket">}</span>
</code></pre>
<p>It is possible to modify this object, but such modifications will not be
reflected outside the Node.js process. In other words, the following example
would not work:</p>
<pre class="sh_sourceCode"><code>$ node <span class="sh_symbol">-</span>e <span class="sh_string">'process.env.foo = "bar"'</span> <span class="sh_symbol">&amp;&amp;</span> echo $foo
</code></pre><p>While the following will:</p>
<pre class="sh_sourceCode"><code class="lang-js">process<span class="sh_symbol">.</span>env<span class="sh_symbol">.</span>foo <span class="sh_symbol">=</span> <span class="sh_string">'bar'</span><span class="sh_symbol">;</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>env<span class="sh_symbol">.</span>foo<span class="sh_symbol">);</span>
</code></pre>
<p>Assigning a property on <code>process.env</code> will implicitly convert the value
to a string.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js">process<span class="sh_symbol">.</span>env<span class="sh_symbol">.</span>test <span class="sh_symbol">=</span> <span class="sh_keyword">null</span><span class="sh_symbol">;</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>env<span class="sh_symbol">.</span>test<span class="sh_symbol">);</span>
<span class="sh_comment">// =&gt; 'null'</span>
process<span class="sh_symbol">.</span>env<span class="sh_symbol">.</span>test <span class="sh_symbol">=</span> <span class="sh_predef_var">undefined</span><span class="sh_symbol">;</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>env<span class="sh_symbol">.</span>test<span class="sh_symbol">);</span>
<span class="sh_comment">// =&gt; 'undefined'</span>
</code></pre>
<p>Use <code>delete</code> to delete a property from <code>process.env</code>.</p>
<p>Example:</p>
<pre class="sh_sourceCode"><code class="lang-js">process<span class="sh_symbol">.</span>env<span class="sh_symbol">.</span>TEST <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
<span class="sh_keyword">delete</span> process<span class="sh_symbol">.</span>env<span class="sh_symbol">.</span>TEST<span class="sh_symbol">;</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>env<span class="sh_symbol">.</span>TEST<span class="sh_symbol">);</span>
<span class="sh_comment">// =&gt; undefined</span>
</code></pre>
<h2>process.emitWarning(warning[, name][, ctor])<span><a class="mark" href="#process_process_emitwarning_warning_name_ctor" id="process_process_emitwarning_warning_name_ctor">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v6.0.0</span>
</div><ul>
<li><code>warning</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" class="type">&lt;Error&gt;</a> The warning to emit.</li>
<li><code>name</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> When <code>warning</code> is a String, <code>name</code> is the name to use
for the warning. Default: <code>Warning</code>.</li>
<li><code>ctor</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> When <code>warning</code> is a String, <code>ctor</code> is an optional
function used to limit the generated stack trace. Default
<code>process.emitWarning</code></li>
</ul>
<p>The <code>process.emitWarning()</code> method can be used to emit custom or application
specific process warnings. These can be listened for by adding a handler to the
<a href="#process_event_warning"><code>process.on('warning')</code></a> event.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// Emit a warning using a string...</span>
process<span class="sh_symbol">.</span><span class="sh_function">emitWarning</span><span class="sh_symbol">(</span><span class="sh_string">'Something happened!'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Emits: (node: 56338) Warning: Something happened!</span>
</code></pre>
<pre class="sh_sourceCode"><code><span class="sh_comment">// Emit a warning using a string and a name...</span>
process<span class="sh_symbol">.</span><span class="sh_function">emitWarning</span><span class="sh_symbol">(</span><span class="sh_string">'Something Happened!'</span><span class="sh_symbol">,</span> <span class="sh_string">'CustomWarning'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Emits: (node:56338) CustomWarning: Something Happened!</span>
</code></pre><p>In each of the previous examples, an <code>Error</code> object is generated internally by
<code>process.emitWarning()</code> and passed through to the
<a href="#process_event_warning"><code>process.on('warning')</code></a> event.</p>
<pre class="sh_sourceCode"><code>process<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'warning'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>warning<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">warn</span><span class="sh_symbol">(</span>warning<span class="sh_symbol">.</span>name<span class="sh_symbol">);</span>
  console<span class="sh_symbol">.</span><span class="sh_function">warn</span><span class="sh_symbol">(</span>warning<span class="sh_symbol">.</span>message<span class="sh_symbol">);</span>
  console<span class="sh_symbol">.</span><span class="sh_function">warn</span><span class="sh_symbol">(</span>warning<span class="sh_symbol">.</span>stack<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre><p>If <code>warning</code> is passed as an <code>Error</code> object, it will be passed through to the
<code>process.on('warning')</code> event handler unmodified (and the optional <code>name</code>
and <code>ctor</code> arguments will be ignored):</p>
<pre class="sh_sourceCode"><code><span class="sh_comment">// Emit a warning using an Error object...</span>
<span class="sh_keyword">const</span> myWarning <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_predef_func">Error</span><span class="sh_symbol">(</span><span class="sh_string">'Warning! Something happened!'</span><span class="sh_symbol">);</span>
myWarning<span class="sh_symbol">.</span>name <span class="sh_symbol">=</span> <span class="sh_string">'CustomWarning'</span><span class="sh_symbol">;</span>

process<span class="sh_symbol">.</span><span class="sh_function">emitWarning</span><span class="sh_symbol">(</span>myWarning<span class="sh_symbol">);</span>
  <span class="sh_comment">// Emits: (node:56338) CustomWarning: Warning! Something Happened!</span>
</code></pre><p>A <code>TypeError</code> is thrown if <code>warning</code> is anything other than a string or <code>Error</code>
object.</p>
<p>Note that while process warnings use <code>Error</code> objects, the process warning
mechanism is <strong>not</strong> a replacement for normal error handling mechanisms.</p>
<p>The following additional handling is implemented if the warning <code>name</code> is
<code>DeprecationWarning</code>:</p>
<ul>
<li>If the <code>--throw-deprecation</code> command-line flag is used, the deprecation
warning is thrown as an exception rather than being emitted as an event.</li>
<li>If the <code>--no-deprecation</code> command-line flag is used, the deprecation
warning is suppressed.</li>
<li>If the <code>--trace-deprecation</code> command-line flag is used, the deprecation
warning is printed to <code>stderr</code> along with the full stack trace.</li>
</ul>
<h3>Avoiding duplicate warnings<span><a class="mark" href="#process_avoiding_duplicate_warnings" id="process_avoiding_duplicate_warnings">#</a></span></h3>
<p>As a best practice, warnings should be emitted only once per process. To do
so, it is recommended to place the <code>emitWarning()</code> behind a simple boolean
flag as illustrated in the example below:</p>
<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> warned <span class="sh_symbol">=</span> <span class="sh_keyword">false</span><span class="sh_symbol">;</span>
<span class="sh_keyword">function</span> <span class="sh_function">emitMyWarning</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(!</span>warned<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    process<span class="sh_symbol">.</span><span class="sh_function">emitWarning</span><span class="sh_symbol">(</span><span class="sh_string">'Only warn once!'</span><span class="sh_symbol">);</span>
    warned <span class="sh_symbol">=</span> <span class="sh_keyword">true</span><span class="sh_symbol">;</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>
<span class="sh_function">emitMyWarning</span><span class="sh_symbol">();</span>
  <span class="sh_comment">// Emits: (node: 56339) Warning: Only warn once!</span>
<span class="sh_function">emitMyWarning</span><span class="sh_symbol">();</span>
  <span class="sh_comment">// Emits nothing</span>
</code></pre><h2>process.execArgv<span><a class="mark" href="#process_process_execargv" id="process_process_execargv">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.7.7</span>
</div><p>The <code>process.execArgv' property returns the set of Node.js-specific command-line
options passed when the Node.js process was launched. These options do not
appear in the array returned by the [</code>process.argv`][] property, and do not
include the Node.js executable, the name of the script, or any options following
the script name. These options are useful in order to spawn child processes with
the same execution environment as the parent.</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code>$ node <span class="sh_symbol">--</span>harmony script<span class="sh_symbol">.</span>js <span class="sh_symbol">--</span>version
</code></pre><p>Results in <code>process.execArgv</code>:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_symbol">[</span><span class="sh_string">'--harmony'</span><span class="sh_symbol">]</span>
</code></pre>
<p>And <code>process.argv</code>:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_symbol">[</span><span class="sh_string">'/usr/local/bin/node'</span><span class="sh_symbol">,</span> <span class="sh_string">'script.js'</span><span class="sh_symbol">,</span> <span class="sh_string">'--version'</span><span class="sh_symbol">]</span>
</code></pre>
<h2>process.execPath<span><a class="mark" href="#process_process_execpath" id="process_process_execpath">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.100</span>
</div><p>The <code>process.execPath</code> property returns the absolute pathname of the executable
that started the Node.js process.</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code><span class="sh_regexp">/usr/</span><span class="sh_normal">local</span><span class="sh_symbol">/</span><span class="sh_normal">bin</span><span class="sh_symbol">/</span>node
</code></pre><h2>process.exit([code])<span><a class="mark" href="#process_process_exit_code" id="process_process_exit_code">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.13</span>
</div><ul>
<li><code>code</code> <span class="type">&lt;Integer&gt;</span> The exit code. Defaults to <code>0</code>.</li>
</ul>
<p>The <code>process.exit()</code> method instructs Node.js to terminate the process as
quickly as possible with the specified exit <code>code</code>. If the <code>code</code> is omitted,
exit uses either the 'success' code <code>0</code> or the value of <code>process.exitCode</code> if
specified.</p>
<p>To exit with a 'failure' code:</p>
<pre class="sh_sourceCode"><code class="lang-js">process<span class="sh_symbol">.</span><span class="sh_function">exit</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">);</span>
</code></pre>
<p>The shell that executed Node.js should see the exit code as <code>1</code>.</p>
<p>It is important to note that calling <code>process.exit()</code> will force the process to
exit as quickly as possible <em>even if there are still asynchronous operations
pending</em> that have not yet completed fully, <em>including</em> I/O operations to
<code>process.stdout</code> and <code>process.stderr</code>.</p>
<p>In most situations, it is not actually necessary to call <code>process.exit()</code>
explicitly. The Node.js process will exit on it's own <em>if there is no additional
work pending</em> in the event loop. The <code>process.exitCode</code> property can be set to
tell the process which exit code to use when the process exits gracefully.</p>
<p>For instance, the following example illustrates a <em>misuse</em> of the
<code>process.exit()</code> method that could lead to data printed to stdout being
truncated and lost:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// This is an example of what *not* to do:</span>
<span class="sh_keyword">if</span> <span class="sh_symbol">(</span><span class="sh_function">someConditionNotMet</span><span class="sh_symbol">())</span> <span class="sh_cbracket">{</span>
  <span class="sh_function">printUsageToStdout</span><span class="sh_symbol">();</span>
  process<span class="sh_symbol">.</span><span class="sh_function">exit</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p>The reason this is problematic is because writes to <code>process.stdout</code> in Node.js
are usually <em>non-blocking</em> and may occur over multiple ticks of the Node.js
event loop.
Calling <code>process.exit()</code>, however, forces the process to exit <em>before</em> those
additional writes to <code>stdout</code> can be performed.</p>
<p>Rather than calling <code>process.exit()</code> directly, the code <em>should</em> set the
<code>process.exitCode</code> and allow the process to exit naturally by avoiding
scheduling any additional work for the event loop:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// How to properly set the exit code while letting</span>
<span class="sh_comment">// the process exit gracefully.</span>
<span class="sh_keyword">if</span> <span class="sh_symbol">(</span><span class="sh_function">someConditionNotMet</span><span class="sh_symbol">())</span> <span class="sh_cbracket">{</span>
  <span class="sh_function">printUsageToStdout</span><span class="sh_symbol">();</span>
  process<span class="sh_symbol">.</span>exitCode <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p>If it is necessary to terminate the Node.js process due to an error condition,
throwing an <em>uncaught</em> error and allowing the process to terminate accordingly
is safer than calling <code>process.exit()</code>.</p>
<h2>process.exitCode<span><a class="mark" href="#process_process_exitcode" id="process_process_exitcode">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.11.8</span>
</div><p>A number which will be the process exit code, when the process either
exits gracefully, or is exited via <a href="#process_process_exit_code"><code>process.exit()</code></a> without specifying
a code.</p>
<p>Specifying a code to <a href="#process_process_exit_code"><code>process.exit(code)</code></a> will override any
previous setting of <code>process.exitCode</code>.</p>
<h2>process.getegid()<span><a class="mark" href="#process_process_getegid" id="process_process_getegid">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v2.0.0</span>
</div><p>The <code>process.getegid()</code> method returns the numerical effective group identity
of the Node.js process. (See <a href="http://man7.org/linux/man-pages/man2/getegid.2.html">getegid(2)</a>.)</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">if</span> <span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>getegid<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Current gid<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>process<span class="sh_symbol">.</span><span class="sh_function">getegid</span><span class="sh_symbol">()</span><span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows
or Android)</p>
<h2>process.geteuid()<span><a class="mark" href="#process_process_geteuid" id="process_process_geteuid">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v2.0.0</span>
</div><p>The <code>process.geteuid()</code> method returns the numerical effective user identity of
the process. (See <a href="http://man7.org/linux/man-pages/man2/geteuid.2.html">geteuid(2)</a>.)</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">if</span> <span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>geteuid<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Current uid<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>process<span class="sh_symbol">.</span><span class="sh_function">geteuid</span><span class="sh_symbol">()</span><span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or
Android)</p>
<h2>process.getgid()<span><a class="mark" href="#process_process_getgid" id="process_process_getgid">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.31</span>
</div><p>The <code>process.getgid()</code> method returns the numerical group identity of the
process. (See <a href="http://man7.org/linux/man-pages/man2/getgid.2.html">getgid(2)</a>.)</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">if</span> <span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>getgid<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Current gid<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>process<span class="sh_symbol">.</span><span class="sh_function">getgid</span><span class="sh_symbol">()</span><span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or
Android)</p>
<h2>process.getgroups()<span><a class="mark" href="#process_process_getgroups" id="process_process_getgroups">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.9.4</span>
</div><p>The <code>process.getgroups()</code> method returns an array with the supplementary group
IDs. POSIX leaves it unspecified if the effective group ID is included but
Node.js ensures it always is.</p>
<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or
Android)</p>
<h2>process.getuid()<span><a class="mark" href="#process_process_getuid" id="process_process_getuid">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.28</span>
</div><p>The <code>process.getuid()</code> method returns the numeric user identity of the process.
(See <a href="http://man7.org/linux/man-pages/man2/getuid.2.html">getuid(2)</a>.)</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">if</span> <span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>getuid<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Current uid<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>process<span class="sh_symbol">.</span><span class="sh_function">getuid</span><span class="sh_symbol">()</span><span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or
Android)</p>
<h2>process.hrtime([time])<span><a class="mark" href="#process_process_hrtime_time" id="process_process_hrtime_time">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.7.6</span>
</div><p>The <code>process.hrtime()</code> method returns the current high-resolution real time in a
<code>[seconds, nanoseconds]</code> tuple Array. <code>time</code> is an optional parameter that must
be the result of a previous <code>process.hrtime()</code> call (and therefore, a real time
in a <code>[seconds, nanoseconds]</code> tuple Array containing a previous time) to diff
with the current time. These times are relative to an arbitrary time in the
past, and not related to the time of day and therefore not subject to clock
drift. The primary use is for measuring performance between intervals.</p>
<p>Passing in the result of a previous call to <code>process.hrtime()</code> is useful for
calculating an amount of time passed between calls:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">var</span> time <span class="sh_symbol">=</span> process<span class="sh_symbol">.</span><span class="sh_function">hrtime</span><span class="sh_symbol">();</span>
<span class="sh_comment">// [ 1800216, 25 ]</span>

<span class="sh_function">setTimeout</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">var</span> diff <span class="sh_symbol">=</span> process<span class="sh_symbol">.</span><span class="sh_function">hrtime</span><span class="sh_symbol">(</span>time<span class="sh_symbol">);</span>
  <span class="sh_comment">// [ 1, 552 ]</span>

  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Benchmark took $<span class="sh_cbracket">{</span>diff<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]</span> <span class="sh_symbol">*</span> <span class="sh_number">1e9</span> <span class="sh_symbol">+</span> diff<span class="sh_symbol">[</span><span class="sh_number">1</span><span class="sh_symbol">]</span><span class="sh_cbracket">}</span> nanoseconds`<span class="sh_symbol">);</span>
  <span class="sh_comment">// benchmark took 1000000527 nanoseconds</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">1000</span><span class="sh_symbol">);</span>
</code></pre>
<p>Constructing an array by some method other than calling <code>process.hrtime()</code> and
passing the result to process.hrtime() will result in undefined behavior.</p>
<h2>process.initgroups(user, extra_group)<span><a class="mark" href="#process_process_initgroups_user_extra_group" id="process_process_initgroups_user_extra_group">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.9.4</span>
</div><ul>
<li><code>user</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <span class="type">&lt;number&gt;</span> The user name or numeric identifier.</li>
<li><code>extra_group</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <span class="type">&lt;number&gt;</span> A group name or numeric identifier.</li>
</ul>
<p>The <code>process.initgroups()</code> method reads the <code>/etc/group</code> file and initializes
the group access list, using all groups of which the user is a member. This is
a privileged operation that requires that the Node.js process either have <code>root</code>
access or the <code>CAP_SETGID</code> capability.</p>
<p>Note that care must be taken when dropping privileges. Example:</p>
<pre class="sh_sourceCode"><code class="lang-js">console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span><span class="sh_function">getgroups</span><span class="sh_symbol">());</span>         <span class="sh_comment">// [ 0 ]</span>
process<span class="sh_symbol">.</span><span class="sh_function">initgroups</span><span class="sh_symbol">(</span><span class="sh_string">'bnoordhuis'</span><span class="sh_symbol">,</span> <span class="sh_number">1000</span><span class="sh_symbol">);</span>   <span class="sh_comment">// switch user</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span><span class="sh_function">getgroups</span><span class="sh_symbol">());</span>         <span class="sh_comment">// [ 27, 30, 46, 1000, 0 ]</span>
process<span class="sh_symbol">.</span><span class="sh_function">setgid</span><span class="sh_symbol">(</span><span class="sh_number">1000</span><span class="sh_symbol">);</span>                     <span class="sh_comment">// drop root gid</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span><span class="sh_function">getgroups</span><span class="sh_symbol">());</span>         <span class="sh_comment">// [ 27, 30, 46, 1000 ]</span>
</code></pre>
<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or
Android)</p>
<h2>process.kill(pid[, signal])<span><a class="mark" href="#process_process_kill_pid_signal" id="process_process_kill_pid_signal">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.0.6</span>
</div><ul>
<li><code>pid</code> <span class="type">&lt;number&gt;</span> A process ID</li>
<li><code>signal</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <span class="type">&lt;number&gt;</span> The signal to send, either as a string or number.
Defaults to <code>'SIGTERM'</code>.</li>
</ul>
<p>The <code>process.kill()</code> method sends the <code>signal</code> to the process identified by
<code>pid</code>.</p>
<p>Signal names are strings such as <code>'SIGINT'</code> or <code>'SIGHUP'</code>. See <a href="#process_signal_events">Signal Events</a>
and <a href="http://man7.org/linux/man-pages/man2/kill.2.html">kill(2)</a> for more information.</p>
<p>This method will throw an error if the target <code>pid</code> does not exist. As a special
case, a signal of <code>0</code> can be used to test for the existence of a process.
Windows platforms will throw an error if the <code>pid</code> is used to kill a process
group.</p>
<p><em>Note</em>:Even though the name of this function is <code>process.kill()</code>, it is really
just a signal sender, like the <code>kill</code> system call.  The signal sent may do
something other than kill the target process.</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js">process<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'SIGHUP'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Got SIGHUP signal.'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_function">setTimeout</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Exiting.'</span><span class="sh_symbol">);</span>
  process<span class="sh_symbol">.</span><span class="sh_function">exit</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">100</span><span class="sh_symbol">);</span>

process<span class="sh_symbol">.</span><span class="sh_function">kill</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>pid<span class="sh_symbol">,</span> <span class="sh_string">'SIGHUP'</span><span class="sh_symbol">);</span>
</code></pre>
<p><em>Note</em>: When <code>SIGUSR1</code> is received by a Node.js process, Node.js will start the
debugger, see <a href="#process_signal_events">Signal Events</a>.</p>
<h2>process.mainModule<span><a class="mark" href="#process_process_mainmodule" id="process_process_mainmodule">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.17</span>
</div><p>The <code>process.mainModule</code> property provides an alternative way of retrieving
<a href="https://nodejs.org/api/modules.html#modules_accessing_the_main_module"><code>require.main</code></a>. The difference is that if the main module changes at
runtime, <a href="https://nodejs.org/api/modules.html#modules_accessing_the_main_module"><code>require.main</code></a> may still refer to the original main module in
modules that were required before the change occurred. Generally it's
safe to assume that the two refer to the same module.</p>
<p>As with <a href="https://nodejs.org/api/modules.html#modules_accessing_the_main_module"><code>require.main</code></a>, <code>process.mainModule</code> will be <code>undefined</code> if there
is no entry script.</p>
<h2>process.memoryUsage()<span><a class="mark" href="#process_process_memoryusage" id="process_process_memoryusage">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.16</span>
</div><p>The <code>process.memoryUsage()</code> method returns an object describing the memory usage
of the Node.js process measured in bytes.</p>
<p>For example, the code:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>util<span class="sh_symbol">.</span><span class="sh_function">inspect</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span><span class="sh_function">memoryUsage</span><span class="sh_symbol">()));</span>
</code></pre>
<p>Will generate:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_cbracket">{</span> 
  rss<span class="sh_symbol">:</span> <span class="sh_number">4935680</span><span class="sh_symbol">,</span>
  heapTotal<span class="sh_symbol">:</span> <span class="sh_number">1826816</span><span class="sh_symbol">,</span>
  heapUsed<span class="sh_symbol">:</span> <span class="sh_number">650472</span> 
<span class="sh_cbracket">}</span>
</code></pre>
<p><code>heapTotal</code> and <code>heapUsed</code> refer to V8's memory usage.</p>
<h2>process.nextTick(callback[, arg][, ...])<span><a class="mark" href="#process_process_nexttick_callback_arg" id="process_process_nexttick_callback_arg">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.26</span>
</div><ul>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
<li><code>[, arg][, ...]</code> <span class="type">&lt;any&gt;</span> Additional arguments to pass when invoking the
<code>callback</code></li>
</ul>
<p>The <code>process.nextTick()</code> method adds the <code>callback</code> to the "next tick queue".
Once the current turn of the event loop turn runs to completion, all callbacks
currently in the next tick queue will be called.</p>
<p>This is <em>not</em> a simple alias to <a href="https://nodejs.org/api/timers.html#timers_settimeout_callback_delay_arg"><code>setTimeout(fn, 0)</code></a>, it's much more
efficient.  It runs before any additional I/O events (including
timers) fire in subsequent ticks of the event loop.</p>
<pre class="sh_sourceCode"><code class="lang-js">console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'start'</span><span class="sh_symbol">);</span>
process<span class="sh_symbol">.</span><span class="sh_function">nextTick</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'nextTick callback'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'scheduled'</span><span class="sh_symbol">);</span>
<span class="sh_comment">// Output:</span>
<span class="sh_comment">// start</span>
<span class="sh_comment">// scheduled</span>
<span class="sh_comment">// nextTick callback</span>
</code></pre>
<p>This is important when developing APIs in order to give users the opportunity
to assign event handlers <em>after</em> an object has been constructed but before any
I/O has occurred:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">function</span> <span class="sh_function">MyThing</span><span class="sh_symbol">(</span>options<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">this</span><span class="sh_symbol">.</span><span class="sh_function">setupOptions</span><span class="sh_symbol">(</span>options<span class="sh_symbol">);</span>

  process<span class="sh_symbol">.</span><span class="sh_function">nextTick</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">this</span><span class="sh_symbol">.</span><span class="sh_function">startDoingStuff</span><span class="sh_symbol">();</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

<span class="sh_keyword">var</span> thing <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">MyThing</span><span class="sh_symbol">();</span>
thing<span class="sh_symbol">.</span><span class="sh_function">getReadyForStuff</span><span class="sh_symbol">();</span>

<span class="sh_comment">// thing.startDoingStuff() gets called now, not before.</span>
</code></pre>
<p>It is very important for APIs to be either 100% synchronous or 100%
asynchronous.  Consider this example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// WARNING!  DO NOT USE!  BAD UNSAFE HAZARD!</span>
<span class="sh_keyword">function</span> <span class="sh_function">maybeSync</span><span class="sh_symbol">(</span>arg<span class="sh_symbol">,</span> cb<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>arg<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_function">cb</span><span class="sh_symbol">();</span>
    <span class="sh_keyword">return</span><span class="sh_symbol">;</span>
  <span class="sh_cbracket">}</span>

  fs<span class="sh_symbol">.</span><span class="sh_function">stat</span><span class="sh_symbol">(</span><span class="sh_string">'file'</span><span class="sh_symbol">,</span> cb<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p>This API is hazardous because in the following case:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_function">maybeSync</span><span class="sh_symbol">(</span><span class="sh_keyword">true</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_function">foo</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_function">bar</span><span class="sh_symbol">();</span>
</code></pre>
<p>It is not clear whether <code>foo()</code> or <code>bar()</code> will be called first.</p>
<p>The following approach is much better:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">function</span> <span class="sh_function">definitelyAsync</span><span class="sh_symbol">(</span>arg<span class="sh_symbol">,</span> cb<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>arg<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    process<span class="sh_symbol">.</span><span class="sh_function">nextTick</span><span class="sh_symbol">(</span>cb<span class="sh_symbol">);</span>
    <span class="sh_keyword">return</span><span class="sh_symbol">;</span>
  <span class="sh_cbracket">}</span>

  fs<span class="sh_symbol">.</span><span class="sh_function">stat</span><span class="sh_symbol">(</span><span class="sh_string">'file'</span><span class="sh_symbol">,</span> cb<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p><em>Note</em>: the next tick queue is completely drained on each pass of the
event loop <strong>before</strong> additional I/O is processed.  As a result,
recursively setting nextTick callbacks will block any I/O from
happening, just like a <code>while(true);</code> loop.</p>
<h2>process.pid<span><a class="mark" href="#process_process_pid" id="process_process_pid">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.15</span>
</div><p>The <code>process.pid</code> property returns the PID of the process.</p>
<pre class="sh_sourceCode"><code class="lang-js">console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`This process is pid $<span class="sh_cbracket">{</span>process<span class="sh_symbol">.</span>pid<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
</code></pre>
<h2>process.platform<span><a class="mark" href="#process_process_platform" id="process_process_platform">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.16</span>
</div><p>The <code>process.platform</code> property returns a string identifying the operating
system platform on which the Node.js process is running. For instance
<code>'darwin'</code>, <code>'freebsd'</code>, <code>'linux'</code>, <code>'sunos'</code> or <code>'win32'</code></p>
<pre class="sh_sourceCode"><code class="lang-js">console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`This platform is $<span class="sh_cbracket">{</span>process<span class="sh_symbol">.</span>platform<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
</code></pre>
<h2>process.release<span><a class="mark" href="#process_process_release" id="process_process_release">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v3.0.0</span>
</div><p>The <code>process.release</code> property returns an Object containing metadata related to
the current release, including URLs for the source tarball and headers-only
tarball.</p>
<p><code>process.release</code> contains the following properties:</p>
<ul>
<li><code>name</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> A value that will always be <code>'node'</code> for Node.js. For
legacy io.js releases, this will be <code>'io.js'</code>.</li>
<li><code>sourceUrl</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> an absolute URL pointing to a <code>_.tar.gz_</code> file containing
the source code of the current release.</li>
<li><code>headersUrl</code><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> an absolute URL pointing to a <code>_.tar.gz_</code> file containing
only the source header files for the current release. This file is
significantly smaller than the full source file and can be used for compiling
Node.js native add-ons.</li>
<li><code>libUrl</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> an absolute URL pointing to a <code>_node.lib_</code> file matching the
architecture and version of the current release. This file is used for
compiling Node.js native add-ons. <em>This property is only present on Windows
builds of Node.js and will be missing on all other platforms.</em></li>
<li><code>lts</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> a string label identifying the [LTS][] label for this release.
If the Node.js release is not an LTS release, this will be <code>undefined</code>.</li>
</ul>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_cbracket">{</span>
  name<span class="sh_symbol">:</span> <span class="sh_string">'node'</span><span class="sh_symbol">,</span>
  lts<span class="sh_symbol">:</span> <span class="sh_string">'Argon'</span><span class="sh_symbol">,</span>
  sourceUrl<span class="sh_symbol">:</span> <span class="sh_string">'https://nodejs.org/download/release/v4.4.5/node-v4.4.5.tar.gz'</span><span class="sh_symbol">,</span>
  headersUrl<span class="sh_symbol">:</span> <span class="sh_string">'https://nodejs.org/download/release/v4.4.5/node-v4.4.5-headers.tar.gz'</span><span class="sh_symbol">,</span>
  libUrl<span class="sh_symbol">:</span> <span class="sh_string">'https://nodejs.org/download/release/v4.4.5/win-x64/node.lib'</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p>In custom builds from non-release versions of the source tree, only the
<code>name</code> property may be present. The additional properties should not be
relied upon to exist.</p>
<h2>process.send(message[, sendHandle[, options]][, callback])<span><a class="mark" href="#process_process_send_message_sendhandle_options_callback" id="process_process_send_message_sendhandle_options_callback">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.9</span>
</div><ul>
<li><code>message</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a></li>
<li><code>sendHandle</code> <span class="type">&lt;Handle object&gt;</span></li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a></li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a></li>
</ul>
<p>If Node.js is spawned with an IPC channel, the <code>process.send()</code> method can be
used to send messages to the parent process. Messages will be received as a
<a href="https://nodejs.org/api/child_process.html#child_process_event_message"><code>'message'</code></a> event on the parent's <a href="https://nodejs.org/api/child_process.html#child_process_class_childprocess"><code>ChildProcess</code></a> object.</p>
<p>If Node.js was not spawned with an IPC channel, <code>process.send()</code> will be
<code>undefined</code>.</p>
<p><em>Note</em>: This function uses <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify"><code>JSON.stringify()</code></a> internally to serialize the
<code>message</code>.*</p>
<h2>process.setegid(id)<span><a class="mark" href="#process_process_setegid_id" id="process_process_setegid_id">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v2.0.0</span>
</div><ul>
<li><code>id</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <span class="type">&lt;number&gt;</span> A group name or ID</li>
</ul>
<p>The <code>process.setegid()</code> method sets the effective group identity of the process.
(See <a href="http://man7.org/linux/man-pages/man2/setegid.2.html">setegid(2)</a>.) The <code>id</code> can be passed as either a numeric ID or a group
name string. If a group name is specified, this method blocks while resolving
the associated a numeric ID.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">if</span> <span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>getegid <span class="sh_symbol">&amp;&amp;</span> process<span class="sh_symbol">.</span>setegid<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Current gid<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>process<span class="sh_symbol">.</span><span class="sh_function">getegid</span><span class="sh_symbol">()</span><span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  <span class="sh_keyword">try</span> <span class="sh_cbracket">{</span>
    process<span class="sh_symbol">.</span><span class="sh_function">setegid</span><span class="sh_symbol">(</span><span class="sh_number">501</span><span class="sh_symbol">);</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`New gid<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>process<span class="sh_symbol">.</span><span class="sh_function">getegid</span><span class="sh_symbol">()</span><span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
  <span class="sh_keyword">catch</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Failed to set gid<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>err<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or
Android)</p>
<h2>process.seteuid(id)<span><a class="mark" href="#process_process_seteuid_id" id="process_process_seteuid_id">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v2.0.0</span>
</div><ul>
<li><code>id</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <span class="type">&lt;number&gt;</span> A user name or ID</li>
</ul>
<p>The <code>process.seteuid()</code> method sets the effective user identity of the process.
(See <a href="http://man7.org/linux/man-pages/man2/seteuid.2.html">seteuid(2)</a>.) The <code>id</code> can be passed as either a numeric ID or a username
string.  If a username is specified, the method blocks while resolving the
associated numeric ID.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">if</span> <span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>geteuid <span class="sh_symbol">&amp;&amp;</span> process<span class="sh_symbol">.</span>seteuid<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Current uid<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>process<span class="sh_symbol">.</span><span class="sh_function">geteuid</span><span class="sh_symbol">()</span><span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  <span class="sh_keyword">try</span> <span class="sh_cbracket">{</span>
    process<span class="sh_symbol">.</span><span class="sh_function">seteuid</span><span class="sh_symbol">(</span><span class="sh_number">501</span><span class="sh_symbol">);</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`New uid<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>process<span class="sh_symbol">.</span><span class="sh_function">geteuid</span><span class="sh_symbol">()</span><span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
  <span class="sh_keyword">catch</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Failed to set uid<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>err<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or
Android)</p>
<h2>process.setgid(id)<span><a class="mark" href="#process_process_setgid_id" id="process_process_setgid_id">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.31</span>
</div><ul>
<li><code>id</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <span class="type">&lt;number&gt;</span> The group name or ID</li>
</ul>
<p>The <code>process.setgid()</code> method sets the group identity of the process. (See
setgid(2).)  The <code>id</code> can be passed as either a numeric ID or a group name
string. If a group name is specified, this method blocks while resolving the
associated numeric ID.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">if</span> <span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>getgid <span class="sh_symbol">&amp;&amp;</span> process<span class="sh_symbol">.</span>setgid<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Current gid<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>process<span class="sh_symbol">.</span><span class="sh_function">getgid</span><span class="sh_symbol">()</span><span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  <span class="sh_keyword">try</span> <span class="sh_cbracket">{</span>
    process<span class="sh_symbol">.</span><span class="sh_function">setgid</span><span class="sh_symbol">(</span><span class="sh_number">501</span><span class="sh_symbol">);</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`New gid<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>process<span class="sh_symbol">.</span><span class="sh_function">getgid</span><span class="sh_symbol">()</span><span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
  <span class="sh_keyword">catch</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Failed to set gid<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>err<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or
Android)</p>
<h2>process.setgroups(groups)<span><a class="mark" href="#process_process_setgroups_groups" id="process_process_setgroups_groups">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.9.4</span>
</div><ul>
<li><code>groups</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" class="type">&lt;Array&gt;</a></li>
</ul>
<p>The <code>process.setgroups()</code> method sets the supplementary group IDs for the
Node.js proess. This is a privileged operation that requires the Node.js process
to have <code>root</code> or the <code>CAP_SETGID</code> capability.</p>
<p>The <code>groups</code> array can contain numeric group IDs, group names or both.</p>
<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or
Android)</p>
<h2>process.setuid(id)<span><a class="mark" href="#process_process_setuid_id" id="process_process_setuid_id">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.28</span>
</div><p>The <code>process.setuid(id) method sets the user identity of the process. (See
setuid(2).)  The</code>id` can be passed as either a numeric ID or a username string.
If a username is specified, the method blocks while resolving the associated
numeric ID.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">if</span> <span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>getuid <span class="sh_symbol">&amp;&amp;</span> process<span class="sh_symbol">.</span>setuid<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Current uid<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>process<span class="sh_symbol">.</span><span class="sh_function">getuid</span><span class="sh_symbol">()</span><span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  <span class="sh_keyword">try</span> <span class="sh_cbracket">{</span>
    process<span class="sh_symbol">.</span><span class="sh_function">setuid</span><span class="sh_symbol">(</span><span class="sh_number">501</span><span class="sh_symbol">);</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`New uid<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>process<span class="sh_symbol">.</span><span class="sh_function">getuid</span><span class="sh_symbol">()</span><span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
  <span class="sh_keyword">catch</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Failed to set uid<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>err<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or
Android)</p>
<h2>process.stderr<span><a class="mark" href="#process_process_stderr" id="process_process_stderr">#</a></span></h2>
<p>The <code>process.stderr</code> property returns a <a href="#stream_class_stream_writable">Writable</a> stream equivalent to or
associated with <code>stderr</code> (fd <code>2</code>).</p>
<p><code>process.stderr</code> and <code>process.stdout</code> are unlike other streams in Node.js in
that they cannot be closed (calling <a href="https://nodejs.org/api/stream.html#stream_writable_end_chunk_encoding_callback"><code>end()</code></a> will throw an Error), they never
emit the <a href="#stream_event_finish"><code>'finish'</code></a> event, and writes can block when output is redirected to
a file (although disks are fast and operating systems normally employ write-back
caching so it should be a very rare occurrence indeed.)</p>
<p>Additionally, <code>process.stderr</code> and <code>process.stdout</code> are blocking when outputting
to TTYs (terminals) on OS X as a workaround for the OS's very small, 1kb
buffer size. This is to prevent interleaving between <code>stdout</code> and <code>stderr</code>.</p>
<h2>process.stdin<span><a class="mark" href="#process_process_stdin" id="process_process_stdin">#</a></span></h2>
<p>The <code>process.stdin</code> property returns a <a href="#stream_class_stream_readable">Readable</a> stream equivalent to or
associated with <code>stdin</code> (fd <code>0</code>).</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js">process<span class="sh_symbol">.</span>stdin<span class="sh_symbol">.</span><span class="sh_function">setEncoding</span><span class="sh_symbol">(</span><span class="sh_string">'utf8'</span><span class="sh_symbol">);</span>

process<span class="sh_symbol">.</span>stdin<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'readable'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">var</span> chunk <span class="sh_symbol">=</span> process<span class="sh_symbol">.</span>stdin<span class="sh_symbol">.</span><span class="sh_function">read</span><span class="sh_symbol">();</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>chunk <span class="sh_symbol">!==</span> <span class="sh_keyword">null</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    process<span class="sh_symbol">.</span>stdout<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span>`data<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>chunk<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

process<span class="sh_symbol">.</span>stdin<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  process<span class="sh_symbol">.</span>stdout<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>As a <a href="#stream_class_stream_readable">Readable</a> stream, <code>process.stdin</code> can also be used in "old" mode that
is compatible with scripts written for Node.js prior to v0.10.
For more information see <a href="https://nodejs.org/api/stream.html#stream_compatibility_with_older_node_js_versions">Stream compatibility</a>.</p>
<p><em>Note</em>: In "old" streams mode the <code>stdin</code> stream is paused by default, so one
must call <code>process.stdin.resume()</code> to read from it. Note also that calling
<code>process.stdin.resume()</code> itself would switch stream to "old" mode.</p>
<h2>process.stdout<span><a class="mark" href="#process_process_stdout" id="process_process_stdout">#</a></span></h2>
<p>The <code>process.stdout</code> propety returns a <a href="#stream_class_stream_writable">Writable</a> stream equivalent to or
associated with <code>stdout</code> (fd <code>1</code>).</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js">console<span class="sh_symbol">.</span>log <span class="sh_symbol">=</span> <span class="sh_symbol">(</span>msg<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  process<span class="sh_symbol">.</span>stdout<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span>`$<span class="sh_cbracket">{</span>msg<span class="sh_cbracket">}</span><span class="sh_symbol">\</span>n`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
</code></pre>
<p><code>process.stderr</code> and <code>process.stdout</code> are unlike other streams in Node.js in
that they cannot be closed (calling <a href="https://nodejs.org/api/stream.html#stream_writable_end_chunk_encoding_callback"><code>end()</code></a> will throw an Error), they never
emit the <a href="#stream_event_finish"><code>'finish'</code></a> event and that writes can block when output is
redirected to a file (although disks are fast and operating systems normally
employ write-back caching so it should be a very rare occurrence indeed.)</p>
<p>To check if Node.js is being run in a TTY context, read the <code>isTTY</code> property
on <code>process.stderr</code>, <code>process.stdout</code>, or <code>process.stdin</code>:</p>
<h3>TTY Terminals and <code>process.stdout</code><span><a class="mark" href="#process_tty_terminals_and_process_stdout" id="process_tty_terminals_and_process_stdout">#</a></span></h3>
<p>The <code>process.stderr</code> and <code>process.stdout</code> streams are blocking when outputting
to TTYs (terminals) on OS X as a workaround for the operating system's small,
1kb buffer size. This is to prevent interleaving between <code>stdout</code> and <code>stderr</code>.</p>
<p>To check if Node.js is being run in a <a href="https://nodejs.org/api/tty.html">TTY</a> context, check the <code>isTTY</code>
property on <code>process.stderr</code>, <code>process.stdout</code>, or <code>process.stdin</code>.</p>
<p>For instance:</p>
<pre class="sh_sourceCode"><code>$ node <span class="sh_symbol">-</span>p <span class="sh_string">"Boolean(process.stdin.isTTY)"</span>
<span class="sh_keyword">true</span>
$ echo <span class="sh_string">"foo"</span> <span class="sh_symbol">|</span> node <span class="sh_symbol">-</span>p <span class="sh_string">"Boolean(process.stdin.isTTY)"</span>
<span class="sh_keyword">false</span>

$ node <span class="sh_symbol">-</span>p <span class="sh_string">"Boolean(process.stdout.isTTY)"</span>
<span class="sh_keyword">true</span>
$ node <span class="sh_symbol">-</span>p <span class="sh_string">"Boolean(process.stdout.isTTY)"</span> <span class="sh_symbol">|</span> cat
<span class="sh_keyword">false</span>
</code></pre><p>See the <a href="https://nodejs.org/api/tty.html">TTY</a> documentation for more information.</p>
<h2>process.title<span><a class="mark" href="#process_process_title" id="process_process_title">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.104</span>
</div><p>The <code>process.title</code> property returns the current process title (i.e. returns
the current value of <code>ps</code>). Assigning a new value to <code>process.title</code> modifies
the current value of <code>ps</code>.</p>
<p><em>Note</em>: When a new value is assigned, different platforms will impose different
maximum length restrictions on the title. Usually such restrictions are quite
limited. For instance, on Linux and OS X, <code>process.title</code> is limited to the size
of the binary name plus the length of the command line arguments because setting
the <code>process.title</code> overwrites the <code>argv</code> memory of the process. Node.js v0.8
allowed for longer process title strings by also overwriting the <code>environ</code>
memory but that was potentially insecure and confusing in some (rather obscure)
cases.</p>
<h2>process.umask([mask])<span><a class="mark" href="#process_process_umask_mask" id="process_process_umask_mask">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.19</span>
</div><ul>
<li><code>mask</code> <span class="type">&lt;number&gt;</span></li>
</ul>
<p>The <code>process.umask()</code> method sets or returns the Node.js process's file mode
creation mask. Child processes inherit the mask from the parent process. The old
mask is return if the <code>mask</code> argument is given, otherwise returns the current
mask.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> newmask <span class="sh_symbol">=</span> 0o022<span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> oldmask <span class="sh_symbol">=</span> process<span class="sh_symbol">.</span><span class="sh_function">umask</span><span class="sh_symbol">(</span>newmask<span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>
  `Changed umask from $<span class="sh_cbracket">{</span>oldmask<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_number">8</span><span class="sh_symbol">)</span><span class="sh_cbracket">}</span> to $<span class="sh_cbracket">{</span>newmask<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_number">8</span><span class="sh_symbol">)</span><span class="sh_cbracket">}</span>`
<span class="sh_symbol">);</span>
</code></pre>
<h2>process.uptime()<span><a class="mark" href="#process_process_uptime" id="process_process_uptime">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.0</span>
</div><p>The <code>process.uptime()</code> method returns the number of seconds the current Node.js
process has been running.</p>
<h2>process.version<span><a class="mark" href="#process_process_version" id="process_process_version">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.3</span>
</div><p>The <code>process.version</code> property returns the Node.js version string.</p>
<pre class="sh_sourceCode"><code class="lang-js">console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Version<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>process<span class="sh_symbol">.</span>version<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
</code></pre>
<h2>process.versions<span><a class="mark" href="#process_process_versions" id="process_process_versions">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.2.0</span>
</div><p>The <code>process.versions</code> property returns an object listing the version strings of
Node.js and its dependencies.</p>
<pre class="sh_sourceCode"><code class="lang-js">console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>versions<span class="sh_symbol">);</span>
</code></pre>
<p>Will generate output similar to:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_cbracket">{</span>
  http_parser<span class="sh_symbol">:</span> <span class="sh_string">'2.3.0'</span><span class="sh_symbol">,</span>
  node<span class="sh_symbol">:</span> <span class="sh_string">'1.1.1'</span><span class="sh_symbol">,</span>
  v8<span class="sh_symbol">:</span> <span class="sh_string">'4.1.0.14'</span><span class="sh_symbol">,</span>
  uv<span class="sh_symbol">:</span> <span class="sh_string">'1.3.0'</span><span class="sh_symbol">,</span>
  zlib<span class="sh_symbol">:</span> <span class="sh_string">'1.2.8'</span><span class="sh_symbol">,</span>
  ares<span class="sh_symbol">:</span> <span class="sh_string">'1.10.0-DEV'</span><span class="sh_symbol">,</span>
  modules<span class="sh_symbol">:</span> <span class="sh_string">'43'</span><span class="sh_symbol">,</span>
  icu<span class="sh_symbol">:</span> <span class="sh_string">'55.1'</span><span class="sh_symbol">,</span>
  openssl<span class="sh_symbol">:</span> <span class="sh_string">'1.0.1k'</span>
<span class="sh_cbracket">}</span>
</code></pre>
<h2>Exit Codes<span><a class="mark" href="#process_exit_codes" id="process_exit_codes">#</a></span></h2>
<p>Node.js will normally exit with a <code>0</code> status code when no more async
operations are pending.  The following status codes are used in other
cases:</p>
<ul>
<li><code>1</code> <strong>Uncaught Fatal Exception</strong> - There was an uncaught exception,
and it was not handled by a domain or an <a href="#process_event_uncaughtexception"><code>'uncaughtException'</code></a> event
handler.</li>
<li><code>2</code> - Unused (reserved by Bash for builtin misuse)</li>
<li><code>3</code> <strong>Internal JavaScript Parse Error</strong> - The JavaScript source code
internal in Node.js's bootstrapping process caused a parse error.  This
is extremely rare, and generally can only happen during development
of Node.js itself.</li>
<li><code>4</code> <strong>Internal JavaScript Evaluation Failure</strong> - The JavaScript
source code internal in Node.js's bootstrapping process failed to
return a function value when evaluated.  This is extremely rare, and
generally can only happen during development of Node.js itself.</li>
<li><code>5</code> <strong>Fatal Error</strong> - There was a fatal unrecoverable error in V8.
Typically a message will be printed to stderr with the prefix <code>FATAL
ERROR</code>.</li>
<li><code>6</code> <strong>Non-function Internal Exception Handler</strong> - There was an
uncaught exception, but the internal fatal exception handler
function was somehow set to a non-function, and could not be called.</li>
<li><code>7</code> <strong>Internal Exception Handler Run-Time Failure</strong> - There was an
uncaught exception, and the internal fatal exception handler
function itself threw an error while attempting to handle it.  This
can happen, for example, if a <a href="#process_event_uncaughtexception"><code>'uncaughtException'</code></a> or
<code>domain.on('error')</code> handler throws an error.</li>
<li><code>8</code> - Unused.  In previous versions of Node.js, exit code 8 sometimes
indicated an uncaught exception.</li>
<li><code>9</code> - <strong>Invalid Argument</strong> - Either an unknown option was specified,
or an option requiring a value was provided without a value.</li>
<li><code>10</code> <strong>Internal JavaScript Run-Time Failure</strong> - The JavaScript
source code internal in Node.js's bootstrapping process threw an error
when the bootstrapping function was called.  This is extremely rare,
and generally can only happen during development of Node.js itself.</li>
<li><code>12</code> <strong>Invalid Debug Argument</strong> - The <code>--debug</code> and/or <code>--debug-brk</code>
options were set, but an invalid port number was chosen.</li>
<li><code>&gt;128</code> <strong>Signal Exits</strong> - If Node.js receives a fatal signal such as
<code>SIGKILL</code> or <code>SIGHUP</code>, then its exit code will be <code>128</code> plus the
value of the signal code.  This is a standard Unix practice, since
exit codes are defined to be 7-bit integers, and signal exits set
the high-order bit, and then contain the value of the signal code.</li>
</ul>
<!-- [end-include:process.md] -->
<!-- [start-include:punycode.md] -->
<h1>punycode<span><a class="mark" href="#punycode_punycode" id="punycode_punycode">#</a></span></h1>
<pre class="api_stability api_stability_2 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> Stable</pre><p>The <code>punycode</code> module is a bundled version of the <a href="https://mths.be/punycode">Punycode.js</a> module. It
can be accessed using:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> punycode <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'punycode'</span><span class="sh_symbol">);</span>
</code></pre>
<p><a href="https://tools.ietf.org/html/rfc3492">Punycode</a> is a character encoding scheme defined by RFC 3492 that is
primarily intended for use in Internationalized Domain Names. Because host
names in URLs are limited to ASCII characters only, Domain Names that contain
non-ASCII characters must be converted into ASCII using the Punycode scheme.
For instance, the Japanese character that translates into the English word,
<code>'example'</code> is <code>'例'</code>. The Internationalized Domain Name, <code>'例.com'</code> (equivalent
to <code>'example.com'</code>) is represented by Punycode as the ASCII string
<code>'xn--fsq.com'</code>.</p>
<p>The <code>punycode</code> module provides a simple implementation of the Punycode standard.</p>
<p><em>Note</em>: The <code>punycode</code> module is a third-party dependency used by Node.js and
made available to developers as a convenience. Fixes or other modifications to
the module must be directed to the <a href="https://mths.be/punycode">Punycode.js</a> project.</p>
<h2>punycode.decode(string)<span><a class="mark" href="#punycode_punycode_decode_string" id="punycode_punycode_decode_string">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.1</span>
</div><ul>
<li><code>string</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
</ul>
<p>The <code>punycode.decode()</code> method converts a <a href="https://tools.ietf.org/html/rfc3492">Punycode</a> string of ASCII-only
characters to the equivalent string of Unicode codepoints.</p>
<pre class="sh_sourceCode"><code class="lang-js">punycode<span class="sh_symbol">.</span><span class="sh_function">decode</span><span class="sh_symbol">(</span><span class="sh_string">'maana-pta'</span><span class="sh_symbol">);</span> <span class="sh_comment">// 'mañana'</span>
punycode<span class="sh_symbol">.</span><span class="sh_function">decode</span><span class="sh_symbol">(</span><span class="sh_string">'--dqo34k'</span><span class="sh_symbol">);</span> <span class="sh_comment">// '☃-⌘'</span>
</code></pre>
<h2>punycode.encode(string)<span><a class="mark" href="#punycode_punycode_encode_string" id="punycode_punycode_encode_string">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.1</span>
</div><ul>
<li><code>string</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
</ul>
<p>The <code>punycode.encode()</code> method converts a string of Unicode codepoints to a
<a href="https://tools.ietf.org/html/rfc3492">Punycode</a> string of ASCII-only characters.</p>
<pre class="sh_sourceCode"><code class="lang-js">punycode<span class="sh_symbol">.</span><span class="sh_function">encode</span><span class="sh_symbol">(</span><span class="sh_string">'mañana'</span><span class="sh_symbol">);</span> <span class="sh_comment">// 'maana-pta'</span>
punycode<span class="sh_symbol">.</span><span class="sh_function">encode</span><span class="sh_symbol">(</span><span class="sh_string">'☃-⌘'</span><span class="sh_symbol">);</span> <span class="sh_comment">// '--dqo34k'</span>
</code></pre>
<h2>punycode.toASCII(domain)<span><a class="mark" href="#punycode_punycode_toascii_domain" id="punycode_punycode_toascii_domain">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.6.1</span>
</div><ul>
<li><code>domain</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
</ul>
<p>The <code>punycode.toASCII()</code> method converts a Unicode string representing an
Internationalized Domain Name to <a href="https://tools.ietf.org/html/rfc3492">Punycode</a>. Only the non-ASCII parts of the
domain name will be converted. Calling <code>punycode.toASCII()</code> on a string that
already only contains ASCII characters will have no effect.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// encode domain names</span>
punycode<span class="sh_symbol">.</span><span class="sh_function">toASCII</span><span class="sh_symbol">(</span><span class="sh_string">'mañana.com'</span><span class="sh_symbol">);</span>  <span class="sh_comment">// 'xn--maana-pta.com'</span>
punycode<span class="sh_symbol">.</span><span class="sh_function">toASCII</span><span class="sh_symbol">(</span><span class="sh_string">'☃-⌘.com'</span><span class="sh_symbol">);</span>   <span class="sh_comment">// 'xn----dqo34k.com'</span>
punycode<span class="sh_symbol">.</span><span class="sh_function">toASCII</span><span class="sh_symbol">(</span><span class="sh_string">'example.com'</span><span class="sh_symbol">);</span> <span class="sh_comment">// 'example.com'</span>
</code></pre>
<h2>punycode.toUnicode(domain)<span><a class="mark" href="#punycode_punycode_tounicode_domain" id="punycode_punycode_tounicode_domain">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.6.1</span>
</div><ul>
<li><code>domain</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
</ul>
<p>The <code>punycode.toUnicode()</code> method converts a string representing a domain name
containing <a href="https://tools.ietf.org/html/rfc3492">Punycode</a> encoded characters into Unicode. Only the <a href="https://tools.ietf.org/html/rfc3492">Punycode</a>
encoded parts of the domain name are be converted.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// decode domain names</span>
punycode<span class="sh_symbol">.</span><span class="sh_function">toUnicode</span><span class="sh_symbol">(</span><span class="sh_string">'xn--maana-pta.com'</span><span class="sh_symbol">);</span> <span class="sh_comment">// 'mañana.com'</span>
punycode<span class="sh_symbol">.</span><span class="sh_function">toUnicode</span><span class="sh_symbol">(</span><span class="sh_string">'xn----dqo34k.com'</span><span class="sh_symbol">);</span>  <span class="sh_comment">// '☃-⌘.com'</span>
punycode<span class="sh_symbol">.</span><span class="sh_function">toUnicode</span><span class="sh_symbol">(</span><span class="sh_string">'example.com'</span><span class="sh_symbol">);</span>       <span class="sh_comment">// 'example.com'</span>
</code></pre>
<h2>punycode.ucs2<span><a class="mark" href="#punycode_punycode_ucs2" id="punycode_punycode_ucs2">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.7.0</span>
</div><h3>punycode.ucs2.decode(string)<span><a class="mark" href="#punycode_punycode_ucs2_decode_string" id="punycode_punycode_ucs2_decode_string">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.7.0</span>
</div><ul>
<li><code>string</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
</ul>
<p>The <code>punycode.ucs2.decode()</code> method returns an array containing the numeric
codepoint values of each Unicode symbol in the string.</p>
<pre class="sh_sourceCode"><code class="lang-js">punycode<span class="sh_symbol">.</span>ucs2<span class="sh_symbol">.</span><span class="sh_function">decode</span><span class="sh_symbol">(</span><span class="sh_string">'abc'</span><span class="sh_symbol">);</span> <span class="sh_comment">// [0x61, 0x62, 0x63]</span>
<span class="sh_comment">// surrogate pair for U+1D306 tetragram for centre:</span>
punycode<span class="sh_symbol">.</span>ucs2<span class="sh_symbol">.</span><span class="sh_function">decode</span><span class="sh_symbol">(</span><span class="sh_string">'</span><span class="sh_specialchar">\u</span><span class="sh_string">D834</span><span class="sh_specialchar">\u</span><span class="sh_string">DF06'</span><span class="sh_symbol">);</span> <span class="sh_comment">// [0x1D306]</span>
</code></pre>
<h3>punycode.ucs2.encode(codePoints)<span><a class="mark" href="#punycode_punycode_ucs2_encode_codepoints" id="punycode_punycode_ucs2_encode_codepoints">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.7.0</span>
</div><ul>
<li><code>codePoints</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" class="type">&lt;Array&gt;</a></li>
</ul>
<p>The <code>punycode.ucs2.encode()</code> method returns a string based on an array of
numeric code point values.</p>
<pre class="sh_sourceCode"><code class="lang-js">punycode<span class="sh_symbol">.</span>ucs2<span class="sh_symbol">.</span><span class="sh_function">encode</span><span class="sh_symbol">([</span><span class="sh_number">0x61</span><span class="sh_symbol">,</span> <span class="sh_number">0x62</span><span class="sh_symbol">,</span> <span class="sh_number">0x63</span><span class="sh_symbol">]);</span> <span class="sh_comment">// 'abc'</span>
punycode<span class="sh_symbol">.</span>ucs2<span class="sh_symbol">.</span><span class="sh_function">encode</span><span class="sh_symbol">([</span><span class="sh_number">0x1D306</span><span class="sh_symbol">]);</span> <span class="sh_comment">// '\uD834\uDF06'</span>
</code></pre>
<h2>punycode.version<span><a class="mark" href="#punycode_punycode_version" id="punycode_punycode_version">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.6.1</span>
</div><p>Returns a string identifying the current <a href="https://mths.be/punycode">Punycode.js</a> version number.</p>
<!-- [end-include:punycode.md] -->
<!-- [start-include:querystring.md] -->
<h1>Query String<span><a class="mark" href="#querystring_query_string" id="querystring_query_string">#</a></span></h1>
<pre class="api_stability api_stability_2 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> Stable</pre><!--name=querystring-->
<p>The <code>querystring</code> module provides utilities for parsing and formatting URL
query strings. It can be accessed using:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> querystring <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'querystring'</span><span class="sh_symbol">);</span>
</code></pre>
<h2>querystring.escape(str)<span><a class="mark" href="#querystring_querystring_escape_str" id="querystring_querystring_escape_str">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.25</span>
</div><ul>
<li><code>str</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
</ul>
<p>The <code>querystring.escape()</code> method performs URL percent-encoding on the given
<code>str</code> in a manner that is optimized for the specific requirements of URL
query strings.</p>
<p>The <code>querystring.escape()</code> method is used by <code>querystring.stringify()</code> and is
generally not expected to be used directly. It is exported primarily to allow
application code to provide a replacement percent-encoding implementation if
necessary by assigning <code>querystring.escape</code> to an alternative function.</p>
<h2>querystring.parse(str[, sep[, eq[, options]]])<span><a class="mark" href="#querystring_querystring_parse_str_sep_eq_options" id="querystring_querystring_parse_str_sep_eq_options">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.25</span>
</div><ul>
<li><code>str</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The URL query string to parse</li>
<li><code>sep</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The substring used to delimit key and value pairs in the
query string. Defaults to <code>'&amp;'</code>.</li>
<li><code>eq</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a>. The substring used to delimit keys and values in the
query string. Defaults to <code>'='</code>.</li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>decodeURIComponent</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> The function to use when decoding
percent-encoded characters in the query string. Defaults to
<code>querystring.unescape()</code>.</li>
<li><code>maxKeys</code> <span class="type">&lt;number&gt;</span> Specifies the maximum number of keys to parse.
Defaults to <code>1000</code>. Specify <code>0</code> to remove key counting limitations.</li>
</ul>
</li>
</ul>
<p>The <code>querystring.parse()</code> method parses a URL query string (<code>str</code>) into a
collection of key and value pairs.</p>
<p>For example, the query string <code>'foo=bar&amp;abc=xyz&amp;abc=123'</code> is parsed into:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_cbracket">{</span>
  foo<span class="sh_symbol">:</span> <span class="sh_string">'bar'</span><span class="sh_symbol">,</span>
  abc<span class="sh_symbol">:</span> <span class="sh_symbol">[</span><span class="sh_string">'xyz'</span><span class="sh_symbol">,</span> <span class="sh_string">'123'</span><span class="sh_symbol">]</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p><em>Note</em>: The object returned by the <code>querystring.parse()</code> method <em>does not</em>
prototypically extend from the JavaScript <code>Object</code>. This means that the
typical <code>Object</code> methods such as <code>obj.toString()</code>, <code>obj.hashOwnProperty()</code>,
and others are not defined and <em>will not work</em>.</p>
<p>By default, percent-encoded characters within the query string will be assumed
to use UTF-8 encoding. If an alternative character encoding is used, then an
alternative <code>decodeURIComponent</code> option will need to be specified as illustrated
in the following example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// Assuming gbkDecodeURIComponent function already exists...</span>

querystring<span class="sh_symbol">.</span><span class="sh_function">parse</span><span class="sh_symbol">(</span><span class="sh_string">'w=%D6%D0%CE%C4&amp;foo=bar'</span><span class="sh_symbol">,</span> <span class="sh_keyword">null</span><span class="sh_symbol">,</span> <span class="sh_keyword">null</span><span class="sh_symbol">,</span>
  <span class="sh_cbracket">{</span> <span class="sh_predef_func">decodeURIComponent</span><span class="sh_symbol">:</span> gbkDecodeURIComponent <span class="sh_cbracket">}</span><span class="sh_symbol">)</span>
</code></pre>
<h2>querystring.stringify(obj[, sep[, eq[, options]]])<span><a class="mark" href="#querystring_querystring_stringify_obj_sep_eq_options" id="querystring_querystring_stringify_obj_sep_eq_options">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.25</span>
</div><ul>
<li><code>obj</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> The object to serialize into a URL query string</li>
<li><code>sep</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The substring used to delimit key and value pairs in the
query string. Defaults to <code>'&amp;'</code>.</li>
<li><code>eq</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a>. The substring used to delimit keys and values in the
query string. Defaults to <code>'='</code>.</li>
<li><code>options</code><ul>
<li><code>encodeURIComponent</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> The function to use when converting
URL-unsafe characters to percent-encoding in the query string. Defaults to
<code>querystring.escape()</code>.</li>
</ul>
</li>
</ul>
<p>The <code>querystring.stringify()</code> method produces a URL query string from a
given <code>obj</code> by iterating through the object's "own properties".</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js">querystring<span class="sh_symbol">.</span><span class="sh_function">stringify</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span> foo<span class="sh_symbol">:</span> <span class="sh_string">'bar'</span><span class="sh_symbol">,</span> baz<span class="sh_symbol">:</span> <span class="sh_symbol">[</span><span class="sh_string">'qux'</span><span class="sh_symbol">,</span> <span class="sh_string">'quux'</span><span class="sh_symbol">],</span> corge<span class="sh_symbol">:</span> <span class="sh_string">''</span> <span class="sh_cbracket">}</span><span class="sh_symbol">)</span>
<span class="sh_comment">// returns 'foo=bar&amp;baz=qux&amp;baz=quux&amp;corge='</span>

querystring<span class="sh_symbol">.</span><span class="sh_function">stringify</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>foo<span class="sh_symbol">:</span> <span class="sh_string">'bar'</span><span class="sh_symbol">,</span> baz<span class="sh_symbol">:</span> <span class="sh_string">'qux'</span><span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_string">';'</span><span class="sh_symbol">,</span> <span class="sh_string">':'</span><span class="sh_symbol">)</span>
<span class="sh_comment">// returns 'foo:bar;baz:qux'</span>
</code></pre>
<p>By default, characters requiring percent-encoding within the query string will
be encoded as UTF-8. If an alternative encoding is required, then an alternative
<code>encodeURIComponent</code> option will need to be specified as illustrated in the
following example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// Assuming gbkEncodeURIComponent function already exists,</span>

querystring<span class="sh_symbol">.</span><span class="sh_function">stringify</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span> w<span class="sh_symbol">:</span> <span class="sh_string">'中文'</span><span class="sh_symbol">,</span> foo<span class="sh_symbol">:</span> <span class="sh_string">'bar'</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_keyword">null</span><span class="sh_symbol">,</span> <span class="sh_keyword">null</span><span class="sh_symbol">,</span>
  <span class="sh_cbracket">{</span> <span class="sh_predef_func">encodeURIComponent</span><span class="sh_symbol">:</span> gbkEncodeURIComponent <span class="sh_cbracket">}</span><span class="sh_symbol">)</span>
</code></pre>
<h2>querystring.unescape(str)<span><a class="mark" href="#querystring_querystring_unescape_str" id="querystring_querystring_unescape_str">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.25</span>
</div><ul>
<li><code>str</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
</ul>
<p>The <code>querystring.unescape()</code> method performs decoding of URL percent-encoded
characters on the given <code>str</code>.</p>
<p>The <code>querystring.unescape()</code> method is used by <code>querystring.parse()</code> and is
generally not expected to be used directly. It is exported primarily to allow
application code to provide a replacement decoding implementation if
necessary by assigning <code>querystring.unescape</code> to an alternative function.</p>
<p>By default, the <code>querystring.unescape()</code> method will attempt to use the
JavaScript built-in <code>decodeURIComponent()</code> method to decode. If that fails,
a safer equivalent that does not throw on malformed URLs will be used.</p>
<!-- [end-include:querystring.md] -->
<!-- [start-include:readline.md] -->
<h1>Readline<span><a class="mark" href="#readline_readline" id="readline_readline">#</a></span></h1>
<pre class="api_stability api_stability_2 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> Stable</pre><p>The <code>readline</code> module provides an interface for reading data from a <a href="#stream_class_stream_readable">Readable</a>
stream (such as <a href="https://nodejs.org/api/process.html#process_process_stdin"><code>process.stdin</code></a>) one line at a time. It can be accessed using:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> readline <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'readline'</span><span class="sh_symbol">);</span>
</code></pre>
<p>The following simple example illustrates the basic use of the <code>readline</code> module.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> readline <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'readline'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> rl <span class="sh_symbol">=</span> readline<span class="sh_symbol">.</span><span class="sh_function">createInterface</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>
  input<span class="sh_symbol">:</span> process<span class="sh_symbol">.</span>stdin<span class="sh_symbol">,</span>
  output<span class="sh_symbol">:</span> process<span class="sh_symbol">.</span>stdout
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

rl<span class="sh_symbol">.</span><span class="sh_function">question</span><span class="sh_symbol">(</span><span class="sh_string">'What do you think of Node.js? '</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>answer<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// TODO: Log the answer in a database</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Thank you for your valuable feedback:'</span><span class="sh_symbol">,</span> answer<span class="sh_symbol">);</span>

  rl<span class="sh_symbol">.</span><span class="sh_function">close</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p><em>Note</em> Once this code is invoked, the Node.js application will not
terminate until the <code>readline.Interface</code> is closed because the interface
waits for data to be received on the <code>input</code> stream.</p>
<h2>Class: Interface<span><a class="mark" href="#readline_class_interface" id="readline_class_interface">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.104</span>
</div><p>Instances of the <code>readline.Interface</code> class are constructed using the
<code>readline.createInterface()</code> method. Every instance is associated with a
single <code>input</code> <a href="#stream_class_stream_readable">Readable</a> stream and a single <code>output</code> <a href="#stream_class_stream_writable">Writable</a> stream.
The <code>output</code> stream is used to print prompts for user input that arrives on,
and is read from, the <code>input</code> stream.</p>
<h3>Event: 'close'<span><a class="mark" href="#readline_event_close" id="readline_event_close">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.98</span>
</div><p>The <code>'close'</code> event is emitted when one of the following occur:</p>
<ul>
<li>The <code>rl.close()</code> method is called and the <code>readline.Interface</code> instance has
relinquished control over the <code>input</code> and <code>output</code> streams;</li>
<li>The <code>input</code> stream receives its <code>'end'</code> event;</li>
<li>The <code>input</code> stream receives <code>&lt;ctrl&gt;-D</code> to signal end-of-transmission (EOT);</li>
<li>The <code>input</code> stream receives <code>&lt;ctrl&gt;-C</code> to signal <code>SIGINT</code> and there is no
<code>SIGINT</code> event listener registered on the <code>readline.Interface</code> instance.</li>
</ul>
<p>The listener function is called without passing any arguments.</p>
<p>The <code>readline.Interface</code> instance should be considered to be "finished" once
the <code>'close'</code> event is emitted.</p>
<h3>Event: 'line'<span><a class="mark" href="#readline_event_line" id="readline_event_line">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.98</span>
</div><p>The <code>'line'</code> event is emitted whenever the <code>input</code> stream receives an
end-of-line input (<code>\n</code>, <code>\r</code>, or <code>\r\n</code>). This usually occurs when the user
presses the <code>&lt;Enter&gt;</code>, or <code>&lt;Return&gt;</code> keys.</p>
<p>The listener function is called with a string containing the single line of
received input.</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js">rl<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'line'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>input<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Received<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>input<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h3>Event: 'pause'<span><a class="mark" href="#readline_event_pause" id="readline_event_pause">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.7.5</span>
</div><p>The <code>'pause'</code> event is emitted when one of the following occur:</p>
<ul>
<li>The <code>input</code> stream is paused.</li>
<li>The <code>input</code> stream is not paused and receives the <code>SIGCONT</code> event. (See
events <code>SIGTSTP</code> and <code>SIGCONT</code>)</li>
</ul>
<p>The listener function is called without passing any arguments.</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js">rl<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'pause'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Readline paused.'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h3>Event: 'resume'<span><a class="mark" href="#readline_event_resume" id="readline_event_resume">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.7.5</span>
</div><p>The <code>'resume'</code> event is emitted whenever the <code>input</code> stream is resumed.</p>
<p>The listener function is called without passing any arguments.</p>
<pre class="sh_sourceCode"><code class="lang-js">rl<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'resume'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Readline resumed.'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h3>Event: 'SIGCONT'<span><a class="mark" href="#readline_event_sigcont" id="readline_event_sigcont">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.7.5</span>
</div><p>The <code>'SIGCONT'</code> event is emitted when a Node.js process previously moved into
the background using <code>&lt;ctrl&gt;-Z</code> (i.e. <code>SIGTSTP</code>) is then brought back to the
foreground using <code>fg(1)</code>.</p>
<p>If the <code>input</code> stream was paused <em>before</em> the <code>SIGSTP</code> request, this event will
not be emitted.</p>
<p>The listener function is invoked without passing any arguments.</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js">rl<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'SIGCONT'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// `prompt` will automatically resume the stream</span>
  rl<span class="sh_symbol">.</span><span class="sh_function">prompt</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p><em>Note</em>: The <code>'SIGCONT'</code> event is <em>not</em> supported on Windows.</p>
<h3>Event: 'SIGINT'<span><a class="mark" href="#readline_event_sigint" id="readline_event_sigint">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.3.0</span>
</div><p>The <code>'SIGINT'</code> event is emitted whenever the <code>input</code> stream receives a
<code>&lt;ctrl&gt;-C</code> input, known typically as <code>SIGINT</code>. If there are no <code>'SIGINT'</code> event
listeners registered when the <code>input</code> stream receives a <code>SIGINT</code>, the <code>'pause'</code>
event will be emitted.</p>
<p>The listener function is invoked without passing any arguments.</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js">rl<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'SIGINT'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  rl<span class="sh_symbol">.</span><span class="sh_function">question</span><span class="sh_symbol">(</span><span class="sh_string">'Are you sure you want to exit?'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>answer<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>answer<span class="sh_symbol">.</span><span class="sh_function">match</span><span class="sh_symbol">(</span><span class="sh_regexp">/^y(es)?$/i</span><span class="sh_symbol">))</span> rl<span class="sh_symbol">.</span><span class="sh_function">pause</span><span class="sh_symbol">();</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h3>Event: 'SIGTSTP'<span><a class="mark" href="#readline_event_sigtstp" id="readline_event_sigtstp">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.7.5</span>
</div><p>The <code>'SIGTSPT'</code> event is emitted when the <code>input</code> stream receives a <code>&lt;ctrl&gt;-Z</code>
input, typically known as <code>SIGTSTP</code>. If there are no <code>SIGTSTP</code> event listeners
registered when the <code>input</code> stream receives a <code>SIGTSTP</code>, the Node.js process
will be sent to the background.</p>
<p>When the program is resumed using <code>fg(1)</code>, the <code>'pause'</code> and <code>SIGCONT</code> events
will be emitted. These can be used to resume the <code>input</code> stream.</p>
<p>The <code>'pause'</code> and <code>'SIGCONT'</code> events will not be emitted if the <code>input</code> was
paused before the process was sent to the background.</p>
<p>The listener function is invoked without passing any arguments.</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js">rl<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'SIGTSTP'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// This will override SIGTSTP and prevent the program from going to the</span>
  <span class="sh_comment">// background.</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Caught SIGTSTP.'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p><em>Note</em>: The <code>'SIGTSTP'</code> event is <em>not</em> supported on Windows.</p>
<h3>rl.close()<span><a class="mark" href="#readline_rl_close" id="readline_rl_close">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.98</span>
</div><p>The <code>rl.close()</code> method closes the <code>readline.Interface</code> instance and
relinquishes control over the <code>input</code> and <code>output</code> streams. When called,
the <code>'close'</code> event will be emitted.
Closes the <code>Interface</code> instance, relinquishing control on the <code>input</code> and
<code>output</code> streams. The <code>'close'</code> event will also be emitted.</p>
<h3>rl.pause()<span><a class="mark" href="#readline_rl_pause" id="readline_rl_pause">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.3.4</span>
</div><p>The <code>rl.pause()</code> method pauses the <code>input</code> stream, allowing it to be resumed
later if necessary.</p>
<p>Calling <code>rl.pause()</code> does not immediately pause other events (including
<code>'line'</code>) from being emitted by the <code>readline.Interface</code> instance.</p>
<h3>rl.prompt([preserveCursor])<span><a class="mark" href="#readline_rl_prompt_preservecursor" id="readline_rl_prompt_preservecursor">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.98</span>
</div><ul>
<li><code>preserveCursor</code> <span class="type">&lt;boolean&gt;</span> If <code>true</code>, prevents the cursor placement from
being reset to <code>0</code>.</li>
</ul>
<p>The <code>rl.prompt()</code> method writes the <code>readline.Interface</code> instances configured
<code>prompt</code> to a new line in <code>output</code> in order to provide a user with a new
location at which to provide input.</p>
<p>When called, <code>rl.prompt()</code> will resume the <code>input</code> stream if it has been
paused.</p>
<p>If the <code>readline.Interface</code> was created with <code>output</code> set to <code>null</code> or
<code>undefined</code> the prompt is not written.</p>
<h3>rl.question(query, callback)<span><a class="mark" href="#readline_rl_question_query_callback" id="readline_rl_question_query_callback">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.3.3</span>
</div><ul>
<li><code>query</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> A statement or query to write to <code>output</code>, prepended to the
prompt.</li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> A callback function that is invoked with the user's
input in response to the <code>query</code>.</li>
</ul>
<p>The <code>rl.question()</code> method displays the <code>query</code> by writing it to the <code>output</code>,
waits for user input to be provided on <code>input</code>, then invokes the <code>callback</code>
function passing the provided input as the first argument.</p>
<p>When called, <code>rl.question()</code> will resume the <code>input</code> stream if it has been
paused.</p>
<p>If the <code>readline.Interface</code> was created with <code>output</code> set to <code>null</code> or
<code>undefined</code> the <code>query</code> is not written.</p>
<p>Example usage:</p>
<pre class="sh_sourceCode"><code class="lang-js">rl<span class="sh_symbol">.</span><span class="sh_function">question</span><span class="sh_symbol">(</span><span class="sh_string">'What is your favorite food?'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>answer<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Oh<span class="sh_symbol">,</span> so your favorite food is $<span class="sh_cbracket">{</span>answer<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p><em>Note</em>: The <code>callback</code> function passed to <code>rl.question()</code> does not follow the
typical pattern of accepting an <code>Error</code> object or <code>null</code> as the first argument.
The <code>callback</code> is called with the provided answer as the only argument.</p>
<h3>rl.resume()<span><a class="mark" href="#readline_rl_resume" id="readline_rl_resume">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.3.4</span>
</div><p>The <code>rl.resume()</code> method resumes the <code>input</code> stream if it has been paused.</p>
<h3>rl.setPrompt(prompt)<span><a class="mark" href="#readline_rl_setprompt_prompt" id="readline_rl_setprompt_prompt">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.98</span>
</div><ul>
<li><code>prompt</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
</ul>
<p>The <code>rl.setPrompt()</code> method sets the prompt that will be written to <code>output</code>
whenever <code>rl.prompt()</code> is called.</p>
<h3>rl.write(data[, key])<span><a class="mark" href="#readline_rl_write_data_key" id="readline_rl_write_data_key">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.98</span>
</div><ul>
<li><code>data</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a></li>
<li><code>key</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>ctrl</code> <span class="type">&lt;boolean&gt;</span> <code>true</code> to indicate the <code>&lt;ctrl&gt;</code> key.</li>
<li><code>meta</code> <span class="type">&lt;boolean&gt;</span> <code>true</code> to indicate the <code>&lt;Meta&gt;</code> key.</li>
<li><code>shift</code> <span class="type">&lt;boolean&gt;</span> <code>true</code> to indicate the <code>&lt;Shift&gt;</code> key.</li>
<li><code>name</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The name of the a key.</li>
</ul>
</li>
</ul>
<p>The <code>rl.write()</code> method will write either <code>data</code> or a key sequence  identified
by <code>key</code> to the <code>output</code>. The <code>key</code> argument is supported only if <code>output</code> is
a <a href="https://nodejs.org/api/tty.html">TTY</a> text terminal.</p>
<p>If <code>key</code> is specified, <code>data</code> is ignored.</p>
<p>When called, <code>rl.write()</code> will resume the <code>input</code> stream if it has been
paused.</p>
<p>If the <code>readline.Interface</code> was created with <code>output</code> set to <code>null</code> or
<code>undefined</code> the <code>data</code> and <code>key</code> are not written.</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js">rl<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'Delete this!'</span><span class="sh_symbol">);</span>
<span class="sh_comment">// Simulate Ctrl+u to delete the line written previously</span>
rl<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_keyword">null</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{</span>ctrl<span class="sh_symbol">:</span> <span class="sh_keyword">true</span><span class="sh_symbol">,</span> name<span class="sh_symbol">:</span> <span class="sh_string">'u'</span><span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h2>readline.clearLine(stream, dir)<span><a class="mark" href="#readline_readline_clearline_stream_dir" id="readline_readline_clearline_stream_dir">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.7.7</span>
</div><ul>
<li><code>stream</code> <span class="type">&lt;Writable&gt;</span></li>
<li><code>dir</code> <span class="type">&lt;number&gt;</span><ul>
<li><code>-1</code> - to the left from cursor</li>
<li><code>1</code> - to the right from cursor</li>
<li><code>0</code> - the entire line</li>
</ul>
</li>
</ul>
<p>The <code>readline.clearLine()</code> method clears current line of given <a href="https://nodejs.org/api/tty.html">TTY</a> stream
in a specified direction identified by <code>dir</code>.</p>
<h2>readline.clearScreenDown(stream)<span><a class="mark" href="#readline_readline_clearscreendown_stream" id="readline_readline_clearscreendown_stream">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.7.7</span>
</div><ul>
<li><code>stream</code> <span class="type">&lt;Writable&gt;</span></li>
</ul>
<p>The <code>readline.clearScreenDown()</code> method clears the given <a href="https://nodejs.org/api/tty.html">TTY</a> stream from
the current position of the cursor down.</p>
<h2>readline.createInterface(options)<span><a class="mark" href="#readline_readline_createinterface_options" id="readline_readline_createinterface_options">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.98</span>
</div><ul>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>input</code> <span class="type">&lt;Readable&gt;</span> The <a href="#stream_class_stream_readable">Readable</a> stream to listen to. This option is
<em>required</em>.</li>
<li><code>output</code> <span class="type">&lt;Writable&gt;</span> The <a href="#stream_class_stream_writable">Writable</a> stream to write readline data to.</li>
<li><code>completer</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> An optional function used for Tab autocompletion.</li>
<li><code>terminal</code> <span class="type">&lt;boolean&gt;</span> <code>true</code> if the <code>input</code> and <code>output</code> streams should be
treated like a TTY, and have ANSI/VT100 escape codes written to it.
Defaults to checking <code>isTTY</code> on the <code>output</code> stream upon instantiation.</li>
<li><code>historySize</code> <span class="type">&lt;number&gt;</span> maximum number of history lines retained. To disable
the history set this value to <code>0</code>. Defaults to <code>30</code>. This option makes sense
only if <code>terminal</code> is set to <code>true</code> by the user or by an internal <code>output</code>
check, otherwise the history caching mechanism is not initialized at all.</li>
</ul>
</li>
</ul>
<p>The <code>readline.createInterface()</code> method creates a new <code>readline.Interface</code>
instance.</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> readline <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'readline'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> rl <span class="sh_symbol">=</span> readline<span class="sh_symbol">.</span><span class="sh_function">createInterface</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>
  input<span class="sh_symbol">:</span> process<span class="sh_symbol">.</span>stdin<span class="sh_symbol">,</span>
  output<span class="sh_symbol">:</span> process<span class="sh_symbol">.</span>stdout
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>Once the <code>readline.Interface</code> instance is created, the most common case is to
listen for the <code>'line'</code> event:</p>
<pre class="sh_sourceCode"><code class="lang-js">rl<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'line'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>line<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Received<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>line<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>If <code>terminal</code> is <code>true</code> for this instance then the <code>output</code> stream will get
the best compatibility if it defines an <code>output.columns</code> property and emits
a <code>'resize'</code> event on the <code>output</code> if or when the columns ever change
(<a href="https://nodejs.org/api/process.html#process_process_stdout"><code>process.stdout</code></a> does this automatically when it is a TTY).</p>
<h3>Use of the <code>completer</code> Function<span><a class="mark" href="#readline_use_of_the_completer_function" id="readline_use_of_the_completer_function">#</a></span></h3>
<p>When called, the <code>completer</code> function is provided the current line entered by
the user, and is expected to return an Array with 2 entries:</p>
<ul>
<li>An Array with matching entries for the completion.</li>
<li>The substring that was used for the matching.</li>
</ul>
<p>For instance: <code>[[substr1, substr2, ...], originalsubstring]</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">function</span> <span class="sh_function">completer</span><span class="sh_symbol">(</span>line<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">var</span> completions <span class="sh_symbol">=</span> <span class="sh_string">'.help .error .exit .quit .q'</span><span class="sh_symbol">.</span><span class="sh_function">split</span><span class="sh_symbol">(</span><span class="sh_string">' '</span><span class="sh_symbol">)</span>
  <span class="sh_keyword">var</span> hits <span class="sh_symbol">=</span> completions<span class="sh_symbol">.</span><span class="sh_function">filter</span><span class="sh_symbol">((</span>c<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span> <span class="sh_keyword">return</span> c<span class="sh_symbol">.</span><span class="sh_function">indexOf</span><span class="sh_symbol">(</span>line<span class="sh_symbol">)</span> <span class="sh_symbol">==</span> <span class="sh_number">0</span> <span class="sh_cbracket">}</span><span class="sh_symbol">)</span>
  <span class="sh_comment">// show all completions if none found</span>
  <span class="sh_keyword">return</span> <span class="sh_symbol">[</span>hits<span class="sh_symbol">.</span>length <span class="sh_symbol">?</span> hits <span class="sh_symbol">:</span> completions<span class="sh_symbol">,</span> line<span class="sh_symbol">]</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p>The <code>completer</code> function can be called asynchronously if it accepts two
arguments:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">function</span> <span class="sh_function">completer</span><span class="sh_symbol">(</span>linePartial<span class="sh_symbol">,</span> callback<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_function">callback</span><span class="sh_symbol">(</span><span class="sh_keyword">null</span><span class="sh_symbol">,</span> <span class="sh_symbol">[[</span><span class="sh_string">'123'</span><span class="sh_symbol">],</span> linePartial<span class="sh_symbol">]);</span>
<span class="sh_cbracket">}</span>
</code></pre>
<h2>readline.cursorTo(stream, x, y)<span><a class="mark" href="#readline_readline_cursorto_stream_x_y" id="readline_readline_cursorto_stream_x_y">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.7.7</span>
</div><ul>
<li><code>stream</code> <span class="type">&lt;Writable&gt;</span></li>
<li><code>x</code> <span class="type">&lt;number&gt;</span></li>
<li><code>y</code> <span class="type">&lt;number&gt;</span></li>
</ul>
<p>The <code>readline.cursorTo()</code> method moves cursor to the specified position in a
given <a href="https://nodejs.org/api/tty.html">TTY</a> <code>stream</code>.</p>
<h2>readline.emitKeypressEvents(stream[, interface])<span><a class="mark" href="#readline_readline_emitkeypressevents_stream_interface" id="readline_readline_emitkeypressevents_stream_interface">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.7.7</span>
</div><ul>
<li><code>stream</code> <span class="type">&lt;Readable&gt;</span></li>
<li><code>interface</code> <span class="type">&lt;readline.Interface&gt;</span></li>
</ul>
<p>The <code>readline.emitKeypressEvents()</code> method causes the given <a href="#stream_class_stream_writable">Writable</a>
<code>stream</code> to begin emitting <code>'keypress'</code> events corresponding to received input.</p>
<p>Optionally, <code>interface</code> specifies a <code>readline.Interface</code> instance for which
autocompletion is disabled when copy-pasted input is detected.</p>
<p>If the <code>stream</code> is a <a href="https://nodejs.org/api/tty.html">TTY</a>, then it must be in raw mode.</p>
<pre class="sh_sourceCode"><code class="lang-js">readline<span class="sh_symbol">.</span><span class="sh_function">emitKeypressEvents</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>stdin<span class="sh_symbol">);</span>
<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>stdin<span class="sh_symbol">.</span>isTTY<span class="sh_symbol">)</span>
  process<span class="sh_symbol">.</span>stdin<span class="sh_symbol">.</span><span class="sh_function">setRawMode</span><span class="sh_symbol">(</span><span class="sh_keyword">true</span><span class="sh_symbol">);</span>
</code></pre>
<h2>readline.moveCursor(stream, dx, dy)<span><a class="mark" href="#readline_readline_movecursor_stream_dx_dy" id="readline_readline_movecursor_stream_dx_dy">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.7.7</span>
</div><ul>
<li><code>stream</code> <span class="type">&lt;Writable&gt;</span></li>
<li><code>dx</code> <span class="type">&lt;number&gt;</span></li>
<li><code>dy</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a></li>
</ul>
<p>The <code>readline.moveCursor()</code> method moves the cursor <em>relative</em> to its current
position in a given <a href="https://nodejs.org/api/tty.html">TTY</a> <code>stream</code>.</p>
<h2>Example: Tiny CLI<span><a class="mark" href="#readline_example_tiny_cli" id="readline_example_tiny_cli">#</a></span></h2>
<p>The following example illustrates the use of <code>readline.Interface</code> class to
implement a small command-line interface:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> readline <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'readline'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> rl <span class="sh_symbol">=</span> readline<span class="sh_symbol">.</span><span class="sh_function">createInterface</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>stdin<span class="sh_symbol">,</span> process<span class="sh_symbol">.</span>stdout<span class="sh_symbol">);</span>

rl<span class="sh_symbol">.</span><span class="sh_function">setPrompt</span><span class="sh_symbol">(</span><span class="sh_string">'OHAI&gt; '</span><span class="sh_symbol">);</span>
rl<span class="sh_symbol">.</span><span class="sh_function">prompt</span><span class="sh_symbol">();</span>

rl<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'line'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>line<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">switch</span><span class="sh_symbol">(</span>line<span class="sh_symbol">.</span><span class="sh_function">trim</span><span class="sh_symbol">())</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">case</span> <span class="sh_string">'hello'</span><span class="sh_symbol">:</span>
      console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'world!'</span><span class="sh_symbol">);</span>
      <span class="sh_keyword">break</span><span class="sh_symbol">;</span>
    <span class="sh_keyword">default</span><span class="sh_symbol">:</span>
      console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Say what<span class="sh_symbol">?</span> I might have heard <span class="sh_string">'${line.trim()}'</span>`<span class="sh_symbol">);</span>
      <span class="sh_keyword">break</span><span class="sh_symbol">;</span>
  <span class="sh_cbracket">}</span>
  rl<span class="sh_symbol">.</span><span class="sh_function">prompt</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'close'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Have a great day!'</span><span class="sh_symbol">);</span>
  process<span class="sh_symbol">.</span><span class="sh_function">exit</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h2>Example: Read File Stream Line-by-Line<span><a class="mark" href="#readline_example_read_file_stream_line_by_line" id="readline_example_read_file_stream_line_by_line">#</a></span></h2>
<p>A common use case for <code>readline</code> is to consume input from a filesystem
<a href="#stream_class_stream_readable">Readable</a> stream one line at a time, as illustrated in the following
example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> readline <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'readline'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> fs <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'fs'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> rl <span class="sh_symbol">=</span> readline<span class="sh_symbol">.</span><span class="sh_function">createInterface</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>
  input<span class="sh_symbol">:</span> fs<span class="sh_symbol">.</span><span class="sh_function">createReadStream</span><span class="sh_symbol">(</span><span class="sh_string">'sample.txt'</span><span class="sh_symbol">)</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

rl<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'line'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>line<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Line from file:'</span><span class="sh_symbol">,</span> line<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<!-- [end-include:readline.md] -->
<!-- [start-include:repl.md] -->
<h1>REPL<span><a class="mark" href="#repl_repl" id="repl_repl">#</a></span></h1>
<pre class="api_stability api_stability_2 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> Stable</pre><p>The <code>repl</code> module provides a Read-Eval-Print-Loop (REPL) implementation that
is available both as a standalone program or includable in other applications.
It can be accessed using:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> repl <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'repl'</span><span class="sh_symbol">);</span>
</code></pre>
<h2>Design and Features<span><a class="mark" href="#repl_design_and_features" id="repl_design_and_features">#</a></span></h2>
<p>The <code>repl</code> module exports the <code>repl.REPLServer</code> class. While running, instances
of <code>repl.REPLServer</code> will accept individual lines of user input, evaluate those
according to a user-defined evaluation function, then output the result. Input
and output may be from <code>stdin</code> and <code>stdout</code>, respectively, or may be connected
to any Node.js <a href="https://nodejs.org/api/stream.html#stream_stream">stream</a>.</p>
<p>Instances of <code>repl.REPLServer</code> support automatic completion of inputs,
simplistic Emacs-style line editing, multi-line inputs, ANSI-styled output,
saving and restoring current REPL session state, error recovery, and
customizable evaluation functions.</p>
<h3>Commands and Special Keys<span><a class="mark" href="#repl_commands_and_special_keys" id="repl_commands_and_special_keys">#</a></span></h3>
<p>The following special commands are supported by all REPL instances:</p>
<ul>
<li><code>.break</code> - When in the process of inputting a multi-line expression, entering
the <code>.break</code> command (or pressing the <code>&lt;ctrl&gt;-C</code> key combination) will abort
further input or processing of that expression.</li>
<li><code>.clear</code> - Resets the REPL <code>context</code> to an empty object and clears any
multi-line expression currently being input.</li>
<li><code>.exit</code> - Close the I/O stream, causing the REPL to exit.</li>
<li><code>.help</code> - Show this list of special commands.</li>
<li><code>.save</code> - Save the current REPL session to a file:
<code>&gt; .save ./file/to/save.js</code></li>
<li><code>.load</code> - Load a file into the current REPL session.
<code>&gt; .load ./file/to/load.js</code></li>
</ul>
<p>The following key combinations in the REPL have these special effects:</p>
<ul>
<li><code>&lt;ctrl&gt;-C</code> - When pressed once, has the same effect as the <code>.break</code> command.
When pressed twice on a blank line, has the same effect as the <code>.exit</code>
command.</li>
<li><code>&lt;ctrl&gt;-D</code> - Has the same effect as the <code>.exit</code> command.</li>
<li><code>&lt;tab&gt;</code> - When pressed on a blank line, displays global and local(scope)
variables. When pressed while entering other input, displays relevant
autocompletion options.</li>
</ul>
<h3>Default Evaluation<span><a class="mark" href="#repl_default_evaluation" id="repl_default_evaluation">#</a></span></h3>
<p>By default, all instances of <code>repl.REPLServer</code> use an evaluation function that
evaluates JavaScript expressions and provides access to Node.js' built-in
modules. This default behavior can be overridden by passing in an alternative
evaluation function when the <code>repl.REPLServer</code> instance is created.</p>
<h4>JavaScript Expressions<span><a class="mark" href="#repl_javascript_expressions" id="repl_javascript_expressions">#</a></span></h4>
<p>The default evaluator supports direct evaluation of JavaScript expressions:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_symbol">&gt;</span> <span class="sh_number">1</span> <span class="sh_symbol">+</span> <span class="sh_number">1</span>
<span class="sh_number">2</span>
<span class="sh_symbol">&gt;</span> <span class="sh_keyword">var</span> m <span class="sh_symbol">=</span> <span class="sh_number">2</span>
<span class="sh_predef_var">undefined</span>
<span class="sh_symbol">&gt;</span> m <span class="sh_symbol">+</span> <span class="sh_number">1</span>
<span class="sh_number">3</span>
</code></pre>
<p>Unless otherwise scoped within blocks (e.g. <code>{ ... }</code>) or functions, variables
declared either implicitly or using the <code>var</code> keyword are declared at the
<code>global</code> scope.</p>
<h4>Global and Local Scope<span><a class="mark" href="#repl_global_and_local_scope" id="repl_global_and_local_scope">#</a></span></h4>
<p>The default evaluator provides access to any variables that exist in the global
scope. It is possible to expose a variable to the REPL explicitly by assigning
it to the <code>context</code> object associated with each <code>REPLServer</code>.  For example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> repl <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'repl'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">var</span> msg <span class="sh_symbol">=</span> <span class="sh_string">'message'</span><span class="sh_symbol">;</span>

repl<span class="sh_symbol">.</span><span class="sh_function">start</span><span class="sh_symbol">(</span><span class="sh_string">'&gt; '</span><span class="sh_symbol">).</span>context<span class="sh_symbol">.</span>m <span class="sh_symbol">=</span> msg<span class="sh_symbol">;</span>
</code></pre>
<p>Properties in the <code>context</code> object appear as local within the REPL:</p>
<pre class="sh_sourceCode"><code class="lang-js">$ node repl_test<span class="sh_symbol">.</span>js
<span class="sh_symbol">&gt;</span> m
<span class="sh_string">'message'</span>
</code></pre>
<p>It is important to note that context properties are <em>not</em> read-only by default.
To specify read-only globals, context properties must be defined using
<code>Object.defineProperty()</code>:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> repl <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'repl'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">var</span> msg <span class="sh_symbol">=</span> <span class="sh_string">'message'</span><span class="sh_symbol">;</span>

<span class="sh_keyword">const</span> r <span class="sh_symbol">=</span> repl<span class="sh_symbol">.</span><span class="sh_function">start</span><span class="sh_symbol">(</span><span class="sh_string">'&gt; '</span><span class="sh_symbol">);</span>
<span class="sh_predef_func">Object</span><span class="sh_symbol">.</span><span class="sh_function">defineProperty</span><span class="sh_symbol">(</span>r<span class="sh_symbol">,</span> <span class="sh_string">'m'</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{</span>
  configurable<span class="sh_symbol">:</span> <span class="sh_keyword">false</span><span class="sh_symbol">,</span>
  enumerable<span class="sh_symbol">:</span> <span class="sh_keyword">true</span><span class="sh_symbol">,</span>
  value<span class="sh_symbol">:</span> msg
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h4>Accessing Core Node.js Modules<span><a class="mark" href="#repl_accessing_core_node_js_modules" id="repl_accessing_core_node_js_modules">#</a></span></h4>
<p>The default evaluator will automatically load Node.js core modules into the
REPL environment when used. For instance, unless otherwise declared as a
global or scoped variable, the input <code>fs</code> will be evaluated on-demand as
<code>global.fs = require('fs')</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_symbol">&gt;</span> fs<span class="sh_symbol">.</span><span class="sh_function">createReadStream</span><span class="sh_symbol">(</span><span class="sh_string">'./some/file'</span><span class="sh_symbol">);</span>
</code></pre>
<h4>Assignment of the <code>_</code> (underscore) variable<span><a class="mark" href="#repl_assignment_of_the_underscore_variable" id="repl_assignment_of_the_underscore_variable">#</a></span></h4>
<p>The default evaluator will, by default, assign the result of the most recently
evaluated expression to the special variable <code>_</code> (underscore).</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_symbol">&gt;</span> <span class="sh_symbol">[</span> <span class="sh_string">'a'</span><span class="sh_symbol">,</span> <span class="sh_string">'b'</span><span class="sh_symbol">,</span> <span class="sh_string">'c'</span> <span class="sh_symbol">]</span>
<span class="sh_symbol">[</span> <span class="sh_string">'a'</span><span class="sh_symbol">,</span> <span class="sh_string">'b'</span><span class="sh_symbol">,</span> <span class="sh_string">'c'</span> <span class="sh_symbol">]</span>
<span class="sh_symbol">&gt;</span> _<span class="sh_symbol">.</span>length
<span class="sh_number">3</span>
<span class="sh_symbol">&gt;</span> _ <span class="sh_symbol">+=</span> <span class="sh_number">1</span>
<span class="sh_number">4</span>
</code></pre>
<p>Explicitly setting <code>_</code> to a value will disable this behavior.</p>
<h3>Custom Evaluation Functions<span><a class="mark" href="#repl_custom_evaluation_functions" id="repl_custom_evaluation_functions">#</a></span></h3>
<p>When a new <code>repl.REPLServer</code> is created, a custom evaluation function may be
provided. This can be used, for instance, to implement fully customized REPL
applications.</p>
<p>The following illustrates a hypothetical example of a REPL that performs
translation of text from one language to another:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> repl <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'repl'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> Translator <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'translator'</span><span class="sh_symbol">).</span>Translator<span class="sh_symbol">;</span>

<span class="sh_keyword">const</span> myTranslator <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Translator</span><span class="sh_symbol">(</span><span class="sh_string">'en'</span><span class="sh_symbol">,</span> <span class="sh_string">'fr'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">function</span> <span class="sh_function">myEval</span><span class="sh_symbol">(</span>cmd<span class="sh_symbol">,</span> context<span class="sh_symbol">,</span> filename<span class="sh_symbol">,</span> callback<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_function">callback</span><span class="sh_symbol">(</span><span class="sh_keyword">null</span><span class="sh_symbol">,</span> myTranslator<span class="sh_symbol">.</span><span class="sh_function">translate</span><span class="sh_symbol">(</span>cmd<span class="sh_symbol">));</span>
<span class="sh_cbracket">}</span>

repl<span class="sh_symbol">.</span><span class="sh_function">start</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>prompt<span class="sh_symbol">:</span> <span class="sh_string">'&gt; '</span><span class="sh_symbol">,</span> <span class="sh_predef_func">eval</span><span class="sh_symbol">:</span> myEval<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h4>Recoverable Errors<span><a class="mark" href="#repl_recoverable_errors" id="repl_recoverable_errors">#</a></span></h4>
<p>As a user is typing input into the REPL prompt, pressing the <code>&lt;enter&gt;</code> key will
send the current line of input to the <code>eval</code> function. In order to support
multi-line input, the eval function can return an instance of <code>repl.Recoverable</code>
to the provided callback function:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">function</span> <span class="sh_predef_func">eval</span><span class="sh_symbol">(</span>cmd<span class="sh_symbol">,</span> context<span class="sh_symbol">,</span> filename<span class="sh_symbol">,</span> callback<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">var</span> result<span class="sh_symbol">;</span>
  <span class="sh_keyword">try</span> <span class="sh_cbracket">{</span>
    result <span class="sh_symbol">=</span> vm<span class="sh_symbol">.</span><span class="sh_function">runInThisContext</span><span class="sh_symbol">(</span>cmd<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span> <span class="sh_keyword">catch</span> <span class="sh_symbol">(</span>e<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">if</span> <span class="sh_symbol">(</span><span class="sh_function">isRecoverableError</span><span class="sh_symbol">(</span>e<span class="sh_symbol">))</span> <span class="sh_cbracket">{</span>
      <span class="sh_keyword">return</span> <span class="sh_function">callback</span><span class="sh_symbol">(</span><span class="sh_keyword">new</span> repl<span class="sh_symbol">.</span><span class="sh_function">Recoverable</span><span class="sh_symbol">(</span>e<span class="sh_symbol">));</span>
    <span class="sh_cbracket">}</span>
  <span class="sh_cbracket">}</span>
  <span class="sh_function">callback</span><span class="sh_symbol">(</span><span class="sh_keyword">null</span><span class="sh_symbol">,</span> result<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

<span class="sh_keyword">function</span> <span class="sh_function">isRecoverableError</span><span class="sh_symbol">(</span>error<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>error<span class="sh_symbol">.</span>name <span class="sh_symbol">===</span> <span class="sh_string">'SyntaxError'</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">return</span> <span class="sh_regexp">/^(Unexpected end of input|Unexpected token)/</span><span class="sh_symbol">.</span><span class="sh_function">test</span><span class="sh_symbol">(</span>error<span class="sh_symbol">.</span>message<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
  <span class="sh_keyword">return</span> <span class="sh_keyword">false</span><span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span>
</code></pre>
<h3>Customizing REPL Output<span><a class="mark" href="#repl_customizing_repl_output" id="repl_customizing_repl_output">#</a></span></h3>
<p>By default, <code>repl.REPLServer</code> instances format output using the
<a href="https://nodejs.org/api/util.html#util_util_inspect_object_options"><code>util.inspect()</code></a> method before writing the output to the provided Writable
stream (<code>process.stdout</code> by default). The <code>useColors</code> boolean option can be
specified at construction to instruct the default writer to use ANSI style
codes to colorize the output from the <code>util.inspect()</code> method.</p>
<p>It is possible to fully customize the output of a <code>repl.REPLServer</code> instance
by passing a new function in using the <code>writer</code> option on construction. The
following example, for instance, simply converts any input text to upper case:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> repl <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'repl'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> r <span class="sh_symbol">=</span> repl<span class="sh_symbol">.</span><span class="sh_function">start</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>prompt<span class="sh_symbol">:</span> <span class="sh_string">'&gt;'</span><span class="sh_symbol">,</span> <span class="sh_predef_func">eval</span><span class="sh_symbol">:</span> myEval<span class="sh_symbol">,</span> writer<span class="sh_symbol">:</span> myWriter<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_keyword">function</span> <span class="sh_function">myEval</span><span class="sh_symbol">(</span>cmd<span class="sh_symbol">,</span> context<span class="sh_symbol">,</span> filename<span class="sh_symbol">,</span> callback<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_function">callback</span><span class="sh_symbol">(</span><span class="sh_keyword">null</span><span class="sh_symbol">,</span>cmd<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

<span class="sh_keyword">function</span> <span class="sh_function">myWriter</span><span class="sh_symbol">(</span>output<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">return</span> output<span class="sh_symbol">.</span><span class="sh_function">toUpperCase</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span>
</code></pre>
<h2>Class: REPLServer<span><a class="mark" href="#repl_class_replserver" id="repl_class_replserver">#</a></span></h2>
<p>The <code>repl.REPLServer</code> class inherits from the <a href="https://nodejs.org/api/readline.html#readline_class_interface"><code>readline.Interface</code></a> class.
Instances of <code>repl.REPLServer</code> are created using the <code>repl.start()</code> method and
<em>should not</em> be created directly using the JavaScript <code>new</code> keyword.</p>
<h3>Event: 'exit'<span><a class="mark" href="#repl_event_exit" id="repl_event_exit">#</a></span></h3>
<p>The <code>'exit'</code> event is emitted when the REPL is exited either by receiving the
<code>.exit</code> command as input, the user pressing <code>&lt;ctrl&gt;-C</code> twice to signal <code>SIGINT</code>,
or by pressing <code>&lt;ctrl&gt;-D</code> to signal <code>'end'</code> on the input stream. The listener
callback is invoked without any arguments.</p>
<pre class="sh_sourceCode"><code class="lang-js">replServer<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'exit'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Received "exit" event from repl!'</span><span class="sh_symbol">);</span>
  process<span class="sh_symbol">.</span><span class="sh_function">exit</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h3>Event: 'reset'<span><a class="mark" href="#repl_event_reset" id="repl_event_reset">#</a></span></h3>
<p>The <code>'reset'</code> event is emitted when the REPL's context is reset. This occurs
whenever the <code>.clear</code> command is received as input <em>unless</em> the REPL is using
the default evaluator and the <code>repl.REPLServer</code> instance was created with the
<code>useGlobal</code> option set to <code>true</code>. The listener callback will be called with a
reference to the <code>context</code> object as the only argument.</p>
<p>This can be used primarily to re-initialize REPL context to some pre-defined
state as illustrated in the following simple example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> repl <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'repl'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">function</span> <span class="sh_function">initializeContext</span><span class="sh_symbol">(</span>context<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  context<span class="sh_symbol">.</span>m <span class="sh_symbol">=</span> <span class="sh_string">'test'</span><span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span>

<span class="sh_keyword">var</span> r <span class="sh_symbol">=</span> repl<span class="sh_symbol">.</span><span class="sh_function">start</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>prompt<span class="sh_symbol">:</span> <span class="sh_string">'&gt;'</span><span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_function">initializeContext</span><span class="sh_symbol">(</span>r<span class="sh_symbol">.</span>context<span class="sh_symbol">);</span>

r<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'reset'</span><span class="sh_symbol">,</span> initializeContext<span class="sh_symbol">);</span>
</code></pre>
<p>When this code is executed, the global <code>'m'</code> variable can be modified but then
reset to its initial value using the <code>.clear</code> command:</p>
<pre class="sh_sourceCode"><code class="lang-js">$ <span class="sh_symbol">./</span>node example<span class="sh_symbol">.</span>js
<span class="sh_symbol">&gt;</span>m
<span class="sh_string">'test'</span>
<span class="sh_symbol">&gt;</span>m <span class="sh_symbol">=</span> <span class="sh_number">1</span>
<span class="sh_number">1</span>
<span class="sh_symbol">&gt;</span>m
<span class="sh_number">1</span>
<span class="sh_symbol">&gt;.</span>clear
Clearing context<span class="sh_symbol">...</span>
<span class="sh_symbol">&gt;</span>m
<span class="sh_string">'test'</span>
<span class="sh_symbol">&gt;</span>
</code></pre>
<h3>replServer.defineCommand(keyword, cmd)<span><a class="mark" href="#repl_replserver_definecommand_keyword_cmd" id="repl_replserver_definecommand_keyword_cmd">#</a></span></h3>
<div class="signature"><ul>
<li><code>keyword</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The command keyword (<em>without</em> a leading <code>.</code> character).</li>
<li><code>cmd</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> The function to invoke when the command is processed.</li>
</ul>
</div><p>The <code>replServer.defineCommand()</code> method is used to add new <code>.</code>-prefixed commands
to the REPL instance. Such commands are invoked by typing a <code>.</code> followed by the
<code>keyword</code>. The <code>cmd</code> is either a Function or an object with the following
properties:</p>
<ul>
<li><code>help</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> Help text to be displayed when <code>.help</code> is entered (Optional).</li>
<li><code>action</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> The function to execute, optionally accepting a single
string argument.</li>
</ul>
<p>The following example shows two new commands added to the REPL instance:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> repl <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'repl'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">var</span> replServer <span class="sh_symbol">=</span> repl<span class="sh_symbol">.</span><span class="sh_function">start</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>prompt<span class="sh_symbol">:</span> <span class="sh_string">'&gt; '</span><span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
replServer<span class="sh_symbol">.</span><span class="sh_function">defineCommand</span><span class="sh_symbol">(</span><span class="sh_string">'sayhello'</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{</span>
  help<span class="sh_symbol">:</span> <span class="sh_string">'Say hello'</span><span class="sh_symbol">,</span>
  action<span class="sh_symbol">:</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>name<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">this</span><span class="sh_symbol">.</span>lineParser<span class="sh_symbol">.</span><span class="sh_function">reset</span><span class="sh_symbol">();</span>
    <span class="sh_keyword">this</span><span class="sh_symbol">.</span>bufferedCommand <span class="sh_symbol">=</span> <span class="sh_string">''</span><span class="sh_symbol">;</span>
    <span class="sh_keyword">this</span><span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span>`Hello<span class="sh_symbol">,</span> $<span class="sh_cbracket">{</span>name<span class="sh_cbracket">}</span><span class="sh_symbol">!\</span>n`<span class="sh_symbol">);</span>
    <span class="sh_keyword">this</span><span class="sh_symbol">.</span><span class="sh_function">displayPrompt</span><span class="sh_symbol">();</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
replServer<span class="sh_symbol">.</span><span class="sh_function">defineCommand</span><span class="sh_symbol">(</span><span class="sh_string">'saybye'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">this</span><span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'Goodbye!</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
  <span class="sh_keyword">this</span><span class="sh_symbol">.</span><span class="sh_function">close</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>The new commands can then be used from within the REPL instance:</p>
<pre class="sh_sourceCode"><code><span class="sh_symbol">&gt;</span> <span class="sh_symbol">.</span>sayhello Node<span class="sh_symbol">.</span>js User
Hello<span class="sh_symbol">,</span> Node<span class="sh_symbol">.</span>js User<span class="sh_symbol">!</span>
<span class="sh_symbol">&gt;</span> <span class="sh_symbol">.</span>saybye
Goodbye<span class="sh_symbol">!</span>
</code></pre><h3>replServer.displayPrompt([preserveCursor])<span><a class="mark" href="#repl_replserver_displayprompt_preservecursor" id="repl_replserver_displayprompt_preservecursor">#</a></span></h3>
<div class="signature"><ul>
<li><code>preserveCursor</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a></li>
</ul>
</div><p>The <code>replServer.displayPrompt()</code> method readies the REPL instance for input
from the user, printing the configured <code>prompt</code> to a new line in the <code>output</code>
and resuming the <code>input</code> to accept new input.</p>
<p>When multi-line input is being entered, an ellipsis is printed rather than the
'prompt'.</p>
<p>When <code>preserveCursor</code> is <code>true</code>, the cursor placement will not be reset to <code>0</code>.</p>
<p>The <code>replServer.displayPrompt</code> method is primarily intended to be called from
within the action function for commands registered using the
<code>replServer.defineCommand()</code> method.</p>
<h2>repl.start(<a href="#zlib_class_options">options</a>)<span><a class="mark" href="#repl_repl_start_options" id="repl_repl_start_options">#</a></span></h2>
<div class="signature"><ul>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>prompt</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The input prompt to display. Defaults to <code>&gt;</code>.</li>
<li><code>input</code> <span class="type">&lt;Readable&gt;</span> The Readable stream from which REPL input will be read.
Defaults to <code>process.stdin</code>.</li>
<li><code>output</code> <span class="type">&lt;Writable&gt;</span> The Writable stream to which REPL output will be
written. Defaults to <code>process.stdout</code>.</li>
<li><code>terminal</code> <span class="type">&lt;boolean&gt;</span> If <code>true</code>, specifies that the <code>output</code> should be
treated as a a TTY terminal, and have ANSI/VT100 escape codes written to it.
Defaults to checking the value of the <code>isTTY</code> property on the <code>output</code>
stream upon instantiation.</li>
<li><code>eval</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> The function to be used when evaluating each given line
of input. Defaults to an async wrapper for the JavaScript <code>eval()</code>
function.  An <code>eval</code> function can error with <code>repl.Recoverable</code> to indicate
the input was incomplete and prompt for additional lines.</li>
<li><code>useColors</code> <span class="type">&lt;boolean&gt;</span> If <code>true</code>, specifies that the default <code>writer</code>
function should include ANSI color styling to REPL output. If a custom
<code>writer</code> function is provided then this has no effect. Defaults to the
 REPL instances <code>terminal</code> value.</li>
<li><code>useGlobal</code> <span class="type">&lt;boolean&gt;</span> If <code>true</code>, specifies that the default evaluation
 function will use the JavaScript <code>global</code> as the context as opposed to
 creating a new separate context for the REPL instance. Defaults to <code>false</code>.</li>
<li><code>ignoreUndefined</code> <span class="type">&lt;boolean&gt;</span> If <code>true</code>, specifies that the default writer
 will not output the return value of a command if it evaluates to
 <code>undefined</code>. Defaults to <code>false</code>.</li>
<li><code>writer</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> The function to invoke to format the output of each
 command before writing to <code>output</code>. Defaults to <a href="https://nodejs.org/api/util.html#util_util_inspect_object_options"><code>util.inspect()</code></a>.</li>
<li><code>replMode</code> - A flag that specifies whether the default evaluator executes
all JavaScript commands in strict mode, default mode, or a hybrid mode
("magic" mode.) Acceptable values are:<ul>
<li><code>repl.REPL_MODE_SLOPPY</code> - evaluates expressions in sloppy mode.</li>
<li><code>repl.REPL_MODE_STRICT</code> - evaluates expressions in strict mode. This is
equivalent to prefacing every repl statement with <code>'use strict'</code>.</li>
<li><code>repl.REPL_MODE_MAGIC</code> - attempt to evaluates expressions in default
mode.  If expressions fail to parse, re-try in strict mode.</li>
</ul>
</li>
</ul>
</li>
</ul>
</div><p>The <code>repl.start()</code> method creates and starts a <code>repl.REPLServer</code> instance.</p>
<h2>The Node.js REPL<span><a class="mark" href="#repl_the_node_js_repl" id="repl_the_node_js_repl">#</a></span></h2>
<p>Node.js itself uses the <code>repl</code> module to provide its own interactive interface
for executing JavaScript. This can used by executing the Node.js binary without
passing any arguments (or by passing the <code>-i</code> argument):</p>
<pre class="sh_sourceCode"><code class="lang-js">$ node
<span class="sh_symbol">&gt;</span> a <span class="sh_symbol">=</span> <span class="sh_symbol">[</span><span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_number">2</span><span class="sh_symbol">,</span> <span class="sh_number">3</span><span class="sh_symbol">];</span>
<span class="sh_symbol">[</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_number">2</span><span class="sh_symbol">,</span> <span class="sh_number">3</span> <span class="sh_symbol">]</span>
<span class="sh_symbol">&gt;</span> a<span class="sh_symbol">.</span><span class="sh_function">forEach</span><span class="sh_symbol">((</span>v<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
<span class="sh_symbol">...</span>   console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>v<span class="sh_symbol">);</span>
<span class="sh_symbol">...</span>   <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_number">1</span>
<span class="sh_number">2</span>
<span class="sh_number">3</span>
</code></pre>
<h3>Environment Variable Options<span><a class="mark" href="#repl_environment_variable_options" id="repl_environment_variable_options">#</a></span></h3>
<p>Various behaviors of the Node.js REPL can be customized using the following
environment variables:</p>
<ul>
<li><code>NODE_REPL_HISTORY</code> - When a valid path is given, persistent REPL history
will be saved to the specified file rather than <code>.node_repl_history</code> in the
user's home directory. Setting this value to <code>""</code> will disable persistent
REPL history. Whitespace will be trimmed from the value.</li>
<li><code>NODE_REPL_HISTORY_SIZE</code> - Defaults to <code>1000</code>. Controls how many lines of
history will be persisted if history is available. Must be a positive number.</li>
<li><code>NODE_REPL_MODE</code> - May be any of <code>sloppy</code>, <code>strict</code>, or <code>magic</code>. Defaults
to <code>magic</code>, which will automatically run "strict mode only" statements in
strict mode.</li>
</ul>
<h3>Persistent History<span><a class="mark" href="#repl_persistent_history" id="repl_persistent_history">#</a></span></h3>
<p>By default, the Node.js REPL will persist history between <code>node</code> REPL sessions
by saving inputs to a <code>.node_repl_history</code> file located in the user's home
directory. This can be disabled by setting the environment variable
<code>NODE_REPL_HISTORY=""</code>.</p>
<h4>NODE_REPL_HISTORY_FILE<span><a class="mark" href="#repl_node_repl_history_file" id="repl_node_repl_history_file">#</a></span></h4>
<p>   Stability: 0 - Deprecated: Use <code>NODE_REPL_HISTORY</code> instead.</p>
<p>Previously in Node.js/io.js v2.x, REPL history was controlled by using a
<code>NODE_REPL_HISTORY_FILE</code> environment variable, and the history was saved in JSON
format. This variable has now been deprecated, and the old JSON REPL history
file will be automatically converted to a simplified plain text format. This new
file will be saved to either the user's home directory, or a directory defined
by the <code>NODE_REPL_HISTORY</code> variable, as documented in the
<a href="#repl_environment_variable_options">Environment Variable Options</a>.</p>
<h3>Using the Node.js REPL with advanced line-editors<span><a class="mark" href="#repl_using_the_node_js_repl_with_advanced_line_editors" id="repl_using_the_node_js_repl_with_advanced_line_editors">#</a></span></h3>
<p>For advanced line-editors, start Node.js with the environmental variable
<code>NODE_NO_READLINE=1</code>. This will start the main and debugger REPL in canonical
terminal settings which will allow you to use with <code>rlwrap</code>.</p>
<p>For example, you could add this to your bashrc file:</p>
<pre class="sh_sourceCode"><code class="lang-text">alias node<span class="sh_symbol">=</span><span class="sh_string">"env NODE_NO_READLINE=1 rlwrap node"</span>
</code></pre>
<h3>Starting multiple REPL instances against a single running instance<span><a class="mark" href="#repl_starting_multiple_repl_instances_against_a_single_running_instance" id="repl_starting_multiple_repl_instances_against_a_single_running_instance">#</a></span></h3>
<p>It is possible to create and run multiple REPL instances against a single
running instance of Node.js that share a single <code>global</code> object but have
separate I/O interfaces.</p>
<p>The following example, for instance, provides separate REPLs on <code>stdin</code>, a Unix
socket, and a TCP socket:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> net <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'net'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> repl <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'repl'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">var</span> connections <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span>

repl<span class="sh_symbol">.</span><span class="sh_function">start</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>
  prompt<span class="sh_symbol">:</span> <span class="sh_string">'Node.js via stdin&gt; '</span><span class="sh_symbol">,</span>
  input<span class="sh_symbol">:</span> process<span class="sh_symbol">.</span>stdin<span class="sh_symbol">,</span>
  output<span class="sh_symbol">:</span> process<span class="sh_symbol">.</span>stdout
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

net<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">((</span>socket<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  connections <span class="sh_symbol">+=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
  repl<span class="sh_symbol">.</span><span class="sh_function">start</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>
    prompt<span class="sh_symbol">:</span> <span class="sh_string">'Node.js via Unix socket&gt; '</span><span class="sh_symbol">,</span>
    input<span class="sh_symbol">:</span> socket<span class="sh_symbol">,</span>
    output<span class="sh_symbol">:</span> socket
  <span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'exit'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    socket<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">();</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">)</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_string">'/tmp/node-repl-sock'</span><span class="sh_symbol">);</span>

net<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">((</span>socket<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  connections <span class="sh_symbol">+=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
  repl<span class="sh_symbol">.</span><span class="sh_function">start</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>
    prompt<span class="sh_symbol">:</span> <span class="sh_string">'Node.js via TCP socket&gt; '</span><span class="sh_symbol">,</span>
    input<span class="sh_symbol">:</span> socket<span class="sh_symbol">,</span>
    output<span class="sh_symbol">:</span> socket
  <span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'exit'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    socket<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">();</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">5001</span><span class="sh_symbol">);</span>
</code></pre>
<p>Running this application from the command line will start a REPL on stdin.
Other REPL clients may connect through the Unix socket or TCP socket. <code>telnet</code>,
for instance, is useful for connecting to TCP sockets, while <code>socat</code> can be used
to connect to both Unix and TCP sockets.</p>
<p>By starting a REPL from a Unix socket-based server instead of stdin, it is
possible to connect to a long-running Node.js process without restarting it.</p>
<p>For an example of running a "full-featured" (<code>terminal</code>) REPL over
a <code>net.Server</code> and <code>net.Socket</code> instance, see: <a href="https://gist.github.com/2209310">https://gist.github.com/2209310</a></p>
<p>For an example of running a REPL instance over <code>curl(1)</code>,
see: <a href="https://gist.github.com/2053342">https://gist.github.com/2053342</a></p>
<!-- [end-include:repl.md] -->
<!-- [start-include:stream.md] -->
<h1>Stream<span><a class="mark" href="#stream_stream" id="stream_stream">#</a></span></h1>
<pre class="api_stability api_stability_2 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> Stable</pre><p>A stream is an abstract interface for working with streaming data in Node.js.
The <code>stream</code> module provides a base API that makes it easy to build objects
that implement the stream interface.</p>
<p>There are many stream objects provided by Node.js. For instance, a
<a href="https://nodejs.org/api/http.html#http_class_http_incomingmessage">request to an HTTP server</a> and <a href="https://nodejs.org/api/process.html#process_process_stdout"><code>process.stdout</code></a>
are both stream instances.</p>
<p>Streams can be readable, writable, or both. All streams are instances of
<a href="https://nodejs.org/api/events.html#events_class_eventemitter"><code>EventEmitter</code></a>.</p>
<p>The <code>stream</code> module can be accessed using:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> stream <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'stream'</span><span class="sh_symbol">);</span>
</code></pre>
<p>While it is important for all Node.js users to understand how streams works,
the <code>stream</code> module itself is most useful for developer's that are creating new
types of stream instances. Developer's who are primarily <em>consuming</em> stream
objects will rarely (if ever) have need to use the <code>stream</code> module directly.</p>
<h2>Organization of this document<span><a class="mark" href="#stream_organization_of_this_document" id="stream_organization_of_this_document">#</a></span></h2>
<p>This document is divided into two primary sections and third section for
additional notes. The first section explains the elements of the stream API that
are required to <em>use</em> streams within an application. The second section explains
the elements of the API that are required to <em>implement</em> new types of streams.</p>
<h2>Types of Streams<span><a class="mark" href="#stream_types_of_streams" id="stream_types_of_streams">#</a></span></h2>
<p>There are four fundamental stream types within Node.js:</p>
<ul>
<li><a href="#stream_class_stream_readable">Readable</a> - streams from which data can be read (for example
<a href="https://nodejs.org/api/fs.html#fs_fs_createreadstream_path_options"><code>fs.createReadStream()</code></a>).</li>
<li><a href="#stream_class_stream_writable">Writable</a> - streams to which data can be written (for example
[<code>fs.createWriteStream</code>][]).</li>
<li><a href="#stream_class_stream_duplex">Duplex</a> - streams that are both Readable and Writable (for example
<a href="https://nodejs.org/api/net.html#net_class_net_socket"><code>net.Socket</code></a>).</li>
<li><a href="#stream_class_stream_transform">Transform</a> - Duplex streams that can modify or transform the data as it
is written and read (for example <a href="https://nodejs.org/api/zlib.html#zlib_zlib_createdeflate_options"><code>zlib.createDeflate()</code></a>).</li>
</ul>
<h3>Object Mode<span><a class="mark" href="#stream_object_mode" id="stream_object_mode">#</a></span></h3>
<p>All streams created by Node.js APIs operate exclusively on strings and <code>Buffer</code>
objects. It is possible, however, for stream implementations to work with other
types of JavaScript values (with the exception of <code>null</code> which serves a special
purpose within streams). Such streams are considered to operate in "object
mode".</p>
<p>Stream instances are switched into object mode using the <code>objectMode</code> option
when the stream is created. Attempting to switch an existing stream into
object mode is not safe.</p>
<h3>Buffering<span><a class="mark" href="#stream_buffering" id="stream_buffering">#</a></span></h3>
<!--type=misc-->
<p>Both <a href="#stream_class_stream_writable">Writable</a> and <a href="#stream_class_stream_readable">Readable</a> streams will store data in an internal
buffer that can be retrieved using <code>writable._writableState.getBuffer()</code> or
<code>readable._readableState.buffer</code>, respectively.</p>
<p>The amount of data potentially buffered depends on the <code>highWaterMark</code> option
passed into the streams constructor. For normal streams, the <code>highWaterMark</code>
option specifies a total number of bytes. For streams operating in object mode,
the <code>highWaterMark</code> specifies a total number of objects.</p>
<p>Data is buffered in Readable streams when the implementation calls
<a href="#stream_readable_push_chunk_encoding"><code>stream.push(chunk)</code></a>. If the consumer of the Stream does not
call <a href="#stream_readable_read_size"><code>stream.read()</code></a>, the data will sit in the internal
queue until it is consumed.</p>
<p>Once the total size of the internal read buffer reaches the threshold specified
by <code>highWaterMark</code>, the stream will temporarily stop reading data from the
underlying resource until the data currently buffered can be consumed (that is,
the stream will stop calling the internal <code>readable.\_read()</code> method that is
used to fill the read buffer).</p>
<p>Data is buffered in Writable streams when the
<a href="#stream_writable_write_chunk_encoding_callback"><code>writable.write(chunk)</code></a> method is called repeatedly. While the
total size of the internal write buffer is below the threshold set by
<code>highWaterMark</code>, calls to <code>writable.write()</code> will return <code>true</code>. Once the
the size of the internal buffer reaches or exceeds the <code>highWaterMark</code>, <code>false</code>
will be returned.</p>
<p>A key goal of the <code>stream</code> API, an in particular the <a href="#stream_readable_pipe_destination_options"><code>stream.pipe()</code></a> method,
is to limit the buffering of data to acceptable levels such that sources and
destinations of differing speeds will not overwhelm the available memory.</p>
<p>Because <a href="#stream_class_stream_duplex">Duplex</a> and <a href="#stream_class_stream_transform">Transform</a> streams are both Readable and Writable,
each maintain <em>two</em> separate internal buffers used for reading and writing,
allowing each side to operate independently of the other while maintaining an
appropriate and efficient flow of data. For example, <a href="https://nodejs.org/api/net.html#net_class_net_socket"><code>net.Socket</code></a> instances
are <a href="#stream_class_stream_duplex">Duplex</a> streams whose Readable side allows consumption of data received
<em>from</em> the socket and whose Writable side allows writing data <em>to</em> the socket.
Because data may be written to the socket at a faster or slower rate than data
is received, it is important each side operate (and buffer) independently of
the other.</p>
<h2>API for Stream Consumers<span><a class="mark" href="#stream_api_for_stream_consumers" id="stream_api_for_stream_consumers">#</a></span></h2>
<!--type=misc-->
<p>Almost all Node.js applications, no matter how simple, use streams in some
manner. The following is an example of using streams in a Node.js application
that implements an HTTP server:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> http <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'http'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> server <span class="sh_symbol">=</span> http<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">(</span> <span class="sh_symbol">(</span>req<span class="sh_symbol">,</span> res<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// req is an http.IncomingMessage, which is a Readable Stream</span>
  <span class="sh_comment">// res is an http.ServerResponse, which is a Writable Stream</span>

  <span class="sh_keyword">var</span> body <span class="sh_symbol">=</span> <span class="sh_string">''</span><span class="sh_symbol">;</span>
  <span class="sh_comment">// Get the data as utf8 strings.</span>
  <span class="sh_comment">// If an encoding is not set, Buffer objects will be received.</span>
  req<span class="sh_symbol">.</span><span class="sh_function">setEncoding</span><span class="sh_symbol">(</span><span class="sh_string">'utf8'</span><span class="sh_symbol">);</span>

  <span class="sh_comment">// Readable streams emit 'data' events once a listener is added</span>
  req<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>chunk<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    body <span class="sh_symbol">+=</span> chunk<span class="sh_symbol">;</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

  <span class="sh_comment">// the end event indicates that the entire body has been received</span>
  req<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">try</span> <span class="sh_cbracket">{</span>
      <span class="sh_keyword">const</span> data <span class="sh_symbol">=</span> JSON<span class="sh_symbol">.</span><span class="sh_function">parse</span><span class="sh_symbol">(</span>body<span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span> <span class="sh_keyword">catch</span> <span class="sh_symbol">(</span>er<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
      <span class="sh_comment">// uh oh!  bad json!</span>
      res<span class="sh_symbol">.</span>statusCode <span class="sh_symbol">=</span> <span class="sh_number">400</span><span class="sh_symbol">;</span>
      <span class="sh_keyword">return</span> res<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span>`error<span class="sh_symbol">:</span> $<span class="sh_cbracket">{</span>er<span class="sh_symbol">.</span>message<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span>

    <span class="sh_comment">// write back something interesting to the user:</span>
    res<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_keyword">typeof</span> data<span class="sh_symbol">);</span>
    res<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">();</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

server<span class="sh_symbol">.</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">1337</span><span class="sh_symbol">);</span>

<span class="sh_comment">// $ curl localhost:1337 -d '{}'</span>
<span class="sh_comment">// object</span>
<span class="sh_comment">// $ curl localhost:1337 -d '"foo"'</span>
<span class="sh_comment">// string</span>
<span class="sh_comment">// $ curl localhost:1337 -d 'not json'</span>
<span class="sh_comment">// error: Unexpected token o</span>
</code></pre>
<p><a href="#stream_class_stream_writable">Writable</a> streams (such as <code>res</code> in the example) expose methods such as
<code>write()</code> and <code>end()</code> that are used to write data onto the stream.</p>
<p><a href="#stream_class_stream_readable">Readable</a> streams use the <a href="https://nodejs.org/api/events.html#events_class_eventemitter"><code>EventEmitter</code></a> API for notifying application
code when data is available to be read off the stream. That available data can
be read from the stream in multiple ways.</p>
<p>Both <a href="#stream_class_stream_writable">Writable</a> and <a href="#stream_class_stream_readable">Readable</a> streams use the <a href="https://nodejs.org/api/events.html#events_class_eventemitter"><code>EventEmitter</code></a> API in
various ways to communicate the current state of the stream.</p>
<p><a href="#stream_class_stream_duplex">Duplex</a> and <a href="#stream_class_stream_transform">Transform</a> streams are both <a href="#stream_class_stream_writable">Writable</a> and <a href="#stream_class_stream_readable">Readable</a>.</p>
<p>Applications that are either writing data to or consuming data from a stream
are not required to implement the stream interfaces directly and will generally
have no reason to call <code>require('stream')</code>.</p>
<p>Developers wishing to implement new types of streams should refer to the
section <a href="#stream_api_for_stream_Implemeters">API for Stream Implemeters</a>.</p>
<h3>Writable Streams<span><a class="mark" href="#stream_writable_streams" id="stream_writable_streams">#</a></span></h3>
<p>Writable streams are an abstraction for a <em>destination</em> to which data is
written.</p>
<p>Examples of <a href="#stream_class_stream_writable">Writable</a> streams include:</p>
<ul>
<li><a href="https://nodejs.org/api/http.html#http_class_http_clientrequest">HTTP requests, on the client</a></li>
<li><a href="https://nodejs.org/api/http.html#http_class_http_serverresponse">HTTP responses, on the server</a></li>
<li><a href="https://nodejs.org/api/fs.html#fs_class_fs_writestream">fs write streams</a></li>
<li><a href="https://nodejs.org/api/zlib.html">zlib streams</a></li>
<li><a href="https://nodejs.org/api/crypto.html">crypto streams</a></li>
<li><a href="https://nodejs.org/api/net.html#net_class_net_socket">TCP sockets</a></li>
<li><a href="https://nodejs.org/api/child_process.html#child_process_child_stdin">child process stdin</a></li>
<li><a href="https://nodejs.org/api/process.html#process_process_stdout"><code>process.stdout</code></a>, <a href="https://nodejs.org/api/process.html#process_process_stderr"><code>process.stderr</code></a></li>
</ul>
<p><em>Note</em>: Some of these examples are actually <a href="#stream_class_stream_duplex">Duplex</a> streams that implement
the <a href="#stream_class_stream_writable">Writable</a> interface.</p>
<p>All <a href="#stream_class_stream_writable">Writable</a> streams implement the interface defined by the
<code>stream.Writable</code> class.</p>
<p>While specific instances of <a href="#stream_class_stream_writable">Writable</a> streams may differ in various ways,
all Writable streams follow the same fundamental usage pattern as illustrated
in the example below:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> myStream <span class="sh_symbol">=</span> <span class="sh_function">getWritableStreamSomehow</span><span class="sh_symbol">();</span>
myStream<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'some data'</span><span class="sh_symbol">);</span>
myStream<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'some more data'</span><span class="sh_symbol">);</span>
myStream<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'done writing data'</span><span class="sh_symbol">);</span>
</code></pre>
<h4>Class: stream.Writable<span><a class="mark" href="#stream_class_stream_writable" id="stream_class_stream_writable">#</a></span></h4>
<!--type=class-->
<h5>Event: 'close'<span><a class="mark" href="#stream_event_close" id="stream_event_close">#</a></span></h5>
<p>The <code>'close'</code> event is emitted when the stream and any of its underlying
resources (a file descriptor, for example) have been closed. The event indicates
that no more events will be emitted, and no further computation will occur.</p>
<p>Not all Writable streams will emit the <code>'close'</code> event.</p>
<h5>Event: 'drain'<span><a class="mark" href="#stream_event_drain" id="stream_event_drain">#</a></span></h5>
<p>If a call to <a href="#stream_writable_write_chunk_encoding_callback"><code>stream.write(chunk)</code></a> returns <code>false</code>, the
<code>'drain'</code> event will be emitted when it is appropriate to resume writing data
to the stream.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// Write the data to the supplied writable stream one million times.</span>
<span class="sh_comment">// Be attentive to back-pressure.</span>
<span class="sh_keyword">function</span> <span class="sh_function">writeOneMillionTimes</span><span class="sh_symbol">(</span>writer<span class="sh_symbol">,</span> data<span class="sh_symbol">,</span> encoding<span class="sh_symbol">,</span> callback<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">var</span> i <span class="sh_symbol">=</span> <span class="sh_number">1000000</span><span class="sh_symbol">;</span>
  <span class="sh_function">write</span><span class="sh_symbol">();</span>
  <span class="sh_keyword">function</span> <span class="sh_function">write</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">var</span> ok <span class="sh_symbol">=</span> <span class="sh_keyword">true</span><span class="sh_symbol">;</span>
    <span class="sh_keyword">do</span> <span class="sh_cbracket">{</span>
      i<span class="sh_symbol">--;</span>
      <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">===</span> <span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
        <span class="sh_comment">// last time!</span>
        writer<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span>data<span class="sh_symbol">,</span> encoding<span class="sh_symbol">,</span> callback<span class="sh_symbol">);</span>
      <span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
        <span class="sh_comment">// see if we should continue, or wait</span>
        <span class="sh_comment">// don't pass the callback, because we're not done yet.</span>
        ok <span class="sh_symbol">=</span> writer<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span>data<span class="sh_symbol">,</span> encoding<span class="sh_symbol">);</span>
      <span class="sh_cbracket">}</span>
    <span class="sh_cbracket">}</span> <span class="sh_keyword">while</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">&gt;</span> <span class="sh_number">0</span> <span class="sh_symbol">&amp;&amp;</span> ok<span class="sh_symbol">);</span>
    <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">&gt;</span> <span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
      <span class="sh_comment">// had to stop early!</span>
      <span class="sh_comment">// write some more once it drains</span>
      writer<span class="sh_symbol">.</span><span class="sh_function">once</span><span class="sh_symbol">(</span><span class="sh_string">'drain'</span><span class="sh_symbol">,</span> write<span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>
</code></pre>
<h5>Event: 'error'<span><a class="mark" href="#stream_event_error" id="stream_event_error">#</a></span></h5>
<div class="signature"><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" class="type">&lt;Error&gt;</a></li>
</ul>
</div><p>The <code>'error'</code> event is emitted if an error occurred while writing or piping
data. The listener callback is passed a single <code>Error</code> argument when called.</p>
<p><em>Note</em>: The stream is not closed when the <code>'error'</code> event is emitted.</p>
<h5>Event: 'finish'<span><a class="mark" href="#stream_event_finish" id="stream_event_finish">#</a></span></h5>
<p>The <code>'finish'</code> event is emitted after the <a href="#stream_writable_end_chunk_encoding_callback"><code>stream.end()</code></a> method
has been called, and all data has been flushed to the underlying system.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> writer <span class="sh_symbol">=</span> <span class="sh_function">getWritableStreamSomehow</span><span class="sh_symbol">();</span>
<span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_keyword">var</span> i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> <span class="sh_number">100</span><span class="sh_symbol">;</span> i <span class="sh_symbol">++)</span> <span class="sh_cbracket">{</span>
  writer<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'hello, #${i}!</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>
writer<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'This is the end</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
writer<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'finish'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span><span class="sh_string">'All writes are now complete.'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h5>Event: 'pipe'<span><a class="mark" href="#stream_event_pipe" id="stream_event_pipe">#</a></span></h5>
<div class="signature"><ul>
<li><code>src</code> <a href="https://nodejs.org/api/stream.html#stream_class_stream_readable" class="type">&lt;stream.Readable&gt;</a> source stream that is piping to this writable</li>
</ul>
</div><p>The <code>'pipe'</code> event is emitted when the <a href="#stream_readable_pipe_destination_options"><code>stream.pipe()</code></a> method is called on
a readable stream, adding this writable to its set of destinations.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> writer <span class="sh_symbol">=</span> <span class="sh_function">getWritableStreamSomehow</span><span class="sh_symbol">();</span>
<span class="sh_keyword">const</span> reader <span class="sh_symbol">=</span> <span class="sh_function">getReadableStreamSomehow</span><span class="sh_symbol">();</span>
writer<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'pipe'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>src<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span><span class="sh_string">'something is piping into the writer'</span><span class="sh_symbol">);</span>
  assert<span class="sh_symbol">.</span><span class="sh_function">equal</span><span class="sh_symbol">(</span>src<span class="sh_symbol">,</span> reader<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
reader<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>writer<span class="sh_symbol">);</span>
</code></pre>
<h5>Event: 'unpipe'<span><a class="mark" href="#stream_event_unpipe" id="stream_event_unpipe">#</a></span></h5>
<div class="signature"><ul>
<li><code>src</code> <span class="type">&lt;<a href="#stream_class_stream_readable">Readable</a> Stream&gt;</span> The source stream that
<a href="#stream_readable_unpipe_destination">unpiped</a> this writable</li>
</ul>
</div><p>The <code>'unpipe'</code> event is emitted when the <a href="#stream_readable_unpipe_destination"><code>stream.unpipe()</code></a> method is called
on a <a href="#stream_class_stream_readable">Readable</a> stream, removing this <a href="#stream_class_stream_writable">Writable</a> from its set of
destinations.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> writer <span class="sh_symbol">=</span> <span class="sh_function">getWritableStreamSomehow</span><span class="sh_symbol">();</span>
<span class="sh_keyword">const</span> reader <span class="sh_symbol">=</span> <span class="sh_function">getReadableStreamSomehow</span><span class="sh_symbol">();</span>
writer<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'unpipe'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>src<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span><span class="sh_string">'Something has stopped piping into the writer.'</span><span class="sh_symbol">);</span>
  assert<span class="sh_symbol">.</span><span class="sh_function">equal</span><span class="sh_symbol">(</span>src<span class="sh_symbol">,</span> reader<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
reader<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>writer<span class="sh_symbol">);</span>
reader<span class="sh_symbol">.</span><span class="sh_function">unpipe</span><span class="sh_symbol">(</span>writer<span class="sh_symbol">);</span>
</code></pre>
<h5>writable.cork()<span><a class="mark" href="#stream_writable_cork" id="stream_writable_cork">#</a></span></h5>
<p>The <code>writable.cork()</code> method forces all written data to be buffered in memory.
The buffered data will be flushed when either the <a href="#stream_writable_uncork"><code>stream.uncork()</code></a> or
<a href="#stream_writable_end_chunk_encoding_callback"><code>stream.end()</code></a> methods are called.</p>
<p>The primary intent of <code>writable.cork()</code> is to avoid a situation where writing
many small chunks of data to a stream do not cause an backup in the internal
buffer that would have an adverse impact on performance. In such situations,
implementations that implement the <code>writable.\_writev()</code> method can perform
buffered writes in a more optimized manner.</p>
<h5>writable.end([chunk][, encoding][, callback])<span><a class="mark" href="#stream_writable_end_chunk_encoding_callback" id="stream_writable_end_chunk_encoding_callback">#</a></span></h5>
<div class="signature"><ul>
<li><code>chunk</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <span class="type">&lt;any&gt;</span> Optional data to write. For streams not operating
in object mode, <code>chunk</code> must be a string or a <code>Buffer</code>. For object mode
streams, <code>chunk</code> may be any JavaScript value other than <code>null</code>.</li>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The encoding, if <code>chunk</code> is a String</li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> Optional callback for when the stream is finished</li>
</ul>
</div><p>Calling the <code>writable.end()</code> method signals that no more data will be written
to the <a href="#stream_class_stream_writable">Writable</a>. The optional <code>chunk</code> and <code>encoding</code> arguments allow one
final additional chunk of data to be written immediately before closing the
stream. If provided, the optional <code>callback</code> function is attached as a listener
for the <a href="#stream_event_finish"><code>'finish'</code></a> event.</p>
<p>Calling the <a href="#stream_writable_write_chunk_encoding_callback"><code>stream.write()</code></a> method after calling
<a href="#stream_writable_end_chunk_encoding_callback"><code>stream.end()</code></a> will raise an error.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// write 'hello, ' and then end with 'world!'</span>
<span class="sh_keyword">const</span> file <span class="sh_symbol">=</span> fs<span class="sh_symbol">.</span><span class="sh_function">createWriteStream</span><span class="sh_symbol">(</span><span class="sh_string">'example.txt'</span><span class="sh_symbol">);</span>
file<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'hello, '</span><span class="sh_symbol">);</span>
file<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'world!'</span><span class="sh_symbol">);</span>
<span class="sh_comment">// writing more now is not allowed!</span>
</code></pre>
<h5>writable.setDefaultEncoding(encoding)<span><a class="mark" href="#stream_writable_setdefaultencoding_encoding" id="stream_writable_setdefaultencoding_encoding">#</a></span></h5>
<div class="signature"><ul>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The new default encoding</li>
<li>Return: <code>this</code></li>
</ul>
</div><p>The <code>writable.setDefaultEncoding()</code> method sets the default <code>encoding</code> for a
<a href="#stream_class_stream_writable">Writable</a> stream.</p>
<h5>writable.uncork()<span><a class="mark" href="#stream_writable_uncork" id="stream_writable_uncork">#</a></span></h5>
<p>The <code>writable.uncork()</code> method flushes all data buffered since
<a href="#stream_writable_cork"><code>stream.cork()</code></a> was called.</p>
<p>When using <code>writable.cork()</code> and <code>writable.uncork()</code> to manage the buffering
of writes to a stream, it is recommended that calls to <code>writable.uncork()</code> be
deferred using <code>process.nextTick()</code>. Doing so allows batching of all
<code>writable.write()</code> calls that occur within a given Node.js event loop phase.</p>
<pre class="sh_sourceCode"><code class="lang-js">stream<span class="sh_symbol">.</span><span class="sh_function">cork</span><span class="sh_symbol">();</span>
stream<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'some '</span><span class="sh_symbol">);</span>
stream<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'data '</span><span class="sh_symbol">);</span>
process<span class="sh_symbol">.</span><span class="sh_function">nextTick</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> stream<span class="sh_symbol">.</span><span class="sh_function">uncork</span><span class="sh_symbol">());</span>
</code></pre>
<p>If the <code>writable.cork()</code> method is called multiple times on a stream, the same
number of calls to <code>writable.uncork()</code> must be called to flush the buffered
data.</p>
<pre class="sh_sourceCode"><code>stream<span class="sh_symbol">.</span><span class="sh_function">cork</span><span class="sh_symbol">();</span>
stream<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'some '</span><span class="sh_symbol">);</span>
stream<span class="sh_symbol">.</span><span class="sh_function">cork</span><span class="sh_symbol">();</span>
stream<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'data '</span><span class="sh_symbol">);</span>
process<span class="sh_symbol">.</span><span class="sh_function">nextTick</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  stream<span class="sh_symbol">.</span><span class="sh_function">uncork</span><span class="sh_symbol">();</span>
  <span class="sh_comment">// The data will not be flushed until uncork() is called a second time.</span>
  stream<span class="sh_symbol">.</span><span class="sh_function">uncork</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre><h5>writable.write(chunk[, encoding][, callback])<span><a class="mark" href="#stream_writable_write_chunk_encoding_callback" id="stream_writable_write_chunk_encoding_callback">#</a></span></h5>
<div class="signature"><ul>
<li><code>chunk</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> The data to write</li>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The encoding, if <code>chunk</code> is a String</li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> Callback for when this chunk of data is flushed</li>
<li>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> <code>false</code> if the stream wishes for the calling code to
wait for the <code>'drain'</code> event to be emitted before continuing to write
additional data; otherwise <code>true</code>.</li>
</ul>
</div><p>The <code>writable.write()</code> method writes some data to the stream, and calls the
supplied <code>callback</code> once the data has been fully handled. If an error
occurs, the <code>callback</code> <em>may or may not</em> be called with the error as its
first argument. To reliably detect write errors, add a listener for the
<code>'error'</code> event.</p>
<p>The return value indicates whether the written <code>chunk</code> was buffered internally
and the buffer has exceeded the <code>highWaterMark</code> configured when the stream was
created. If <code>false</code> is returned, further attempts to write data to the stream
should be paused until the <code>'drain'</code> event is emitted.</p>
<p>A Writable stream in object mode will always ignore the <code>encoding</code> argument.</p>
<h3>Readable Streams<span><a class="mark" href="#stream_readable_streams" id="stream_readable_streams">#</a></span></h3>
<p>Readable streams are an abstraction for a <em>source</em> from which data is
consumed.</p>
<p>Examples of Readable streams include:</p>
<ul>
<li><a href="https://nodejs.org/api/http.html#http_class_http_incomingmessage">HTTP responses, on the client</a></li>
<li><a href="https://nodejs.org/api/http.html#http_class_http_incomingmessage">HTTP requests, on the server</a></li>
<li><a href="https://nodejs.org/api/fs.html#fs_class_fs_readstream">fs read streams</a></li>
<li><a href="https://nodejs.org/api/zlib.html">zlib streams</a></li>
<li><a href="https://nodejs.org/api/crypto.html">crypto streams</a></li>
<li><a href="https://nodejs.org/api/net.html#net_class_net_socket">TCP sockets</a></li>
<li><a href="https://nodejs.org/api/child_process.html#child_process_child_stdout">child process stdout and stderr</a></li>
<li><a href="https://nodejs.org/api/process.html#process_process_stdin"><code>process.stdin</code></a></li>
</ul>
<p>All <a href="#stream_class_stream_readable">Readable</a> streams implement the interface defined by the
<code>stream.Readable</code> class.</p>
<h4>Two Modes<span><a class="mark" href="#stream_two_modes" id="stream_two_modes">#</a></span></h4>
<p>Readable streams effectively operate in one of two modes: flowing and paused.</p>
<p>When in flowing mode, data is read from the underlying system automatically
and provided to an application as quickly as possible using events via the
<a href="https://nodejs.org/api/events.html#events_class_eventemitter"><code>EventEmitter</code></a> interface.</p>
<p>In paused mode, the <a href="#stream_readable_read_size"><code>stream.read()</code></a> method must be called
explicitly to read chunks of data from the stream.</p>
<p>All <a href="#stream_class_stream_readable">Readable</a> streams begin in paused mode but can be switched to flowing
mode in one of the following ways:</p>
<ul>
<li>Adding a <a href="#stream_event_data"><code>'data'</code></a> event handler.</li>
<li>Calling the <a href="#stream_readable_resume"><code>stream.resume()</code></a> method.</li>
<li>Calling the <a href="#stream_readable_pipe_destination_options"><code>stream.pipe()</code></a> method to send the data to a <a href="#stream_class_stream_writable">Writable</a>.</li>
</ul>
<p>The Readable can switch back to paused mode using one of the following:</p>
<ul>
<li>If there are no pipe destinations, by calling the
<a href="#stream_readable_pause"><code>stream.pause()</code></a> method.</li>
<li>If there are pipe destinations, by removing any <a href="#stream_event_data"><code>'data'</code></a> event
handlers, and removing all pipe destinations by calling the
<a href="#stream_readable_unpipe_destination"><code>stream.unpipe()</code></a> method.</li>
</ul>
<p>The important concept to remember is that a Readable will not generate data
until a mechanism for either consuming or ignoring that data is provided. If
the consuming mechanism is disabled or taken away, the Readable will <em>attempt</em>
to stop generating the data.</p>
<p><em>Note</em>: For backwards compatibility reasons, removing <a href="#stream_event_data"><code>'data'</code></a> event
handlers will <strong>not</strong> automatically pause the stream. Also, if there are piped
destinations, then calling <a href="#stream_readable_pause"><code>stream.pause()</code></a> will not guarantee
that the stream will <em>remain</em> paused once those destinations drain and ask for
more data.</p>
<p><em>Note</em>: If a <a href="#stream_class_stream_readable">Readable</a> is switched into flowing mode and there are no
consumers available handle the data, that data will be lost. This can occur,
for instance, when the <code>readable.resume()</code> method is called without a listener
attached to the <code>'data'</code> event, or when a <code>'data'</code> event handler is removed
from the stream.</p>
<h4>Three States<span><a class="mark" href="#stream_three_states" id="stream_three_states">#</a></span></h4>
<p>The "two modes" of operation for a Readable stream are a simplified abstraction
for the more complicated internal state management that is happening within the
Readable stream implementation.</p>
<p>Specifically, at any given point in time, every Readable is in one of three
possible states:</p>
<ul>
<li><code>readable._readableState.flowing = null</code></li>
<li><code>readable._readableState.flowing = false</code></li>
<li><code>readable._readableState.flowing = true</code></li>
</ul>
<p>When <code>readable._readableState.flowing</code> is <code>null</code>, no mechanism for consuming the
streams data is provided so the stream will not generate its data.</p>
<p>Attaching a listener for the <code>'data'</code> event, calling the <code>readable.pipe()</code>
method, or calling the <code>readable.resume()</code> method will switch
<code>readable._readableState.flowing</code> to <code>true</code>, causing the Readable to begin
actively emitting events as data is generated.</p>
<p>Calling <code>readable.pause()</code>, <code>readable.unpipe()</code>, or receiving "back pressure"
will cause the <code>readable._readableState.flowing</code> to be set as <code>false</code>,
temporarily halting the flowing of events but <em>not</em> halting the generation of
data.</p>
<p>While <code>readable._readableState.flowing</code> is <code>false</code>, data may be accumulating
within the streams internal buffer.</p>
<h4>Choose One<span><a class="mark" href="#stream_choose_one" id="stream_choose_one">#</a></span></h4>
<p>The Readable stream API evolved across multiple Node.js versions and provides
multiple methods of consuming stream data. In general, developers should choose
<em>one</em> of the methods of consuming data and <em>should never</em> use multiple methods
to consume data from a single stream.</p>
<p>Use of the <code>readable.pipe()</code> method is recommended for most users as it has been
implemented to provide the easiest way of consuming stream data. Developers that
require more fine-grained control over the transfer and generation of data can
use the <a href="https://nodejs.org/api/events.html#events_class_eventemitter"><code>EventEmitter</code></a> and <code>readable.pause()</code>/<code>readable.resume()</code> APIs.</p>
<h4>Class: stream.Readable<span><a class="mark" href="#stream_class_stream_readable" id="stream_class_stream_readable">#</a></span></h4>
<!--type=class-->
<h5>Event: 'close'<span><a class="mark" href="#stream_event_close_1" id="stream_event_close_1">#</a></span></h5>
<p>The <code>'close'</code> event is emitted when the stream and any of its underlying
resources (a file descriptor, for example) have been closed. The event indicates
that no more events will be emitted, and no further computation will occur.</p>
<p>Not all <a href="#stream_class_stream_readable">Readable</a> streams will emit the <code>'close'</code> event.</p>
<h5>Event: 'data'<span><a class="mark" href="#stream_event_data" id="stream_event_data">#</a></span></h5>
<div class="signature"><ul>
<li><code>chunk</code> <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <span class="type">&lt;any&gt;</span> The chunk of data. For streams that are not
operating in object mode, the chunk will be either a string or <code>Buffer</code>.
For streams that are in object mode, the chunk can be any JavaScript value
other than <code>null</code>.</li>
</ul>
</div><p>The <code>'data'</code> event is emitted whenever the stream is relinquishing ownership of
a chunk of data to a consumer. This may occur whenever the stream is switched
in flowing mode by calling <code>readable.pipe()</code>, <code>readable.resume()</code>, or by
attaching a listener callback to the <code>'data'</code> event. The <code>'data'</code> event will
also be emitted whenever the <code>readable.read()</code> method is called and a chunk of
data is available to be returned.</p>
<p>Attaching a <code>'data'</code> event listener to a stream that has not been explicitly
paused will switch the stream into flowing mode. Data will then be passed as
soon as it is available.</p>
<p>The listener callback will be passed the chunk of data as a string if a default
encoding has been specified for the stream using the
<code>readable.setEncoding()</code> method; otherwise the data will be passed as a
<code>Buffer</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> readable <span class="sh_symbol">=</span> <span class="sh_function">getReadableStreamSomehow</span><span class="sh_symbol">();</span>
readable<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>chunk<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Received $<span class="sh_cbracket">{</span>chunk<span class="sh_symbol">.</span>length<span class="sh_cbracket">}</span> bytes of data<span class="sh_symbol">.</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h5>Event: 'end'<span><a class="mark" href="#stream_event_end" id="stream_event_end">#</a></span></h5>
<p>The <code>'end'</code> event is emitted when there is no more data to be consumed from
the stream.</p>
<p><em>Note</em>: The <code>'end'</code> event <strong>will not be emitted</strong> unless the data is
completely consumed. This can be accomplished by switching the stream into
flowing mode, or by calling <a href="#stream_readable_read_size"><code>stream.read()</code></a> repeatedly until
all data has been consumed.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> readable <span class="sh_symbol">=</span> <span class="sh_function">getReadableStreamSomehow</span><span class="sh_symbol">();</span>
readable<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>chunk<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Received $<span class="sh_cbracket">{</span>chunk<span class="sh_symbol">.</span>length<span class="sh_cbracket">}</span> bytes of data<span class="sh_symbol">.</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
readable<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'There will be no more data.'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h5>Event: 'error'<span><a class="mark" href="#stream_event_error_1" id="stream_event_error_1">#</a></span></h5>
<div class="signature"><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" class="type">&lt;Error&gt;</a></li>
</ul>
</div><p>The <code>'error'</code> event may be emitted by a Readable implementation at any time.
Typically, this may occur if the underlying stream in unable to generate data
due to an underlying internal failure, or when a stream implementation attempts
to push an invalid chunk of data.</p>
<p>The listener callback will be passed a single <code>Error</code> object.</p>
<h5>Event: 'readable'<span><a class="mark" href="#stream_event_readable" id="stream_event_readable">#</a></span></h5>
<p>The <code>'readable'</code> event is emitted when there is data available to be read from
the stream. In some cases, attaching a listener for the <code>'readable'</code> event will
cause some amount of data to be read into an internal buffer.</p>
<pre class="sh_sourceCode"><code class="lang-javascript"><span class="sh_keyword">const</span> readable <span class="sh_symbol">=</span> <span class="sh_function">getReadableStreamSomehow</span><span class="sh_symbol">();</span>
readable<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'readable'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// there is some data to read now</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>The <code>'readable'</code> event will also be emitted once the end of the stream data
has been reached but before the <code>'end'</code> event is emitted.</p>
<p>Effectively, the <code>'readable'</code> event indicates that the stream has new
information: either new data is available or the end of the stream has been
reached. In the former case, <a href="#stream_readable_read_size"><code>stream.read()</code></a> will return the
available data. In the latter case, <a href="#stream_readable_read_size"><code>stream.read()</code></a> will return
<code>null</code>. For instance, in the following example, <code>foo.txt</code> is an empty file:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> fs <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'fs'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> rr <span class="sh_symbol">=</span> fs<span class="sh_symbol">.</span><span class="sh_function">createReadStream</span><span class="sh_symbol">(</span><span class="sh_string">'foo.txt'</span><span class="sh_symbol">);</span>
rr<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'readable'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'readable:'</span><span class="sh_symbol">,</span> rr<span class="sh_symbol">.</span><span class="sh_function">read</span><span class="sh_symbol">());</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
rr<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>The output of running this script is:</p>
<pre class="sh_sourceCode"><code>$ node test<span class="sh_symbol">.</span>js
readable<span class="sh_symbol">:</span> <span class="sh_keyword">null</span>
end
</code></pre><p><em>Note</em>: In general, the <code>readable.pipe()</code> and <code>'data'</code> event mechanisms are
preferred over the use of the <code>'readable'</code> event.</p>
<h5>readable.isPaused()<span><a class="mark" href="#stream_readable_ispaused" id="stream_readable_ispaused">#</a></span></h5>
<div class="signature"><ul>
<li>Return: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a></li>
</ul>
</div><p>The <code>readable.isPaused()</code> method returns the current operating state of the
Readable. This is used primarily by the mechanism that underlies the
<code>readable.pipe()</code> method. In most typical cases, there will be no reason to
use this method directly.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> readable <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> stream<span class="sh_symbol">.</span>Readable

readable<span class="sh_symbol">.</span><span class="sh_function">isPaused</span><span class="sh_symbol">()</span> <span class="sh_comment">// === false</span>
readable<span class="sh_symbol">.</span><span class="sh_function">pause</span><span class="sh_symbol">()</span>
readable<span class="sh_symbol">.</span><span class="sh_function">isPaused</span><span class="sh_symbol">()</span> <span class="sh_comment">// === true</span>
readable<span class="sh_symbol">.</span><span class="sh_function">resume</span><span class="sh_symbol">()</span>
readable<span class="sh_symbol">.</span><span class="sh_function">isPaused</span><span class="sh_symbol">()</span> <span class="sh_comment">// === false</span>
</code></pre>
<h5>readable.pause()<span><a class="mark" href="#stream_readable_pause" id="stream_readable_pause">#</a></span></h5>
<div class="signature"><ul>
<li>Return: <code>this</code></li>
</ul>
</div><p>The <code>readable.pause()</code> method will cause a stream in flowing mode to stop
emitting <a href="#stream_event_data"><code>'data'</code></a> events, switching out of flowing mode. Any data that
becomes available will remain in the internal buffer.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> readable <span class="sh_symbol">=</span> <span class="sh_function">getReadableStreamSomehow</span><span class="sh_symbol">();</span>
readable<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>chunk<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Received $<span class="sh_cbracket">{</span>chunk<span class="sh_symbol">.</span>length<span class="sh_cbracket">}</span> bytes of data<span class="sh_symbol">.</span>`<span class="sh_symbol">);</span>
  readable<span class="sh_symbol">.</span><span class="sh_function">pause</span><span class="sh_symbol">();</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'There will be no additional data for 1 second.'</span><span class="sh_symbol">);</span>
  <span class="sh_function">setTimeout</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Now data will start flowing again.'</span><span class="sh_symbol">);</span>
    readable<span class="sh_symbol">.</span><span class="sh_function">resume</span><span class="sh_symbol">();</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">1000</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h5>readable.pipe(destination[, options])<span><a class="mark" href="#stream_readable_pipe_destination_options" id="stream_readable_pipe_destination_options">#</a></span></h5>
<div class="signature"><ul>
<li><code>destination</code> <a href="https://nodejs.org/api/stream.html#stream_class_stream_writable" class="type">&lt;stream.Writable&gt;</a> The destination for writing data</li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> Pipe options<ul>
<li><code>end</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> End the writer when the reader ends. Defaults to <code>true</code>.</li>
</ul>
</li>
</ul>
</div><p>The <code>readable.pipe()</code> method attaches a <a href="#stream_class_stream_writable">Writable</a> stream to the <code>readable</code>,
causing it to switch automatically into flowing mode and push all of its data
to the attached <a href="#stream_class_stream_writable">Writable</a>. The flow of data will be automatically managed so
that the destination Writable stream is not overwhelmed by a faster Readable
stream.</p>
<p>The following example pipes all of the data from the <code>readable</code> into a file
named <code>file.txt</code>:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> readable <span class="sh_symbol">=</span> <span class="sh_function">getReadableStreamSomehow</span><span class="sh_symbol">();</span>
<span class="sh_keyword">const</span> writable <span class="sh_symbol">=</span> fs<span class="sh_symbol">.</span><span class="sh_function">createWriteStream</span><span class="sh_symbol">(</span><span class="sh_string">'file.txt'</span><span class="sh_symbol">);</span>
<span class="sh_comment">// All the data from readable goes into 'file.txt'</span>
readable<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>writable<span class="sh_symbol">);</span>
</code></pre>
<p>It is possible to attach multiple Writable streams to a single Readable stream.</p>
<p>The <code>readable.pipe()</code> method returns a reference to the <em>destination</em> stream
making it possible to set up chains of piped streams:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> r <span class="sh_symbol">=</span> fs<span class="sh_symbol">.</span><span class="sh_function">createReadStream</span><span class="sh_symbol">(</span><span class="sh_string">'file.txt'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> z <span class="sh_symbol">=</span> zlib<span class="sh_symbol">.</span><span class="sh_function">createGzip</span><span class="sh_symbol">();</span>
<span class="sh_keyword">const</span> w <span class="sh_symbol">=</span> fs<span class="sh_symbol">.</span><span class="sh_function">createWriteStream</span><span class="sh_symbol">(</span><span class="sh_string">'file.txt.gz'</span><span class="sh_symbol">);</span>
r<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>z<span class="sh_symbol">).</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>w<span class="sh_symbol">);</span>
</code></pre>
<p>By default, <a href="#stream_writable_end_chunk_encoding_callback"><code>stream.end()</code></a> is called on the destination Writable
stream when the source Readable stream emits <a href="#stream_event_end"><code>'end'</code></a>, so that the
destination is no longer writable. To disable this default behavior, the <code>end</code>
option can be passed as <code>false</code>, causing the destination stream to remain open,
as illustrated in the following example:</p>
<pre class="sh_sourceCode"><code class="lang-js">reader<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>writer<span class="sh_symbol">,</span> <span class="sh_cbracket">{</span> end<span class="sh_symbol">:</span> <span class="sh_keyword">false</span> <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
reader<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  writer<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'Goodbye</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>One important caveat is that if the Readable stream emits an error during
processing, the Writable destination <em>is not closed</em> automatically. If an
error occurs, it will be necessary to <em>manually</em> close each stream in order
to prevent memory leaks.</p>
<p><em>Note</em>: The <a href="https://nodejs.org/api/process.html#process_process_stderr"><code>process.stderr</code></a> and <a href="https://nodejs.org/api/process.html#process_process_stdout"><code>process.stdout</code></a> Writable streams are
never closed until the Node.js process exits, regardless of the specified
options.</p>
<h5>readable.read([size])<span><a class="mark" href="#stream_readable_read_size" id="stream_readable_read_size">#</a></span></h5>
<div class="signature"><ul>
<li><code>size</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Optional argument to specify how much data to read.</li>
<li>Return <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type" class="type">&lt;Null&gt;</a></li>
</ul>
</div><p>The <code>readable.read()</code> method pulls some data out of the internal buffer and
returns it. If no data available to be read, <code>null</code> is returned. By default,
the data will be returned as a <code>Buffer</code> object unless an encoding has been
specified using the <code>readable.setEncoding()</code> method or the stream is operating
in object mode.</p>
<p>The optional <code>size</code> argument specifies a specific number of bytes to read. If
<code>size</code> bytes are not available to be read, <code>null</code> will be returned <em>unless</em>
the stream has ended, in which case all of the data remaining in the internal
buffer will be returned (<em>even if it exceeds <code>size</code> bytes</em>).</p>
<p>If the <code>size</code> argument is not specified, all of the data contained in the
internal buffer will be returned.</p>
<p>The <code>readable.read()</code> method should only be called on Readable streams operating
in paused mode. In flowing mode, <code>readable.read()</code> is called automatically until
the internal buffer is fully drained.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> readable <span class="sh_symbol">=</span> <span class="sh_function">getReadableStreamSomehow</span><span class="sh_symbol">();</span>
readable<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'readable'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">var</span> chunk<span class="sh_symbol">;</span>
  <span class="sh_keyword">while</span> <span class="sh_symbol">(</span><span class="sh_keyword">null</span> <span class="sh_symbol">!==</span> <span class="sh_symbol">(</span>chunk <span class="sh_symbol">=</span> readable<span class="sh_symbol">.</span><span class="sh_function">read</span><span class="sh_symbol">()))</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Received $<span class="sh_cbracket">{</span>chunk<span class="sh_symbol">.</span>length<span class="sh_cbracket">}</span> bytes of data<span class="sh_symbol">.</span>`<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>In general, it is recommended that developers avoid the use of the <code>'readable'</code>
event and the <code>readable.read()</code> method in favor of using either
<code>readable.pipe()</code> or the <code>'data'</code> event.</p>
<p>A Readable stream in object mode will always return a single item from
a call to <a href="#stream_readable_read_size"><code>readable.read(size)</code></a>, regardless of the value of the
<code>size</code> argument.</p>
<p><em>Note:</em> If the <code>readable.read()</code> method returns a chunk of data, a <code>'data'</code>
event will also be emitted.</p>
<p><em>Note</em>: Calling <a href="#stream_readable_read_size"><code>stream.read([size])</code></a> after the <a href="#stream_event_end"><code>'end'</code></a>
event has been emitted will return <code>null</code>. No runtime error will be raised.</p>
<h5>readable.resume()<span><a class="mark" href="#stream_readable_resume" id="stream_readable_resume">#</a></span></h5>
<div class="signature"><ul>
<li>Return: <code>this</code></li>
</ul>
</div><p>The <code>readable.resume()</code> method causes an explicitly paused Readable stream to
resume emitting <a href="#stream_event_data"><code>'data'</code></a> events, switching the stream into flowing mode.</p>
<p>The <code>readable.resume()</code> method can be used to fully consume the data from a
stream without actually processing any of that data as illustrated in the
following example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_function">getReadableStreamSomehow</span><span class="sh_symbol">()</span>
  <span class="sh_symbol">.</span><span class="sh_function">resume</span><span class="sh_symbol">();</span>
  <span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Reached the end, but did not read anything.'</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h5>readable.setEncoding(encoding)<span><a class="mark" href="#stream_readable_setencoding_encoding" id="stream_readable_setencoding_encoding">#</a></span></h5>
<div class="signature"><ul>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The encoding to use.</li>
<li>Return: <code>this</code></li>
</ul>
</div><p>The <code>readable.setEncoding()</code> method sets the default character encoding for
data read from the Readable stream.</p>
<p>Setting an encoding causes the stream data
to be returned as string of the specified encoding rather than as <code>Buffer</code>
objects. For instance, calling <code>readable.setEncoding('utf8')</code> will cause the
output data will be interpreted as UTF-8 data, and passed as strings. Calling
<code>readable.setEncoding('hex')</code> will cause the data to be encoded in hexadecimal
string format.</p>
<p>The Readable stream will properly handle multi-byte characters delivered through
the stream that would otherwise become improperly decoded if simply pulled from
the stream as <code>Buffer</code> objects.</p>
<p>Encoding can be disabled by calling <code>readable.setEncoding(null)</code>. This approach
is useful when working with binary data or with large multi-byte strings spread
out over multiple chunks.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> readable <span class="sh_symbol">=</span> <span class="sh_function">getReadableStreamSomehow</span><span class="sh_symbol">();</span>
readable<span class="sh_symbol">.</span><span class="sh_function">setEncoding</span><span class="sh_symbol">(</span><span class="sh_string">'utf8'</span><span class="sh_symbol">);</span>
readable<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>chunk<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  assert<span class="sh_symbol">.</span><span class="sh_function">equal</span><span class="sh_symbol">(</span><span class="sh_keyword">typeof</span> chunk<span class="sh_symbol">,</span> <span class="sh_string">'string'</span><span class="sh_symbol">);</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'got %d characters of string data'</span><span class="sh_symbol">,</span> chunk<span class="sh_symbol">.</span>length<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h5>readable.unpipe([destination])<span><a class="mark" href="#stream_readable_unpipe_destination" id="stream_readable_unpipe_destination">#</a></span></h5>
<div class="signature"><ul>
<li><code>destination</code> <a href="https://nodejs.org/api/stream.html#stream_class_stream_writable" class="type">&lt;stream.Writable&gt;</a> Optional specific stream to unpipe</li>
</ul>
</div><p>The <code>readable.unpipe()</code> method detaches a Writable stream previously attached
using the <a href="#stream_readable_pipe_destination_options"><code>stream.pipe()</code></a> method.</p>
<p>If the <code>destination</code> is not specified, then <em>all</em> pipes are detached.</p>
<p>If the <code>destination</code> is specified, but no pipe is set up for it, then
the method does nothing.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> readable <span class="sh_symbol">=</span> <span class="sh_function">getReadableStreamSomehow</span><span class="sh_symbol">();</span>
<span class="sh_keyword">const</span> writable <span class="sh_symbol">=</span> fs<span class="sh_symbol">.</span><span class="sh_function">createWriteStream</span><span class="sh_symbol">(</span><span class="sh_string">'file.txt'</span><span class="sh_symbol">);</span>
<span class="sh_comment">// All the data from readable goes into 'file.txt',</span>
<span class="sh_comment">// but only for the first second</span>
readable<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>writable<span class="sh_symbol">);</span>
<span class="sh_function">setTimeout</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Stop writing to file.txt'</span><span class="sh_symbol">);</span>
  readable<span class="sh_symbol">.</span><span class="sh_function">unpipe</span><span class="sh_symbol">(</span>writable<span class="sh_symbol">);</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Manually close the file stream'</span><span class="sh_symbol">);</span>
  writable<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">1000</span><span class="sh_symbol">);</span>
</code></pre>
<h5>readable.unshift(chunk)<span><a class="mark" href="#stream_readable_unshift_chunk" id="stream_readable_unshift_chunk">#</a></span></h5>
<div class="signature"><ul>
<li><code>chunk</code> <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> Chunk of data to unshift onto the read queue</li>
</ul>
</div><p>The <code>readable.unshift()</code> method pushes a chunk of data back into the internal
buffer. This is useful in certain situations where a stream is being consumed by
code that needs to "un-consume" some amount of data that it has optimistically
pulled out of the source, so that the data can be passed on to some other party.</p>
<p><em>Note</em>: The <code>stream.unshift(chunk)</code> method cannot be called after the
<a href="#stream_event_end"><code>'end'</code></a> event has been emitted or a runtime error will be thrown.</p>
<p>Developers using <code>stream.unshift()</code> often should consider switching to
use of a <a href="#stream_class_stream_transform">Transform</a> stream instead. See the <a href="#stream_api_for_stream_Implemeters">API for Stream Implemeters</a>
section for more information.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// Pull off a header delimited by \n\n</span>
<span class="sh_comment">// use unshift() if we get too much</span>
<span class="sh_comment">// Call the callback with (error, header, stream)</span>
<span class="sh_keyword">const</span> StringDecoder <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'string_decoder'</span><span class="sh_symbol">).</span>StringDecoder<span class="sh_symbol">;</span>
<span class="sh_keyword">function</span> <span class="sh_function">parseHeader</span><span class="sh_symbol">(</span>stream<span class="sh_symbol">,</span> callback<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  stream<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> callback<span class="sh_symbol">);</span>
  stream<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'readable'</span><span class="sh_symbol">,</span> onReadable<span class="sh_symbol">);</span>
  <span class="sh_keyword">const</span> decoder <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">StringDecoder</span><span class="sh_symbol">(</span><span class="sh_string">'utf8'</span><span class="sh_symbol">);</span>
  <span class="sh_keyword">var</span> header <span class="sh_symbol">=</span> <span class="sh_string">''</span><span class="sh_symbol">;</span>
  <span class="sh_keyword">function</span> <span class="sh_function">onReadable</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">var</span> chunk<span class="sh_symbol">;</span>
    <span class="sh_keyword">while</span> <span class="sh_symbol">(</span><span class="sh_keyword">null</span> <span class="sh_symbol">!==</span> <span class="sh_symbol">(</span>chunk <span class="sh_symbol">=</span> stream<span class="sh_symbol">.</span><span class="sh_function">read</span><span class="sh_symbol">()))</span> <span class="sh_cbracket">{</span>
      <span class="sh_keyword">var</span> str <span class="sh_symbol">=</span> decoder<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">);</span>
      <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>str<span class="sh_symbol">.</span><span class="sh_function">match</span><span class="sh_symbol">(</span><span class="sh_regexp">/\n\n/</span><span class="sh_symbol">))</span> <span class="sh_cbracket">{</span>
        <span class="sh_comment">// found the header boundary</span>
        <span class="sh_keyword">var</span> split <span class="sh_symbol">=</span> str<span class="sh_symbol">.</span><span class="sh_function">split</span><span class="sh_symbol">(</span><span class="sh_regexp">/\n\n/</span><span class="sh_symbol">);</span>
        header <span class="sh_symbol">+=</span> split<span class="sh_symbol">.</span><span class="sh_function">shift</span><span class="sh_symbol">();</span>
        <span class="sh_keyword">const</span> remaining <span class="sh_symbol">=</span> split<span class="sh_symbol">.</span><span class="sh_function">join</span><span class="sh_symbol">(</span><span class="sh_string">'</span><span class="sh_specialchar">\n\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
        <span class="sh_keyword">const</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span>remaining<span class="sh_symbol">,</span> <span class="sh_string">'utf8'</span><span class="sh_symbol">);</span>
        <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>buf<span class="sh_symbol">.</span>length<span class="sh_symbol">)</span>
          stream<span class="sh_symbol">.</span><span class="sh_function">unshift</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
        stream<span class="sh_symbol">.</span><span class="sh_function">removeListener</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> callback<span class="sh_symbol">);</span>
        stream<span class="sh_symbol">.</span><span class="sh_function">removeListener</span><span class="sh_symbol">(</span><span class="sh_string">'readable'</span><span class="sh_symbol">,</span> onReadable<span class="sh_symbol">);</span>
        <span class="sh_comment">// now the body of the message can be read from the stream.</span>
        <span class="sh_function">callback</span><span class="sh_symbol">(</span><span class="sh_keyword">null</span><span class="sh_symbol">,</span> header<span class="sh_symbol">,</span> stream<span class="sh_symbol">);</span>
      <span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
        <span class="sh_comment">// still reading the header.</span>
        header <span class="sh_symbol">+=</span> str<span class="sh_symbol">;</span>
      <span class="sh_cbracket">}</span>
    <span class="sh_cbracket">}</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p><em>Note</em>: Unlike <a href="#stream_readable_push_chunk_encoding"><code>stream.push(chunk)</code></a>, <code>stream.unshift(chunk)</code>
will not end the reading process by resetting the internal reading state of the
stream. This can cause unexpected results if <code>readable.unshift()</code> is called
during a read (i.e. from within a <a href="#stream_readable_read_size_1"><code>stream._read()</code></a>
implementation on a custom stream). Following the call to <code>readable.unshift()</code>
with an immediate <a href="#stream_readable_push_chunk_encoding"><code>stream.push('')</code></a> will reset the reading state
appropriately, however it is best to simply avoid calling <code>readable.unshift()</code>
while in the process of performing a read.</p>
<h5>readable.wrap(stream)<span><a class="mark" href="#stream_readable_wrap_stream" id="stream_readable_wrap_stream">#</a></span></h5>
<div class="signature"><ul>
<li><code>stream</code> <a href="https://nodejs.org/api/stream.html#stream_stream" class="type">&lt;Stream&gt;</a> An "old style" readable stream</li>
</ul>
</div><p>Versions of Node.js prior to v0.10 had streams that did not implement the
entire <code>stream</code> module API as it is currently defined. (See <a href="#stream_compatibility_with_older_node_js_versions">Compatibility</a>
for more information.)</p>
<p>When using an older Node.js library that emits <a href="#stream_event_data"><code>'data'</code></a> events and has a
<a href="#stream_readable_pause"><code>stream.pause()</code></a> method that is advisory only, the
<code>readable.wrap()</code> method can be used to create a <a href="#stream_class_stream_readable">Readable</a> stream that uses
the old stream as its data source.</p>
<p>It will rarely be necessary to use <code>readable.wrap()</code> but the method has been
provided as a convenience for interacting with older Node.js applications and
libraries.</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> OldReader <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./old-api-module.js'</span><span class="sh_symbol">).</span>OldReader<span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> Readable <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'stream'</span><span class="sh_symbol">).</span>Readable<span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> oreader <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> OldReader<span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> myReader <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Readable</span><span class="sh_symbol">().</span><span class="sh_function">wrap</span><span class="sh_symbol">(</span>oreader<span class="sh_symbol">);</span>

myReader<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'readable'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  myReader<span class="sh_symbol">.</span><span class="sh_function">read</span><span class="sh_symbol">();</span> <span class="sh_comment">// etc.</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h3>Duplex and Transform Streams<span><a class="mark" href="#stream_duplex_and_transform_streams" id="stream_duplex_and_transform_streams">#</a></span></h3>
<h4>Class: stream.Duplex<span><a class="mark" href="#stream_class_stream_duplex" id="stream_class_stream_duplex">#</a></span></h4>
<!--type=class-->
<p>Duplex streams are streams that implement both the <a href="#stream_class_stream_readable">Readable</a> and
<a href="#stream_class_stream_writable">Writable</a> interfaces.</p>
<p>Examples of Duplex streams include:</p>
<ul>
<li><a href="https://nodejs.org/api/net.html#net_class_net_socket">TCP sockets</a></li>
<li><a href="https://nodejs.org/api/zlib.html">zlib streams</a></li>
<li><a href="https://nodejs.org/api/crypto.html">crypto streams</a></li>
</ul>
<h4>Class: stream.Transform<span><a class="mark" href="#stream_class_stream_transform" id="stream_class_stream_transform">#</a></span></h4>
<!--type=class-->
<p>Transform streams are <a href="#stream_class_stream_duplex">Duplex</a> streams where the output is in some way
related to the input. Like all <a href="#stream_class_stream_duplex">Duplex</a> streams, Transform streams
implement both the <a href="#stream_class_stream_readable">Readable</a> and <a href="#stream_class_stream_writable">Writable</a> interfaces.</p>
<p>Examples of Transform streams include:</p>
<ul>
<li><a href="https://nodejs.org/api/zlib.html">zlib streams</a></li>
<li><a href="https://nodejs.org/api/crypto.html">crypto streams</a></li>
</ul>
<h2>API for Stream Implemeters<span><a class="mark" href="#stream_api_for_stream_implemeters" id="stream_api_for_stream_implemeters">#</a></span></h2>
<!--type=misc-->
<p>The <code>stream</code> module API has been designed to make it possible to easily
implement streams using JavaScript's prototypical inheritance model.</p>
<p>First, a stream developer would declare a new JavaScript class that extends one
of the four basic stream classes (<code>stream.Writable</code>, <code>stream.Readable</code>,
<code>stream.Duplex</code>, or <code>stream.Transform</code>), making sure the call the appropriate
parent class constructor:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> Writable <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'stream'</span><span class="sh_symbol">).</span>Writable<span class="sh_symbol">;</span>

<span class="sh_keyword">class</span> MyWritable <span class="sh_keyword">extends</span> Writable <span class="sh_cbracket">{</span>
  <span class="sh_function">constructor</span><span class="sh_symbol">(</span>options<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">super</span><span class="sh_symbol">(</span>options<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p>The new stream class must then implement one or more specific methods, depending
on the type of stream being created, as detailed in the chart below:</p>
<table>
  <thead>
    <tr>
      <th>
        <p>Use-case</p>
      </th>
      <th>
        <p>Class</p>
      </th>
      <th>
        <p>Method(s) to implement</p>
      </th>
    </tr>
  </thead>
  <tbody><tr>
    <td>
      <p>Reading only</p>
    </td>
    <td>
      <p><a href="#stream_class_stream_readable_1">Readable</a></p>
    </td>
    <td>
      <p><code><a href="#stream_readable_read_size_1">_read</a></code></p>
    </td>
  </tr>
  <tr>
    <td>
      <p>Writing only</p>
    </td>
    <td>
      <p><a href="#stream_class_stream_writable_1">Writable</a></p>
    </td>
    <td>
      <p><code><a href="#stream_writable_write_chunk_encoding_callback_1">_write</a></code>, <code><a href="#stream_writable_writev_chunks_callback">_writev</a></code></p>
    </td>
  </tr>
  <tr>
    <td>
      <p>Reading and writing</p>
    </td>
    <td>
      <p><a href="#stream_class_stream_duplex_1">Duplex</a></p>
    </td>
    <td>
      <p><code><a href="#stream_readable_read_size_1">_read</a></code>, <code><a href="#stream_writable_write_chunk_encoding_callback_1">_write</a></code>, <code><a href="#stream_writable_writev_chunks_callback">_writev</a></code></p>
    </td>
  </tr>
  <tr>
    <td>
      <p>Operate on written data, then read the result</p>
    </td>
    <td>
      <p><a href="#stream_class_stream_transform_1">Transform</a></p>
    </td>
    <td>
      <p><code><a href="#stream_transform_transform_chunk_encoding_callback">_transform</a></code>, <code><a href="#stream_transform_flush_callback">_flush</a></code></p>
    </td>
  </tr>
</tbody></table>

<p><em>Note</em>: The implementation code for a stream should <em>never</em> call the "public"
methods of a stream that are intended for use by consumers (as described in
the <a href="#stream_api_for_stream_consumers">API for Stream Consumers</a> section). Doing so may lead to adverse
side effects in application code consuming the stream.</p>
<h3>Simplified Construction<span><a class="mark" href="#stream_simplified_construction" id="stream_simplified_construction">#</a></span></h3>
<p>For many simple cases, it is possible to construct a stream without relying on
inheritance. This can be accomplished by directly creating instances of the
<code>stream.Writable</code>, <code>stream.Readable</code>, <code>stream.Duplex</code> or <code>stream.Transform</code>
objects and passing appropriate methods as constructor options.</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> Writable <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'stream'</span><span class="sh_symbol">).</span>Writable<span class="sh_symbol">;</span>

<span class="sh_keyword">const</span> myWritable <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Writable</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>
  <span class="sh_function">write</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">,</span> encoding<span class="sh_symbol">,</span> callback<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// ...</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h3>Implementing a Writable Stream<span><a class="mark" href="#stream_implementing_a_writable_stream" id="stream_implementing_a_writable_stream">#</a></span></h3>
<p>The <code>stream.Writable</code> class is extended to implement a <a href="#stream_class_stream_writable">Writable</a> stream.</p>
<p>Custom Writable streams <em>must</em> call the <code>new stream.Writable([options])</code>
constructor and implement the <code>writable.\_write()</code> method. The
<code>writable.\_writev()</code> method <em>may</em> also be implemented.</p>
<h4>Constructor: new stream.Writable(<a href="#zlib_class_options">options</a>)<span><a class="mark" href="#stream_constructor_new_stream_writable_options" id="stream_constructor_new_stream_writable_options">#</a></span></h4>
<div class="signature"><ul>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>highWaterMark</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Buffer level when
<a href="#stream_writable_write_chunk_encoding_callback"><code>stream.write()</code></a> starts returning <code>false</code>. Defaults to
<code>16384</code> (16kb), or <code>16</code> for <code>objectMode</code> streams.</li>
<li><code>decodeStrings</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Whether or not to decode strings into
Buffers before passing them to <a href="#stream_writable_write_chunk_encoding_callback_1"><code>stream._write()</code></a>.
Defaults to <code>true</code></li>
<li><code>objectMode</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Whether or not the
<a href="#stream_writable_write_chunk_encoding_callback"><code>stream.write(anyObj)</code></a> is a valid operation. When set,
it becomes possible to write JavaScript values other than string or
<code>Buffer</code> if supported by the stream implementation. Defaults to <code>false</code></li>
<li><code>write</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> Implementation for the
<a href="#stream_writable_write_chunk_encoding_callback_1"><code>stream._write()</code></a> method.</li>
<li><code>writev</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> Implementation for the
<a href="#stream_writable_writev_chunks_callback"><code>stream._writev()</code></a> method.</li>
</ul>
</li>
</ul>
</div><p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> Writable <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'stream'</span><span class="sh_symbol">).</span>Writable<span class="sh_symbol">;</span>

<span class="sh_keyword">class</span> MyWritable <span class="sh_keyword">extends</span> Writable <span class="sh_cbracket">{</span>
  <span class="sh_function">constructor</span><span class="sh_symbol">(</span>options<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// Calls the stream.Writable() constructor</span>
    <span class="sh_keyword">super</span><span class="sh_symbol">(</span>options<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p>Or, when using pre-ES6 style constructors:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> Writable <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'stream'</span><span class="sh_symbol">).</span>Writable<span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">function</span> <span class="sh_function">MyWritable</span><span class="sh_symbol">(</span>options<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(!(</span><span class="sh_keyword">this</span> <span class="sh_keyword">instanceof</span> MyWritable<span class="sh_symbol">))</span>
    <span class="sh_keyword">return</span> <span class="sh_keyword">new</span> <span class="sh_function">MyWritable</span><span class="sh_symbol">(</span>options<span class="sh_symbol">);</span>
  Writable<span class="sh_symbol">.</span><span class="sh_function">call</span><span class="sh_symbol">(</span><span class="sh_keyword">this</span><span class="sh_symbol">,</span> options<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>
util<span class="sh_symbol">.</span><span class="sh_function">inherits</span><span class="sh_symbol">(</span>MyWritable<span class="sh_symbol">,</span> Writable<span class="sh_symbol">);</span>
</code></pre>
<p>Or, using the Simplified Constructor approach:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> Writable <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'stream'</span><span class="sh_symbol">).</span>Writable<span class="sh_symbol">;</span>

<span class="sh_keyword">const</span> myWritable <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Writable</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>
  <span class="sh_function">write</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">,</span> encoding<span class="sh_symbol">,</span> callback<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// ...</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_function">writev</span><span class="sh_symbol">(</span>chunks<span class="sh_symbol">,</span> callback<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// ...</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h4>writable._write(chunk, encoding, callback)<span><a class="mark" href="#stream_writable_write_chunk_encoding_callback_1" id="stream_writable_write_chunk_encoding_callback_1">#</a></span></h4>
<div class="signature"><ul>
<li><code>chunk</code> <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The chunk to be written. Will <strong>always</strong>
be a buffer unless the <code>decodeStrings</code> option was set to <code>false</code>.</li>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> If the chunk is a string, then <code>encoding</code> is the
character encoding of that string. If chunk is a <code>Buffer</code>, or if the
stream is operating in object mode, <code>encoding</code> may be ignored.</li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> Call this function (optionally with an error
argument) when processing is complete for the supplied chunk.</li>
</ul>
</div><p>All Writable stream implementations must provide a
<a href="#stream_writable_write_chunk_encoding_callback_1"><code>writable._write()</code></a> method to send data to the underlying
resource.</p>
<p><em>Note</em>: <a href="#stream_class_stream_transform">Transform</a> streams provide their own implementation of the
[<code>writable._write()</code>].</p>
<p><em>Note</em>: <strong>This function MUST NOT be called by application code directly.</strong> It
should be implemented by child classes, and called only by the internal Writable
class methods only.</p>
<p>The <code>callback</code> method must be called to signal either that the write completed
successfully or failed with an error. The first argument passed to the
<code>callback</code> must be the <code>Error</code> object if the call failed or <code>null</code> if the
write succeeded.</p>
<p>It is important to note that all calls to <code>writable.write()</code> that occur between
the time <code>writable.\_write()</code> is called and the <code>callback</code> is called will cause
the written data to be buffered. Once the <code>callback</code> is invoked, the stream will
emit a <code>'drain'</code> event. If a stream implementation is capable of processing
multiple chunks of data at once, the <code>writable.\_writev()</code> method should be
implemented.</p>
<p>If the <code>decodeStrings</code> property is set in the constructor options, then
<code>chunk</code> may be a string rather than a Buffer, and <code>encoding</code> will
indicate the character encoding of the string. This is to support
implementations that have an optimized handling for certain string
data encodings. If the <code>decodeStrings</code> property is explicitly set to <code>false</code>,
the <code>encoding</code> argument can be safely ignored, and <code>chunk</code> will always be a
<code>Buffer</code>.</p>
<p>The <code>writable.\_write()</code> method is prefixed with an underscore because it is
internal to the class that defines it, and should never be called directly by
user programs.</p>
<h4>writable._writev(chunks, callback)<span><a class="mark" href="#stream_writable_writev_chunks_callback" id="stream_writable_writev_chunks_callback">#</a></span></h4>
<div class="signature"><ul>
<li><code>chunks</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" class="type">&lt;Array&gt;</a> The chunks to be written. Each chunk has following
format: <code>{ chunk: ..., encoding: ... }</code>.</li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> A callback function (optionally with an error
argument) to be invoked when processing is complete for the supplied chunks.</li>
</ul>
</div><p><em>Note</em>: <strong>This function MUST NOT be called by application code directly.</strong> It
should be implemented by child classes, and called only by the internal Writable
class methods only.</p>
<p>The <code>writable.\_writev()</code> method may be implemented in addition to
<code>writable.\_write()</code> in stream implementations that are capable of processing
multiple chunks of data at once. If implemented, the method will be called with
all chunks of data currently buffered in the write queue.</p>
<p>The <code>writable.\_writev()</code> method is prefixed with an underscore because it is
internal to the class that defines it, and should never be called directly by
user programs.</p>
<h4>Errors While Writing<span><a class="mark" href="#stream_errors_while_writing" id="stream_errors_while_writing">#</a></span></h4>
<p>It is recommended that errors occurring during the processing of the
<code>writable.\_write()</code> and <code>writable.\_writev()</code> methods are reported by invoking
the callback and passing the error as the first argument. This will cause an
<code>'error'</code> event to be emitted by the Writable. Throwing an Error from within
<code>writable.\_write()</code> can result in expected and inconsistent behavior depending
on how the stream is being used.  Using the callback ensures consistent and
predictable handling of errors.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> Writable <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'stream'</span><span class="sh_symbol">).</span>Writable<span class="sh_symbol">;</span>

<span class="sh_keyword">const</span> myWritable <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Writable</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>
  <span class="sh_function">write</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">,</span> encoding<span class="sh_symbol">,</span> callback<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>chunk<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">().</span><span class="sh_function">indexOf</span><span class="sh_symbol">(</span><span class="sh_string">'a'</span><span class="sh_symbol">)</span> <span class="sh_symbol">&gt;=</span> <span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
      <span class="sh_function">callback</span><span class="sh_symbol">(</span><span class="sh_keyword">new</span> <span class="sh_predef_func">Error</span><span class="sh_symbol">(</span><span class="sh_string">'chunk is invalid'</span><span class="sh_symbol">))</span>
    <span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
       <span class="sh_function">callback</span><span class="sh_symbol">()</span>
    <span class="sh_cbracket">}</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h4>An Example Writable Stream<span><a class="mark" href="#stream_an_example_writable_stream" id="stream_an_example_writable_stream">#</a></span></h4>
<p>The following illustrates a rather simplistic (and somewhat pointless) custom
Writable stream implementation. While this specific Writable stream instance
is not of any real particular usefulness, the example illustrates each of the
required elements of a custom <a href="#stream_class_stream_writable">Writable</a> stream instance:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> Writable <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'stream'</span><span class="sh_symbol">).</span>Writable<span class="sh_symbol">;</span>

<span class="sh_keyword">class</span> MyWritable <span class="sh_keyword">extends</span> Writable <span class="sh_cbracket">{</span>
  <span class="sh_function">constructor</span><span class="sh_symbol">(</span>options<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">super</span><span class="sh_symbol">(</span>options<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>

  <span class="sh_function">_write</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">,</span> encoding<span class="sh_symbol">,</span> callback<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>chunk<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">().</span><span class="sh_function">indexOf</span><span class="sh_symbol">(</span><span class="sh_string">'a'</span><span class="sh_symbol">)</span> <span class="sh_symbol">&gt;=</span> <span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
      <span class="sh_function">callback</span><span class="sh_symbol">(</span><span class="sh_keyword">new</span> <span class="sh_predef_func">Error</span><span class="sh_symbol">(</span><span class="sh_string">'chunk is invalid'</span><span class="sh_symbol">))</span>
    <span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
       <span class="sh_function">callback</span><span class="sh_symbol">()</span>
    <span class="sh_cbracket">}</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>
</code></pre>
<h3>Implementing a Readable Stream<span><a class="mark" href="#stream_implementing_a_readable_stream" id="stream_implementing_a_readable_stream">#</a></span></h3>
<p>The <code>stream.Readable</code> class is extended to implement a <a href="#stream_class_stream_readable">Readable</a> stream.</p>
<p>Custom Readable streams <em>must</em> call the <code>new stream.Readable([options])</code>
constructor and implement the <code>readable.\_read()</code> method.</p>
<h4>new stream.Readable(<a href="#zlib_class_options">options</a>)<span><a class="mark" href="#stream_new_stream_readable_options" id="stream_new_stream_readable_options">#</a></span></h4>
<div class="signature"><ul>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>highWaterMark</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> The maximum number of bytes to store in
the internal buffer before ceasing to read from the underlying
resource. Defaults to <code>16384</code> (16kb), or <code>16</code> for <code>objectMode</code> streams</li>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> If specified, then buffers will be decoded to
strings using the specified encoding. Defaults to <code>null</code></li>
<li><code>objectMode</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Whether this stream should behave
as a stream of objects. Meaning that <a href="#stream_readable_read_size"><code>stream.read(n)</code></a> returns
a single value instead of a Buffer of size n. Defaults to <code>false</code></li>
<li><code>read</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> Implementation for the <a href="#stream_readable_read_size_1"><code>stream._read()</code></a>
method.</li>
</ul>
</li>
</ul>
</div><p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> Readable <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'stream'</span><span class="sh_symbol">).</span>Readable<span class="sh_symbol">;</span>

<span class="sh_keyword">class</span> MyReadable <span class="sh_keyword">extends</span> Readable <span class="sh_cbracket">{</span>
  <span class="sh_function">constructor</span><span class="sh_symbol">(</span>options<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// Calls the stream.Readable(options) constructor</span>
    <span class="sh_keyword">super</span><span class="sh_symbol">(</span>options<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p>Or, when using pre-ES6 style constructors:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> Readable <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'stream'</span><span class="sh_symbol">).</span>Readable<span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">function</span> <span class="sh_function">MyReadable</span><span class="sh_symbol">(</span>options<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(!(</span><span class="sh_keyword">this</span> <span class="sh_keyword">instanceof</span> MyReadable<span class="sh_symbol">))</span>
    <span class="sh_keyword">return</span> <span class="sh_keyword">new</span> <span class="sh_function">MyReadable</span><span class="sh_symbol">(</span>options<span class="sh_symbol">);</span>
  Readable<span class="sh_symbol">.</span><span class="sh_function">call</span><span class="sh_symbol">(</span><span class="sh_keyword">this</span><span class="sh_symbol">,</span> options<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>
util<span class="sh_symbol">.</span><span class="sh_function">inherits</span><span class="sh_symbol">(</span>MyReadable<span class="sh_symbol">,</span> Readable<span class="sh_symbol">);</span>
</code></pre>
<p>Or, using the Simplified Constructor approach:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> Readable <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'stream'</span><span class="sh_symbol">).</span>Readable<span class="sh_symbol">;</span>

<span class="sh_keyword">const</span> myReadable <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Readable</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>
  <span class="sh_function">read</span><span class="sh_symbol">(</span>size<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// ...</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h4>readable._read(size)<span><a class="mark" href="#stream_readable_read_size_1" id="stream_readable_read_size_1">#</a></span></h4>
<div class="signature"><ul>
<li><code>size</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" class="type">&lt;Number&gt;</a> Number of bytes to read asynchronously</li>
</ul>
</div><p><em>Note</em>: <strong>This function MUST NOT be called by application code directly.</strong> It
should be implemented by child classes, and called only by the internal Readable
class methods only.</p>
<p>All Readable stream implementations must provide an implementation of the
<code>readable.\_read()</code> method to fetch data from the underlying resource.</p>
<p>When <code>readable._read()</code> is called, if data is available from the resource, the
implementation should begin pushing that data into the read queue using the
<a href="#stream_readable_push_chunk_encoding"><code>this.push(dataChunk)</code></a> method. <code>_read()</code> should continue reading
from the resource and pushing data until <code>readable.push()</code> returns <code>false</code>. Only
when <code>_read()</code> is called again after it has stopped should it resume pushing
additional data onto the queue.</p>
<p><em>Note</em>: Once the <code>readable._read()</code> method has been called, it will not be
called again until the <a href="#stream_readable_push_chunk_encoding"><code>readable.push()</code></a> method is called.</p>
<p>The <code>size</code> argument is advisory. For implementations where a "read" is a
single operation that returns data can use the <code>size</code> argument to determine how
much data to fetch. Other implementations may ignore this argument and simply
provide data whenever it becomes available. There is no need to "wait" until
<code>size</code> bytes are available before calling <a href="#stream_readable_push_chunk_encoding"><code>stream.push(chunk)</code></a>.</p>
<p>The <code>readable.\_read()</code> method is prefixed with an underscore because it is
internal to the class that defines it, and should never be called directly by
user programs.</p>
<h4>readable.push(chunk[, encoding])<span><a class="mark" href="#stream_readable_push_chunk_encoding" id="stream_readable_push_chunk_encoding">#</a></span></h4>
<div class="signature"><ul>
<li><code>chunk</code> <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type" class="type">&lt;Null&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> Chunk of data to push into the read queue</li>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> Encoding of String chunks.  Must be a valid
Buffer encoding, such as <code>'utf8'</code> or <code>'ascii'</code></li>
<li>Returns <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> <code>true</code> if additional chunks of data may continued to be
pushed; <code>false</code> otherwise.</li>
</ul>
</div><p>When <code>chunk</code> is a <code>Buffer</code> or <code>string</code>, the <code>chunk</code> of data will be added to the
internal queue for users of the stream to consume. Passing <code>chunk</code> as <code>null</code>
signals the end of the stream (EOF), after which no more data can be written.</p>
<p>When the Readable is operating in paused mode, the data added with
<code>readable.push()</code> can be read out by calling the
<a href="#stream_readable_read_size"><code>readable.read()</code></a> method when the <a href="#stream_event_readable"><code>'readable'</code></a> event is
emitted.</p>
<p>When the Readable is operating in flowing mode, the data added with
<code>readable.push()</code> will be delivered by emitting a <code>'data'</code> event.</p>
<p>The <code>readable.push()</code> method is designed to be as flexible as possible. For
example, when wrapping a lower-level source that provides some form of
pause/resume mechanism, and a data callback, the low-level source can be wrapped
by the custom Readable instance as illustrated in the following example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// source is an object with readStop() and readStart() methods,</span>
<span class="sh_comment">// and an `ondata` member that gets called when it has data, and</span>
<span class="sh_comment">// an `onend` member that gets called when the data is over.</span>

<span class="sh_keyword">class</span> SourceWrapper <span class="sh_keyword">extends</span> Readable <span class="sh_cbracket">{</span>
  <span class="sh_function">constructor</span><span class="sh_symbol">(</span>options<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">super</span><span class="sh_symbol">(</span>options<span class="sh_symbol">);</span>

    <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_source <span class="sh_symbol">=</span> <span class="sh_function">getLowlevelSourceObject</span><span class="sh_symbol">();</span>

    <span class="sh_comment">// Every time there's data, push it into the internal buffer.</span>
    <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_source<span class="sh_symbol">.</span>ondata <span class="sh_symbol">=</span> <span class="sh_symbol">(</span>chunk<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
      <span class="sh_comment">// if push() returns false, then stop reading from source</span>
      <span class="sh_keyword">if</span> <span class="sh_symbol">(!</span><span class="sh_keyword">this</span><span class="sh_symbol">.</span><span class="sh_function">push</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">))</span>
        <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_source<span class="sh_symbol">.</span><span class="sh_function">readStop</span><span class="sh_symbol">();</span>
    <span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

    <span class="sh_comment">// When the source ends, push the EOF-signaling `null` chunk</span>
    <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_source<span class="sh_symbol">.</span>onend <span class="sh_symbol">=</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
      <span class="sh_keyword">this</span><span class="sh_symbol">.</span><span class="sh_function">push</span><span class="sh_symbol">(</span><span class="sh_keyword">null</span><span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
  <span class="sh_cbracket">}</span>
  <span class="sh_comment">// _read will be called when the stream wants to pull more data in</span>
  <span class="sh_comment">// the advisory size argument is ignored in this case.</span>
  <span class="sh_function">_read</span><span class="sh_symbol">(</span>size<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_source<span class="sh_symbol">.</span><span class="sh_function">readStart</span><span class="sh_symbol">();</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p><em>Note</em>: The <code>readable.push()</code> method is intended be called only by Readable
Implemeters, and only from within the <code>readable.\_read()</code> method.</p>
<h4>Errors While Reading<span><a class="mark" href="#stream_errors_while_reading" id="stream_errors_while_reading">#</a></span></h4>
<p>It is recommended that errors occurring during the processing of the
<code>readable.\_read()</code> method are emitted using the <code>'error'</code> event rather than
being thrown. Throwing an Error from within <code>readable.\_read()</code> can result in
expected and inconsistent behavior depending on whether the stream is operating
in flowing or paused mode. Using the <code>'error'</code> event ensures consistent and
predictable handling of errors.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> Readable <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'stream'</span><span class="sh_symbol">).</span>Readable<span class="sh_symbol">;</span>

<span class="sh_keyword">const</span> myReadable <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Readable</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>
  <span class="sh_function">read</span><span class="sh_symbol">(</span>size<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">if</span> <span class="sh_symbol">(</span><span class="sh_function">checkSomeErrorCondition</span><span class="sh_symbol">())</span> <span class="sh_cbracket">{</span>
      process<span class="sh_symbol">.</span><span class="sh_function">nextTick</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_keyword">this</span><span class="sh_symbol">.</span><span class="sh_function">emit</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> err<span class="sh_symbol">));</span>
      <span class="sh_keyword">return</span><span class="sh_symbol">;</span>
    <span class="sh_cbracket">}</span>
    <span class="sh_comment">// do some work</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h4>An Example Counting Stream<span><a class="mark" href="#stream_an_example_counting_stream" id="stream_an_example_counting_stream">#</a></span></h4>
<!--type=example-->
<p>The following is a basic example of a Readable stream that emits the numerals
from 1 to 1,000,000 in ascending order, and then ends.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> Readable <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'stream'</span><span class="sh_symbol">).</span>Readable<span class="sh_symbol">;</span>

<span class="sh_keyword">class</span> Counter <span class="sh_keyword">extends</span> Readable <span class="sh_cbracket">{</span>
  <span class="sh_function">constructor</span><span class="sh_symbol">(</span>opt<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">super</span><span class="sh_symbol">(</span>opt<span class="sh_symbol">);</span>
    <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_max <span class="sh_symbol">=</span> <span class="sh_number">1000000</span><span class="sh_symbol">;</span>
    <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_index <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
  <span class="sh_cbracket">}</span>

  <span class="sh_function">_read</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">var</span> i <span class="sh_symbol">=</span> <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_index<span class="sh_symbol">++;</span>
    <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">&gt;</span> <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_max<span class="sh_symbol">)</span>
      <span class="sh_keyword">this</span><span class="sh_symbol">.</span><span class="sh_function">push</span><span class="sh_symbol">(</span><span class="sh_keyword">null</span><span class="sh_symbol">);</span>
    <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
      <span class="sh_keyword">var</span> str <span class="sh_symbol">=</span> <span class="sh_string">''</span> <span class="sh_symbol">+</span> i<span class="sh_symbol">;</span>
      <span class="sh_keyword">var</span> buf <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span>str<span class="sh_symbol">,</span> <span class="sh_string">'ascii'</span><span class="sh_symbol">);</span>
      <span class="sh_keyword">this</span><span class="sh_symbol">.</span><span class="sh_function">push</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>
</code></pre>
<h3>Implementing a Duplex Stream<span><a class="mark" href="#stream_implementing_a_duplex_stream" id="stream_implementing_a_duplex_stream">#</a></span></h3>
<p>A <a href="#stream_class_stream_duplex">Duplex</a> stream is one that implements both <a href="#stream_class_stream_readable">Readable</a> and <a href="#stream_class_stream_writable">Writable</a>,
such as a TCP socket connection.</p>
<p>Because Javascript does not have support for multiple inheritance, the
<code>stream.Duplex</code> class is extended to implement a <a href="#stream_class_stream_duplex">Duplex</a> stream (as opposed
to extending the <code>stream.Readable</code> <em>and</em> <code>stream.Writable</code> classes).</p>
<p><em>Note</em>: The <code>stream.Duplex</code> class prototypically inherits from <code>stream.Readable</code>
and parasitically from <code>stream.Writable</code>.</p>
<p>Custom Duplex streams <em>must</em> call the <code>new stream.Duplex([options])</code>
constructor and implement <em>both</em> the <code>readable.\_read()</code> and
<code>writable.\_write()</code> methods.</p>
<h4>new stream.Duplex(options)<span><a class="mark" href="#stream_new_stream_duplex_options" id="stream_new_stream_duplex_options">#</a></span></h4>
<div class="signature"><ul>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> Passed to both Writable and Readable
constructors. Also has the following fields:<ul>
<li><code>allowHalfOpen</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Defaults to <code>true</code>. If set to <code>false</code>, then
the stream will automatically end the readable side when the
writable side ends and vice versa.</li>
<li><code>readableObjectMode</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Defaults to <code>false</code>. Sets <code>objectMode</code>
for readable side of the stream. Has no effect if <code>objectMode</code>
is <code>true</code>.</li>
<li><code>writableObjectMode</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" class="type">&lt;Boolean&gt;</a> Defaults to <code>false</code>. Sets <code>objectMode</code>
for writable side of the stream. Has no effect if <code>objectMode</code>
is <code>true</code>.</li>
</ul>
</li>
</ul>
</div><p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> Duplex <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'stream'</span><span class="sh_symbol">).</span>Duplex<span class="sh_symbol">;</span>

<span class="sh_keyword">class</span> MyDuplex <span class="sh_keyword">extends</span> Duplex <span class="sh_cbracket">{</span>
  <span class="sh_function">constructor</span><span class="sh_symbol">(</span>options<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">super</span><span class="sh_symbol">(</span>options<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p>Or, when using pre-ES6 style constructors:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> Duplex <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'stream'</span><span class="sh_symbol">).</span>Duplex<span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">function</span> <span class="sh_function">MyDuplex</span><span class="sh_symbol">(</span>options<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(!(</span><span class="sh_keyword">this</span> <span class="sh_keyword">instanceof</span> MyDuplex<span class="sh_symbol">))</span>
    <span class="sh_keyword">return</span> <span class="sh_keyword">new</span> <span class="sh_function">MyDuplex</span><span class="sh_symbol">(</span>options<span class="sh_symbol">);</span>
  Duplex<span class="sh_symbol">.</span><span class="sh_function">call</span><span class="sh_symbol">(</span><span class="sh_keyword">this</span><span class="sh_symbol">,</span> options<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>
util<span class="sh_symbol">.</span><span class="sh_function">inherits</span><span class="sh_symbol">(</span>MyDuplex<span class="sh_symbol">,</span> Duplex<span class="sh_symbol">);</span>
</code></pre>
<p>Or, using the Simplified Constructor approach:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> Duplex <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'stream'</span><span class="sh_symbol">).</span>Duplex<span class="sh_symbol">;</span>

<span class="sh_keyword">const</span> myDuplex <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Duplex</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>
  <span class="sh_function">read</span><span class="sh_symbol">(</span>size<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// ...</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_function">write</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">,</span> encoding<span class="sh_symbol">,</span> callback<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// ...</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h4>An Example Duplex Stream<span><a class="mark" href="#stream_an_example_duplex_stream" id="stream_an_example_duplex_stream">#</a></span></h4>
<p>The following illustrates a simple example of a Duplex stream that wraps a
hypothetical lower-level source object to which data can be written, and
from which data can be read, albeit using an API that is not compatible with
Node.js streams.
The following illustrates a simple example of a Duplex stream that buffers
incoming written data via the <a href="#stream_class_stream_writable">Writable</a> interface that is read back out
via the <a href="#stream_class_stream_readable">Readable</a> interface.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> Duplex <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'stream'</span><span class="sh_symbol">).</span>Duplex<span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> kSource <span class="sh_symbol">=</span> <span class="sh_function">Symbol</span><span class="sh_symbol">(</span><span class="sh_string">'source'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">class</span> MyDuplex <span class="sh_keyword">extends</span> Duplex <span class="sh_cbracket">{</span>
  <span class="sh_function">constructor</span><span class="sh_symbol">(</span>source<span class="sh_symbol">,</span> options<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">super</span><span class="sh_symbol">(</span>options<span class="sh_symbol">);</span>
    <span class="sh_keyword">this</span><span class="sh_symbol">[</span>kSource<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> source<span class="sh_symbol">;</span>
  <span class="sh_cbracket">}</span>

  <span class="sh_function">_write</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">,</span> encoding<span class="sh_symbol">,</span> callback<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// The underlying source only deals with strings</span>
    <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>Buffer<span class="sh_symbol">.</span><span class="sh_function">isBuffer</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">))</span>
      chunk <span class="sh_symbol">=</span> chunk<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span>encoding<span class="sh_symbol">);</span>
    <span class="sh_keyword">this</span><span class="sh_symbol">[</span>kSource<span class="sh_symbol">].</span><span class="sh_function">writeSomeData</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">,</span> encoding<span class="sh_symbol">);</span>
    <span class="sh_function">callback</span><span class="sh_symbol">();</span>
  <span class="sh_cbracket">}</span>

  <span class="sh_function">_read</span><span class="sh_symbol">(</span>size<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">this</span><span class="sh_symbol">[</span>kSource<span class="sh_symbol">].</span><span class="sh_function">fetchSomeData</span><span class="sh_symbol">(</span>size<span class="sh_symbol">,</span> <span class="sh_symbol">(</span>data<span class="sh_symbol">,</span> encoding<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
      <span class="sh_keyword">this</span><span class="sh_symbol">.</span><span class="sh_function">push</span><span class="sh_symbol">(</span>Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span>data<span class="sh_symbol">,</span> encoding<span class="sh_symbol">));</span>
    <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p>The most important aspect of a Duplex stream is that the Readable and Writable
sides operate independently of one another despite co-existing within a single
object instance.</p>
<h4>Object Mode Duplex Streams<span><a class="mark" href="#stream_object_mode_duplex_streams" id="stream_object_mode_duplex_streams">#</a></span></h4>
<p>For Duplex streams, <code>objectMode</code> can be set exclusively for either the Readable
or Writable side using the <code>readableObjectMode</code> and <code>writableObjectMode</code> options
respectively.</p>
<p>In the following example, for instance, a new Transform stream (which is a 
type of <a href="#stream_class_stream_duplex">Duplex</a> stream) is created that has an object mode Writable side
that accepts JavaScript numbers that are converted to hexidecimal strings on
the Readable side.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> Transform <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'stream'</span><span class="sh_symbol">).</span>Transform<span class="sh_symbol">;</span>

<span class="sh_comment">// All Transform streams are also Duplex Streams</span>
<span class="sh_keyword">const</span> myTransform <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Transform</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>
  writableObjectMode<span class="sh_symbol">:</span> <span class="sh_keyword">true</span><span class="sh_symbol">,</span>

  <span class="sh_function">transform</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">,</span> encoding<span class="sh_symbol">,</span> callback<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// Coerce the chunk to a number if necessary</span>
    chunk <span class="sh_symbol">|=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span>

    <span class="sh_comment">// Transform the chunk into something else.</span>
    <span class="sh_keyword">const</span> data <span class="sh_symbol">=</span> chunk<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_number">16</span><span class="sh_symbol">);</span>

    <span class="sh_comment">// Push the data onto the readable queue.</span>
    <span class="sh_function">callback</span><span class="sh_symbol">(</span><span class="sh_keyword">null</span><span class="sh_symbol">,</span> <span class="sh_string">'0'</span><span class="sh_symbol">.</span><span class="sh_function">repeat</span><span class="sh_symbol">(</span>data<span class="sh_symbol">.</span>length <span class="sh_symbol">%</span> <span class="sh_number">2</span><span class="sh_symbol">)</span> <span class="sh_symbol">+</span> data<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

myTransform<span class="sh_symbol">.</span><span class="sh_function">setEncoding</span><span class="sh_symbol">(</span><span class="sh_string">'ascii'</span><span class="sh_symbol">);</span>
myTransform<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>chunk<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">));</span>

myTransform<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: 01</span>
myTransform<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_number">10</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: 0a</span>
myTransform<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_number">100</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Prints: 64</span>
</code></pre>
<h3>Implementing a Transform Stream<span><a class="mark" href="#stream_implementing_a_transform_stream" id="stream_implementing_a_transform_stream">#</a></span></h3>
<p>A <a href="#stream_class_stream_transform">Transform</a> stream is a <a href="#stream_class_stream_duplex">Duplex</a> stream where the output is computed
in some way from the input. Examples include <a href="https://nodejs.org/api/zlib.html">zlib</a> streams or <a href="https://nodejs.org/api/crypto.html">crypto</a>
streams that compress, encrypt, or decrypt data.</p>
<p><em>Note</em>: There is no requirement that the output be the same size as the input,
the same number of chunks, or arrive at the same time. For example, a
Hash stream will only ever have a single chunk of output which is
provided when the input is ended. A <code>zlib</code> stream will produce output
that is either much smaller or much larger than its input.</p>
<p>The <code>stream.Transform</code> class is extended to implement a <a href="#stream_class_stream_transform">Transform</a> stream.</p>
<p>The <code>stream.Transform</code> class prototypically inherits from <code>stream.Duplex</code> and
implements its own versions of the <code>writable.\_write()</code> and <code>readable.\_read()</code>
methods. Custom Transform implementations <em>must</em> implement the
<a href="#stream_transform_transform_chunk_encoding_callback"><code>transform.\_transform()</code></a> method and <em>may</em> also implement
the [<code>transform.\_flush()</code>][stream-._flush] method.</p>
<p><em>Note</em>: Care must be taken when using Transform streams in that data written
to the stream can cause the Writable side of the stream to become paused if
the output on the Readable side is not consumed.</p>
<h4>new stream.Transform(<a href="#zlib_class_options">options</a>)<span><a class="mark" href="#stream_new_stream_transform_options" id="stream_new_stream_transform_options">#</a></span></h4>
<div class="signature"><ul>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> Passed to both Writable and Readable
constructors. Also has the following fields:<ul>
<li><code>transform</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> Implementation for the
<a href="#stream_transform_transform_chunk_encoding_callback"><code>stream._transform()</code></a> method.</li>
<li><code>flush</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> Implementation for the <a href="#stream_transform_flush_callback"><code>stream._flush()</code></a>
method.</li>
</ul>
</li>
</ul>
</div><p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> Transform <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'stream'</span><span class="sh_symbol">).</span>Transform<span class="sh_symbol">;</span>

<span class="sh_keyword">class</span> MyTransform <span class="sh_keyword">extends</span> Transform <span class="sh_cbracket">{</span>
  <span class="sh_function">constructor</span><span class="sh_symbol">(</span>options<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">super</span><span class="sh_symbol">(</span>options<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>
</code></pre>
<p>Or, when using pre-ES6 style constructors:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> Transform <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'stream'</span><span class="sh_symbol">).</span>Transform<span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">function</span> <span class="sh_function">MyTransform</span><span class="sh_symbol">(</span>options<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(!(</span><span class="sh_keyword">this</span> <span class="sh_keyword">instanceof</span> MyTransform<span class="sh_symbol">))</span>
    <span class="sh_keyword">return</span> <span class="sh_keyword">new</span> <span class="sh_function">MyTransform</span><span class="sh_symbol">(</span>options<span class="sh_symbol">);</span>
  Transform<span class="sh_symbol">.</span><span class="sh_function">call</span><span class="sh_symbol">(</span><span class="sh_keyword">this</span><span class="sh_symbol">,</span> options<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>
util<span class="sh_symbol">.</span><span class="sh_function">inherits</span><span class="sh_symbol">(</span>MyTransform<span class="sh_symbol">,</span> Transform<span class="sh_symbol">);</span>
</code></pre>
<p>Or, using the Simplified Constructor approach:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> Transform <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'stream'</span><span class="sh_symbol">).</span>Transform<span class="sh_symbol">;</span>

<span class="sh_keyword">const</span> myTransform <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Transform</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>
  <span class="sh_function">transform</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">,</span> encoding<span class="sh_symbol">,</span> callback<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// ...</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h4>Events: 'finish' and 'end'<span><a class="mark" href="#stream_events_finish_and_end" id="stream_events_finish_and_end">#</a></span></h4>
<p>The <a href="#stream_event_finish"><code>'finish'</code></a> and <a href="#stream_event_end"><code>'end'</code></a> events are from the <code>stream.Writable</code>
and <code>stream.Readable</code> classes, respectively. The <code>'finish'</code> event is emitted
after <a href="#stream_writable_end_chunk_encoding_callback"><code>stream.end()</code></a> is called and all chunks have been processed
by <a href="#stream_transform_transform_chunk_encoding_callback"><code>stream._transform()</code></a>. The <code>'end'</code> event is emitted
after all data has been output, which occurs after the callback in
<a href="#stream_transform_flush_callback"><code>transform._flush()</code></a> has been called.</p>
<h4>transform._flush(callback)<span><a class="mark" href="#stream_transform_flush_callback" id="stream_transform_flush_callback">#</a></span></h4>
<div class="signature"><ul>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> A callback function (optionally with an error
argument) to be called when remaining data has been flushed.</li>
</ul>
</div><p><em>Note</em>: <strong>This function MUST NOT be called by application code directly.</strong> It
should be implemented by child classes, and called only by the internal Readable
class methods only.</p>
<p>In some cases, a transform operation may need to emit an additional bit of
data at the end of the stream. For example, a <code>zlib</code> compression stream will
store an amount of internal state used to optimally compress the output. When
the stream ends, however, that additional data needs to be flushed so that the
compressed data will be complete.</p>
<p>Custom <a href="#stream_class_stream_transform">Transform</a> implementations <em>may</em> implement the <code>transform.\_flush()</code>
method. This will be called when there is no more written data to be consumed,
but before the <a href="#stream_event_end"><code>'end'</code></a> event is emitted signaling the end of the
<a href="#stream_class_stream_readable">Readable</a> stream.</p>
<p>Within the <code>transform.\_flush()</code> implementation, the <code>readable.push()</code> method
may be called zero or more times, as appropriate. The <code>callback</code> function must
be called when the flush operation is complete.</p>
<p>The <code>transform.\_flush()</code> method is prefixed with an underscore because it is
internal to the class that defines it, and should never be called directly by
user programs.</p>
<h4>transform._transform(chunk, encoding, callback)<span><a class="mark" href="#stream_transform_transform_chunk_encoding_callback" id="stream_transform_transform_chunk_encoding_callback">#</a></span></h4>
<div class="signature"><ul>
<li><code>chunk</code> <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> The chunk to be transformed. Will <strong>always</strong>
be a buffer unless the <code>decodeStrings</code> option was set to <code>false</code>.</li>
<li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> If the chunk is a string, then this is the
encoding type. If chunk is a buffer, then this is the special
value - 'buffer', ignore it in this case.</li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> A callback function (optionally with an error
argument and data) to be called after the supplied <code>chunk</code> has been
processed.</li>
</ul>
</div><p><em>Note</em>: <strong>This function MUST NOT be called by application code directly.</strong> It
should be implemented by child classes, and called only by the internal Readable
class methods only.</p>
<p>All Transform stream implementations must provide a <code>_transform()</code>
method to accept input and produce output. The <code>transform.\_transform()</code>
implementation handles the bytes being written, computes an output, then passes
that output off to the readable portion using the <code>readable.push()</code> method.</p>
<p>The <code>transform.push()</code> method may be called zero or more times to generate
output from a single input chunk, depending on how much is to be output
as a result of the chunk.</p>
<p>It is possible that no output is generated from any given chunk of input data.</p>
<p>The <code>callback</code> function must be called only when the current chunk is completely
consumed. The first argument passed to the <code>callback</code> must be an <code>Error</code> object
if an error occurred while processing the input or <code>null</code> otherwise. If a second
argument is passed to the <code>callback</code>, it will be forwarded on to the
<code>readable.push()</code> method. In other words the following are equivalent:</p>
<pre class="sh_sourceCode"><code class="lang-js">transform<span class="sh_symbol">.</span><span class="sh_keyword">prototype</span><span class="sh_symbol">.</span>_transform <span class="sh_symbol">=</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>data<span class="sh_symbol">,</span> encoding<span class="sh_symbol">,</span> callback<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">this</span><span class="sh_symbol">.</span><span class="sh_function">push</span><span class="sh_symbol">(</span>data<span class="sh_symbol">);</span>
  <span class="sh_function">callback</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

transform<span class="sh_symbol">.</span><span class="sh_keyword">prototype</span><span class="sh_symbol">.</span>_transform <span class="sh_symbol">=</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>data<span class="sh_symbol">,</span> encoding<span class="sh_symbol">,</span> callback<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_function">callback</span><span class="sh_symbol">(</span><span class="sh_keyword">null</span><span class="sh_symbol">,</span> data<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
</code></pre>
<p>The <code>transform.\_transform()</code> method is prefixed with an underscore because it
is internal to the class that defines it, and should never be called directly by
user programs.</p>
<h4>Class: stream.PassThrough<span><a class="mark" href="#stream_class_stream_passthrough" id="stream_class_stream_passthrough">#</a></span></h4>
<p>The <code>stream.PassThrough</code> class is a trivial implementation of a <a href="#stream_class_stream_transform">Transform</a>
stream that simply passes the input bytes across to the output. Its purpose is
primarily for examples and testing, but there are some use cases where
<code>stream.PassThrough</code> is useful as a building block for novel sorts of streams.</p>
<h2>Additional Notes<span><a class="mark" href="#stream_additional_notes" id="stream_additional_notes">#</a></span></h2>
<!--type=misc-->
<h3>Compatibility with Older Node.js Versions<span><a class="mark" href="#stream_compatibility_with_older_node_js_versions" id="stream_compatibility_with_older_node_js_versions">#</a></span></h3>
<!--type=misc-->
<p>In versions of Node.js prior to v0.10, the Readable stream interface was
simpler, but also less powerful and less useful.</p>
<ul>
<li>Rather than waiting for calls the <a href="#stream_readable_read_size"><code>stream.read()</code></a> method,
<a href="#stream_event_data"><code>'data'</code></a> events would begin emitting immediately. Applications that
would need to perform some amount of work to decide how to handle data
were required to store read data into buffers so the data would not be lost.</li>
<li>The <a href="#stream_readable_pause"><code>stream.pause()</code></a> method was advisory, rather than
guaranteed. This meant that it was still necessary to be prepared to receive
<a href="#stream_event_data"><code>'data'</code></a> events <em>even when the stream was in a paused state</em>.</li>
</ul>
<p>In Node.js v0.10, the <a href="#stream_class_stream_readable">Readable</a> class was added. For backwards compatibility
with older Node.js programs, Readable streams switch into "flowing mode" when a
<a href="#stream_event_data"><code>'data'</code></a> event handler is added, or when the
<a href="#stream_readable_resume"><code>stream.resume()</code></a> method is called. The effect is that, even
when not using the new <a href="#stream_readable_read_size"><code>stream.read()</code></a> method and
<a href="#stream_event_readable"><code>'readable'</code></a> event, it is no longer necessary to worry about losing
<a href="#stream_event_data"><code>'data'</code></a> chunks.</p>
<p>While most applications will continue to function normally, this introduces an
edge case in the following conditions:</p>
<ul>
<li>No <a href="#stream_event_data"><code>'data'</code></a> event listener is added.</li>
<li>The <a href="#stream_readable_resume"><code>stream.resume()</code></a> method is never called.</li>
<li>The stream is not piped to any writable destination.</li>
</ul>
<p>For example, consider the following code:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// WARNING!  BROKEN!</span>
net<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">((</span>socket<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>

  <span class="sh_comment">// we add an 'end' method, but never consume the data</span>
  socket<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// It will never get here.</span>
    socket<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'The message was received but was not processed.</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">1337</span><span class="sh_symbol">);</span>
</code></pre>
<p>In versions of Node.js prior to v0.10, the incoming message data would be
simply discarded. However, in Node.js v0.10 and beyond, the socket remains
paused forever.</p>
<p>The workaround in this situation is to call the
<a href="#stream_readable_resume"><code>stream.resume()</code></a> method to begin the flow of data:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// Workaround</span>
net<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">((</span>socket<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>

  socket<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    socket<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'The message was received but was not processed.</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

  <span class="sh_comment">// start the flow of data, discarding it.</span>
  socket<span class="sh_symbol">.</span><span class="sh_function">resume</span><span class="sh_symbol">();</span>

<span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">1337</span><span class="sh_symbol">);</span>
</code></pre>
<p>In addition to new Readable streams switching into flowing mode,
pre-v0.10 style streams can be wrapped in a Readable class using the
[<code>readable.wrap()</code>][] method.</p>
<h3><code>readable.read(0)</code><span><a class="mark" href="#stream_readable_read_0" id="stream_readable_read_0">#</a></span></h3>
<p>There are some cases where it is necessary to trigger a refresh of the
underlying readable stream mechanisms, without actually consuming any
data. In such cases, it is possible to call <code>readable.read(0)</code>, which will
always return <code>null</code>.</p>
<p>If the internal read buffer is below the <code>highWaterMark</code>, and the
stream is not currently reading, then calling <code>stream.read(0)</code> will trigger
a low-level <a href="#stream_readable_read_size_1"><code>stream._read()</code></a> call.</p>
<p>While most applications will almost never need to do this, there are
situations within Node.js where this is done, particularly in the
Readable stream class internals.</p>
<h3><code>readable.push('')</code><span><a class="mark" href="#stream_readable_push" id="stream_readable_push">#</a></span></h3>
<p>Use of <code>readable.push('')</code> is not recommended.</p>
<p>Pushing a zero-byte string or <code>Buffer</code> to a stream that is not in object mode
has an interesting side effect. Because it <em>is</em> a call to
<a href="#stream_readable_push_chunk_encoding"><code>readable.push()</code></a>, the call will end the reading process.
However, because the argument is an empty string, no data is added to the
readable buffer so there is nothing for a user to consume.</p>
<!-- [end-include:stream.md] -->
<!-- [start-include:string_decoder.md] -->
<h1>StringDecoder<span><a class="mark" href="#string_decoder_stringdecoder" id="string_decoder_stringdecoder">#</a></span></h1>
<pre class="api_stability api_stability_2 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> Stable</pre><p>The <code>string_decoder</code> module provides an API for decoding <code>Buffer</code> objects into
strings in a manner that preserves encoded multi-byte UTF-8 and UTF-16
characters. It can be accessed using:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> StringDecoder <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'string_decoder'</span><span class="sh_symbol">).</span>StringDecoder<span class="sh_symbol">;</span>
</code></pre>
<p>The following example shows the basic use of the <code>StringDecoder</code> class.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> StringDecoder <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'string_decoder'</span><span class="sh_symbol">).</span>StringDecoder<span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> decoder <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">StringDecoder</span><span class="sh_symbol">(</span><span class="sh_string">'utf8'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> cent <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">([</span><span class="sh_number">0xC2</span><span class="sh_symbol">,</span> <span class="sh_number">0xA2</span><span class="sh_symbol">]);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>decoder<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span>cent<span class="sh_symbol">));</span>

<span class="sh_keyword">const</span> euro <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">([</span><span class="sh_number">0xE2</span><span class="sh_symbol">,</span> <span class="sh_number">0x82</span><span class="sh_symbol">,</span> <span class="sh_number">0xAC</span><span class="sh_symbol">]);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>decoder<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span>euro<span class="sh_symbol">));</span>
</code></pre>
<p>When a <code>Buffer</code> instance is written to the <code>StringDecoder</code> instance, an
internal buffer is used to ensure that the decoded string does not contain
any incomplete multibyte characters. These are held in the buffer until the
next call to <code>stringDecoder.write()</code> or until <code>stringDecoder.end()</code> is called.</p>
<p>In the following example, the three UTF-8 encoded bytes of the European Euro
symbol (<code>€</code>) are written over three separate operations:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> StringDecoder <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'string_decoder'</span><span class="sh_symbol">).</span>StringDecoder<span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> decoder <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">StringDecoder</span><span class="sh_symbol">(</span><span class="sh_string">'utf8'</span><span class="sh_symbol">);</span>

decoder<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span>Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">([</span><span class="sh_number">0xE2</span><span class="sh_symbol">]));</span>
decoder<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span>Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">([</span><span class="sh_number">0x82</span><span class="sh_symbol">]));</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>decoder<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span>Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">([</span><span class="sh_number">0xAC</span><span class="sh_symbol">])));</span>
</code></pre>
<h2>Class: new StringDecoder([encoding])<span><a class="mark" href="#string_decoder_class_new_stringdecoder_encoding" id="string_decoder_class_new_stringdecoder_encoding">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.99</span>
</div><ul>
<li><code>encoding</code> <span class="type">&lt;string&gt;</span> The character encoding the <code>StringDecoder</code> will use.
Defaults to <code>'utf8'</code>.</li>
</ul>
<p>Creates a new <code>StringDecoder</code> instance.</p>
<h3>stringDecoder.end(<a href="https://nodejs.org/api/buffer.html">buffer</a>)<span><a class="mark" href="#string_decoder_stringdecoder_end_buffer" id="string_decoder_stringdecoder_end_buffer">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.9.3</span>
</div><ul>
<li><code>buffer</code> <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> A <code>Buffer</code> containing the bytes to decode.</li>
</ul>
<p>Returns any remaining input stored in the internal buffer as a string. Bytes
representing incomplete UTF-8 and UTF-16 characters will be replaced with
substitution characters appropriate for the character encoding.</p>
<p>If the <code>buffer</code> argument is provided, one final call to <code>stringDecoder.write()</code>
is performed before returning the remaining input.</p>
<h3>stringDecoder.write(buffer)<span><a class="mark" href="#string_decoder_stringdecoder_write_buffer" id="string_decoder_stringdecoder_write_buffer">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.1.99</span>
</div><ul>
<li><code>buffer</code> <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> A <code>Buffer</code> containing the bytes to decode.</li>
</ul>
<p>Returns a decoded string, ensuring that any incomplete multibyte characters at
the end of the <code>Buffer</code> are omitted from the returned string and stored in an
internal buffer for the next call to <code>stringDecoder.write()</code> or
<code>stringDecoder.end()</code>.</p>
<!-- [end-include:string_decoder.md] -->
<!-- [start-include:timers.md] -->
<h1>Timers<span><a class="mark" href="#timers_timers" id="timers_timers">#</a></span></h1>
<pre class="api_stability api_stability_3 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">3</span> <span class="sh_symbol">-</span> Locked</pre><p>All of the timer functions are globals.  You do not need to <code>require()</code>
this module in order to use them.</p>
<h2>clearImmediate(immediateObject)<span><a class="mark" href="#timers_clearimmediate_immediateobject" id="timers_clearimmediate_immediateobject">#</a></span></h2>
<p>Stops an <code>immediateObject</code>, as created by <a href="https://nodejs.org/api/timers.html#timers_setimmediate_callback_arg"><code>setImmediate</code></a>, from triggering.</p>
<h2>clearInterval(intervalObject)<span><a class="mark" href="#timers_clearinterval_intervalobject" id="timers_clearinterval_intervalobject">#</a></span></h2>
<p>Stops an <code>intervalObject</code>, as created by <a href="https://nodejs.org/api/timers.html#timers_setinterval_callback_delay_arg"><code>setInterval</code></a>, from triggering.</p>
<h2>clearTimeout(timeoutObject)<span><a class="mark" href="#timers_cleartimeout_timeoutobject" id="timers_cleartimeout_timeoutobject">#</a></span></h2>
<p>Prevents a <code>timeoutObject</code>, as created by <a href="https://nodejs.org/api/timers.html#timers_settimeout_callback_delay_arg"><code>setTimeout</code></a>, from triggering.</p>
<h2>ref()<span><a class="mark" href="#timers_ref" id="timers_ref">#</a></span></h2>
<p>If a timer was previously <code>unref()</code>d, then <code>ref()</code> can be called to explicitly
request the timer hold the program open. If the timer is already <code>ref</code>d calling
<code>ref</code> again will have no effect.</p>
<p>Returns the timer.</p>
<h2>setImmediate(callback[, arg][, ...])<span><a class="mark" href="#timers_setimmediate_callback_arg" id="timers_setimmediate_callback_arg">#</a></span></h2>
<p>Schedules "immediate" execution of <code>callback</code> after I/O events'
callbacks and before timers set by <a href="https://nodejs.org/api/timers.html#timers_settimeout_callback_delay_arg"><code>setTimeout</code></a> and <a href="https://nodejs.org/api/timers.html#timers_setinterval_callback_delay_arg"><code>setInterval</code></a> are
triggered. Returns an <code>immediateObject</code> for possible use with
<a href="https://nodejs.org/api/timers.html#timers_clearimmediate_immediateobject"><code>clearImmediate</code></a>. Additional optional arguments may be passed to the
callback.</p>
<p>Callbacks for immediates are queued in the order in which they were created.
The entire callback queue is processed every event loop iteration. If an
immediate is queued from inside an executing callback, that immediate won't fire
until the next event loop iteration.</p>
<p>If <code>callback</code> is not a function <code>setImmediate()</code> will throw immediately.</p>
<h2>setInterval(callback, delay[, arg][, ...])<span><a class="mark" href="#timers_setinterval_callback_delay_arg" id="timers_setinterval_callback_delay_arg">#</a></span></h2>
<p>Schedules repeated execution of <code>callback</code> every <code>delay</code> milliseconds.
Returns a <code>intervalObject</code> for possible use with <a href="https://nodejs.org/api/timers.html#timers_clearinterval_intervalobject"><code>clearInterval</code></a>. Additional
optional arguments may be passed to the callback.</p>
<p>To follow browser behavior, when using delays larger than 2147483647
milliseconds (approximately 25 days) or less than 1, Node.js will use 1 as the
<code>delay</code>.</p>
<p>If <code>callback</code> is not a function <code>setInterval()</code> will throw immediately.</p>
<h2>setTimeout(callback, delay[, arg][, ...])<span><a class="mark" href="#timers_settimeout_callback_delay_arg" id="timers_settimeout_callback_delay_arg">#</a></span></h2>
<p>Schedules execution of a one-time <code>callback</code> after <code>delay</code> milliseconds.
Returns a <code>timeoutObject</code> for possible use with <a href="https://nodejs.org/api/timers.html#timers_cleartimeout_timeoutobject"><code>clearTimeout</code></a>. Additional
optional arguments may be passed to the callback.</p>
<p>The callback will likely not be invoked in precisely <code>delay</code> milliseconds.
Node.js makes no guarantees about the exact timing of when callbacks will fire,
nor of their ordering. The callback will be called as close as possible to the
time specified.</p>
<p>To follow browser behavior, when using delays larger than 2147483647
milliseconds (approximately 25 days) or less than 1, the timeout is executed
immediately, as if the <code>delay</code> was set to 1.</p>
<p>If <code>callback</code> is not a function <code>setTimeout()</code> will throw immediately.</p>
<h2>unref()<span><a class="mark" href="#timers_unref" id="timers_unref">#</a></span></h2>
<p>The opaque value returned by <a href="https://nodejs.org/api/timers.html#timers_settimeout_callback_delay_arg"><code>setTimeout</code></a> and <a href="https://nodejs.org/api/timers.html#timers_setinterval_callback_delay_arg"><code>setInterval</code></a> also has the
method <code>timer.unref()</code> which allows the creation of a timer that is active but
if it is the only item left in the event loop, it won't keep the program
running. If the timer is already <code>unref</code>d calling <code>unref</code> again will have no
effect.</p>
<p>In the case of <a href="https://nodejs.org/api/timers.html#timers_settimeout_callback_delay_arg"><code>setTimeout</code></a>, <code>unref</code> creates a separate timer that will
wakeup the event loop, creating too many of these may adversely effect event
loop performance -- use wisely.</p>
<p>Returns the timer.</p>
<!-- [end-include:timers.md] -->
<!-- [start-include:tls.md] -->
<h1>TLS (SSL)<span><a class="mark" href="#tls_tls_ssl" id="tls_tls_ssl">#</a></span></h1>
<pre class="api_stability api_stability_2 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> Stable</pre><p>The <code>tls</code> module provides an implementation of the Transport Layer Security
(TLS) and Secure Socket Layer (SSL) protocols that is built on top of OpenSSL.
The module can be accessed using:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> tls <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'tls'</span><span class="sh_symbol">);</span>
</code></pre>
<h2>TLS/SSL Concepts<span><a class="mark" href="#tls_tls_ssl_concepts" id="tls_tls_ssl_concepts">#</a></span></h2>
<p>The TLS/SSL is a public/private key infrastructure (PKI). For most common
cases, each client and server must have a <em>private key</em>.</p>
<p>Private keys can be generated in multiple ways. The example below illustrates
use of the OpenSSL command-line interface to generate a 2048-bit RSA private
key:</p>
<pre class="sh_sourceCode"><code>openssl genrsa <span class="sh_symbol">-</span>out ryans<span class="sh_symbol">-</span>key<span class="sh_symbol">.</span>pem <span class="sh_number">2048</span>
</code></pre><p>With TLS/SSL, all servers (and some clients) must have a <em>certificate</em>.
Certificates are <em>public keys</em> that correspond to a private key, and that are
digitally signed either by a Certificate Authority or by the owner of the
private key (such certificates are referred to as "self-signed"). The first
step to obtaining a certificate is to create a <em>Certificate Signing Request</em>
(CSR) file.</p>
<p>The OpenSSL command-line interface can be used to generate a CSR for a private
key:</p>
<pre class="sh_sourceCode"><code>openssl req <span class="sh_symbol">-</span><span class="sh_keyword">new</span> <span class="sh_symbol">-</span>sha256 <span class="sh_symbol">-</span>key ryans<span class="sh_symbol">-</span>key<span class="sh_symbol">.</span>pem <span class="sh_symbol">-</span>out ryans<span class="sh_symbol">-</span>csr<span class="sh_symbol">.</span>pem
</code></pre><p>Once the CSR file is generated, it can either be sent to a Certificate
Authority for signing or used to generate a self-signed certificate.</p>
<p>Creating a self-signed certificate using the OpenSSL command-line interface
is illustrated in the example below:</p>
<pre class="sh_sourceCode"><code>openssl x509 <span class="sh_symbol">-</span>req <span class="sh_symbol">-</span><span class="sh_keyword">in</span> ryans<span class="sh_symbol">-</span>csr<span class="sh_symbol">.</span>pem <span class="sh_symbol">-</span>signkey ryans<span class="sh_symbol">-</span>key<span class="sh_symbol">.</span>pem <span class="sh_symbol">-</span>out ryans<span class="sh_symbol">-</span>cert<span class="sh_symbol">.</span>pem
</code></pre><p>Once the certificate is generated, it can be used to generate a <code>.pfx</code> or
<code>.p12</code> file:</p>
<pre class="sh_sourceCode"><code>openssl pkcs12 <span class="sh_symbol">-</span><span class="sh_keyword">export</span> <span class="sh_symbol">-</span><span class="sh_keyword">in</span> ryans<span class="sh_symbol">-</span>cert<span class="sh_symbol">.</span>pem <span class="sh_symbol">-</span>inkey ryans<span class="sh_symbol">-</span>key<span class="sh_symbol">.</span>pem <span class="sh_symbol">\</span>
      <span class="sh_symbol">-</span>certfile ca<span class="sh_symbol">-</span>cert<span class="sh_symbol">.</span>pem <span class="sh_symbol">-</span>out ryans<span class="sh_symbol">.</span>pfx
</code></pre><p>Where:</p>
<ul>
<li><code>in</code>: is the signed certificate</li>
<li><code>inkey</code>: is the associated private key</li>
<li><code>certfile</code>: is a concatenation of all Certificate Authority (CA) certs into
 a single file, e.g. <code>cat ca1-cert.pem ca2-cert.pem &gt; ca-cert.pem</code></li>
</ul>
<h3>Perfect Forward Secrecy<span><a class="mark" href="#tls_perfect_forward_secrecy" id="tls_perfect_forward_secrecy">#</a></span></h3>
<!-- type=misc -->
<p>The term "<a href="https://en.wikipedia.org/wiki/Perfect_forward_secrecy">Forward Secrecy</a>" or "Perfect Forward Secrecy" describes a feature of
key-agreement (i.e., key-exchange) methods. That is, the server and client keys
are used to negotiate new temporary keys that are used specifically and only for
the current communication session. Practically, this means that even if the
server's private key is compromised, communication can only be decrypted by
eavesdroppers if the attacker manages to obtain the key-pair specifically
generated for the session.</p>
<p>Perfect Forward Secrecy is achieved by randomly generating a key pair for
key-agreement on every TLS/SSL handshake (in contrast to using the same key for
all sessions). Methods implementing this technique are called "ephemeral".</p>
<p>Currently two methods are commonly used to achieve Perfect Forward Secrecy (note
the character "E" appended to the traditional abbreviations):</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange">DHE</a> - An ephemeral version of the Diffie Hellman key-agreement protocol.</li>
<li><a href="https://en.wikipedia.org/wiki/Elliptic_curve_Diffie%E2%80%93Hellman">ECDHE</a> - An ephemeral version of the Elliptic Curve Diffie Hellman
key-agreement protocol.</li>
</ul>
<p>Ephemeral methods may have some performance drawbacks, because key generation
is expensive.</p>
<p>To use Perfect Forward Secrecy using <code>DHE</code> with the <code>tls</code> module, it is required
to generate Diffie-Hellman parameters. The following illustrates the use of the
OpenSSL command-line interface to generate such parameters:</p>
<pre class="sh_sourceCode"><code>openssl dhparam <span class="sh_symbol">-</span>outform PEM <span class="sh_symbol">-</span>out dhparam<span class="sh_symbol">.</span>pem <span class="sh_number">2048</span>
</code></pre><p>If using Perfect Foward Secrecy using <code>ECDHE</code>, Diffie-Hellman parameters are
not required and a default ECDHE curve will be used. The <code>ecdheCurve</code> property
can be used when creating a TLS Server to specify the name of an
alternative curve to use.</p>
<h3>ALPN, NPN and SNI<span><a class="mark" href="#tls_alpn_npn_and_sni" id="tls_alpn_npn_and_sni">#</a></span></h3>
<!-- type=misc -->
<p>ALPN (Application-Layer Protocol Negotiation Extension), NPN (Next
Protocol Negotiation) and, SNI (Server Name Indication) are TLS
handshake extensions:</p>
<ul>
<li>ALPN/NPN - Allows the use of one TLS server for multiple protocols (HTTP,
SPDY, HTTP/2)</li>
<li>SNI - Allows the use of one TLS server for multiple hostnames with different
SSL certificates.</li>
</ul>
<p><em>Note</em>: Use of ALPN is recommended over NPN. The NPN extension has never been
formally defined or documented and generally not recommended for use.</p>
<h3>Client-initiated renegotiation attack mitigation<span><a class="mark" href="#tls_client_initiated_renegotiation_attack_mitigation" id="tls_client_initiated_renegotiation_attack_mitigation">#</a></span></h3>
<!-- type=misc -->
<p>The TLS protocol allows clients to renegotiate certain aspects of the TLS
session. Unfortunately, session renegotiation requires a disproportionate amount
of server-side resources, making it a potential vector for denial-of-service
attacks.</p>
<p>To mitigate the risk, renegotiation is limited to three times every ten minutes.
An <code>'error'</code> event is emitted on the <a href="#tls_class_tls_tlssocket"><code>tls.TLSSocket</code></a> instance when this
threshold is exceeded. The limits are configurable:</p>
<ul>
<li><code>tls.CLIENT_RENEG_LIMIT</code> <span class="type">&lt;number&gt;</span> Specifies the number of renegotiation
requests. Defaults to <code>3</code>.</li>
<li><code>tls.CLIENT_RENEG_WINDOW</code> <span class="type">&lt;number&gt;</span> Specifies the time renegotiation window
in seconds. Defaults to <code>600</code> (10 minutes).</li>
</ul>
<p><em>Note</em>: The default renegotiation limits should not be modified without a full
understanding of the implications and risks.</p>
<p>To test the renegotiation limits on a server, connect to it using the OpenSSL
command-line client (<code>openssl s_client -connect address:port</code>) then input
<code>R&lt;CR&gt;</code> (i.e., the letter <code>R</code> followed by a carriage return) multiple times.</p>
<h2>Modifying the Default TLS Cipher suite<span><a class="mark" href="#tls_modifying_the_default_tls_cipher_suite" id="tls_modifying_the_default_tls_cipher_suite">#</a></span></h2>
<p>Node.js is built with a default suite of enabled and disabled TLS ciphers.
Currently, the default cipher suite is:</p>
<pre class="sh_sourceCode"><code>ECDHE<span class="sh_symbol">-</span>RSA<span class="sh_symbol">-</span>AES128<span class="sh_symbol">-</span>GCM<span class="sh_symbol">-</span>SHA256<span class="sh_symbol">:</span>
ECDHE<span class="sh_symbol">-</span>ECDSA<span class="sh_symbol">-</span>AES128<span class="sh_symbol">-</span>GCM<span class="sh_symbol">-</span>SHA256<span class="sh_symbol">:</span>
ECDHE<span class="sh_symbol">-</span>RSA<span class="sh_symbol">-</span>AES256<span class="sh_symbol">-</span>GCM<span class="sh_symbol">-</span>SHA384<span class="sh_symbol">:</span>
ECDHE<span class="sh_symbol">-</span>ECDSA<span class="sh_symbol">-</span>AES256<span class="sh_symbol">-</span>GCM<span class="sh_symbol">-</span>SHA384<span class="sh_symbol">:</span>
DHE<span class="sh_symbol">-</span>RSA<span class="sh_symbol">-</span>AES128<span class="sh_symbol">-</span>GCM<span class="sh_symbol">-</span>SHA256<span class="sh_symbol">:</span>
ECDHE<span class="sh_symbol">-</span>RSA<span class="sh_symbol">-</span>AES128<span class="sh_symbol">-</span>SHA256<span class="sh_symbol">:</span>
DHE<span class="sh_symbol">-</span>RSA<span class="sh_symbol">-</span>AES128<span class="sh_symbol">-</span>SHA256<span class="sh_symbol">:</span>
ECDHE<span class="sh_symbol">-</span>RSA<span class="sh_symbol">-</span>AES256<span class="sh_symbol">-</span>SHA384<span class="sh_symbol">:</span>
DHE<span class="sh_symbol">-</span>RSA<span class="sh_symbol">-</span>AES256<span class="sh_symbol">-</span>SHA384<span class="sh_symbol">:</span>
ECDHE<span class="sh_symbol">-</span>RSA<span class="sh_symbol">-</span>AES256<span class="sh_symbol">-</span>SHA256<span class="sh_symbol">:</span>
DHE<span class="sh_symbol">-</span>RSA<span class="sh_symbol">-</span>AES256<span class="sh_symbol">-</span>SHA256<span class="sh_symbol">:</span>
HIGH<span class="sh_symbol">:</span>
<span class="sh_symbol">!</span>aNULL<span class="sh_symbol">:</span>
<span class="sh_symbol">!</span>eNULL<span class="sh_symbol">:</span>
<span class="sh_symbol">!</span>EXPORT<span class="sh_symbol">:</span>
<span class="sh_symbol">!</span>DES<span class="sh_symbol">:</span>
<span class="sh_symbol">!</span>RC4<span class="sh_symbol">:</span>
<span class="sh_symbol">!</span>MD5<span class="sh_symbol">:</span>
<span class="sh_symbol">!</span>PSK<span class="sh_symbol">:</span>
<span class="sh_symbol">!</span>SRP<span class="sh_symbol">:</span>
<span class="sh_symbol">!</span>CAMELLIA
</code></pre><p>This default can be replaced entirely using the <code>--tls-cipher-list</code> command
line switch. For instance, the following makes
<code>ECDHE-RSA-AES128-GCM-SHA256:!RC4</code> the default TLS cipher suite:</p>
<pre class="sh_sourceCode"><code>node <span class="sh_symbol">--</span>tls<span class="sh_symbol">-</span>cipher<span class="sh_symbol">-</span>list<span class="sh_symbol">=</span><span class="sh_string">"ECDHE-RSA-AES128-GCM-SHA256:!RC4"</span>
</code></pre><p><em>Note</em>: The default cipher suite included within Node.js has been carefully
selected to reflect current security best practices and risk mitigation.
Changing the default cipher suite can have a significant impact on the security
of an application. The <code>--tls-cipher-list</code> switch should by used only if
absolutely necessary.</p>
<h2>Class: tls.Server<span><a class="mark" href="#tls_class_tls_server" id="tls_class_tls_server">#</a></span></h2>
<p>The <code>tls.Server</code> class is a subclass of <code>net.Server</code> that accepts encrypted
connections using TLS or SSL.</p>
<h3>Event: 'tlsClientError'<span><a class="mark" href="#tls_event_tlsclienterror" id="tls_event_tlsclienterror">#</a></span></h3>
<p>The <code>'tlsClientError'</code> event is emitted when an error occurs before a secure
connection is established. The listener callback is passed two arguments when
called:</p>
<ul>
<li><code>exception</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" class="type">&lt;Error&gt;</a> The <code>Error</code> object describing the error</li>
<li><code>tlsSocket</code> <span class="type">&lt;tls.TLSSocket&gt;</span> The <code>tls.TLSSocket</code> instance from which the
error originated.</li>
</ul>
<h3>Event: 'newSession'<span><a class="mark" href="#tls_event_newsession" id="tls_event_newsession">#</a></span></h3>
<p>The <code>'newSession'</code> event is emitted upon creation of a new TLS session. This may
be used to store sessions in external storage. The listener callback is passed
three arguments when called:</p>
<ul>
<li><code>sessionId</code> - The TLS session identifier</li>
<li><code>sessionData</code> - The TLS session data</li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> A callback function taking no arguments that must be
invoked in order for data to be sent or received over the secure connection.</li>
</ul>
<p><em>Note</em>: Listening for this event will have an effect only on connections
established after the addition of the event listener.</p>
<h3>Event: 'OCSPRequest'<span><a class="mark" href="#tls_event_ocsprequest" id="tls_event_ocsprequest">#</a></span></h3>
<p>The <code>'OCSPRequest'</code> event is emitted when the client sends a certificate status
request. The listener callback is passed three arguments when called:</p>
<ul>
<li><code>certificate</code> <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> The server certificate</li>
<li><code>issuer</code> <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> The issuer's certificate</li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> A callback function that must be invoked to provide
the results of the OCSP request.</li>
</ul>
<p>The server's current certificate can be parsed to obtain the OCSP URL
and certificate ID; after obtaining an OCSP response, <code>callback(null, resp)</code> is
then invoked, where <code>resp</code> is a <code>Buffer</code> instance containing the OCSP response.
Both <code>certificate</code> and <code>issuer</code> are <code>Buffer</code> DER-representations of the
primary and issuer's certificates. These can be used to obtain the OCSP
certificate ID and OCSP endpoint URL.</p>
<p>Alternatively, <code>callback(null, null)</code> may be called, indicating that there was
no OCSP response.</p>
<p>Calling <code>callback(err)</code> will result in a <code>socket.destroy(err)</code> call.</p>
<p>The typical flow of an OCSP Request is as follows:</p>
<ol>
<li>Client connects to the server and sends an <code>'OCSPRequest'</code> (via the status
info extension in ClientHello).</li>
<li>Server receives the request and emits the <code>'OCSPRequest'</code> event, calling the
listener if registered.</li>
<li>Server extracts the OCSP URL from either the <code>certificate</code> or <code>issuer</code> and
performs an <a href="https://en.wikipedia.org/wiki/OCSP_stapling">OCSP request</a> to the CA.</li>
<li>Server receives <code>OCSPResponse</code> from the CA and sends it back to the client
via the <code>callback</code> argument</li>
<li>Client validates the response and either destroys the socket or performs a
handshake.</li>
</ol>
<p><em>Note</em>: The <code>issuer</code> can be <code>null</code> if the certificate is either self-signed or
the issuer is not in the root certificates list. (An issuer may be provided
via the <code>ca</code> option when establishing the TLS connection.)</p>
<p><em>Note</em>: Listening for this event will have an effect only on connections
established after the addition of the event listener.</p>
<p><em>Note</em>: An npm module like <a href="https://npmjs.org/package/asn1.js">asn1.js</a> may be used to parse the certificates.</p>
<h3>Event: 'resumeSession'<span><a class="mark" href="#tls_event_resumesession" id="tls_event_resumesession">#</a></span></h3>
<p>The <code>'resumeSession'</code> event is emitted when the client requests to resume a
previous TLS session. The listener callback is passed two arguments when
called:</p>
<ul>
<li><code>sessionId</code> - The TLS/SSL session identifier</li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> A callback function to be called when the prior session
has been recovered.</li>
</ul>
<p>When called, the event listener may perform a lookup in external storage using
the given <code>sessionId</code> and invoke <code>callback(null, sessionData)</code> once finished. If
the session cannot be resumed (i.e., doesn't exist in storage) the callback may
be invoked as <code>callback(null, null)</code>. Calling <code>callback(err)</code> will terminate the
incoming connection and destroy the socket.</p>
<p><em>Note</em>: Listening for this event will have an effect only on connections
established after the addition of the event listener.</p>
<p>The following illustrates resuming a TLS session:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> tlsSessionStore <span class="sh_symbol">=</span> <span class="sh_cbracket">{}</span><span class="sh_symbol">;</span>
server<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'newSession'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>id<span class="sh_symbol">,</span> data<span class="sh_symbol">,</span> cb<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  tlsSessionStore<span class="sh_symbol">[</span>id<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_string">'hex'</span><span class="sh_symbol">)]</span> <span class="sh_symbol">=</span> data<span class="sh_symbol">;</span>
  <span class="sh_function">cb</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
server<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'resumeSession'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>id<span class="sh_symbol">,</span> cb<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_function">cb</span><span class="sh_symbol">(</span><span class="sh_keyword">null</span><span class="sh_symbol">,</span> tlsSessionStore<span class="sh_symbol">[</span>id<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_string">'hex'</span><span class="sh_symbol">)]</span> <span class="sh_symbol">||</span> <span class="sh_keyword">null</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h3>Event: 'secureConnection'<span><a class="mark" href="#tls_event_secureconnection" id="tls_event_secureconnection">#</a></span></h3>
<p>The <code>'secureConnection'</code> event is emitted after the handshaking process for a
new connection has successfully completed. The listener callback is passed a
single argument when called:</p>
<ul>
<li><code>tlsSocket</code> <span class="type">&lt;tls.TLSSocket&gt;</span> The established TLS socket.</li>
</ul>
<p>The <code>tlsSocket.authorized</code> property is a <code>boolean</code> indicating whether the
client has been verified by one of the supplied Certificate Authorities for the
server. If <code>tlsSocket.authorized</code> is <code>false</code>, then <code>socket.authorizationError</code>
is set to describe how authorization failed. Note that depending on the settings
of the TLS server, unauthorized connections may still be accepted.</p>
<p>The <code>tlsSocket.npnProtocol</code> and <code>tlsSocket.alpnProtocol</code> properties are strings
that contain the selected NPN and ALPN protocols, respectively. When both NPN
and ALPN extensions are received, ALPN takes precedence over NPN and the next
protocol is selected by ALPN.</p>
<p>When ALPN has no selected protocol, <code>tlsSocket.alpnProtocol</code> returns <code>false</code>.</p>
<p>The <code>tlsSocket.servername</code> property is a string containing the server name
requested via SNI.</p>
<h3>server.addContext(hostname, context)<span><a class="mark" href="#tls_server_addcontext_hostname_context" id="tls_server_addcontext_hostname_context">#</a></span></h3>
<div class="signature"><ul>
<li><code>hostname</code> <span class="type">&lt;string&gt;</span> A SNI hostname or wildcard (e.g. <code>'*'</code>)</li>
<li><code>context</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> An object containing any of the possible properties
from the <a href="#tls_tls_createsecurecontext_options"><code>tls.createSecureContext()</code></a> <code>options</code> arguments (e.g. <code>key</code>,
<code>cert</code>, <code>ca</code>, etc).</li>
</ul>
</div><p>The <code>server.addContext()</code> method adds a secure context that will be used if
the client request's SNS hostname matches the supplied <code>hostname</code> (or wildcard).</p>
<h3>server.address()<span><a class="mark" href="#tls_server_address" id="tls_server_address">#</a></span></h3>
<p>Returns the bound address, the address family name, and port of the
server as reported by the operating system.  See <a href="https://nodejs.org/api/net.html#net_server_address"><code>net.Server.address()</code></a> for
more information.</p>
<h3>server.close([callback])<span><a class="mark" href="#tls_server_close_callback" id="tls_server_close_callback">#</a></span></h3>
<div class="signature"><ul>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> An optional listener callback that will be registered to
listen for the server instance's <code>'close'</code> event.</li>
</ul>
</div><p>The <code>server.close()</code> method stops the server from accepting new connections.</p>
<p>This function operates asynchronously. The <code>'close'</code> event will be emitted
when the the server is finally closed.</p>
<h3>server.connections<span><a class="mark" href="#tls_server_connections" id="tls_server_connections">#</a></span></h3>
<p>Returns the current number of concurrent connections on the server.</p>
<h3>server.getTicketKeys()<span><a class="mark" href="#tls_server_getticketkeys" id="tls_server_getticketkeys">#</a></span></h3>
<p>Returns a <code>Buffer</code> instance holding the keys currently used for
encryption/decryption of the <a href="https://www.ietf.org/rfc/rfc5077.txt">TLS Session Tickets</a></p>
<h3>server.listen(port[, hostname][, callback])<span><a class="mark" href="#tls_server_listen_port_hostname_callback" id="tls_server_listen_port_hostname_callback">#</a></span></h3>
<div class="signature"><ul>
<li><code>port</code> <span class="type">&lt;number&gt;</span> The TCP/IP port on which to begin listening for connections.
A value of <code>0</code> (zero) will assign a random port.</li>
<li><code>hostname</code> <span class="type">&lt;string&gt;</span> The hostname, IPv4, or IPv6 address on which to begin
listening for connections. If <code>undefined</code>, the server will accept connections
on any IPv6 address (<code>::</code>) when IPv6 is available, or any IPv4 address
(<code>0.0.0.0</code>) otherwise.</li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> A callback function to be invoked when the server has
begun listening the the <code>port</code> and <code>hostname</code>.</li>
</ul>
</div><p>The <code>server.listen()</code> methods instructs the server to begin accepting
connections on the specified <code>port</code> and <code>hostname</code>.</p>
<p>This function operates asynchronously. If the <code>callback</code> is given, it will be
called when the server has started listening.</p>
<p>See <code>net.Server</code> for more information.</p>
<h3>server.setTicketKeys(keys)<span><a class="mark" href="#tls_server_setticketkeys_keys" id="tls_server_setticketkeys_keys">#</a></span></h3>
<div class="signature"><ul>
<li><code>keys</code> <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> The keys used for encryption/decryption of the
<a href="https://www.ietf.org/rfc/rfc5077.txt">TLS Session Tickets</a>.</li>
</ul>
</div><p>Updates the keys for encryption/decryption of the <a href="https://www.ietf.org/rfc/rfc5077.txt">TLS Session Tickets</a>.</p>
<p><em>Note</em>: The key's <code>Buffer</code> should be 48 bytes long. See <code>ticketKeys</code> option in
<a href="#tls_tls_createserver_options_secureconnectionlistener">tls.createServer</a> for
more information on how it is used.</p>
<p><em>Note</em>: Changes to the ticket keys are effective only for future server
connections. Existing or currently pending server connections will use the
previous keys.</p>
<h2>Class: tls.TLSSocket<span><a class="mark" href="#tls_class_tls_tlssocket" id="tls_class_tls_tlssocket">#</a></span></h2>
<p>The <code>tls.TLSSocket</code> is a subclass of <a href="https://nodejs.org/api/net.html#net_class_net_socket"><code>net.Socket</code></a> that performs transparent
encryption of written data and all required TLS negotiation.</p>
<p>Instances of <code>tls.TLSSocket</code> implement the duplex <a href="https://nodejs.org/api/stream.html#stream_stream">Stream</a> interface.</p>
<p><em>Note</em>: Methods that return TLS connection metadata (e.g.
<a href="#tls_tlssocket_getpeercertificate_detailed"><code>tls.TLSSocket.getPeerCertificate()</code></a> will only return data while the
connection is open.</p>
<h3>new tls.TLSSocket(socket[, options])<span><a class="mark" href="#tls_new_tls_tlssocket_socket_options" id="tls_new_tls_tlssocket_socket_options">#</a></span></h3>
<div class="signature"><ul>
<li><code>socket</code> <a href="https://nodejs.org/api/net.html#net_class_net_socket" class="type">&lt;net.Socket&gt;</a> An instance of <a href="https://nodejs.org/api/net.html#net_class_net_socket"><code>net.Socket</code></a></li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>secureContext</code>: An optional TLS context object from
 <a href="#tls_tls_createsecurecontext_options"><code>tls.createSecureContext()</code></a></li>
<li><code>isServer</code>: If <code>true</code> the TLS socket will be instantiated in server-mode.
Defaults to <code>false</code>.</li>
<li><code>server</code> <span class="type">&lt;net.Server&gt;</span> An optional <a href="https://nodejs.org/api/net.html#net_class_net_server"><code>net.Server</code></a> instance.</li>
<li><code>requestCert</code>: Optional, see <a href="#tls_tls_createserver_options_secureconnectionlistener"><code>tls.createServer()</code></a></li>
<li><code>rejectUnauthorized</code>: Optional, see <a href="#tls_tls_createserver_options_secureconnectionlistener"><code>tls.createServer()</code></a></li>
<li><code>NPNProtocols</code>: Optional, see <a href="#tls_tls_createserver_options_secureconnectionlistener"><code>tls.createServer()</code></a></li>
<li><code>ALPNProtocols</code>: Optional, see <a href="#tls_tls_createserver_options_secureconnectionlistener"><code>tls.createServer()</code></a></li>
<li><code>SNICallback</code>: Optional, see <a href="#tls_tls_createserver_options_secureconnectionlistener"><code>tls.createServer()</code></a></li>
<li><code>session</code> <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> An optional <code>Buffer</code> instance containing a TLS session.</li>
<li><code>requestOCSP</code> <span class="type">&lt;boolean&gt;</span> If <code>true</code>, specifies that the OCSP status request
extension will be added to the client hello and an <code>'OCSPResponse'</code> event
will be emitted on the socket before establishing a secure communication</li>
</ul>
</li>
</ul>
</div><p>Construct a new <code>tls.TLSSocket</code> object from an existing TCP socket.</p>
<h3>Event: 'OCSPResponse'<span><a class="mark" href="#tls_event_ocspresponse" id="tls_event_ocspresponse">#</a></span></h3>
<p>The <code>'OCSPResponse'</code> event is emitted if the <code>requestOCSP</code> option was set
when the <code>tls.TLSSocket</code> was created and an OCSP response has been received.
The listener callback is passed a single argument when called:</p>
<ul>
<li><code>response</code> <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> The server's OCSP response</li>
</ul>
<p>Typically, the <code>response</code> is a digitally signed object from the server's CA that
contains information about server's certificate revocation status.</p>
<h3>Event: 'secureConnect'<span><a class="mark" href="#tls_event_secureconnect" id="tls_event_secureconnect">#</a></span></h3>
<p>The <code>'secureConnect'</code> event is emitted after the handshaking process for a new
connection has successfully completed. The listener callback will be called
regardless of whether or not the server's certificate has been authorized. It
is the client's responsibility to check the <code>tlsSocket.authorized</code> property to
determine if the server certificate was signed by one of the specified CAs. If
<code>tlsSocket.authorized === false</code>, then the error can be found by examining the
<code>tlsSocket.authorizationError</code> property. If either ALPN or NPN was used,
the <code>tlsSocket.alpnProtocol</code> or <code>tlsSocket.npnProtocol</code> properties can be
checked to determine the negotiated protocol.</p>
<h3>tlsSocket.address()<span><a class="mark" href="#tls_tlssocket_address" id="tls_tlssocket_address">#</a></span></h3>
<p>Returns the bound address, the address family name, and port of the
underlying socket as reported by the operating system. Returns an
object with three properties, e.g.,
<code>{ port: 12346, family: 'IPv4', address: '127.0.0.1' }</code></p>
<h3>tlsSocket.authorized<span><a class="mark" href="#tls_tlssocket_authorized" id="tls_tlssocket_authorized">#</a></span></h3>
<p>Returns <code>true</code> if the peer certificate was signed by one of the CAs specified
when creating the <code>tls.TLSSocket</code> instance, otherwise <code>false</code>.</p>
<h3>tlsSocket.authorizationError<span><a class="mark" href="#tls_tlssocket_authorizationerror" id="tls_tlssocket_authorizationerror">#</a></span></h3>
<p>Returns the reason why the peer's certificate was not been verified. This
property is set only when <code>tlsSocket.authorized === false</code>.</p>
<h3>tlsSocket.encrypted<span><a class="mark" href="#tls_tlssocket_encrypted" id="tls_tlssocket_encrypted">#</a></span></h3>
<p>Always returns <code>true</code>. This may be used to distinguish TLS sockets from regular
<code>net.Socket</code> instances.</p>
<h3>tlsSocket.getCipher()<span><a class="mark" href="#tls_tlssocket_getcipher" id="tls_tlssocket_getcipher">#</a></span></h3>
<p>Returns an object representing the cipher name and the SSL/TLS protocol version
that first defined the cipher.</p>
<p>For example: <code>{ name: 'AES256-SHA', version: 'TLSv1/SSLv3' }</code></p>
<p>See <code>SSL_CIPHER_get_name()</code> and <code>SSL_CIPHER_get_version()</code> in
<a href="https://www.openssl.org/docs/manmaster/ssl/SSL_CIPHER_get_name.html">https://www.openssl.org/docs/manmaster/ssl/SSL_CIPHER_get_name.html</a> for more
information.</p>
<h3>tlsSocket.getEphemeralKeyInfo()<span><a class="mark" href="#tls_tlssocket_getephemeralkeyinfo" id="tls_tlssocket_getephemeralkeyinfo">#</a></span></h3>
<p>Returns an object representing the type, name, and size of parameter of
an ephemeral key exchange in <a href="#tls_perfect_forward_secrecy">Perfect Forward Secrecy</a> on a client
connection. It returns an empty object when the key exchange is not
ephemeral. As this is only supported on a client socket; <code>null</code> is returned
if called on a server socket. The supported types are <code>'DH'</code> and <code>'ECDH'</code>. The
<code>name</code> property is available only when type is 'ECDH'.</p>
<p>For Example: <code>{ type: 'ECDH', name: 'prime256v1', size: 256 }</code></p>
<h3>tlsSocket.getPeerCertificate([ detailed ])<span><a class="mark" href="#tls_tlssocket_getpeercertificate_detailed" id="tls_tlssocket_getpeercertificate_detailed">#</a></span></h3>
<div class="signature"><ul>
<li><code>detailed</code> <span class="type">&lt;boolean&gt;</span> Specify <code>true</code> to request that the full certificate
chain with the <code>issuer</code> property be returned; <code>false</code> to return only the
top certificate without the <code>issuer</code> property.</li>
</ul>
</div><p>Returns an object representing the peer's certificate. The returned object has
some properties corresponding to the fields of the certificate.</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-text"><span class="sh_cbracket">{</span> subject<span class="sh_symbol">:</span>
   <span class="sh_cbracket">{</span> C<span class="sh_symbol">:</span> <span class="sh_string">'UK'</span><span class="sh_symbol">,</span>
     ST<span class="sh_symbol">:</span> <span class="sh_string">'Acknack Ltd'</span><span class="sh_symbol">,</span>
     L<span class="sh_symbol">:</span> <span class="sh_string">'Rhys Jones'</span><span class="sh_symbol">,</span>
     O<span class="sh_symbol">:</span> <span class="sh_string">'node.js'</span><span class="sh_symbol">,</span>
     OU<span class="sh_symbol">:</span> <span class="sh_string">'Test TLS Certificate'</span><span class="sh_symbol">,</span>
     CN<span class="sh_symbol">:</span> <span class="sh_string">'localhost'</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  issuerInfo<span class="sh_symbol">:</span>
   <span class="sh_cbracket">{</span> C<span class="sh_symbol">:</span> <span class="sh_string">'UK'</span><span class="sh_symbol">,</span>
     ST<span class="sh_symbol">:</span> <span class="sh_string">'Acknack Ltd'</span><span class="sh_symbol">,</span>
     L<span class="sh_symbol">:</span> <span class="sh_string">'Rhys Jones'</span><span class="sh_symbol">,</span>
     O<span class="sh_symbol">:</span> <span class="sh_string">'node.js'</span><span class="sh_symbol">,</span>
     OU<span class="sh_symbol">:</span> <span class="sh_string">'Test TLS Certificate'</span><span class="sh_symbol">,</span>
     CN<span class="sh_symbol">:</span> <span class="sh_string">'localhost'</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  issuer<span class="sh_symbol">:</span>
   <span class="sh_cbracket">{</span> <span class="sh_symbol">...</span> another certificate <span class="sh_symbol">...</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  raw<span class="sh_symbol">:</span> <span class="sh_symbol">&lt;</span> RAW DER buffer <span class="sh_symbol">&gt;,</span>
  valid_from<span class="sh_symbol">:</span> <span class="sh_string">'Nov 11 09:52:22 2009 GMT'</span><span class="sh_symbol">,</span>
  valid_to<span class="sh_symbol">:</span> <span class="sh_string">'Nov  6 09:52:22 2029 GMT'</span><span class="sh_symbol">,</span>
  fingerprint<span class="sh_symbol">:</span> <span class="sh_string">'2A:7A:C2:DD:E5:F9:CC:53:72:35:99:7A:02:5A:71:38:52:EC:8A:DF'</span><span class="sh_symbol">,</span>
  serialNumber<span class="sh_symbol">:</span> <span class="sh_string">'B9B0D332A1AA5635'</span> <span class="sh_cbracket">}</span>
</code></pre>
<p>If the peer does not provide a certificate, <code>null</code> or an empty object will be
returned.</p>
<h3>tlsSocket.getProtocol()<span><a class="mark" href="#tls_tlssocket_getprotocol" id="tls_tlssocket_getprotocol">#</a></span></h3>
<p>Returns a string containing the negotiated SSL/TLS protocol version of the
current connection. The value <code>'unknown'</code> will be returned for connected
sockets that have not completed the handshaking process. The value <code>null</code> will
be returned for server sockets or disconnected client sockets.</p>
<p>Example responses include:</p>
<ul>
<li><code>SSLv3</code></li>
<li><code>TLSv1</code></li>
<li><code>TLSv1.1</code></li>
<li><code>TLSv1.2</code></li>
<li><code>unknown</code></li>
</ul>
<p>See <a href="https://www.openssl.org/docs/manmaster/ssl/SSL_get_version.html">https://www.openssl.org/docs/manmaster/ssl/SSL_get_version.html</a> for more
information.</p>
<h3>tlsSocket.getSession()<span><a class="mark" href="#tls_tlssocket_getsession" id="tls_tlssocket_getsession">#</a></span></h3>
<p>Returns the ASN.1 encoded TLS session or <code>undefined</code> if no session was
negotiated. Can be used to speed up handshake establishment when reconnecting
to the server.</p>
<h3>tlsSocket.getTLSTicket()<span><a class="mark" href="#tls_tlssocket_gettlsticket" id="tls_tlssocket_gettlsticket">#</a></span></h3>
<p>Returns the TLS session ticket or <code>undefined</code> if no session was negotiated.</p>
<p><em>Note</em>: This only works with client TLS sockets. Useful only for debugging, for
session reuse provide <code>session</code> option to <a href="#tls_tls_connect_options_callback"><code>tls.connect()</code></a>.</p>
<h3>tlsSocket.localAddress<span><a class="mark" href="#tls_tlssocket_localaddress" id="tls_tlssocket_localaddress">#</a></span></h3>
<p>Returns the string representation of the local IP address.</p>
<h3>tlsSocket.localPort<span><a class="mark" href="#tls_tlssocket_localport" id="tls_tlssocket_localport">#</a></span></h3>
<p>Returns the numeric representation of the local port.</p>
<h3>tlsSocket.remoteAddress<span><a class="mark" href="#tls_tlssocket_remoteaddress" id="tls_tlssocket_remoteaddress">#</a></span></h3>
<p>Returns the string representation of the remote IP address. For example,
<code>'74.125.127.100'</code> or <code>'2001:4860:a005::68'</code>.</p>
<h3>tlsSocket.remoteFamily<span><a class="mark" href="#tls_tlssocket_remotefamily" id="tls_tlssocket_remotefamily">#</a></span></h3>
<p>Returns the string representation of the remote IP family. <code>'IPv4'</code> or <code>'IPv6'</code>.</p>
<h3>tlsSocket.remotePort<span><a class="mark" href="#tls_tlssocket_remoteport" id="tls_tlssocket_remoteport">#</a></span></h3>
<p>Returns the numeric representation of the remote port. For example, <code>443</code>.</p>
<h3>tlsSocket.renegotiate(options, callback)<span><a class="mark" href="#tls_tlssocket_renegotiate_options_callback" id="tls_tlssocket_renegotiate_options_callback">#</a></span></h3>
<div class="signature"><ul>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>rejectUnauthorized</code> <span class="type">&lt;boolean&gt;</span></li>
<li><code>requestCert</code></li>
</ul>
</li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> A function that will be called when the renegotiation
request has been completed.</li>
</ul>
</div><p>The <code>tlsSocket.renegotiate()</code> method initiates a TLS renegotiation process.
Upon completion, the <code>callback</code> function will be passed a single argument
that is either an <code>Error</code> (if the request failed) or <code>null</code>.</p>
<p><em>Note</em>: This method can be used to request a peer's certificate after the
secure connection has been established.</p>
<p><em>Note</em>: When running as the server, the socket will be destroyed with an error
after <code>handshakeTimeout</code> timeout.</p>
<h3>tlsSocket.setMaxSendFragment(size)<span><a class="mark" href="#tls_tlssocket_setmaxsendfragment_size" id="tls_tlssocket_setmaxsendfragment_size">#</a></span></h3>
<div class="signature"><ul>
<li><code>size</code> <span class="type">&lt;number&gt;</span> The maximum TLS fragment size. Defaults to <code>16384</code>. The
maximum value is <code>16384</code>.</li>
</ul>
</div><p>The <code>tlsSocket.setMaxSendFragment()</code> method sets the maximum TLS fragment size.
Returns <code>true</code> if setting the limit succeeded; <code>false</code> otherwise.</p>
<p>Smaller fragment sizes decrease the buffering latency on the client: larger
fragments are buffered by the TLS layer until the entire fragment is received
and its integrity is verified; large fragments can span multiple roundtrips
and their processing can be delayed due to packet loss or reordering. However,
smaller fragments add extra TLS framing bytes and CPU overhead, which may
decrease overall server throughput.</p>
<h2>tls.connect(options[, callback])<span><a class="mark" href="#tls_tls_connect_options_callback" id="tls_tls_connect_options_callback">#</a></span></h2>
<div class="signature"><ul>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>host</code> <span class="type">&lt;string&gt;</span> Host the client should connect to.</li>
<li><code>port</code> <span class="type">&lt;number&gt;</span> Port the client should connect to.</li>
<li><code>socket</code> <a href="https://nodejs.org/api/net.html#net_class_net_socket" class="type">&lt;net.Socket&gt;</a> Establish secure connection on a given socket rather
than creating a new socket. If this option is specified, <code>host</code> and <code>port</code>
are ignored.</li>
<li><code>path</code> <span class="type">&lt;string&gt;</span> Creates unix socket connection to path. If this option is
specified, <code>host</code> and <code>port</code> are ignored.</li>
<li><code>pfx</code> <span class="type">&lt;string&gt;</span> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> A string or <code>Buffer</code> containing the private key,
certificate, and CA certs of the client in PFX or PKCS12 format.</li>
<li><code>key</code> <span class="type">&lt;string&gt;</span> | <span class="type">&lt;stringp[]&gt;</span> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <span class="type">&lt;Buffer[]&gt;</span> A string, <code>Buffer</code>, array of
strings, or array of <code>Buffer</code>s containing the private key of the client in
PEM format.</li>
<li><code>passphrase</code> <span class="type">&lt;string&gt;</span> A string containing the passphrase for the private key
or pfx.</li>
<li><code>cert</code> <span class="type">&lt;string&gt;</span> | <span class="type">&lt;string[]&gt;</span> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <span class="type">&lt;Buffer[]&gt;</span> A string, <code>Buffer</code>, array of
strings, or array of <code>Buffer</code>s containing the certificate key of the client
in PEM format.</li>
<li><code>ca</code> <span class="type">&lt;string&gt;</span> | <span class="type">&lt;string[]&gt;</span> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <span class="type">&lt;Buffer[]&gt;</span> A string, <code>Buffer</code>, array of strings,
or array of <code>Buffer</code>s of trusted certificates in PEM format. If this is
omitted several well known "root" CAs (like VeriSign) will be used. These
are used to authorize connections.</li>
<li><code>ciphers</code> <span class="type">&lt;string&gt;</span> A string describing the ciphers to use or exclude,
separated by <code>:</code>. Uses the same default cipher suite as
<a href="#tls_tls_createserver_options_secureconnectionlistener"><code>tls.createServer()</code></a>.</li>
<li><code>rejectUnauthorized</code> <span class="type">&lt;boolean&gt;</span> If <code>true</code>, the server certificate is verified
against the list of supplied CAs. An <code>'error'</code> event is emitted if
verification fails; <code>err.code</code> contains the OpenSSL error code. Defaults to
<code>true</code>.</li>
<li><code>NPNProtocols</code> <span class="type">&lt;string[]&gt;</span> | <span class="type">&lt;Buffer[]&gt;</span> An array of strings or <code>Buffer</code>s
containing supported NPN protocols. <code>Buffer</code>s should have the format
<code>[len][name][len][name]...</code> e.g. <code>0x05hello0x05world</code>, where the first
byte is the length of the next protocol name. Passing an array is usually
much simpler, e.g. <code>['hello', 'world']</code>.</li>
<li><code>ALPNProtocols</code>: <span class="type">&lt;string[]&gt;</span> | <span class="type">&lt;Buffer[]&gt;</span> An array of strings or <code>Buffer</code>s
containing the supported ALPN protocols. <code>Buffer</code>s should have the format
<code>[len][name][len][name]...</code> e.g. <code>0x05hello0x05world</code>, where the first byte
is the length of the next protocol name. Passing an array is usually much
simpler: <code>['hello', 'world']</code>.)</li>
<li><code>servername</code>: <span class="type">&lt;string&gt;</span> Server name for the SNI (Server Name Indication) TLS
extension.</li>
<li><code>checkServerIdentity(servername, cert)</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> A callback function
to be used when checking the server's hostname against the certificate.
This should throw an error if verification fails. The method should return
<code>undefined</code> if the <code>servername</code> and <code>cert</code> are verified.</li>
<li><code>secureProtocol</code> <span class="type">&lt;string&gt;</span> The SSL method to use, e.g., <code>SSLv3_method</code> to
force SSL version 3. The possible values depend on the version of OpenSSL
installed in the environment and are defined in the constant
<a href="https://www.openssl.org/docs/ssl/ssl.html#DEALING-WITH-PROTOCOL-METHODS">SSL_METHODS</a>.</li>
<li><code>secureContext</code> <span class="type">&lt;object&gt;</span> An optional TLS context object as returned by from
<code>tls.createSecureContext( ... )</code>. It can be used for caching client
certificates, keys, and CA certificates.</li>
<li><code>session</code> <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> A <code>Buffer</code> instance, containing TLS session.</li>
<li><code>minDHSize</code> <span class="type">&lt;number&gt;</span> Minimum size of the DH parameter in bits to accept a
TLS connection. When a server offers a DH parameter with a size less
than <code>minDHSize</code>, the TLS connection is destroyed and an error is thrown.
Defaults to <code>1024</code>.</li>
</ul>
</li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
</div><p>Creates a new client connection to the given <code>options.port</code> and <code>options.host</code>
If <code>options.host</code> is omitted, it defaults to <code>localhost</code>.</p>
<p>The <code>callback</code> function, if specified, will be added as a listener for the
<a href="#tls_event_secureconnect"><code>'secureConnect'</code></a> event.</p>
<p><code>tls.connect()</code> returns a <a href="#tls_class_tls_tlssocket"><code>tls.TLSSocket</code></a> object.</p>
<h2>tls.connect(port[, host][, options][, callback])<span><a class="mark" href="#tls_tls_connect_port_host_options_callback" id="tls_tls_connect_port_host_options_callback">#</a></span></h2>
<div class="signature"><ul>
<li><code>port</code> <span class="type">&lt;number&gt;</span></li>
<li><code>host</code> <span class="type">&lt;string&gt;</span></li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>host</code> <span class="type">&lt;string&gt;</span> Host the client should connect to.</li>
<li><code>port</code> <span class="type">&lt;number&gt;</span> Port the client should connect to.</li>
<li><code>socket</code> <a href="https://nodejs.org/api/net.html#net_class_net_socket" class="type">&lt;net.Socket&gt;</a> Establish secure connection on a given socket rather
than creating a new socket. If this option is specified, <code>host</code> and <code>port</code>
are ignored.</li>
<li><code>path</code> <span class="type">&lt;string&gt;</span> Creates unix socket connection to path. If this option is
specified, <code>host</code> and <code>port</code> are ignored.</li>
<li><code>pfx</code> <span class="type">&lt;string&gt;</span> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> A string or <code>Buffer</code> containing the private key,
certificate, and CA certs of the client in PFX or PKCS12 format.</li>
<li><code>key</code> <span class="type">&lt;string&gt;</span> | <span class="type">&lt;stringp[]&gt;</span> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <span class="type">&lt;Buffer[]&gt;</span> A string, <code>Buffer</code>, array of
strings, or array of <code>Buffer</code>s containing the private key of the client in
PEM format.</li>
<li><code>passphrase</code> <span class="type">&lt;string&gt;</span> A string containing the passphrase for the private key
or pfx.</li>
<li><code>cert</code> <span class="type">&lt;string&gt;</span> | <span class="type">&lt;string[]&gt;</span> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <span class="type">&lt;Buffer[]&gt;</span> A string, <code>Buffer</code>, array of
strings, or array of <code>Buffer</code>s containing the certificate key of the client
in PEM format.</li>
<li><code>ca</code> <span class="type">&lt;string&gt;</span> | <span class="type">&lt;string[]&gt;</span> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <span class="type">&lt;Buffer[]&gt;</span> A string, <code>Buffer</code>, array of strings,
or array of <code>Buffer</code>s of trusted certificates in PEM format. If this is
omitted several well known "root" CAs (like VeriSign) will be used. These
are used to authorize connections.</li>
<li><code>ciphers</code> <span class="type">&lt;string&gt;</span> A string describing the ciphers to use or exclude,
separated by <code>:</code>. Uses the same default cipher suite as
<a href="#tls_tls_createserver_options_secureconnectionlistener"><code>tls.createServer()</code></a>.</li>
<li><code>rejectUnauthorized</code> <span class="type">&lt;boolean&gt;</span> If <code>true</code>, the server certificate is verified
against the list of supplied CAs. An <code>'error'</code> event is emitted if
verification fails; <code>err.code</code> contains the OpenSSL error code. Defaults to
<code>true</code>.</li>
<li><code>NPNProtocols</code> <span class="type">&lt;string[]&gt;</span> | <span class="type">&lt;Buffer[]&gt;</span> An array of strings or <code>Buffer</code>s
containing supported NPN protocols. <code>Buffer</code>s should have the format
<code>[len][name][len][name]...</code> e.g. <code>0x05hello0x05world</code>, where the first
byte is the length of the next protocol name. Passing an array is usually
much simpler, e.g. <code>['hello', 'world']</code>.</li>
<li><code>ALPNProtocols</code>: <span class="type">&lt;string[]&gt;</span> | <span class="type">&lt;Buffer[]&gt;</span> An array of strings or <code>Buffer</code>s
containing the supported ALPN protocols. <code>Buffer</code>s should have the format
<code>[len][name][len][name]...</code> e.g. <code>0x05hello0x05world</code>, where the first byte
is the length of the next protocol name. Passing an array is usually much
simpler: <code>['hello', 'world']</code>.)</li>
<li><code>servername</code>: <span class="type">&lt;string&gt;</span> Server name for the SNI (Server Name Indication) TLS
extension.</li>
<li><code>checkServerIdentity(servername, cert)</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> A callback function
to be used when checking the server's hostname against the certificate.
This should throw an error if verification fails. The method should return
<code>undefined</code> if the <code>servername</code> and <code>cert</code> are verified.</li>
<li><code>secureProtocol</code> <span class="type">&lt;string&gt;</span> The SSL method to use, e.g., <code>SSLv3_method</code> to
force SSL version 3. The possible values depend on the version of OpenSSL
installed in the environment and are defined in the constant
<a href="https://www.openssl.org/docs/ssl/ssl.html#DEALING-WITH-PROTOCOL-METHODS">SSL_METHODS</a>.</li>
<li><code>secureContext</code> <span class="type">&lt;object&gt;</span> An optional TLS context object as returned by from
<code>tls.createSecureContext( ... )</code>. It can be used for caching client
certificates, keys, and CA certificates.</li>
<li><code>session</code> <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> A <code>Buffer</code> instance, containing TLS session.</li>
<li><code>minDHSize</code> <span class="type">&lt;number&gt;</span> Minimum size of the DH parameter in bits to accept a
TLS connection. When a server offers a DH parameter with a size less
than <code>minDHSize</code>, the TLS connection is destroyed and an error is thrown.
Defaults to <code>1024</code>.</li>
</ul>
</li>
<li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
</div><p>Creates a new client connection to the given <code>port</code> and <code>host</code> or
<code>options.port</code> and <code>options.host</code>. (If <code>host</code> is omitted, it defaults to
<code>localhost</code>.)</p>
<p>The <code>callback</code> function, if specified, will be added as a listener for the
<a href="#tls_event_secureconnect"><code>'secureConnect'</code></a> event.</p>
<p><code>tls.connect()</code> returns a <a href="#tls_class_tls_tlssocket"><code>tls.TLSSocket</code></a> object.</p>
<p>The following implements a simple "echo server" example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> tls <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'tls'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> fs <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'fs'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> options <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// Necessary only if using the client certificate authentication</span>
  key<span class="sh_symbol">:</span> fs<span class="sh_symbol">.</span><span class="sh_function">readFileSync</span><span class="sh_symbol">(</span><span class="sh_string">'client-key.pem'</span><span class="sh_symbol">),</span>
  cert<span class="sh_symbol">:</span> fs<span class="sh_symbol">.</span><span class="sh_function">readFileSync</span><span class="sh_symbol">(</span><span class="sh_string">'client-cert.pem'</span><span class="sh_symbol">),</span>

  <span class="sh_comment">// Necessary only if the server uses the self-signed certificate</span>
  ca<span class="sh_symbol">:</span> <span class="sh_symbol">[</span> fs<span class="sh_symbol">.</span><span class="sh_function">readFileSync</span><span class="sh_symbol">(</span><span class="sh_string">'server-cert.pem'</span><span class="sh_symbol">)</span> <span class="sh_symbol">]</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

<span class="sh_keyword">const</span> socket <span class="sh_symbol">=</span> tls<span class="sh_symbol">.</span><span class="sh_function">connect</span><span class="sh_symbol">(</span><span class="sh_number">8000</span><span class="sh_symbol">,</span> options<span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'client connected'</span><span class="sh_symbol">,</span>
              socket<span class="sh_symbol">.</span>authorized <span class="sh_symbol">?</span> <span class="sh_string">'authorized'</span> <span class="sh_symbol">:</span> <span class="sh_string">'unauthorized'</span><span class="sh_symbol">);</span>
  process<span class="sh_symbol">.</span>stdin<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>socket<span class="sh_symbol">);</span>
  process<span class="sh_symbol">.</span>stdin<span class="sh_symbol">.</span><span class="sh_function">resume</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
socket<span class="sh_symbol">.</span><span class="sh_function">setEncoding</span><span class="sh_symbol">(</span><span class="sh_string">'utf8'</span><span class="sh_symbol">);</span>
socket<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>data<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>data<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
socket<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  server<span class="sh_symbol">.</span><span class="sh_function">close</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>Or</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> tls <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'tls'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> fs <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'fs'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> options <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span>
  pfx<span class="sh_symbol">:</span> fs<span class="sh_symbol">.</span><span class="sh_function">readFileSync</span><span class="sh_symbol">(</span><span class="sh_string">'client.pfx'</span><span class="sh_symbol">)</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

<span class="sh_keyword">const</span> socket <span class="sh_symbol">=</span> tls<span class="sh_symbol">.</span><span class="sh_function">connect</span><span class="sh_symbol">(</span><span class="sh_number">8000</span><span class="sh_symbol">,</span> options<span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'client connected'</span><span class="sh_symbol">,</span>
              socket<span class="sh_symbol">.</span>authorized <span class="sh_symbol">?</span> <span class="sh_string">'authorized'</span> <span class="sh_symbol">:</span> <span class="sh_string">'unauthorized'</span><span class="sh_symbol">);</span>
  process<span class="sh_symbol">.</span>stdin<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>socket<span class="sh_symbol">);</span>
  process<span class="sh_symbol">.</span>stdin<span class="sh_symbol">.</span><span class="sh_function">resume</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
socket<span class="sh_symbol">.</span><span class="sh_function">setEncoding</span><span class="sh_symbol">(</span><span class="sh_string">'utf8'</span><span class="sh_symbol">);</span>
socket<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>data<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>data<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
socket<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  server<span class="sh_symbol">.</span><span class="sh_function">close</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h2>tls.createSecureContext(options)<span><a class="mark" href="#tls_tls_createsecurecontext_options" id="tls_tls_createsecurecontext_options">#</a></span></h2>
<div class="signature"><ul>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>pfx</code> <span class="type">&lt;string&gt;</span> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> A string or <code>Buffer</code> holding the PFX or PKCS12 encoded
private key, certificate, and CA certificates.</li>
<li><code>key</code> <span class="type">&lt;string&gt;</span> | <span class="type">&lt;string[]&gt;</span> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <span class="type">&lt;Object[]&gt;</span> The private key of the server in
PEM format. To support multiple keys using different algorithms, an array
can be provided either as an array of key strings or as an array of objects
in the format <code>{pem: key, passphrase: passphrase}</code>. This option is
<em>required</em> for ciphers that make use of private keys.</li>
<li><code>passphrase</code> <span class="type">&lt;string&gt;</span> A string containing the passphrase for the private key
or pfx.</li>
<li><code>cert</code> <span class="type">&lt;string&gt;</span> A string containing the PEM encoded certificate</li>
<li><code>ca</code><span class="type">&lt;string&gt;</span> | <span class="type">&lt;string[]&gt;</span> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <span class="type">&lt;Buffer[]&gt;</span> A string, <code>Buffer</code>, array of strings,
or array of <code>Buffer</code>s of trusted certificates in PEM format. If omitted,
several well known "root" CAs (like VeriSign) will be used. These are used
to authorize connections.</li>
<li><code>crl</code> <span class="type">&lt;string&gt;</span> | <span class="type">&lt;string[]&gt;</span> Either a string or array of strings of PEM encoded
CRLs (Certificate Revocation List).</li>
<li><code>ciphers</code> <span class="type">&lt;string&gt;</span> A string describing the ciphers to use or exclude.
Consult
<a href="https://www.openssl.org/docs/apps/ciphers.html#CIPHER-LIST-FORMAT">https://www.openssl.org/docs/apps/ciphers.html#CIPHER-LIST-FORMAT</a>
for details on the format.</li>
<li><code>honorCipherOrder</code> <span class="type">&lt;boolean&gt;</span> If <code>true</code>, when a cipher is being selected,
the server's preferences will be used instead of the client preferences.</li>
</ul>
</li>
</ul>
</div><p>The <code>tls.createSecureContext()</code> method creates a credentials object.</p>
<p>If the 'ca' option is not given, then Node.js will use the default
publicly trusted list of CAs as given in
<a href="http://mxr.mozilla.org/mozilla/source/security/nss/lib/ckfw/builtins/certdata.txt">http://mxr.mozilla.org/mozilla/source/security/nss/lib/ckfw/builtins/certdata.txt</a>.</p>
<h2>tls.createServer(options[, secureConnectionListener])<span><a class="mark" href="#tls_tls_createserver_options_secureconnectionlistener" id="tls_tls_createserver_options_secureconnectionlistener">#</a></span></h2>
<div class="signature"><ul>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>pfx</code> <span class="type">&lt;string&gt;</span> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> A string or <code>Buffer</code> containing the private key,
certificate and CA certs of the server in PFX or PKCS12 format. (Mutually
exclusive with the <code>key</code>, <code>cert</code>, and <code>ca</code> options.)</li>
<li><code>key</code> <span class="type">&lt;string&gt;</span> | <span class="type">&lt;string[]&gt;</span> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <span class="type">&lt;Object[]&gt;</span> The private key of the server in
PEM format. To support multiple keys using different algorithms an array can
be provided either as a plain array of key strings or an array of objects
in the format <code>{pem: key, passphrase: passphrase}</code>. This option is
<em>required</em> for ciphers that make use of private keys.</li>
<li><code>passphrase</code> <span class="type">&lt;string&gt;</span> A string containing the passphrase for the private
key or pfx.</li>
<li><code>cert</code> <span class="type">&lt;string&gt;</span> | <span class="type">&lt;string[]&gt;</span> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <span class="type">&lt;Buffer[]&gt;</span> A string, <code>Buffer</code>, array of
strings, or array of <code>Buffer</code>s containing the certificate key of the server
in PEM format. (Required)</li>
<li><code>ca</code> <span class="type">&lt;string&gt;</span> | <span class="type">&lt;string[]&gt;</span> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> | <span class="type">&lt;Buffer[]&gt;</span> A string, <code>Buffer</code>, array of strings,
or array of <code>Buffer</code>s of trusted certificates in PEM format. If this is
omitted several well known "root" CAs (like VeriSign) will be used. These
are used to authorize connections.</li>
<li><code>crl</code> <span class="type">&lt;string&gt;</span> | <span class="type">&lt;string[]&gt;</span> Either a string or array of strings of PEM encoded
CRLs (Certificate Revocation List).</li>
<li><code>ciphers</code> <span class="type">&lt;string&gt;</span> A string describing the ciphers to use or exclude,
separated by <code>:</code>.</li>
<li><code>ecdhCurve</code> <span class="type">&lt;string&gt;</span> A string describing a named curve to use for ECDH key
agreement or <code>false</code> to disable ECDH. Defaults to <code>prime256v1</code> (NIST P-256).
Use <a href="https://nodejs.org/api/crypto.html#crypto_crypto_getcurves"><code>crypto.getCurves()</code></a> to obtain a list of available curve names. On
recent releases, <code>openssl ecparam -list_curves</code> will also display the name
and description of each available elliptic curve.</li>
<li><code>dhparam</code> <span class="type">&lt;string&gt;</span> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> A string or <code>Buffer</code> containing Diffie Hellman
parameters, required for <a href="#tls_perfect_forward_secrecy">Perfect Forward Secrecy</a>. Use
<code>openssl dhparam</code> to create the parameters. The key length must be greater
than or equal to 1024 bits, otherwise an error will be thrown. It is
strongly recommended to use 2048 bits or larger for stronger security. If
omitted or invalid, the parameters are silently discarded and DHE ciphers
will not be available.</li>
<li><code>handshakeTimeout</code> <span class="type">&lt;number&gt;</span> Abort the connection if the SSL/TLS handshake
does not finish in the specified number of milliseconds. Defaults to <code>120</code>
seconds. A <code>'clientError'</code> is emitted on the <code>tls.Server</code> object whenever a
handshake times out.</li>
<li><code>honorCipherOrder</code> <span class="type">&lt;boolean&gt;</span> When choosing a cipher, use the server's
preferences instead of the client preferences. Defaults to <code>true</code>.</li>
<li><code>requestCert</code> <span class="type">&lt;boolean&gt;</span> If <code>true</code> the server will request a certificate from
clients that connect and attempt to verify that certificate. Defaults to
<code>false</code>.</li>
<li><code>rejectUnauthorized</code> <span class="type">&lt;boolean&gt;</span> If <code>true</code> the server will reject any
connection which is not authorized with the list of supplied CAs. This
option only has an effect if <code>requestCert</code> is <code>true</code>. Defaults to <code>false</code>.</li>
<li><code>NPNProtocols</code> <span class="type">&lt;string[]&gt;</span> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> An array of strings or a <code>Buffer</code> naming
possible NPN protocols. (Protocols should be ordered by their priority.)</li>
<li><code>ALPNProtocols</code> <span class="type">&lt;string[]&gt;</span> | <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> An array of strings or a <code>Buffer</code> naming
possible ALPN protocols. (Protocols should be ordered by their priority.)
When the server receives both NPN and ALPN extensions from the client,
ALPN takes precedence over NPN and the server does not send an NPN
extension to the client.</li>
<li><code>SNICallback(servername, cb)</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> A function that will be called if
the client supports SNI TLS extension. Two arguments will be passed when
called: <code>servername</code> and <code>cb</code>. <code>SNICallback</code> should invoke <code>cb(null, ctx)</code>,
where <code>ctx</code> is a SecureContext instance. (<code>tls.createSecureContext(...)</code> can
be used to get a proper SecureContext.) If <code>SNICallback</code> wasn't provided the
default callback with high-level API will be used (see below).</li>
<li><code>sessionTimeout</code> <span class="type">&lt;number&gt;</span> An integer specifying the number of seconds after
which the TLS session identifiers and TLS session tickets created by the
server will time out. See <a href="https://www.openssl.org/docs/ssl/SSL_CTX_set_timeout.html">SSL_CTX_set_timeout</a> for more details.</li>
<li><code>ticketKeys</code>: A 48-byte <code>Buffer</code> instance consisting of a 16-byte prefix,
a 16-byte HMAC key, and a 16-byte AES key. This can be used to accept TLS
session tickets on multiple instances of the TLS server. <em>Note</em> that this is
automatically shared between <code>cluster</code> module workers.</li>
<li><code>sessionIdContext</code> <span class="type">&lt;string&gt;</span> A string containing an opaque identifier for
session resumption. If <code>requestCert</code> is <code>true</code>, the default is a 128 bit
truncated SHA1 hash value generated from the command-line. Otherwise, a
default is not provided.</li>
<li><code>secureProtocol</code> <span class="type">&lt;string&gt;</span> The SSL method to use, e.g., <code>SSLv3_method</code> to
force SSL version 3. The possible values depend on the version of OpenSSL
installed in the environment and are defined in the constant
<a href="https://www.openssl.org/docs/ssl/ssl.html#DEALING-WITH-PROTOCOL-METHODS">SSL_METHODS</a>.</li>
</ul>
</li>
<li><code>secureConnectionListener</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
</div><p>Creates a new <a href="#tls_class_tls_server">tls.Server</a>.  The <code>secureConnectionListener</code>, if provided, is
automatically set as a listener for the <a href="#tls_event_secureconnection"><code>'secureConnection'</code></a> event.</p>
<p>For the <code>ciphers</code> option, the default cipher suite is:</p>
<pre class="sh_sourceCode"><code class="lang-text">ECDHE<span class="sh_symbol">-</span>RSA<span class="sh_symbol">-</span>AES128<span class="sh_symbol">-</span>GCM<span class="sh_symbol">-</span>SHA256<span class="sh_symbol">:</span>
ECDHE<span class="sh_symbol">-</span>ECDSA<span class="sh_symbol">-</span>AES128<span class="sh_symbol">-</span>GCM<span class="sh_symbol">-</span>SHA256<span class="sh_symbol">:</span>
ECDHE<span class="sh_symbol">-</span>RSA<span class="sh_symbol">-</span>AES256<span class="sh_symbol">-</span>GCM<span class="sh_symbol">-</span>SHA384<span class="sh_symbol">:</span>
ECDHE<span class="sh_symbol">-</span>ECDSA<span class="sh_symbol">-</span>AES256<span class="sh_symbol">-</span>GCM<span class="sh_symbol">-</span>SHA384<span class="sh_symbol">:</span>
DHE<span class="sh_symbol">-</span>RSA<span class="sh_symbol">-</span>AES128<span class="sh_symbol">-</span>GCM<span class="sh_symbol">-</span>SHA256<span class="sh_symbol">:</span>
ECDHE<span class="sh_symbol">-</span>RSA<span class="sh_symbol">-</span>AES128<span class="sh_symbol">-</span>SHA256<span class="sh_symbol">:</span>
DHE<span class="sh_symbol">-</span>RSA<span class="sh_symbol">-</span>AES128<span class="sh_symbol">-</span>SHA256<span class="sh_symbol">:</span>
ECDHE<span class="sh_symbol">-</span>RSA<span class="sh_symbol">-</span>AES256<span class="sh_symbol">-</span>SHA384<span class="sh_symbol">:</span>
DHE<span class="sh_symbol">-</span>RSA<span class="sh_symbol">-</span>AES256<span class="sh_symbol">-</span>SHA384<span class="sh_symbol">:</span>
ECDHE<span class="sh_symbol">-</span>RSA<span class="sh_symbol">-</span>AES256<span class="sh_symbol">-</span>SHA256<span class="sh_symbol">:</span>
DHE<span class="sh_symbol">-</span>RSA<span class="sh_symbol">-</span>AES256<span class="sh_symbol">-</span>SHA256<span class="sh_symbol">:</span>
HIGH<span class="sh_symbol">:</span>
<span class="sh_symbol">!</span>aNULL<span class="sh_symbol">:</span>
<span class="sh_symbol">!</span>eNULL<span class="sh_symbol">:</span>
<span class="sh_symbol">!</span>EXPORT<span class="sh_symbol">:</span>
<span class="sh_symbol">!</span>DES<span class="sh_symbol">:</span>
<span class="sh_symbol">!</span>RC4<span class="sh_symbol">:</span>
<span class="sh_symbol">!</span>MD5<span class="sh_symbol">:</span>
<span class="sh_symbol">!</span>PSK<span class="sh_symbol">:</span>
<span class="sh_symbol">!</span>SRP<span class="sh_symbol">:</span>
<span class="sh_symbol">!</span>CAMELLIA
</code></pre>
<p>The default cipher suite prefers GCM ciphers for <a href="https://www.chromium.org/Home/chromium-security/education/tls#TOC-Cipher-Suites">Chrome's 'modern
cryptography' setting</a> and also prefers ECDHE and DHE ciphers for Perfect
Forward Secrecy, while offering <em>some</em> backward compatibility.</p>
<p>128 bit AES is preferred over 192 and 256 bit AES in light of <a href="https://www.schneier.com/blog/archives/2009/07/another_new_aes.html">specific
attacks affecting larger AES key sizes</a>.</p>
<p>Old clients that rely on insecure and deprecated RC4 or DES-based ciphers
(like Internet Explorer 6) cannot complete the handshaking process with
the default configuration. If these clients <em>must</em> be supported, the
<a href="https://wiki.mozilla.org/Security/Server_Side_TLS">TLS recommendations</a> may offer a compatible cipher suite. For more details
on the format, see the <a href="https://www.openssl.org/docs/apps/ciphers.html#CIPHER-LIST-FORMAT">OpenSSL cipher list format documentation</a>.</p>
<p>The following illustrates a simple echo server:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> tls <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'tls'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> fs <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'fs'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> options <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span>
  key<span class="sh_symbol">:</span> fs<span class="sh_symbol">.</span><span class="sh_function">readFileSync</span><span class="sh_symbol">(</span><span class="sh_string">'server-key.pem'</span><span class="sh_symbol">),</span>
  cert<span class="sh_symbol">:</span> fs<span class="sh_symbol">.</span><span class="sh_function">readFileSync</span><span class="sh_symbol">(</span><span class="sh_string">'server-cert.pem'</span><span class="sh_symbol">),</span>

  <span class="sh_comment">// This is necessary only if using the client certificate authentication.</span>
  requestCert<span class="sh_symbol">:</span> <span class="sh_keyword">true</span><span class="sh_symbol">,</span>

  <span class="sh_comment">// This is necessary only if the client uses the self-signed certificate.</span>
  ca<span class="sh_symbol">:</span> <span class="sh_symbol">[</span> fs<span class="sh_symbol">.</span><span class="sh_function">readFileSync</span><span class="sh_symbol">(</span><span class="sh_string">'client-cert.pem'</span><span class="sh_symbol">)</span> <span class="sh_symbol">]</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

<span class="sh_keyword">const</span> server <span class="sh_symbol">=</span> tls<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">(</span>options<span class="sh_symbol">,</span> <span class="sh_symbol">(</span>socket<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'server connected'</span><span class="sh_symbol">,</span>
              socket<span class="sh_symbol">.</span>authorized <span class="sh_symbol">?</span> <span class="sh_string">'authorized'</span> <span class="sh_symbol">:</span> <span class="sh_string">'unauthorized'</span><span class="sh_symbol">);</span>
  socket<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'welcome!</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
  socket<span class="sh_symbol">.</span><span class="sh_function">setEncoding</span><span class="sh_symbol">(</span><span class="sh_string">'utf8'</span><span class="sh_symbol">);</span>
  socket<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>socket<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
server<span class="sh_symbol">.</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">8000</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'server bound'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>Or</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> tls <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'tls'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> fs <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'fs'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> options <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span>
  pfx<span class="sh_symbol">:</span> fs<span class="sh_symbol">.</span><span class="sh_function">readFileSync</span><span class="sh_symbol">(</span><span class="sh_string">'server.pfx'</span><span class="sh_symbol">),</span>

  <span class="sh_comment">// This is necessary only if using the client certificate authentication.</span>
  requestCert<span class="sh_symbol">:</span> <span class="sh_keyword">true</span><span class="sh_symbol">,</span>

<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

<span class="sh_keyword">const</span> server <span class="sh_symbol">=</span> tls<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">(</span>options<span class="sh_symbol">,</span> <span class="sh_symbol">(</span>socket<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'server connected'</span><span class="sh_symbol">,</span>
              socket<span class="sh_symbol">.</span>authorized <span class="sh_symbol">?</span> <span class="sh_string">'authorized'</span> <span class="sh_symbol">:</span> <span class="sh_string">'unauthorized'</span><span class="sh_symbol">);</span>
  socket<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'welcome!</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
  socket<span class="sh_symbol">.</span><span class="sh_function">setEncoding</span><span class="sh_symbol">(</span><span class="sh_string">'utf8'</span><span class="sh_symbol">);</span>
  socket<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>socket<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
server<span class="sh_symbol">.</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">8000</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'server bound'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>This server can be tested by connecting to it using <code>openssl s_client</code>:</p>
<pre class="sh_sourceCode"><code>openssl s_client <span class="sh_symbol">-</span>connect <span class="sh_number">127.0.0.1</span><span class="sh_symbol">:</span><span class="sh_number">8000</span>
</code></pre><h2>tls.getCiphers()<span><a class="mark" href="#tls_tls_getciphers" id="tls_tls_getciphers">#</a></span></h2>
<p>Returns an array with the names of the supported SSL ciphers.</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js">console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>tls<span class="sh_symbol">.</span><span class="sh_function">getCiphers</span><span class="sh_symbol">());</span> <span class="sh_comment">// ['AES128-SHA', 'AES256-SHA', ...]</span>
</code></pre>
<h2>Deprecated APIs<span><a class="mark" href="#tls_deprecated_apis" id="tls_deprecated_apis">#</a></span></h2>
<h3>Class: CryptoStream<span><a class="mark" href="#tls_class_cryptostream" id="tls_class_cryptostream">#</a></span></h3>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated<span class="sh_symbol">:</span> Use <a href="#tls_class_tls_tlssocket"><code>tls<span class="sh_symbol">.</span>TLSSocket</code></a> instead<span class="sh_symbol">.</span></pre><p>The <code>tls.CryptoStream</code> class represents a stream of encrypted data. This class
has been deprecated and should no longer be used.</p>
<h4>cryptoStream.bytesWritten<span><a class="mark" href="#tls_cryptostream_byteswritten" id="tls_cryptostream_byteswritten">#</a></span></h4>
<p>The <code>cryptoStream.bytesWritten</code> property returns the total number of bytes
written to the underlying socket <em>including</em> the bytes required for the
implementation of the TLS protocol.</p>
<h3>Class: SecurePair<span><a class="mark" href="#tls_class_securepair" id="tls_class_securepair">#</a></span></h3>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated<span class="sh_symbol">:</span> Use <a href="#tls_class_tls_tlssocket"><code>tls<span class="sh_symbol">.</span>TLSSocket</code></a> instead<span class="sh_symbol">.</span></pre><p>Returned by <code>tls.createSecurePair()</code>.</p>
<h4>Event: 'secure'<span><a class="mark" href="#tls_event_secure" id="tls_event_secure">#</a></span></h4>
<p>The <code>'secure'</code> event is emitted by the <code>SecurePair</code> object once a secure
connection has been established.</p>
<p>As with checking for the server <a href="#tls_event_secureconnection"><code>secureConnection</code></a>
event, <code>pair.cleartext.authorized</code> should be inspected to confirm whether the
certificate used is properly authorized.</p>
<h2>tls.createSecurePair([context][, isServer][, requestCert][, rejectUnauthorized][, options])<span><a class="mark" href="#tls_tls_createsecurepair_context_isserver_requestcert_rejectunauthorized_options" id="tls_tls_createsecurepair_context_isserver_requestcert_rejectunauthorized_options">#</a></span></h2>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated<span class="sh_symbol">:</span> Use <a href="#tls_class_tls_tlssocket"><code>tls<span class="sh_symbol">.</span>TLSSocket</code></a> instead<span class="sh_symbol">.</span></pre><div class="signature"><ul>
<li><code>context</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> A secure context object as returned by
<code>tls.createSecureContext()</code></li>
<li><code>isServer</code> <span class="type">&lt;boolean&gt;</span> <code>true</code> to specify that this TLS connection should be
opened as a server.</li>
<li><code>requestCert</code> <span class="type">&lt;boolean&gt;</span> <code>true</code> to specify whether a server should request a
certificate from a connecting client. Only applies when <code>isServer</code> is <code>true</code>.</li>
<li><code>rejectUnauthorized</code> <span class="type">&lt;boolean&gt;</span> <code>true</code> to specify whether a server should
automatically reject clients with invalid certificates. Only applies when
<code>isServer</code> is <code>true</code>.</li>
<li><code>options</code><ul>
<li><code>secureContext</code>: An optional TLS context object from
 <a href="#tls_tls_createsecurecontext_options"><code>tls.createSecureContext()</code></a></li>
<li><code>isServer</code>: If <code>true</code> the TLS socket will be instantiated in server-mode.
Defaults to <code>false</code>.</li>
<li><code>server</code> <span class="type">&lt;net.Server&gt;</span> An optional <a href="https://nodejs.org/api/net.html#net_class_net_server"><code>net.Server</code></a> instance</li>
<li><code>requestCert</code>: Optional, see <a href="#tls_tls_createserver_options_secureconnectionlistener"><code>tls.createServer()</code></a></li>
<li><code>rejectUnauthorized</code>: Optional, see <a href="#tls_tls_createserver_options_secureconnectionlistener"><code>tls.createServer()</code></a></li>
<li><code>NPNProtocols</code>: Optional, see <a href="#tls_tls_createserver_options_secureconnectionlistener"><code>tls.createServer()</code></a></li>
<li><code>ALPNProtocols</code>: Optional, see <a href="#tls_tls_createserver_options_secureconnectionlistener"><code>tls.createServer()</code></a></li>
<li><code>SNICallback</code>: Optional, see <a href="#tls_tls_createserver_options_secureconnectionlistener"><code>tls.createServer()</code></a></li>
<li><code>session</code> <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> An optional <code>Buffer</code> instance containing a TLS session.</li>
<li><code>requestOCSP</code> <span class="type">&lt;boolean&gt;</span> If <code>true</code>, specifies that the OCSP status request
extension will be added to the client hello and an <code>'OCSPResponse'</code> event
will be emitted on the socket before establishing a secure communication</li>
</ul>
</li>
</ul>
</div><p>Creates a new secure pair object with two streams, one of which reads and writes
the encrypted data and the other of which reads and writes the cleartext data.
Generally, the encrypted stream is piped to/from an incoming encrypted data
stream and the cleartext one is used as a replacement for the initial encrypted
stream.</p>
<p><code>tls.createSecurePair()</code> returns a <code>tls.SecurePair</code> object with <code>cleartext</code> and
<code>encrypted</code> stream properties.</p>
<p><em>Note</em>: <code>cleartext</code> has the same API as <a href="#tls_class_tls_tlssocket"><code>tls.TLSSocket</code></a>.</p>
<p><em>Note</em>: The <code>tls.createSecurePair()</code> method is now deprecated in favor of
<code>tls.TLSSocket()</code>. For example, the code:</p>
<pre class="sh_sourceCode"><code class="lang-js">pair <span class="sh_symbol">=</span> tls<span class="sh_symbol">.</span><span class="sh_function">createSecurePair</span><span class="sh_symbol">(</span> <span class="sh_symbol">...</span> <span class="sh_symbol">);</span>
pair<span class="sh_symbol">.</span>encrypted<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>socket<span class="sh_symbol">);</span>
socket<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>pair<span class="sh_symbol">.</span>encrypted<span class="sh_symbol">);</span>
</code></pre>
<p>can be replaced by:</p>
<pre class="sh_sourceCode"><code class="lang-js">secure_socket <span class="sh_symbol">=</span> tls<span class="sh_symbol">.</span><span class="sh_function">TLSSocket</span><span class="sh_symbol">(</span>socket<span class="sh_symbol">,</span> options<span class="sh_symbol">);</span>
</code></pre>
<p>where <code>secure_socket</code> has the same API as <code>pair.cleartext</code>.</p>
<!-- [end-include:tls.md] -->
<!-- [start-include:tty.md] -->
<h1>TTY<span><a class="mark" href="#tty_tty" id="tty_tty">#</a></span></h1>
<pre class="api_stability api_stability_2 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> Stable</pre><p>The <code>tty</code> module provides the <code>tty.ReadStream</code> and <code>tty.WriteStream</code> classes.
In most cases, it will not be necessary or possible to use this module directly.
However, it can be accessed using:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> tty <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'tty'</span><span class="sh_symbol">);</span>
</code></pre>
<p>When Node.js detects that it is being run inside a text terminal ("TTY")
context, the <code>process.stdin</code> will, by default, be initialized as an instance of
<code>tty.ReadStream</code> and both <code>process.stdout</code> and <code>process.stderr</code> will, by
default be instances of <code>tty.WriteStream</code>. The preferred method of determining
whether Node.js is being run within a TTY context is to check that the value of
the <code>process.stdout.isTTY</code> property is <code>true</code>:</p>
<pre class="sh_sourceCode"><code>$ node <span class="sh_symbol">-</span>p <span class="sh_symbol">-</span>e <span class="sh_string">"Boolean(process.stdout.isTTY)"</span>
<span class="sh_keyword">true</span>
$ node <span class="sh_symbol">-</span>p <span class="sh_symbol">-</span>e <span class="sh_string">"Boolean(process.stdout.isTTY)"</span> <span class="sh_symbol">|</span> cat
<span class="sh_keyword">false</span>
</code></pre><p>In most cases, there should be little to no reason for an application to
create instances of the <code>tty.ReadStream</code> and <code>tty.WriteStream</code> classes.</p>
<h2>Class: tty.ReadStream<span><a class="mark" href="#tty_class_tty_readstream" id="tty_class_tty_readstream">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.8</span>
</div><p>The <code>tty.ReadStream</code> class is a subclass of <code>net.Socket</code> that represents the
readable side of a TTY. In normal circumstances <code>process.stdin</code> will be the
only <code>tty.ReadStream</code> instance in a Node.js process and there should be no
reason to create additional instances.</p>
<h3>readStream.isRaw<span><a class="mark" href="#tty_readstream_israw" id="tty_readstream_israw">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.7.7</span>
</div><p>A <code>boolean</code> that is <code>true</code> if the TTY is currently configured to operate as a
raw device. Defaults to <code>false</code>.</p>
<h3>readStream.setRawMode(mode)<span><a class="mark" href="#tty_readstream_setrawmode_mode" id="tty_readstream_setrawmode_mode">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.7.7</span>
</div><ul>
<li><code>mode</code> <span class="type">&lt;boolean&gt;</span> If <code>true</code>, configures the <code>tty.ReadStream</code> to operate as a
raw device. If <code>false</code>, configures the <code>tty.ReadStream</code> to operate in its
default mode. The <code>readStream.isRaw</code> property will be set to the resulting
mode.</li>
</ul>
<h2>Class: tty.WriteStream<span><a class="mark" href="#tty_class_tty_writestream" id="tty_class_tty_writestream">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.8</span>
</div><p>The <code>tty.WriteStream</code> class is a subclass of <code>net.Socket</code> that represents the
writable side of a TTY. In normal circumstances, <code>process.stdout</code> and
<code>process.stderr</code> will be the only <code>tty.WriteStream</code> instances created for a
Node.js process and there should be no reason to create additional instances.</p>
<h3>Event: 'resize'<span><a class="mark" href="#tty_event_resize" id="tty_event_resize">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.7.7</span>
</div><p>The <code>'resize'</code> event is emitted whenever either of the <code>writeStream.columns</code>
or <code>writeStream.rows</code> properties have changed. No arguments are passed to the
listener callback when called.</p>
<pre class="sh_sourceCode"><code class="lang-js">process<span class="sh_symbol">.</span>stdout<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'resize'</span><span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'screen size has changed!'</span><span class="sh_symbol">);</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`$<span class="sh_cbracket">{</span>process<span class="sh_symbol">.</span>stdout<span class="sh_symbol">.</span>columns<span class="sh_cbracket">}</span>x$<span class="sh_cbracket">{</span>process<span class="sh_symbol">.</span>stdout<span class="sh_symbol">.</span>rows<span class="sh_cbracket">}</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h3>writeStream.columns<span><a class="mark" href="#tty_writestream_columns" id="tty_writestream_columns">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.7.7</span>
</div><p>A <code>number</code> specifying the number of columns the TTY currently has. This property
is updated whenever the <code>'resize'</code> event is emitted.</p>
<h3>writeStream.rows<span><a class="mark" href="#tty_writestream_rows" id="tty_writestream_rows">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.7.7</span>
</div><p>A <code>number</code> specifying the number of rows the TTY currently has. This property
is updated whenever the <code>'resize'</code> event is emitted.</p>
<h2>tty.isatty(fd)<span><a class="mark" href="#tty_tty_isatty_fd" id="tty_tty_isatty_fd">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.8</span>
</div><ul>
<li><code>fd</code> <span class="type">&lt;number&gt;</span> A numeric file descriptor</li>
</ul>
<p>The <code>tty.isatty()</code> method returns <code>true</code> if the given <code>fd</code> is associated with
a TTY and <code>false</code> if is not.</p>
<!-- [end-include:tty.md] -->
<!-- [start-include:url.md] -->
<h1>URL<span><a class="mark" href="#url_url" id="url_url">#</a></span></h1>
<pre class="api_stability api_stability_2 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> Stable</pre><p>The <code>url</code> module provides utilities for URL resolution and parsing. It can be
accessed using:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> url <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'url'</span><span class="sh_symbol">);</span>
</code></pre>
<h2>URL Strings and URL Objects<span><a class="mark" href="#url_url_strings_and_url_objects" id="url_url_strings_and_url_objects">#</a></span></h2>
<p>A URL string is a structured string containing multiple meaningful components.
When parsed, a URL object is returned containing properties for each of these
components.</p>
<p>The following details each of the components of a parsed URL. The example
<code>'http://user:pass@host.com:8080/p/a/t/h?query=string#hash'</code> is used to
illustrate each.</p>
<pre class="sh_sourceCode"><code>┌─────────────────────────────────────────────────────────────────────────────┐
│                                    href                                     │
├──────────┬┬───────────┬─────────────────┬───────────────────────────┬───────┤
│ protocol ││   auth    │      host       │           path            │ hash  │
│          ││           ├──────────┬──────┼──────────┬────────────────┤       │
│          ││           │ hostname │ port │ pathname │     search     │       │
│          ││           │          │      │          ├─┬──────────────┤       │
│          ││           │          │      │          │ │    query     │       │
<span class="sh_string">"  http:   // user:pass @ host.com : 8080   /p/a/t/h  ?  query=string   #hash "</span>
│          ││           │          │      │          │ │              │       │
└──────────┴┴───────────┴──────────┴──────┴──────────┴─┴──────────────┴───────┘
<span class="sh_symbol">(</span>all spaces <span class="sh_keyword">in</span> the <span class="sh_string">""</span> line should be ignored <span class="sh_symbol">--</span> they<span class="sh_string">'re purely for formatting)</span>
</code></pre><h3>urlObject.href<span><a class="mark" href="#url_urlobject_href" id="url_urlobject_href">#</a></span></h3>
<p>The <code>href</code> property is the full URL string that was parsed with both the
<code>protocol</code> and <code>host</code> components converted to lower-case.</p>
<p>For example: <code>'http://user:pass@host.com:8080/p/a/t/h?query=string#hash'</code></p>
<h3>urlObject.protocol<span><a class="mark" href="#url_urlobject_protocol" id="url_urlobject_protocol">#</a></span></h3>
<p>The <code>protocol</code> property identifies the URL's lower-cased protocol scheme.</p>
<p>For example: <code>'http:'</code></p>
<h3>urlObject.slashes<span><a class="mark" href="#url_urlobject_slashes" id="url_urlobject_slashes">#</a></span></h3>
<p>The <code>slashes</code> property is a <code>boolean</code> with a value of <code>true</code> if two ASCII
forward-slash characters (<code>/</code>) are required following the colon in the
<code>protocol</code>.</p>
<h3>urlObject.host<span><a class="mark" href="#url_urlobject_host" id="url_urlobject_host">#</a></span></h3>
<p>The <code>host</code> property is the full lower-cased host portion of the URL, including
the <code>port</code> if specified.</p>
<p>For example: <code>'host.com:8080'</code></p>
<h3>urlObject.auth<span><a class="mark" href="#url_urlobject_auth" id="url_urlobject_auth">#</a></span></h3>
<p>The <code>auth</code> property is the username and password portion of the URL, also
referred to as "userinfo". This string subset follows the <code>protocol</code> and
double slashes (if present) and preceeds the <code>host</code> component, delimited by an
ASCII "at sign" (<code>@</code>). The format of the string is <code>{username}[:{password}]</code>,
with the <code>[:{password}]</code> portion being optional.</p>
<p>For example: <code>'user:pass'</code></p>
<h3>urlObject.hostname<span><a class="mark" href="#url_urlobject_hostname" id="url_urlobject_hostname">#</a></span></h3>
<p>The <code>hostname</code> property is the lower-cased host name portion of the <code>host</code>
component <em>without</em> the <code>port</code> included.</p>
<p>For example: <code>'host.com'</code></p>
<h3>urlObject.port<span><a class="mark" href="#url_urlobject_port" id="url_urlobject_port">#</a></span></h3>
<p>The <code>port</code> property is the numeric port portion of the <code>host</code> component.</p>
<p>For example: <code>'8080'</code></p>
<h3>urlObject.pathname<span><a class="mark" href="#url_urlobject_pathname" id="url_urlobject_pathname">#</a></span></h3>
<p>The <code>pathname</code> property consists of the entire path section of the URL. This
is everything following the <code>host</code> (including the <code>port</code>) and before the start
of the <code>query</code> or <code>hash</code> components, delimited by either the ASCII question
mark (<code>?</code>) or hash (<code>#</code>) characters.</p>
<p>For example <code>'/p/a/t/h'</code></p>
<p>No decoding of the path string is performed.</p>
<h3>urlObject.search<span><a class="mark" href="#url_urlobject_search" id="url_urlobject_search">#</a></span></h3>
<p>The <code>search</code> property consists of the entire "query string" portion of the
URL, including the leading ASCII question mark (<code>?</code>) character.</p>
<p>For example: <code>'?query=string'</code></p>
<p>No decoding of the query string is performed.</p>
<h3>urlObject.path<span><a class="mark" href="#url_urlobject_path" id="url_urlobject_path">#</a></span></h3>
<p>The <code>path</code> property is a concatenation of the <code>pathname</code> and <code>search</code>
components.</p>
<p>For example: <code>'/p/a/t/h?query=string'</code></p>
<p>No decoding of the <code>path</code> is performed.</p>
<h3>urlObject.query<span><a class="mark" href="#url_urlobject_query" id="url_urlobject_query">#</a></span></h3>
<p>The <code>query</code> property is either the "params" portion of the query string (
everything <em>except</em> the leading ASCII question mark (<code>?</code>), or an object
returned by the <a href="https://nodejs.org/api/querystring.html"><code>querystring</code></a> module's <code>parse()</code> method:</p>
<p>For example: <code>'query=string'</code> or <code>{'query': 'string'}</code></p>
<p>If returned as a string, no decoding of the query string is performed. If
returned as an object, both keys and values are decoded.</p>
<h3>urlObject.hash<span><a class="mark" href="#url_urlobject_hash" id="url_urlobject_hash">#</a></span></h3>
<p>The <code>hash</code> property consists of the "fragment" portion of the URL including
the leading ASCII hash (<code>#</code>) character.</p>
<p>For example: <code>'#hash'</code></p>
<h2>url.format(urlObject)<span><a class="mark" href="#url_url_format_urlobject" id="url_url_format_urlobject">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.25</span>
</div><ul>
<li><code>urlObject</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> A URL object (as returned by <code>url.parse()</code> or
constructed otherwise). If a string, it is converted to an object by passing
it to <code>url.parse()</code>.</li>
</ul>
<p>The <code>url.format()</code> method returns a formatted URL string derived from
<code>urlObject</code>.</p>
<p>If <code>urlObject</code> is not an object or a string, <code>url.parse()</code> will throw a
<a href="https://nodejs.org/api/errors.html#errors_class_typeerror"><code>TypeError</code></a>.</p>
<p>The formatting process operates as follows:</p>
<ul>
<li>A new empty string <code>result</code> is created.</li>
<li>If <code>urlObject.protocol</code> is a string, it is appended as-is to <code>result</code>.</li>
<li>Otherwise, if <code>urlObject.protocol</code> is not <code>undefined</code> and is not a string, an
<a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a> is thrown.</li>
<li>For all string values of <code>urlObject.protocol</code> that <em>do not end</em> with an ASCII
colon (<code>:</code>) character, the literal string <code>:</code> will be appended to <code>result</code>.</li>
<li>If either the <code>urlObject.slashes</code> property is true, <code>urlObject.protocol</code>
begins with one of <code>http</code>, <code>https</code>, <code>ftp</code>, <code>gopher</code>, or <code>file</code>, or
<code>urlObject.protocol</code> is <code>undefined</code>, the literal string <code>//</code> will be appended
to <code>result</code>.</li>
<li>If the value of the <code>urlObject.auth</code> property is truthy, and either
<code>urlObject.host</code> or <code>urlObject.hostname</code> are not <code>undefined</code>, the value of
<code>urlObject.auth</code> will be coerced into a string and appended to <code>result</code>
 followed by the literal string <code>@</code>.</li>
<li>If the <code>urlObject.host</code> property is <code>undefined</code> then:<ul>
<li>If the <code>urlObject.hostname</code> is a string, it is appended to <code>result</code>.</li>
<li>Otherwise, if <code>urlObject.hostname</code> is not <code>undefined</code> and is not a string,
an <a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a> is thrown.</li>
<li>If the <code>urlObject.port</code> property value is truthy, and <code>urlObject.hostname</code>
is not <code>undefined</code>:<ul>
<li>The literal string <code>:</code> is appended to <code>result</code>, and</li>
<li>The value of <code>urlObject.port</code> is coerced to a string and appended to
<code>result</code>.</li>
</ul>
</li>
</ul>
</li>
<li>Otherwise, if the <code>urlObject.host</code> property value is truthy, the value of
<code>urlObject.host</code> is coerced to a string and appended to <code>result</code>.</li>
<li>If the <code>urlObject.pathname</code> property is a string that is not an empty string:<ul>
<li>If the <code>urlObject.pathname</code> <em>does not start</em> with an ASCII forward slash
(<code>/</code>), then the literal string '/' is appended to <code>result</code>.</li>
<li>The value of <code>urlObject.pathname</code> is appended to <code>result</code>.</li>
</ul>
</li>
<li>Otherwise, if <code>urlObject.pathname</code> is not <code>undefined</code> and is not a string, an
<a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a> is thrown.</li>
<li>If the <code>urlObject.search</code> property is <code>undefined</code> and if the <code>urlObject.query</code>
property is an <code>Object</code>, the literal string <code>?</code> is appended to <code>result</code>
followed by the output of calling the <a href="https://nodejs.org/api/querystring.html"><code>querystring</code></a> module's <code>stringify()</code>
method passing the value of <code>urlObject.query</code>.</li>
<li>Otherwise, if <code>urlObject.search</code> is a string:<ul>
<li>If the value of <code>urlObject.search</code> <em>does not start</em> with the ASCII question
mark (<code>?</code>) character, the literal string <code>?</code> is appended to <code>result</code>.</li>
<li>The value of <code>urlObject.search</code> is appended to <code>result</code>.</li>
</ul>
</li>
<li>Otherwise, if <code>urlObject.search</code> is not <code>undefined</code> and is not a string, an
<a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a> is thrown.</li>
<li>If the <code>urlObject.hash</code> property is a string:<ul>
<li>If the value of <code>urlObject.hash</code> <em>does not start</em> with the ASCII hash (<code>#</code>)
character, the literal string <code>#</code> is appended to <code>result</code>.</li>
<li>The value of <code>urlObject.hash</code> is appended to <code>result</code>.</li>
</ul>
</li>
<li>Otherwise, if the <code>urlObject.hash</code> property is not <code>undefined</code> and is not a
string, an <a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a> is thrown.</li>
<li><code>result</code> is returned.</li>
</ul>
<h2>url.parse(urlString[, parseQueryString[, slashesDenoteHost]])<span><a class="mark" href="#url_url_parse_urlstring_parsequerystring_slashesdenotehost" id="url_url_parse_urlstring_parsequerystring_slashesdenotehost">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.25</span>
</div><ul>
<li><code>urlString</code> <span class="type">&lt;string&gt;</span> The URL string to parse.</li>
<li><code>parseQueryString</code> <span class="type">&lt;boolean&gt;</span> If <code>true</code>, the <code>query</code> property will always
be set to an object returned by the <a href="https://nodejs.org/api/querystring.html"><code>querystring</code></a> module's <code>parse()</code>
method. If <code>false</code>, the <code>query</code> property on the returned URL object will be an
unparsed, undecoded string. Defaults to <code>false</code>.</li>
<li><code>slashesDenoteHost</code> <span class="type">&lt;boolean&gt;</span> If <code>true</code>, the first token after the literal
string <code>//</code> and preceeding the next <code>/</code> will be interpreted as the <code>host</code>.
For instance, given <code>//foo/bar</code>, the result would be
<code>{host: 'foo', pathname: '/bar'}</code> rather than <code>{pathname: '//foo/bar'}</code>.
Defaults to <code>false</code>.</li>
</ul>
<p>The <code>url.parse()</code> method takes a URL string, parses it, and returns a URL
object.</p>
<h2>url.resolve(from, to)<span><a class="mark" href="#url_url_resolve_from_to" id="url_url_resolve_from_to">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.1.25</span>
</div><ul>
<li><code>from</code> <span class="type">&lt;string&gt;</span> The Base URL being resolved against.</li>
<li><code>to</code> <span class="type">&lt;string&gt;</span> The HREF URL being resolved.</li>
</ul>
<p>The <code>url.resolve()</code> method resolves a target URL relative to a base URL in a
manner similar to that of a Web browser resolving an anchor tag HREF.</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js">url<span class="sh_symbol">.</span><span class="sh_function">resolve</span><span class="sh_symbol">(</span><span class="sh_string">'/one/two/three'</span><span class="sh_symbol">,</span> <span class="sh_string">'four'</span><span class="sh_symbol">)</span>         <span class="sh_comment">// '/one/two/four'</span>
url<span class="sh_symbol">.</span><span class="sh_function">resolve</span><span class="sh_symbol">(</span><span class="sh_string">'http://example.com/'</span><span class="sh_symbol">,</span> <span class="sh_string">'/one'</span><span class="sh_symbol">)</span>    <span class="sh_comment">// 'http://example.com/one'</span>
url<span class="sh_symbol">.</span><span class="sh_function">resolve</span><span class="sh_symbol">(</span><span class="sh_string">'http://example.com/one'</span><span class="sh_symbol">,</span> <span class="sh_string">'/two'</span><span class="sh_symbol">)</span> <span class="sh_comment">// 'http://example.com/two'</span>
</code></pre>
<h2>Escaped Characters<span><a class="mark" href="#url_escaped_characters" id="url_escaped_characters">#</a></span></h2>
<p>URLs are only permitted to contain a certain range of characters. Spaces (<code>' '</code>)
and the following characters will be automatically escaped in the
properties of URL objects:</p>
<pre class="sh_sourceCode"><code><span class="sh_symbol">&lt;</span> <span class="sh_symbol">&gt;</span> <span class="sh_string">" ` </span><span class="sh_specialchar">\r</span><span class="sh_string"> </span><span class="sh_specialchar">\n</span><span class="sh_string"> </span><span class="sh_specialchar">\t</span><span class="sh_string"> { } | </span><span class="sh_specialchar">\ </span><span class="sh_string">^ '</span>
</code></pre><p>For example, the ASCII space character (<code>' '</code>) is encoded as <code>%20</code>. The ASCII
forward slash (<code>/</code>) character is encoded as <code>%3C</code>.</p>
<!-- [end-include:url.md] -->
<!-- [start-include:util.md] -->
<h1>util<span><a class="mark" href="#util_util" id="util_util">#</a></span></h1>
<pre class="api_stability api_stability_2 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> Stable</pre><p>The <code>util</code> module is primarily designed to support the needs of Node.js' own
internal APIs. However, many of the utilities are useful for application and
module developers as well. It can be accessed using:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>
</code></pre>
<h2>util.debuglog(section)<span><a class="mark" href="#util_util_debuglog_section" id="util_util_debuglog_section">#</a></span></h2>
<div class="signature"><ul>
<li><code>section</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" class="type">&lt;String&gt;</a> A string identifying the portion of the application for
which the <code>debuglog</code> function is being created.</li>
<li>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a> The logging function</li>
</ul>
</div><p>The <code>util.debuglog()</code> method is used to create a function that conditionally
writes debug messages to <code>stderr</code> based on the existence of the <code>NODE_DEBUG</code>
environment variable.  If the <code>section</code> name appears within the value of that
environment variable, then the returned function operates similar to
<code>console.error()</code>.  If not, then the returned function is a no-op.</p>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> debuglog <span class="sh_symbol">=</span> util<span class="sh_symbol">.</span><span class="sh_function">debuglog</span><span class="sh_symbol">(</span><span class="sh_string">'foo'</span><span class="sh_symbol">);</span>

<span class="sh_function">debuglog</span><span class="sh_symbol">(</span><span class="sh_string">'hello from foo [%d]'</span><span class="sh_symbol">,</span> <span class="sh_number">123</span><span class="sh_symbol">);</span>
</code></pre>
<p>If this program is run with <code>NODE_DEBUG=foo</code> in the environment, then
it will output something like:</p>
<pre class="sh_sourceCode"><code>FOO <span class="sh_number">3245</span><span class="sh_symbol">:</span> hello from foo <span class="sh_symbol">[</span><span class="sh_number">123</span><span class="sh_symbol">]</span>
</code></pre><p>where <code>3245</code> is the process id.  If it is not run with that
environment variable set, then it will not print anything.</p>
<p>Multiple comma-separated <code>section</code> names may be specified in the <code>NODE_DEBUG</code>
environment variable. For example: <code>NODE_DEBUG=fs,net,tls</code>.</p>
<h2>util.deprecate(function, string)<span><a class="mark" href="#util_util_deprecate_function_string" id="util_util_deprecate_function_string">#</a></span></h2>
<p>The <code>util.deprecate()</code> method wraps the given <code>function</code> in such a way that
it is marked as deprecated.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>

exports<span class="sh_symbol">.</span>puts <span class="sh_symbol">=</span> util<span class="sh_symbol">.</span><span class="sh_function">deprecate</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_keyword">var</span> i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> len <span class="sh_symbol">=</span> <span class="sh_predef_var">arguments</span><span class="sh_symbol">.</span>length<span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> len<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    process<span class="sh_symbol">.</span>stdout<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_predef_var">arguments</span><span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">+</span> <span class="sh_string">'</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_string">'util.puts: Use console.log instead'</span><span class="sh_symbol">);</span>
</code></pre>
<p>When called, <code>util.deprecate()</code> will return a function that will emit a
<code>DeprecationWarning</code> using the <code>process.on('warning')</code> event. By default,
this warning will be emitted and printed to <code>stderr</code> exactly once, the first
time it is called. After the warning is emitted, the wrapped <code>function</code>
is called.</p>
<p>If either the <code>--no-deprecation</code> or <code>--no-warnings</code> command line flags are
used, or if the <code>process.noDeprecation</code> property is set to <code>true</code> <em>prior</em> to
the first deprecation warning, the <code>util.deprecate()</code> method does nothing.</p>
<p>If the <code>--trace-deprecation</code> or <code>--trace-warnings</code> command line flags are set,
or the <code>process.traceDeprecation</code> property is set to <code>true</code>, a warning and a
stack trace are printed to <code>stderr</code> the first time the deprecated function is
called.</p>
<p>If the <code>--throw-deprecation</code> command line flag is set, or the
<code>process.throwDeprecation</code> property is set to <code>true</code>, then an exception will be
thrown when the deprecated function is called.</p>
<p>The <code>--throw-deprecation</code> command line flag and <code>process.throwDeprecation</code>
property take precedence over <code>--trace-deprecation</code> and
<code>process.traceDeprecation</code>.</p>
<h2>util.format(format[, ...])<span><a class="mark" href="#util_util_format_format" id="util_util_format_format">#</a></span></h2>
<div class="signature"><ul>
<li><code>format</code> <span class="type">&lt;string&gt;</span> A <code>printf</code>-like format string.</li>
</ul>
</div><p>The <code>util.format()</code> method returns a formatted string using the first argument
as a <code>printf</code>-like format.</p>
<p>The first argument is a string containing zero or more <em>placeholder</em> tokens.
Each placeholder token is replaced with the converted value from the
corresponding argument. Supported placeholders are:</p>
<ul>
<li><code>%s</code> - String.</li>
<li><code>%d</code> - Number (both integer and float).</li>
<li><code>%j</code> - JSON.  Replaced with the string <code>'[Circular]'</code> if the argument
contains circular references.</li>
<li><code>%%</code> - single percent sign (<code>'%'</code>). This does not consume an argument.</li>
</ul>
<p>If the placeholder does not have a corresponding argument, the placeholder is
not replaced.</p>
<pre class="sh_sourceCode"><code class="lang-js">util<span class="sh_symbol">.</span><span class="sh_function">format</span><span class="sh_symbol">(</span><span class="sh_string">'%s:%s'</span><span class="sh_symbol">,</span> <span class="sh_string">'foo'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// Returns 'foo:%s'</span>
</code></pre>
<p>If there are more arguments passed to the <code>util.format()</code> method than the
number of placeholders, the extra arguments are coerced into strings (for
objects and symbols, <code>util.inspect()</code> is used) then concatenated to the
returned string, each delimited by a space.</p>
<pre class="sh_sourceCode"><code class="lang-js">util<span class="sh_symbol">.</span><span class="sh_function">format</span><span class="sh_symbol">(</span><span class="sh_string">'%s:%s'</span><span class="sh_symbol">,</span> <span class="sh_string">'foo'</span><span class="sh_symbol">,</span> <span class="sh_string">'bar'</span><span class="sh_symbol">,</span> <span class="sh_string">'baz'</span><span class="sh_symbol">);</span> <span class="sh_comment">// 'foo:bar baz'</span>
</code></pre>
<p>If the first argument is not a format string then <code>util.format()</code> returns
a string that is the concatenation of all arguments separated by spaces.
Each argument is converted to a string using <code>util.inspect()</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js">util<span class="sh_symbol">.</span><span class="sh_function">format</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_number">2</span><span class="sh_symbol">,</span> <span class="sh_number">3</span><span class="sh_symbol">);</span> <span class="sh_comment">// '1 2 3'</span>
</code></pre>
<h2>util.inherits(constructor, superConstructor)<span><a class="mark" href="#util_util_inherits_constructor_superconstructor" id="util_util_inherits_constructor_superconstructor">#</a></span></h2>
<p><em>Note: usage of <code>util.inherits()</code> is discouraged. Please use the ES6 <code>class</code> and
<code>extends</code> keywords to get language level inheritance support. Also note that
the two styles are <a href="https://github.com/nodejs/node/issues/4179">semantically incompatible</a>.</em></p>
<ul>
<li><code>constructor</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
<li><code>superConstructor</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" class="type">&lt;Function&gt;</a></li>
</ul>
<p>Inherit the prototype methods from one <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/constructor">constructor</a> into another.  The
prototype of <code>constructor</code> will be set to a new object created from
<code>superConstructor</code>.</p>
<p>As an additional convenience, <code>superConstructor</code> will be accessible
through the <code>constructor.super_</code> property.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> EventEmitter <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'events'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">function</span> <span class="sh_function">MyStream</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
    EventEmitter<span class="sh_symbol">.</span><span class="sh_function">call</span><span class="sh_symbol">(</span><span class="sh_keyword">this</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

util<span class="sh_symbol">.</span><span class="sh_function">inherits</span><span class="sh_symbol">(</span>MyStream<span class="sh_symbol">,</span> EventEmitter<span class="sh_symbol">);</span>

MyStream<span class="sh_symbol">.</span><span class="sh_keyword">prototype</span><span class="sh_symbol">.</span>write <span class="sh_symbol">=</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>data<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">this</span><span class="sh_symbol">.</span><span class="sh_function">emit</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> data<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

<span class="sh_keyword">const</span> stream <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">MyStream</span><span class="sh_symbol">();</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>stream <span class="sh_keyword">instanceof</span> EventEmitter<span class="sh_symbol">);</span> <span class="sh_comment">// true</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>MyStream<span class="sh_symbol">.</span>super_ <span class="sh_symbol">===</span> EventEmitter<span class="sh_symbol">);</span> <span class="sh_comment">// true</span>

stream<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>data<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>`Received data<span class="sh_symbol">:</span> <span class="sh_string">"${data}"</span>`<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">)</span>
stream<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'It works!'</span><span class="sh_symbol">);</span> <span class="sh_comment">// Received data: "It works!"</span>
</code></pre>
<h2>util.inspect(object[, options])<span><a class="mark" href="#util_util_inspect_object_options" id="util_util_inspect_object_options">#</a></span></h2>
<div class="signature"><ul>
<li><code>object</code> <span class="type">&lt;any&gt;</span> Any JavaScript primitive or Object.</li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>showHidden</code> <span class="type">&lt;boolean&gt;</span> If <code>true</code>, the <code>object</code>'s non-enumerable symbols and
properties will be included in the formatted result. Defaults to <code>false</code>.</li>
<li><code>depth</code> <span class="type">&lt;number&gt;</span> Specifies the number of times to recurse while formatting
the <code>object</code>. This is useful for inspecting large complicated objects.
Defaults to <code>2</code>. To make it recurse indefinitely pass <code>null</code>.</li>
<li><code>colors</code> <span class="type">&lt;boolean&gt;</span> If <code>true</code>, the output will be styled with ANSI color
codes. Defaults to <code>false</code>. Colors are customizable, see
<a href="#util_customizing_util_inspect_colors">Customizing <code>util.inspect</code> colors</a>.</li>
<li><code>customInspect</code> <span class="type">&lt;boolean&gt;</span> If <code>false</code>, then custom <code>inspect(depth, opts)</code>
functions exported on the <code>object</code> being inspected will not be called.
Defaults to <code>true</code>.</li>
<li><code>showProxy</code> <span class="type">&lt;boolean&gt;</span> If <code>true</code>, then objects and functions that are
<code>Proxy</code> objects will be introspected to show their <code>target</code> and <code>handler</code>
objects. Defaults to <code>false</code>.</li>
<li><code>maxArrayLength</code> <span class="type">&lt;number&gt;</span> Specifies the maximum number of array and
<code>TypedArray</code> elements to include when formatting. Defaults to <code>100</code>. Set to
<code>null</code> to show all array elements. Set to <code>0</code> or negative to show no array
elements.</li>
</ul>
</li>
</ul>
</div><p>The <code>util.inspect()</code> method returns a string representation of <code>object</code> that is
primarily useful for debugging. Additional <code>options</code> may be passed that alter
certain aspects of the formatted string.</p>
<p>The following example inspects all properties of the <code>util</code> object:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>util<span class="sh_symbol">.</span><span class="sh_function">inspect</span><span class="sh_symbol">(</span>util<span class="sh_symbol">,</span> <span class="sh_cbracket">{</span> showHidden<span class="sh_symbol">:</span> <span class="sh_keyword">true</span><span class="sh_symbol">,</span> depth<span class="sh_symbol">:</span> <span class="sh_keyword">null</span> <span class="sh_cbracket">}</span><span class="sh_symbol">));</span>
</code></pre>
<p>Values may supply their own custom <code>inspect(depth, opts)</code> functions, when
called these receive the current <code>depth</code> in the recursive inspection, as well as
the options object passed to <code>util.inspect()</code>.</p>
<h3>Customizing <code>util.inspect</code> colors<span><a class="mark" href="#util_customizing_util_inspect_colors" id="util_customizing_util_inspect_colors">#</a></span></h3>
<!-- type=misc -->
<p>Color output (if enabled) of <code>util.inspect</code> is customizable globally
via the <code>util.inspect.styles</code> and <code>util.inspect.colors</code> properties.</p>
<p><code>util.inspect.styles</code> is a map associating a style name to a color from
<code>util.inspect.colors</code>.</p>
<p>The default styles and associated colors are:</p>
<ul>
<li><code>number</code> - <code>yellow</code></li>
<li><code>boolean</code> - <code>yellow</code></li>
<li><code>string</code> - <code>green</code></li>
<li><code>date</code> - <code>magenta</code></li>
<li><code>regexp</code> - <code>red</code></li>
<li><code>null</code> - <code>bold</code></li>
<li><code>undefined</code> - <code>grey</code></li>
<li><code>special</code> - <code>cyan</code> (only applied to functions at this time)</li>
<li><code>name</code> - (no styling)</li>
</ul>
<p>The predefined color codes are: <code>white</code>, <code>grey</code>, <code>black</code>, <code>blue</code>, <code>cyan</code>,
<code>green</code>, <code>magenta</code>, <code>red</code> and <code>yellow</code>. There are also <code>bold</code>, <code>italic</code>,
<code>underline</code> and <code>inverse</code> codes.</p>
<p>Color styling uses ANSI control codes that may not be supported on all
terminals.</p>
<h3>Custom <code>inspect()</code> function on Objects<span><a class="mark" href="#util_custom_inspect_function_on_objects" id="util_custom_inspect_function_on_objects">#</a></span></h3>
<!-- type=misc -->
<p>Objects may also define their own <code>inspect(depth, opts)</code> function that
<code>util.inspect()</code> will invoke and use the result of when inspecting the object:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> obj <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span> name<span class="sh_symbol">:</span> <span class="sh_string">'nate'</span> <span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
obj<span class="sh_symbol">.</span>inspect <span class="sh_symbol">=</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>depth<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">return</span> `<span class="sh_cbracket">{</span>$<span class="sh_cbracket">{</span><span class="sh_keyword">this</span><span class="sh_symbol">.</span>name<span class="sh_cbracket">}}</span>`<span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

util<span class="sh_symbol">.</span><span class="sh_function">inspect</span><span class="sh_symbol">(</span>obj<span class="sh_symbol">);</span>
  <span class="sh_comment">// "{nate}"</span>
</code></pre>
<p>Custom <code>inspect(depth, opts)</code> functions typically return a string but may
return a value of any type that will be formatted accordingly by
<code>util.inspect()</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> obj <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span> foo<span class="sh_symbol">:</span> <span class="sh_string">'this will not show up in the inspect() output'</span> <span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
obj<span class="sh_symbol">.</span>inspect <span class="sh_symbol">=</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>depth<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">return</span> <span class="sh_cbracket">{</span> bar<span class="sh_symbol">:</span> <span class="sh_string">'baz'</span> <span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

util<span class="sh_symbol">.</span><span class="sh_function">inspect</span><span class="sh_symbol">(</span>obj<span class="sh_symbol">);</span>
  <span class="sh_comment">// "{ bar: 'baz' }"</span>
</code></pre>
<h2>Deprecated APIs<span><a class="mark" href="#util_deprecated_apis" id="util_deprecated_apis">#</a></span></h2>
<p>The following APIs have been deprecated and should no longer be used. Existing
applications and modules should be updated to find alternative approaches.</p>
<h3>util.debug(string)<span><a class="mark" href="#util_util_debug_string" id="util_util_debug_string">#</a></span></h3>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated<span class="sh_symbol">:</span> Use <a href="https://nodejs.org/api/console.html#console_console_error_data"><code>console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">()</span></code></a> instead<span class="sh_symbol">.</span></pre><div class="signature"><ul>
<li><code>string</code> <span class="type">&lt;string&gt;</span> The message to print to <code>stderr</code></li>
</ul>
</div><p>Deprecated predecessor of <code>console.error</code>.</p>
<h3>util.error([...])<span><a class="mark" href="#util_util_error" id="util_util_error">#</a></span></h3>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated<span class="sh_symbol">:</span> Use <a href="https://nodejs.org/api/console.html#console_console_error_data"><code>console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">()</span></code></a> instead<span class="sh_symbol">.</span></pre><div class="signature"><ul>
<li><code>string</code> <span class="type">&lt;string&gt;</span> The message to print to <code>stderr</code></li>
</ul>
</div><p>Deprecated predecessor of <code>console.error</code>.</p>
<h3>util.isArray(object)<span><a class="mark" href="#util_util_isarray_object" id="util_util_isarray_object">#</a></span></h3>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated</pre><div class="signature"><ul>
<li><code>object</code> <span class="type">&lt;any&gt;</span></li>
</ul>
</div><p>Internal alias for <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray"><code>Array.isArray</code></a>.</p>
<p>Returns <code>true</code> if the given <code>object</code> is an <code>Array</code>. Otherwise, returns <code>false</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>

util<span class="sh_symbol">.</span><span class="sh_function">isArray</span><span class="sh_symbol">([]);</span>
  <span class="sh_comment">// true</span>
util<span class="sh_symbol">.</span><span class="sh_function">isArray</span><span class="sh_symbol">(</span><span class="sh_keyword">new</span> <span class="sh_predef_func">Array</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// true</span>
util<span class="sh_symbol">.</span><span class="sh_function">isArray</span><span class="sh_symbol">(</span><span class="sh_cbracket">{}</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// false</span>
</code></pre>
<h3>util.isBoolean(object)<span><a class="mark" href="#util_util_isboolean_object" id="util_util_isboolean_object">#</a></span></h3>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated</pre><div class="signature"><ul>
<li><code>object</code> <span class="type">&lt;any&gt;</span></li>
</ul>
</div><p>Returns <code>true</code> if the given <code>object</code> is a <code>Boolean</code>. Otherwise, returns <code>false</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>

util<span class="sh_symbol">.</span><span class="sh_function">isBoolean</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// false</span>
util<span class="sh_symbol">.</span><span class="sh_function">isBoolean</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// false</span>
util<span class="sh_symbol">.</span><span class="sh_function">isBoolean</span><span class="sh_symbol">(</span><span class="sh_keyword">false</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// true</span>
</code></pre>
<h3>util.isBuffer(object)<span><a class="mark" href="#util_util_isbuffer_object" id="util_util_isbuffer_object">#</a></span></h3>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated<span class="sh_symbol">:</span> Use <a href="https://nodejs.org/api/buffer.html#buffer_class_method_buffer_isbuffer_obj"><code>Buffer<span class="sh_symbol">.</span><span class="sh_function">isBuffer</span><span class="sh_symbol">()</span></code></a> instead<span class="sh_symbol">.</span></pre><div class="signature"><ul>
<li><code>object</code> <span class="type">&lt;any&gt;</span></li>
</ul>
</div><p>Returns <code>true</code> if the given <code>object</code> is a <code>Buffer</code>. Otherwise, returns <code>false</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>

util<span class="sh_symbol">.</span><span class="sh_function">isBuffer</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span> length<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// false</span>
util<span class="sh_symbol">.</span><span class="sh_function">isBuffer</span><span class="sh_symbol">([]);</span>
  <span class="sh_comment">// false</span>
util<span class="sh_symbol">.</span><span class="sh_function">isBuffer</span><span class="sh_symbol">(</span>Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'hello world'</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// true</span>
</code></pre>
<h3>util.isDate(object)<span><a class="mark" href="#util_util_isdate_object" id="util_util_isdate_object">#</a></span></h3>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated</pre><div class="signature"><ul>
<li><code>object</code> <span class="type">&lt;any&gt;</span></li>
</ul>
</div><p>Returns <code>true</code> if the given <code>object</code> is a <code>Date</code>. Otherwise, returns <code>false</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>

util<span class="sh_symbol">.</span><span class="sh_function">isDate</span><span class="sh_symbol">(</span><span class="sh_keyword">new</span> <span class="sh_predef_func">Date</span><span class="sh_symbol">());</span>
  <span class="sh_comment">// true</span>
util<span class="sh_symbol">.</span><span class="sh_function">isDate</span><span class="sh_symbol">(</span><span class="sh_predef_func">Date</span><span class="sh_symbol">());</span>
  <span class="sh_comment">// false (without 'new' returns a String)</span>
util<span class="sh_symbol">.</span><span class="sh_function">isDate</span><span class="sh_symbol">(</span><span class="sh_cbracket">{}</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// false</span>
</code></pre>
<h3>util.isError(object)<span><a class="mark" href="#util_util_iserror_object" id="util_util_iserror_object">#</a></span></h3>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated</pre><div class="signature"><ul>
<li><code>object</code> <span class="type">&lt;any&gt;</span></li>
</ul>
</div><p>Returns <code>true</code> if the given <code>object</code> is an <a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a>. Otherwise, returns
<code>false</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>

util<span class="sh_symbol">.</span><span class="sh_function">isError</span><span class="sh_symbol">(</span><span class="sh_keyword">new</span> <span class="sh_predef_func">Error</span><span class="sh_symbol">());</span>
  <span class="sh_comment">// true</span>
util<span class="sh_symbol">.</span><span class="sh_function">isError</span><span class="sh_symbol">(</span><span class="sh_keyword">new</span> <span class="sh_predef_func">TypeError</span><span class="sh_symbol">());</span>
  <span class="sh_comment">// true</span>
util<span class="sh_symbol">.</span><span class="sh_function">isError</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span> name<span class="sh_symbol">:</span> <span class="sh_string">'Error'</span><span class="sh_symbol">,</span> message<span class="sh_symbol">:</span> <span class="sh_string">'an error occurred'</span> <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// false</span>
</code></pre>
<p>Note that this method relies on <code>Object.prototype.toString()</code> behavior. It is
possible to obtain an incorrect result when the <code>object</code> argument manipulates
<code>@@toStringTag</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> obj <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span> name<span class="sh_symbol">:</span> <span class="sh_string">'Error'</span><span class="sh_symbol">,</span> message<span class="sh_symbol">:</span> <span class="sh_string">'an error occurred'</span> <span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

util<span class="sh_symbol">.</span><span class="sh_function">isError</span><span class="sh_symbol">(</span>obj<span class="sh_symbol">);</span>
  <span class="sh_comment">// false</span>
obj<span class="sh_symbol">[</span>Symbol<span class="sh_symbol">.</span>toStringTag<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_string">'Error'</span><span class="sh_symbol">;</span>
util<span class="sh_symbol">.</span><span class="sh_function">isError</span><span class="sh_symbol">(</span>obj<span class="sh_symbol">);</span>
  <span class="sh_comment">// true</span>
</code></pre>
<h3>util.isFunction(object)<span><a class="mark" href="#util_util_isfunction_object" id="util_util_isfunction_object">#</a></span></h3>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated</pre><div class="signature"><ul>
<li><code>object</code> <span class="type">&lt;any&gt;</span></li>
</ul>
</div><p>Returns <code>true</code> if the given <code>object</code> is a <code>Function</code>. Otherwise, returns
<code>false</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">function</span> <span class="sh_function">Foo</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{}</span>
<span class="sh_keyword">const</span> Bar <span class="sh_symbol">=</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{}</span><span class="sh_symbol">;</span>

util<span class="sh_symbol">.</span><span class="sh_function">isFunction</span><span class="sh_symbol">(</span><span class="sh_cbracket">{}</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// false</span>
util<span class="sh_symbol">.</span><span class="sh_function">isFunction</span><span class="sh_symbol">(</span>Foo<span class="sh_symbol">);</span>
  <span class="sh_comment">// true</span>
util<span class="sh_symbol">.</span><span class="sh_function">isFunction</span><span class="sh_symbol">(</span>Bar<span class="sh_symbol">);</span>
  <span class="sh_comment">// true</span>
</code></pre>
<h3>util.isNull(object)<span><a class="mark" href="#util_util_isnull_object" id="util_util_isnull_object">#</a></span></h3>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated</pre><div class="signature"><ul>
<li><code>object</code> <span class="type">&lt;any&gt;</span></li>
</ul>
</div><p>Returns <code>true</code> if the given <code>object</code> is strictly <code>null</code>. Otherwise, returns
<code>false</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>

util<span class="sh_symbol">.</span><span class="sh_function">isNull</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// false</span>
util<span class="sh_symbol">.</span><span class="sh_function">isNull</span><span class="sh_symbol">(</span><span class="sh_predef_var">undefined</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// false</span>
util<span class="sh_symbol">.</span><span class="sh_function">isNull</span><span class="sh_symbol">(</span><span class="sh_keyword">null</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// true</span>
</code></pre>
<h3>util.isNullOrUndefined(object)<span><a class="mark" href="#util_util_isnullorundefined_object" id="util_util_isnullorundefined_object">#</a></span></h3>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated</pre><div class="signature"><ul>
<li><code>object</code> <span class="type">&lt;any&gt;</span></li>
</ul>
</div><p>Returns <code>true</code> if the given <code>object</code> is <code>null</code> or <code>undefined</code>. Otherwise,
returns <code>false</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>

util<span class="sh_symbol">.</span><span class="sh_function">isNullOrUndefined</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// false</span>
util<span class="sh_symbol">.</span><span class="sh_function">isNullOrUndefined</span><span class="sh_symbol">(</span><span class="sh_predef_var">undefined</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// true</span>
util<span class="sh_symbol">.</span><span class="sh_function">isNullOrUndefined</span><span class="sh_symbol">(</span><span class="sh_keyword">null</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// true</span>
</code></pre>
<h3>util.isNumber(object)<span><a class="mark" href="#util_util_isnumber_object" id="util_util_isnumber_object">#</a></span></h3>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated</pre><div class="signature"><ul>
<li><code>object</code> <span class="type">&lt;any&gt;</span></li>
</ul>
</div><p>Returns <code>true</code> if the given <code>object</code> is a <code>Number</code>. Otherwise, returns <code>false</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>

util<span class="sh_symbol">.</span><span class="sh_function">isNumber</span><span class="sh_symbol">(</span><span class="sh_keyword">false</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// false</span>
util<span class="sh_symbol">.</span><span class="sh_function">isNumber</span><span class="sh_symbol">(</span><span class="sh_predef_var">Infinity</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// true</span>
util<span class="sh_symbol">.</span><span class="sh_function">isNumber</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// true</span>
util<span class="sh_symbol">.</span><span class="sh_function">isNumber</span><span class="sh_symbol">(</span><span class="sh_predef_var">NaN</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// true</span>
</code></pre>
<h3>util.isObject(object)<span><a class="mark" href="#util_util_isobject_object" id="util_util_isobject_object">#</a></span></h3>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated</pre><div class="signature"><ul>
<li><code>object</code> <span class="type">&lt;any&gt;</span></li>
</ul>
</div><p>Returns <code>true</code> if the given <code>object</code> is strictly an <code>Object</code> <strong>and</strong> not a
<code>Function</code>. Otherwise, returns <code>false</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>

util<span class="sh_symbol">.</span><span class="sh_function">isObject</span><span class="sh_symbol">(</span><span class="sh_number">5</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// false</span>
util<span class="sh_symbol">.</span><span class="sh_function">isObject</span><span class="sh_symbol">(</span><span class="sh_keyword">null</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// false</span>
util<span class="sh_symbol">.</span><span class="sh_function">isObject</span><span class="sh_symbol">(</span><span class="sh_cbracket">{}</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// true</span>
util<span class="sh_symbol">.</span><span class="sh_function">isObject</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span><span class="sh_symbol">()</span><span class="sh_cbracket">{}</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// false</span>
</code></pre>
<h3>util.isPrimitive(object)<span><a class="mark" href="#util_util_isprimitive_object" id="util_util_isprimitive_object">#</a></span></h3>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated</pre><div class="signature"><ul>
<li><code>object</code> <span class="type">&lt;any&gt;</span></li>
</ul>
</div><p>Returns <code>true</code> if the given <code>object</code> is a primitive type. Otherwise, returns
<code>false</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>

util<span class="sh_symbol">.</span><span class="sh_function">isPrimitive</span><span class="sh_symbol">(</span><span class="sh_number">5</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// true</span>
util<span class="sh_symbol">.</span><span class="sh_function">isPrimitive</span><span class="sh_symbol">(</span><span class="sh_string">'foo'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// true</span>
util<span class="sh_symbol">.</span><span class="sh_function">isPrimitive</span><span class="sh_symbol">(</span><span class="sh_keyword">false</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// true</span>
util<span class="sh_symbol">.</span><span class="sh_function">isPrimitive</span><span class="sh_symbol">(</span><span class="sh_keyword">null</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// true</span>
util<span class="sh_symbol">.</span><span class="sh_function">isPrimitive</span><span class="sh_symbol">(</span><span class="sh_predef_var">undefined</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// true</span>
util<span class="sh_symbol">.</span><span class="sh_function">isPrimitive</span><span class="sh_symbol">(</span><span class="sh_cbracket">{}</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// false</span>
util<span class="sh_symbol">.</span><span class="sh_function">isPrimitive</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{}</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// false</span>
util<span class="sh_symbol">.</span><span class="sh_function">isPrimitive</span><span class="sh_symbol">(</span><span class="sh_regexp">/^$/</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// false</span>
util<span class="sh_symbol">.</span><span class="sh_function">isPrimitive</span><span class="sh_symbol">(</span><span class="sh_keyword">new</span> <span class="sh_predef_func">Date</span><span class="sh_symbol">());</span>
  <span class="sh_comment">// false</span>
</code></pre>
<h3>util.isRegExp(object)<span><a class="mark" href="#util_util_isregexp_object" id="util_util_isregexp_object">#</a></span></h3>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated</pre><div class="signature"><ul>
<li><code>object</code> <span class="type">&lt;any&gt;</span></li>
</ul>
</div><p>Returns <code>true</code> if the given <code>object</code> is a <code>RegExp</code>. Otherwise, returns <code>false</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>

util<span class="sh_symbol">.</span><span class="sh_function">isRegExp</span><span class="sh_symbol">(</span><span class="sh_regexp">/some regexp/</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// true</span>
util<span class="sh_symbol">.</span><span class="sh_function">isRegExp</span><span class="sh_symbol">(</span><span class="sh_keyword">new</span> <span class="sh_predef_func">RegExp</span><span class="sh_symbol">(</span><span class="sh_string">'another regexp'</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// true</span>
util<span class="sh_symbol">.</span><span class="sh_function">isRegExp</span><span class="sh_symbol">(</span><span class="sh_cbracket">{}</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// false</span>
</code></pre>
<h3>util.isString(object)<span><a class="mark" href="#util_util_isstring_object" id="util_util_isstring_object">#</a></span></h3>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated</pre><div class="signature"><ul>
<li><code>object</code> <span class="type">&lt;any&gt;</span></li>
</ul>
</div><p>Returns <code>true</code> if the given <code>object</code> is a <code>string</code>. Otherwise, returns <code>false</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>

util<span class="sh_symbol">.</span><span class="sh_function">isString</span><span class="sh_symbol">(</span><span class="sh_string">''</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// true</span>
util<span class="sh_symbol">.</span><span class="sh_function">isString</span><span class="sh_symbol">(</span><span class="sh_string">'foo'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// true</span>
util<span class="sh_symbol">.</span><span class="sh_function">isString</span><span class="sh_symbol">(</span><span class="sh_predef_func">String</span><span class="sh_symbol">(</span><span class="sh_string">'foo'</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// true</span>
util<span class="sh_symbol">.</span><span class="sh_function">isString</span><span class="sh_symbol">(</span><span class="sh_number">5</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// false</span>
</code></pre>
<h3>util.isSymbol(object)<span><a class="mark" href="#util_util_issymbol_object" id="util_util_issymbol_object">#</a></span></h3>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated</pre><div class="signature"><ul>
<li><code>object</code> <span class="type">&lt;any&gt;</span></li>
</ul>
</div><p>Returns <code>true</code> if the given <code>object</code> is a <code>Symbol</code>. Otherwise, returns <code>false</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>

util<span class="sh_symbol">.</span><span class="sh_function">isSymbol</span><span class="sh_symbol">(</span><span class="sh_number">5</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// false</span>
util<span class="sh_symbol">.</span><span class="sh_function">isSymbol</span><span class="sh_symbol">(</span><span class="sh_string">'foo'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// false</span>
util<span class="sh_symbol">.</span><span class="sh_function">isSymbol</span><span class="sh_symbol">(</span><span class="sh_function">Symbol</span><span class="sh_symbol">(</span><span class="sh_string">'foo'</span><span class="sh_symbol">));</span>
  <span class="sh_comment">// true</span>
</code></pre>
<h3>util.isUndefined(object)<span><a class="mark" href="#util_util_isundefined_object" id="util_util_isundefined_object">#</a></span></h3>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated</pre><div class="signature"><ul>
<li><code>object</code> <span class="type">&lt;any&gt;</span></li>
</ul>
</div><p>Returns <code>true</code> if the given <code>object</code> is <code>undefined</code>. Otherwise, returns <code>false</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> foo <span class="sh_symbol">=</span> <span class="sh_predef_var">undefined</span><span class="sh_symbol">;</span>
util<span class="sh_symbol">.</span><span class="sh_function">isUndefined</span><span class="sh_symbol">(</span><span class="sh_number">5</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// false</span>
util<span class="sh_symbol">.</span><span class="sh_function">isUndefined</span><span class="sh_symbol">(</span>foo<span class="sh_symbol">);</span>
  <span class="sh_comment">// true</span>
util<span class="sh_symbol">.</span><span class="sh_function">isUndefined</span><span class="sh_symbol">(</span><span class="sh_keyword">null</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// false</span>
</code></pre>
<h3>util.log(string)<span><a class="mark" href="#util_util_log_string" id="util_util_log_string">#</a></span></h3>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated<span class="sh_symbol">:</span> Use a third party module instead<span class="sh_symbol">.</span></pre><div class="signature"><ul>
<li><code>string</code> <span class="type">&lt;string&gt;</span></li>
</ul>
</div><p>The <code>util.log()</code> method prints the given <code>string</code> to <code>stdout</code> with an included
timestamp.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>

util<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Timestamped message.'</span><span class="sh_symbol">);</span>
</code></pre>
<h3>util.print([...])<span><a class="mark" href="#util_util_print" id="util_util_print">#</a></span></h3>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated<span class="sh_symbol">:</span> Use <a href="https://nodejs.org/api/console.html#console_console_log_data"><code>console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">()</span></code></a> instead<span class="sh_symbol">.</span></pre><p>Deprecated predecessor of <code>console.log</code>.</p>
<h3>util.puts([...])<span><a class="mark" href="#util_util_puts" id="util_util_puts">#</a></span></h3>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated<span class="sh_symbol">:</span> Use <a href="https://nodejs.org/api/console.html#console_console_log_data"><code>console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">()</span></code></a> instead<span class="sh_symbol">.</span></pre><p>Deprecated predecessor of <code>console.log</code>.</p>
<h3>util._extend(obj)<span><a class="mark" href="#util_util_extend_obj" id="util_util_extend_obj">#</a></span></h3>
<pre class="api_stability api_stability_0 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> Deprecated<span class="sh_symbol">:</span> Use <span class="sh_predef_func">Object</span><span class="sh_symbol">.</span><span class="sh_function">assign</span><span class="sh_symbol">()</span> instead<span class="sh_symbol">.</span></pre><p>The <code>util._extend()</code> method was never intended to be used outside of internal
Node.js modules. The community found and used it anyway.</p>
<p>It is deprecated and should not be used in new code. JavaScript comes with very
similar built-in functionality through <code>Object.assign()</code>.</p>
<!-- [end-include:util.md] -->
<!-- [start-include:v8.md] -->
<h1>V8<span><a class="mark" href="#v8_v8" id="v8_v8">#</a></span></h1>
<p>The <code>v8</code> module exposes APIs that are specific to the version of <a href="https://developers.google.com/v8/">V8</a>
built into the Node.js binary. It can be accessed using:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> v8 <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'v8'</span><span class="sh_symbol">);</span>
</code></pre>
<p><em>Note</em>: The APIs and implementation are subject to change at any time.</p>
<h2>v8.getHeapStatistics()<span><a class="mark" href="#v8_v8_getheapstatistics" id="v8_v8_getheapstatistics">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v1.0.0</span>
</div><p>Returns an object with the following properties:</p>
<ul>
<li><code>total_heap_size</code> <span class="type">&lt;number&gt;</span></li>
<li><code>total_heap_size_executable</code> <span class="type">&lt;number&gt;</span></li>
<li><code>total_physical_size</code> <span class="type">&lt;number&gt;</span></li>
<li><code>total_available_size</code> <span class="type">&lt;number&gt;</span></li>
<li><code>used_heap_size</code> <span class="type">&lt;number&gt;</span></li>
<li><code>heap_size_limit</code> <span class="type">&lt;number&gt;</span></li>
</ul>
<p>For example:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_cbracket">{</span>
  total_heap_size<span class="sh_symbol">:</span> <span class="sh_number">7326976</span><span class="sh_symbol">,</span>
  total_heap_size_executable<span class="sh_symbol">:</span> <span class="sh_number">4194304</span><span class="sh_symbol">,</span>
  total_physical_size<span class="sh_symbol">:</span> <span class="sh_number">7326976</span><span class="sh_symbol">,</span>
  total_available_size<span class="sh_symbol">:</span> <span class="sh_number">1152656</span><span class="sh_symbol">,</span>
  used_heap_size<span class="sh_symbol">:</span> <span class="sh_number">3476208</span><span class="sh_symbol">,</span>
  heap_size_limit<span class="sh_symbol">:</span> <span class="sh_number">1535115264</span>
<span class="sh_cbracket">}</span>
</code></pre>
<h2>v8.getHeapSpaceStatistics()<span><a class="mark" href="#v8_v8_getheapspacestatistics" id="v8_v8_getheapspacestatistics">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v6.0.0</span>
</div><p>Returns statistics about the V8 heap spaces, i.e. the segments which make up
the V8 heap. Neither the ordering of heap spaces, nor the availability of a
heap space can be guaranteed as the statistics are provided via the V8
<a href="https://v8docs.nodesource.com/node-5.0/d5/dda/classv8_1_1_isolate.html#ac673576f24fdc7a33378f8f57e1d13a4"><code>GetHeapSpaceStatistics</code></a> function and may change from one V8 version to the
next.</p>
<p>The value returned is an array of objects containing the following properties:</p>
<ul>
<li><code>space_name</code> <span class="type">&lt;string&gt;</span></li>
<li><code>space_size</code> <span class="type">&lt;number&gt;</span></li>
<li><code>space_used_size</code> <span class="type">&lt;number&gt;</span></li>
<li><code>space_available_size</code> <span class="type">&lt;number&gt;</span></li>
<li><code>physical_space_size</code> <span class="type">&lt;number&gt;</span></li>
</ul>
<p>For example:</p>
<pre class="sh_sourceCode"><code><span class="sh_symbol">[</span>
  <span class="sh_cbracket">{</span>
    <span class="sh_string">"space_name"</span><span class="sh_symbol">:</span> <span class="sh_string">"new_space"</span><span class="sh_symbol">,</span>
    <span class="sh_string">"space_size"</span><span class="sh_symbol">:</span> <span class="sh_number">2063872</span><span class="sh_symbol">,</span>
    <span class="sh_string">"space_used_size"</span><span class="sh_symbol">:</span> <span class="sh_number">951112</span><span class="sh_symbol">,</span>
    <span class="sh_string">"space_available_size"</span><span class="sh_symbol">:</span> <span class="sh_number">80824</span><span class="sh_symbol">,</span>
    <span class="sh_string">"physical_space_size"</span><span class="sh_symbol">:</span> <span class="sh_number">2063872</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_cbracket">{</span>
    <span class="sh_string">"space_name"</span><span class="sh_symbol">:</span> <span class="sh_string">"old_space"</span><span class="sh_symbol">,</span>
    <span class="sh_string">"space_size"</span><span class="sh_symbol">:</span> <span class="sh_number">3090560</span><span class="sh_symbol">,</span>
    <span class="sh_string">"space_used_size"</span><span class="sh_symbol">:</span> <span class="sh_number">2493792</span><span class="sh_symbol">,</span>
    <span class="sh_string">"space_available_size"</span><span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">,</span>
    <span class="sh_string">"physical_space_size"</span><span class="sh_symbol">:</span> <span class="sh_number">3090560</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_cbracket">{</span>
    <span class="sh_string">"space_name"</span><span class="sh_symbol">:</span> <span class="sh_string">"code_space"</span><span class="sh_symbol">,</span>
    <span class="sh_string">"space_size"</span><span class="sh_symbol">:</span> <span class="sh_number">1260160</span><span class="sh_symbol">,</span>
    <span class="sh_string">"space_used_size"</span><span class="sh_symbol">:</span> <span class="sh_number">644256</span><span class="sh_symbol">,</span>
    <span class="sh_string">"space_available_size"</span><span class="sh_symbol">:</span> <span class="sh_number">960</span><span class="sh_symbol">,</span>
    <span class="sh_string">"physical_space_size"</span><span class="sh_symbol">:</span> <span class="sh_number">1260160</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_cbracket">{</span>
    <span class="sh_string">"space_name"</span><span class="sh_symbol">:</span> <span class="sh_string">"map_space"</span><span class="sh_symbol">,</span>
    <span class="sh_string">"space_size"</span><span class="sh_symbol">:</span> <span class="sh_number">1094160</span><span class="sh_symbol">,</span>
    <span class="sh_string">"space_used_size"</span><span class="sh_symbol">:</span> <span class="sh_number">201608</span><span class="sh_symbol">,</span>
    <span class="sh_string">"space_available_size"</span><span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">,</span>
    <span class="sh_string">"physical_space_size"</span><span class="sh_symbol">:</span> <span class="sh_number">1094160</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_cbracket">{</span>
    <span class="sh_string">"space_name"</span><span class="sh_symbol">:</span> <span class="sh_string">"large_object_space"</span><span class="sh_symbol">,</span>
    <span class="sh_string">"space_size"</span><span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">,</span>
    <span class="sh_string">"space_used_size"</span><span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">,</span>
    <span class="sh_string">"space_available_size"</span><span class="sh_symbol">:</span> <span class="sh_number">1490980608</span><span class="sh_symbol">,</span>
    <span class="sh_string">"physical_space_size"</span><span class="sh_symbol">:</span> <span class="sh_number">0</span>
  <span class="sh_cbracket">}</span>
<span class="sh_symbol">]</span>
</code></pre><h2>v8.setFlagsFromString(string)<span><a class="mark" href="#v8_v8_setflagsfromstring_string" id="v8_v8_setflagsfromstring_string">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v1.0.0</span>
</div><p>The <code>v8.setFlagsFromString()</code> method can be used to programmatically set 
V8 command line flags. This method should be used with care. Changing settings
after the VM has started may result in unpredictable behavior, including
crashes and data loss; or it may simply do nothing.</p>
<p>The V8 options available for a version of Node.js may be determined by running
<code>node --v8-options</code>.  An unofficial, community-maintained list of options
and their effects is available <a href="https://github.com/thlorenz/v8-flags/blob/master/flags-0.11.md">here</a>.</p>
<p>Usage:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// Print GC events to stdout for one minute.</span>
<span class="sh_keyword">const</span> v8 <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'v8'</span><span class="sh_symbol">);</span>
v8<span class="sh_symbol">.</span><span class="sh_function">setFlagsFromString</span><span class="sh_symbol">(</span><span class="sh_string">'--trace_gc'</span><span class="sh_symbol">);</span>
<span class="sh_function">setTimeout</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span> v8<span class="sh_symbol">.</span><span class="sh_function">setFlagsFromString</span><span class="sh_symbol">(</span><span class="sh_string">'--notrace_gc'</span><span class="sh_symbol">);</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">60e3</span><span class="sh_symbol">);</span>
</code></pre>
<!-- [end-include:v8.md] -->
<!-- [start-include:vm.md] -->
<h1>Executing JavaScript<span><a class="mark" href="#vm_executing_javascript" id="vm_executing_javascript">#</a></span></h1>
<pre class="api_stability api_stability_2 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> Stable</pre><!--name=vm-->
<p>The <code>vm</code> module provides APIs for compiling and running code within V8 Virtual
Machine contexts. It can be accessed using:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> vm <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'vm'</span><span class="sh_symbol">);</span>
</code></pre>
<p>JavaScript code can be compiled and run immediately or compiled, saved, and run
later.</p>
<h2>Class: vm.Script<span><a class="mark" href="#vm_class_vm_script" id="vm_class_vm_script">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.3.1</span>
</div><p>Instances of the <code>vm.Script</code> class contain precompiled scripts that can be
executed in specific sandboxes (or "contexts").</p>
<h3>new vm.Script(code, options)<span><a class="mark" href="#vm_new_vm_script_code_options" id="vm_new_vm_script_code_options">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.3.1</span>
</div><ul>
<li><code>code</code> <span class="type">&lt;string&gt;</span> The JavaScript code to compile.</li>
<li><code>options</code><ul>
<li><code>filename</code> <span class="type">&lt;string&gt;</span> Specifies the filename used in stack traces produced
by this script.</li>
<li><code>lineOffset</code> <span class="type">&lt;number&gt;</span> Specifies the line number offset that is displayed
in stack traces produced by this script.</li>
<li><code>columnOffset</code> <span class="type">&lt;number&gt;</span> Specifies the column number offset that is displayed
in stack traces produced by this script.</li>
<li><code>displayErrors</code> <span class="type">&lt;boolean&gt;</span> When <code>true</code>, if an <a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a> error occurs
while compiling the <code>code</code>, the line of code causing the error is attached
to the stack trace.</li>
<li><code>timeout</code> <span class="type">&lt;number&gt;</span> Specifies the number of milliseconds to execute <code>code</code>
before terminating execution. If execution is terminated, an <a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a>
will be thrown.</li>
<li><code>cachedData</code> <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer" class="type">&lt;Buffer&gt;</a> Provides an optional <code>Buffer</code> with V8's code cache
data for the supplied source. When supplied, the <code>cachedDataRejected</code> value
will be set to either <code>true</code> or <code>false</code> depending on acceptance of the data
by V8.</li>
<li><code>produceCachedData</code> <span class="type">&lt;boolean&gt;</span> When <code>true</code> and no <code>cachedData</code> is present, V8
will attempt to produce code cache data for <code>code</code>. Upon success, a
<code>Buffer</code> with V8's code cache data will be produced and stored in the
<code>cachedData</code> property of the returned <code>vm.Script</code> instance.
The <code>cachedDataProduced</code> value will be set to either <code>true</code> or <code>false</code>
depending on whether code cache data is produced successfully.</li>
</ul>
</li>
</ul>
<p>Creating a new <code>vm.Script</code> object compiles <code>code</code> but does not run it. The
compiled <code>vm.Script</code> can be run later multiple times. It is important to note
that the <code>code</code> is not bound to any global object; rather, it is bound before
each run, just for that run.</p>
<h3>script.runInContext(contextifiedSandbox[, options])<span><a class="mark" href="#vm_script_runincontext_contextifiedsandbox_options" id="vm_script_runincontext_contextifiedsandbox_options">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.3.1</span>
</div><ul>
<li><code>contextifiedSandbox</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> A <a href="#vm_what_does_it_mean_to_contextify_an_object">contextified</a> object as returned by the
<code>vm.createContext()</code> method.</li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>filename</code> <span class="type">&lt;string&gt;</span> Specifies the filename used in stack traces produced
by this script.</li>
<li><code>lineOffset</code> <span class="type">&lt;number&gt;</span> Specifies the line number offset that is displayed
in stack traces produced by this script.</li>
<li><code>columnOffset</code> <span class="type">&lt;number&gt;</span> Specifies the column number offset that is displayed
in stack traces produced by this script.</li>
<li><code>displayErrors</code> <span class="type">&lt;boolean&gt;</span> When <code>true</code>, if an <a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a> error occurs
while compiling the <code>code</code>, the line of code causing the error is attached
to the stack trace.</li>
<li><code>timeout</code> <span class="type">&lt;number&gt;</span> Specifies the number of milliseconds to execute <code>code</code>
before terminating execution. If execution is terminated, an <a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a>
will be thrown.</li>
</ul>
</li>
</ul>
<p>Runs the compiled code contained by the <code>vm.Script</code> object within the given
<code>contextifiedSandbox</code> and returns the result. Running code does not have access
to local scope.</p>
<p>The following example compiles code that increments a global variable, sets
the value of another global variable, then execute the code multiple times.
The globals are contained in the <code>sandbox</code> object.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> vm <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'vm'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> sandbox <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span>
  animal<span class="sh_symbol">:</span> <span class="sh_string">'cat'</span><span class="sh_symbol">,</span>
  count<span class="sh_symbol">:</span> <span class="sh_number">2</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

<span class="sh_keyword">const</span> script <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> vm<span class="sh_symbol">.</span><span class="sh_function">Script</span><span class="sh_symbol">(</span><span class="sh_string">'count += 1; name = "kitty";'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> context <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> vm<span class="sh_symbol">.</span><span class="sh_function">createContext</span><span class="sh_symbol">(</span>sandbox<span class="sh_symbol">);</span>
<span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_keyword">var</span> i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> <span class="sh_number">10</span><span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  script<span class="sh_symbol">.</span><span class="sh_function">runInContext</span><span class="sh_symbol">(</span>context<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>util<span class="sh_symbol">.</span><span class="sh_function">inspect</span><span class="sh_symbol">(</span>sandbox<span class="sh_symbol">));</span>

<span class="sh_comment">// { animal: 'cat', count: 12, name: 'kitty' }</span>
</code></pre>
<h3>script.runInNewContext([sandbox][, options])<span><a class="mark" href="#vm_script_runinnewcontext_sandbox_options" id="vm_script_runinnewcontext_sandbox_options">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.3.1</span>
</div><ul>
<li><code>sandbox</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> An object that will be <a href="#vm_what_does_it_mean_to_contextify_an_object">contextified</a>. If <code>undefined</code>, a
new object will be created.</li>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>filename</code> <span class="type">&lt;string&gt;</span> Specifies the filename used in stack traces produced
by this script.</li>
<li><code>lineOffset</code> <span class="type">&lt;number&gt;</span> Specifies the line number offset that is displayed
in stack traces produced by this script.</li>
<li><code>columnOffset</code> <span class="type">&lt;number&gt;</span> Specifies the column number offset that is displayed
in stack traces produced by this script.</li>
<li><code>displayErrors</code> <span class="type">&lt;boolean&gt;</span> When <code>true</code>, if an <a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a> error occurs
while compiling the <code>code</code>, the line of code causing the error is attached
to the stack trace.</li>
<li><code>timeout</code> <span class="type">&lt;number&gt;</span> Specifies the number of milliseconds to execute <code>code</code>
before terminating execution. If execution is terminated, an <a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a>
will be thrown.</li>
</ul>
</li>
</ul>
<p>First contextifies the given <code>sandbox</code>, runs the compiled code contained by
the <code>vm.Script</code> object within the created sandbox, and returns the result.
Running code does not have access to local scope.</p>
<p>The following example compiles code that sets a global variable, then executes
the code multiple times in different contexts. The globals are set on and
contained within each individual <code>sandbox</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> vm <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'vm'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> script <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> vm<span class="sh_symbol">.</span><span class="sh_function">Script</span><span class="sh_symbol">(</span><span class="sh_string">'globalVar = "set"'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> sandboxes <span class="sh_symbol">=</span> <span class="sh_symbol">[</span><span class="sh_cbracket">{}</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{}</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{}</span><span class="sh_symbol">];</span>
sandboxes<span class="sh_symbol">.</span><span class="sh_function">forEach</span><span class="sh_symbol">((</span>sandbox<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  script<span class="sh_symbol">.</span><span class="sh_function">runInNewContext</span><span class="sh_symbol">(</span>sandbox<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>util<span class="sh_symbol">.</span><span class="sh_function">inspect</span><span class="sh_symbol">(</span>sandboxes<span class="sh_symbol">));</span>

<span class="sh_comment">// [{ globalVar: 'set' }, { globalVar: 'set' }, { globalVar: 'set' }]</span>
</code></pre>
<h3>script.runInThisContext(<a href="#zlib_class_options">options</a>)<span><a class="mark" href="#vm_script_runinthiscontext_options" id="vm_script_runinthiscontext_options">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.3.1</span>
</div><ul>
<li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a><ul>
<li><code>filename</code> <span class="type">&lt;string&gt;</span> Specifies the filename used in stack traces produced
by this script.</li>
<li><code>lineOffset</code> <span class="type">&lt;number&gt;</span> Specifies the line number offset that is displayed
in stack traces produced by this script.</li>
<li><code>columnOffset</code> <span class="type">&lt;number&gt;</span> Specifies the column number offset that is displayed
in stack traces produced by this script.</li>
<li><code>displayErrors</code> <span class="type">&lt;boolean&gt;</span> When <code>true</code>, if an <a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a> error occurs
while compiling the <code>code</code>, the line of code causing the error is attached
to the stack trace.</li>
<li><code>timeout</code> <span class="type">&lt;number&gt;</span> Specifies the number of milliseconds to execute <code>code</code>
before terminating execution. If execution is terminated, an <a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a>
will be thrown.</li>
</ul>
</li>
</ul>
<p>Runs the compiled code contained by the <code>vm.Script</code> within the context of the
current <code>global</code> object. Running code does not have access to local scope, but
<em>does</em> have access to the current <code>global</code> object.</p>
<p>The following example compiles code that increments a <code>global</code> variable then
executes that code multiple times:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> vm <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'vm'</span><span class="sh_symbol">);</span>

global<span class="sh_symbol">.</span>globalVar <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span>

<span class="sh_keyword">const</span> script <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> vm<span class="sh_symbol">.</span><span class="sh_function">Script</span><span class="sh_symbol">(</span><span class="sh_string">'globalVar += 1'</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{</span> filename<span class="sh_symbol">:</span> <span class="sh_string">'myfile.vm'</span> <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_keyword">var</span> i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> <span class="sh_number">1000</span><span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  script<span class="sh_symbol">.</span><span class="sh_function">runInThisContext</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span>

console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>globalVar<span class="sh_symbol">);</span>

<span class="sh_comment">// 1000</span>
</code></pre>
<h2>vm.createContext([sandbox])<span><a class="mark" href="#vm_vm_createcontext_sandbox" id="vm_vm_createcontext_sandbox">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.3.1</span>
</div><ul>
<li><code>sandbox</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a></li>
</ul>
<p>If given a <code>sandbox</code> object, the <code>vm.createContext()</code> method will [prepare
that sandbox][#vm_what_does_it_mean_to_contextify_an_object] so that it can be
used in calls to <a href="#vm_vm_runincontext_code_contextifiedsandbox_options"><code>vm.runInContext()</code></a> or <a href="#vm_script_runincontext_contextifiedsandbox_options"><code>script.runInContext()</code></a>. Inside
such scripts, the <code>sandbox</code> object will be the global object, retaining all of
its existing properties but also having the built-in objects and functions any
standard <a href="https://es5.github.io/#x15.1">global object</a> has. Outside of scripts run by the vm module,
<code>sandbox</code> will remain unchanged.</p>
<p>If <code>sandbox</code> is omitted (or passed explicitly as <code>undefined</code>), a new, empty
<a href="#vm_what_does_it_mean_to_contextify_an_object">contextified</a> sandbox object will be returned.</p>
<p>The <code>vm.createContext()</code> method is primarily useful for creating a single
sandbox that can be used to run multiple scripts. For instance, if emulating a
web browser, the method can be used to create a single sandbox representing a
window's global object, then run all <code>&lt;script&gt;</code> tags together within the context
of that sandbox.</p>
<h2>vm.isContext(sandbox)<span><a class="mark" href="#vm_vm_iscontext_sandbox" id="vm_vm_iscontext_sandbox">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.11.7</span>
</div><ul>
<li><code>sandbox</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a></li>
</ul>
<p>Returns <code>true</code> if the given <code>sandbox</code> object has been <a href="#vm_what_does_it_mean_to_contextify_an_object">contextified</a> using
<a href="#vm_vm_createcontext_sandbox"><code>vm.createContext()</code></a>.</p>
<h2>vm.runInContext(code, contextifiedSandbox[, options])<span><a class="mark" href="#vm_vm_runincontext_code_contextifiedsandbox_options" id="vm_vm_runincontext_code_contextifiedsandbox_options">#</a></span></h2>
<div class="signature"><ul>
<li><code>code</code> <span class="type">&lt;string&gt;</span> The JavaScript code to compile and run.</li>
<li><code>contextifiedSandbox</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> The <a href="#vm_what_does_it_mean_to_contextify_an_object">contextified</a> object that will be used
as the <code>global</code> when the <code>code</code> is compiled and run.</li>
<li><code>options</code><ul>
<li><code>filename</code> <span class="type">&lt;string&gt;</span> Specifies the filename used in stack traces produced
by this script.</li>
<li><code>lineOffset</code> <span class="type">&lt;number&gt;</span> Specifies the line number offset that is displayed
in stack traces produced by this script.</li>
<li><code>columnOffset</code> <span class="type">&lt;number&gt;</span> Specifies the column number offset that is displayed
in stack traces produced by this script.</li>
<li><code>displayErrors</code> <span class="type">&lt;boolean&gt;</span> When <code>true</code>, if an <a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a> error occurs
while compiling the <code>code</code>, the line of code causing the error is attached
to the stack trace.</li>
<li><code>timeout</code> <span class="type">&lt;number&gt;</span> Specifies the number of milliseconds to execute <code>code</code>
before terminating execution. If execution is terminated, an <a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a>
will be thrown.</li>
</ul>
</li>
</ul>
</div><p>The <code>vm.runInContext()</code> method compiles <code>code</code>, runs it within the context of
the <code>contextifiedSandbox</code>, then returns the result. Running code does not have
access to the local scope. The <code>contextifiedSandbox</code> object <em>must</em> have been
previously <a href="#vm_what_does_it_mean_to_contextify_an_object">contextified</a> using the <a href="#vm_vm_createcontext_sandbox"><code>vm.createContext()</code></a> method.</p>
<p>The following example compiles and executes different scripts using a single
<a href="#vm_what_does_it_mean_to_contextify_an_object">contextified</a> object:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> vm <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'vm'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> sandbox <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span> globalVar<span class="sh_symbol">:</span> <span class="sh_number">1</span> <span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
vm<span class="sh_symbol">.</span><span class="sh_function">createContext</span><span class="sh_symbol">(</span>sandbox<span class="sh_symbol">);</span>

<span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_keyword">var</span> i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> <span class="sh_number">10</span><span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  vm<span class="sh_symbol">.</span><span class="sh_function">runInContext</span><span class="sh_symbol">(</span><span class="sh_string">'globalVar *= 2;'</span><span class="sh_symbol">,</span> sandbox<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>util<span class="sh_symbol">.</span><span class="sh_function">inspect</span><span class="sh_symbol">(</span>sandbox<span class="sh_symbol">));</span>

<span class="sh_comment">// { globalVar: 1024 }</span>
</code></pre>
<h2>vm.runInDebugContext(code)<span><a class="mark" href="#vm_vm_runindebugcontext_code" id="vm_vm_runindebugcontext_code">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.11.14</span>
</div><ul>
<li><code>code</code> <span class="type">&lt;string&gt;</span> The JavaScript code to compile and run.</li>
</ul>
<p>The <code>vm.runInDebugContext()</code> method compiles and executes <code>code</code> inside the V8
debug context. The primary use case is to gain access to the V8 <code>Debug</code> object:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> vm <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'vm'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> Debug <span class="sh_symbol">=</span> vm<span class="sh_symbol">.</span><span class="sh_function">runInDebugContext</span><span class="sh_symbol">(</span><span class="sh_string">'Debug'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>Debug<span class="sh_symbol">.</span><span class="sh_function">findScript</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>emit<span class="sh_symbol">).</span>name<span class="sh_symbol">);</span>  <span class="sh_comment">// 'events.js'</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>Debug<span class="sh_symbol">.</span><span class="sh_function">findScript</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>exit<span class="sh_symbol">).</span>name<span class="sh_symbol">);</span>  <span class="sh_comment">// 'internal/process.js'</span>
</code></pre>
<p><em>Note</em>: The debug context and object are intrinsically tied to V8's debugger
implementation and may change (or even be removed) without prior warning.</p>
<p>The <code>Debug</code> object can also be made available using the V8-specific
<code>--expose_debug_as=</code> [command line option][cli.md].</p>
<h2>vm.runInNewContext(code[, sandbox][, options])<span><a class="mark" href="#vm_vm_runinnewcontext_code_sandbox_options" id="vm_vm_runinnewcontext_code_sandbox_options">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.3.1</span>
</div><ul>
<li><code>code</code> <span class="type">&lt;string&gt;</span> The JavaScript code to compile and run.</li>
<li><code>sandbox</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="type">&lt;Object&gt;</a> An object that will be <a href="#vm_what_does_it_mean_to_contextify_an_object">contextified</a>. If <code>undefined</code>, a
new object will be created.</li>
<li><code>options</code><ul>
<li><code>filename</code> <span class="type">&lt;string&gt;</span> Specifies the filename used in stack traces produced
by this script.</li>
<li><code>lineOffset</code> <span class="type">&lt;number&gt;</span> Specifies the line number offset that is displayed
in stack traces produced by this script.</li>
<li><code>columnOffset</code> <span class="type">&lt;number&gt;</span> Specifies the column number offset that is displayed
in stack traces produced by this script.</li>
<li><code>displayErrors</code> <span class="type">&lt;boolean&gt;</span> When <code>true</code>, if an <a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a> error occurs
while compiling the <code>code</code>, the line of code causing the error is attached
to the stack trace.</li>
<li><code>timeout</code> <span class="type">&lt;number&gt;</span> Specifies the number of milliseconds to execute <code>code</code>
before terminating execution. If execution is terminated, an <a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a>
will be thrown.</li>
</ul>
</li>
</ul>
<p>The <code>vm.runInContext()</code> first contextifies the given <code>sandbox</code> object (or
creates a new <code>sandbox</code> if passed as <code>undefined</code>), compiles the <code>code</code>, runs it
within the context of the created context, then returns the result. Running code
does not have access to the local scope.</p>
<p>The following example compiles and executes code that increments a global
variable and sets a new one. These globals are contained in the <code>sandbox</code>.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> vm <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'vm'</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> sandbox <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span>
  animal<span class="sh_symbol">:</span> <span class="sh_string">'cat'</span><span class="sh_symbol">,</span>
  count<span class="sh_symbol">:</span> <span class="sh_number">2</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

vm<span class="sh_symbol">.</span><span class="sh_function">runInNewContext</span><span class="sh_symbol">(</span><span class="sh_string">'count += 1; name = "kitty"'</span><span class="sh_symbol">,</span> sandbox<span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>util<span class="sh_symbol">.</span><span class="sh_function">inspect</span><span class="sh_symbol">(</span>sandbox<span class="sh_symbol">));</span>

<span class="sh_comment">// { animal: 'cat', count: 3, name: 'kitty' }</span>
</code></pre>
<h2>vm.runInThisContext(code[, options])<span><a class="mark" href="#vm_vm_runinthiscontext_code_options" id="vm_vm_runinthiscontext_code_options">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.3.1</span>
</div><ul>
<li><code>code</code> <span class="type">&lt;string&gt;</span> The JavaScript code to compile and run.</li>
<li><code>options</code><ul>
<li><code>filename</code> <span class="type">&lt;string&gt;</span> Specifies the filename used in stack traces produced
by this script.</li>
<li><code>lineOffset</code> <span class="type">&lt;number&gt;</span> Specifies the line number offset that is displayed
in stack traces produced by this script.</li>
<li><code>columnOffset</code> <span class="type">&lt;number&gt;</span> Specifies the column number offset that is displayed
in stack traces produced by this script.</li>
<li><code>displayErrors</code> <span class="type">&lt;boolean&gt;</span> When <code>true</code>, if an <a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a> error occurs
while compiling the <code>code</code>, the line of code causing the error is attached
to the stack trace.</li>
<li><code>timeout</code> <span class="type">&lt;number&gt;</span> Specifies the number of milliseconds to execute <code>code</code>
before terminating execution. If execution is terminated, an <a href="https://nodejs.org/api/errors.html#errors_class_error"><code>Error</code></a>
will be thrown.</li>
</ul>
</li>
</ul>
<p><code>vm.runInThisContext()</code> compiles <code>code</code>, runs it within the context of the
current <code>global</code> and returns the result. Running code does not have access to
local scope, but does have access to the current <code>global</code> object.</p>
<p>The following example illustrates using both <code>vm.runInThisContext()</code> and
the JavaScript <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval"><code>eval()</code></a> function to run the same code:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> vm <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'vm'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">var</span> localVar <span class="sh_symbol">=</span> <span class="sh_string">'initial value'</span><span class="sh_symbol">;</span>

<span class="sh_keyword">const</span> vmResult <span class="sh_symbol">=</span> vm<span class="sh_symbol">.</span><span class="sh_function">runInThisContext</span><span class="sh_symbol">(</span><span class="sh_string">'localVar = "vm";'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'vmResult: '</span><span class="sh_symbol">,</span> vmResult<span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'localVar: '</span><span class="sh_symbol">,</span> localVar<span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> evalResult <span class="sh_symbol">=</span> <span class="sh_predef_func">eval</span><span class="sh_symbol">(</span><span class="sh_string">'localVar = "eval";'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'evalResult: '</span><span class="sh_symbol">,</span> evalResult<span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'localVar: '</span><span class="sh_symbol">,</span> localVar<span class="sh_symbol">);</span>

<span class="sh_comment">// vmResult: 'vm', localVar: 'initial value'</span>
<span class="sh_comment">// evalResult: 'eval', localVar: 'eval'</span>
</code></pre>
<p>Because <code>vm.runInThisContext()</code> does not have access to the local scope,
<code>localVar</code> is unchanged. In contrast, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval"><code>eval()</code></a> <em>does</em> have access to the
local scope, so the value <code>localVar</code> is changed. In this way
<code>vm.runInThisContext()</code> is much like an <a href="https://es5.github.io/#x10.4.2">indirect <code>eval()</code> call</a>, e.g. 
<code>(0,eval)('code')</code>.</p>
<h2>Example: Running an HTTP Server within a VM<span><a class="mark" href="#vm_example_running_an_http_server_within_a_vm" id="vm_example_running_an_http_server_within_a_vm">#</a></span></h2>
<p>When using either <code>script.runInThisContext()</code> or <code>vm.runInThisContext()</code>, the
code is executed within the current V8 global context. The code passed
to this VM context will have its own isolated scope.</p>
<p>In order to run a simple web server using the <code>http</code> module the code passed to
the context must either call <code>require('http')</code> on its own, or have a reference
to the <code>http</code> module passed to it. For instance:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_string">'use strict'</span><span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> vm <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'vm'</span><span class="sh_symbol">);</span>

let code <span class="sh_symbol">=</span>
`<span class="sh_symbol">(</span><span class="sh_keyword">function</span><span class="sh_symbol">(</span>require<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>

   <span class="sh_keyword">const</span> http <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'http'</span><span class="sh_symbol">);</span>

   http<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">(</span> <span class="sh_symbol">(</span>request<span class="sh_symbol">,</span> response<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
     response<span class="sh_symbol">.</span><span class="sh_function">writeHead</span><span class="sh_symbol">(</span><span class="sh_number">200</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{</span><span class="sh_string">'Content-Type'</span><span class="sh_symbol">:</span> <span class="sh_string">'text/plain'</span><span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
     response<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'Hello World</span><span class="sh_specialchar">\\</span><span class="sh_string">n'</span><span class="sh_symbol">);</span>
   <span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">8124</span><span class="sh_symbol">);</span>

   console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Server running at http://127.0.0.1:8124/'</span><span class="sh_symbol">);</span>
 <span class="sh_cbracket">}</span><span class="sh_symbol">)</span>`<span class="sh_symbol">;</span>

 vm<span class="sh_symbol">.</span><span class="sh_function">runInThisContext</span><span class="sh_symbol">(</span>code<span class="sh_symbol">)(</span>require<span class="sh_symbol">);</span>
</code></pre>
<p><em>Note</em>: The <code>require()</code> in the above case shares the state with context it is
passed from. This may introduce risks when untrusted code is executed, e.g.
altering objects from the calling thread's context in unwanted ways.</p>
<h2>What does it mean to "contextify" an object?<span><a class="mark" href="#vm_what_does_it_mean_to_contextify_an_object" id="vm_what_does_it_mean_to_contextify_an_object">#</a></span></h2>
<p>All JavaScript executed within Node.js runs within the scope of a "context".
According to the <a href="https://developers.google.com/v8/embed#contexts">V8 Embedder's Guide</a>:</p>
<blockquote>
<p>In V8, a context is an execution environment that allows separate, unrelated,
JavaScript applications to run in a single instance of V8. You must explicitly
specify the context in which you want any JavaScript code to be run.</p>
</blockquote>
<p>When the method <code>vm.createContext()</code> is called, the <code>sandbox</code> object that is
passed in (or a newly created object if <code>sandbox</code> is <code>undefined</code>) is associated
internally with a new instance of a V8 Context. This V8 Context provides the
<code>code</code> run using the <code>vm</code> modules methods with an isolated global environment
within which it can operate. The process of creating the V8 Context and
associating it with the <code>sandbox</code> object is what this document refers to as
"contextifying" the <code>sandbox</code>.</p>
<!-- [end-include:vm.md] -->
<!-- [start-include:zlib.md] -->
<h1>Zlib<span><a class="mark" href="#zlib_zlib" id="zlib_zlib">#</a></span></h1>
<pre class="api_stability api_stability_2 sh_sourceCode">Stability<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> Stable</pre><p>The <code>zlib</code> module provides compression functionality implemented using Gzip and
Deflate/Inflate. It can be accessed using:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> zlib <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'zlib'</span><span class="sh_symbol">);</span>
</code></pre>
<p>Compressing or decompressing a stream (such as a file) can be accomplished by 
piping the source stream data through a <code>zlib</code> stream into a destination stream:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> gzip <span class="sh_symbol">=</span> zlib<span class="sh_symbol">.</span><span class="sh_function">createGzip</span><span class="sh_symbol">();</span>
<span class="sh_keyword">const</span> fs <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'fs'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> inp <span class="sh_symbol">=</span> fs<span class="sh_symbol">.</span><span class="sh_function">createReadStream</span><span class="sh_symbol">(</span><span class="sh_string">'input.txt'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> out <span class="sh_symbol">=</span> fs<span class="sh_symbol">.</span><span class="sh_function">createWriteStream</span><span class="sh_symbol">(</span><span class="sh_string">'input.txt.gz'</span><span class="sh_symbol">);</span>

inp<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>gzip<span class="sh_symbol">).</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>out<span class="sh_symbol">);</span>
</code></pre>
<p>It is also possible to compress or decompress data in a single step:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> input <span class="sh_symbol">=</span> <span class="sh_string">'.................................'</span><span class="sh_symbol">;</span>
zlib<span class="sh_symbol">.</span><span class="sh_function">deflate</span><span class="sh_symbol">(</span>input<span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">,</span> buffer<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(!</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buffer<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_string">'base64'</span><span class="sh_symbol">));</span>
  <span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// handle error</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_keyword">const</span> buffer <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'eJzT0yMAAGTvBe8='</span><span class="sh_symbol">,</span> <span class="sh_string">'base64'</span><span class="sh_symbol">);</span>
zlib<span class="sh_symbol">.</span><span class="sh_function">unzip</span><span class="sh_symbol">(</span>buffer<span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">,</span> buffer<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(!</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buffer<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">());</span>
  <span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// handle error</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<h2>Compressing HTTP requests and responses<span><a class="mark" href="#zlib_compressing_http_requests_and_responses" id="zlib_compressing_http_requests_and_responses">#</a></span></h2>
<p>The <code>zlib</code> module can be used to implement support for the <code>gzip</code> and <code>deflate</code>
content-encoding mechanisms defined by 
<a href="https://tools.ietf.org/html/rfc7230#section-4.2">HTTP</a>.</p>
<p>The HTTP <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3"><code>Accept-Encoding</code></a> header is used within an http request to identify
the compression encodings accepted by the client. The <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11"><code>Content-Encoding</code></a> 
header is used to identify the compression encodings actually applied to a 
message.</p>
<p><strong>Note: the examples given below are drastically simplified to show
the basic concept.</strong>  Using <code>zlib</code> encoding can be expensive, and the results
ought to be cached.  See <a href="#zlib_memory_usage_tuning">Memory Usage Tuning</a> for more information
on the speed/memory/compression tradeoffs involved in <code>zlib</code> usage.</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// client request example</span>
<span class="sh_keyword">const</span> zlib <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'zlib'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> http <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'http'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> fs <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'fs'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> request <span class="sh_symbol">=</span> http<span class="sh_symbol">.</span><span class="sh_function">get</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span> host<span class="sh_symbol">:</span> <span class="sh_string">'example.com'</span><span class="sh_symbol">,</span>
                         path<span class="sh_symbol">:</span> <span class="sh_string">'/'</span><span class="sh_symbol">,</span>
                         port<span class="sh_symbol">:</span> <span class="sh_number">80</span><span class="sh_symbol">,</span>
                         headers<span class="sh_symbol">:</span> <span class="sh_cbracket">{</span> <span class="sh_string">'Accept-Encoding'</span><span class="sh_symbol">:</span> <span class="sh_string">'gzip,deflate'</span> <span class="sh_cbracket">}</span> <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
request<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'response'</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>response<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">var</span> output <span class="sh_symbol">=</span> fs<span class="sh_symbol">.</span><span class="sh_function">createWriteStream</span><span class="sh_symbol">(</span><span class="sh_string">'example.com_index.html'</span><span class="sh_symbol">);</span>

  <span class="sh_keyword">switch</span> <span class="sh_symbol">(</span>response<span class="sh_symbol">.</span>headers<span class="sh_symbol">[</span><span class="sh_string">'content-encoding'</span><span class="sh_symbol">])</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// or, just use zlib.createUnzip() to handle both cases</span>
    <span class="sh_keyword">case</span> <span class="sh_string">'gzip'</span><span class="sh_symbol">:</span>
      response<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>zlib<span class="sh_symbol">.</span><span class="sh_function">createGunzip</span><span class="sh_symbol">()).</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>output<span class="sh_symbol">);</span>
      <span class="sh_keyword">break</span><span class="sh_symbol">;</span>
    <span class="sh_keyword">case</span> <span class="sh_string">'deflate'</span><span class="sh_symbol">:</span>
      response<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>zlib<span class="sh_symbol">.</span><span class="sh_function">createInflate</span><span class="sh_symbol">()).</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>output<span class="sh_symbol">);</span>
      <span class="sh_keyword">break</span><span class="sh_symbol">;</span>
    <span class="sh_keyword">default</span><span class="sh_symbol">:</span>
      response<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>output<span class="sh_symbol">);</span>
      <span class="sh_keyword">break</span><span class="sh_symbol">;</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_comment">// server example</span>
<span class="sh_comment">// Running a gzip operation on every request is quite expensive.</span>
<span class="sh_comment">// It would be much more efficient to cache the compressed buffer.</span>
<span class="sh_keyword">const</span> zlib <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'zlib'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> http <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'http'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> fs <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'fs'</span><span class="sh_symbol">);</span>
http<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">((</span>request<span class="sh_symbol">,</span> response<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">var</span> raw <span class="sh_symbol">=</span> fs<span class="sh_symbol">.</span><span class="sh_function">createReadStream</span><span class="sh_symbol">(</span><span class="sh_string">'index.html'</span><span class="sh_symbol">);</span>
  <span class="sh_keyword">var</span> acceptEncoding <span class="sh_symbol">=</span> request<span class="sh_symbol">.</span>headers<span class="sh_symbol">[</span><span class="sh_string">'accept-encoding'</span><span class="sh_symbol">];</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(!</span>acceptEncoding<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    acceptEncoding <span class="sh_symbol">=</span> <span class="sh_string">''</span><span class="sh_symbol">;</span>
  <span class="sh_cbracket">}</span>

  <span class="sh_comment">// Note: this is not a conformant accept-encoding parser.</span>
  <span class="sh_comment">// See http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>acceptEncoding<span class="sh_symbol">.</span><span class="sh_function">match</span><span class="sh_symbol">(</span><span class="sh_regexp">/\bdeflate\b/</span><span class="sh_symbol">))</span> <span class="sh_cbracket">{</span>
    response<span class="sh_symbol">.</span><span class="sh_function">writeHead</span><span class="sh_symbol">(</span><span class="sh_number">200</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{</span> <span class="sh_string">'Content-Encoding'</span><span class="sh_symbol">:</span> <span class="sh_string">'deflate'</span> <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
    raw<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>zlib<span class="sh_symbol">.</span><span class="sh_function">createDeflate</span><span class="sh_symbol">()).</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>response<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>acceptEncoding<span class="sh_symbol">.</span><span class="sh_function">match</span><span class="sh_symbol">(</span><span class="sh_regexp">/\bgzip\b/</span><span class="sh_symbol">))</span> <span class="sh_cbracket">{</span>
    response<span class="sh_symbol">.</span><span class="sh_function">writeHead</span><span class="sh_symbol">(</span><span class="sh_number">200</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{</span> <span class="sh_string">'Content-Encoding'</span><span class="sh_symbol">:</span> <span class="sh_string">'gzip'</span> <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
    raw<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>zlib<span class="sh_symbol">.</span><span class="sh_function">createGzip</span><span class="sh_symbol">()).</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>response<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
    response<span class="sh_symbol">.</span><span class="sh_function">writeHead</span><span class="sh_symbol">(</span><span class="sh_number">200</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{}</span><span class="sh_symbol">);</span>
    raw<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>response<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">1337</span><span class="sh_symbol">);</span>
</code></pre>
<p>By default, the <code>zlib</code> methods with throw an error when decompressing
truncated data. However, if it is known that the data is incomplete, or
the desire is to inspect only the beginning of a compressed file, it is
possible to suppress the default error handling by changing the flushing
method that is used to compressed the last chunk of input data:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_comment">// This is a truncated version of the buffer from the above examples</span>
<span class="sh_keyword">const</span> buffer <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">from</span><span class="sh_symbol">(</span><span class="sh_string">'eJzT0yMA'</span><span class="sh_symbol">,</span> <span class="sh_string">'base64'</span><span class="sh_symbol">);</span>

zlib<span class="sh_symbol">.</span><span class="sh_function">unzip</span><span class="sh_symbol">(</span>buffer<span class="sh_symbol">,</span> <span class="sh_cbracket">{</span> finishFlush<span class="sh_symbol">:</span> zlib<span class="sh_symbol">.</span>Z_SYNC_FLUSH <span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">,</span> buffer<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(!</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buffer<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">());</span>
  <span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// handle error</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
</code></pre>
<p>This will not change the behavior in other error-throwing situations, e.g.
when the input data has an invalid format. Using this method, it will not be
possible to determine whether the input ended prematurely or lacks the
integrity checks, making it necessary to manually check that the
decompressed result is valid.</p>
<h2>Memory Usage Tuning<span><a class="mark" href="#zlib_memory_usage_tuning" id="zlib_memory_usage_tuning">#</a></span></h2>
<!--type=misc-->
<p>From <code>zlib/zconf.h</code>, modified to node.js's usage:</p>
<p>The memory requirements for deflate are (in bytes):</p>
<pre class="sh_sourceCode"><code><span class="sh_symbol">(</span><span class="sh_number">1</span> <span class="sh_symbol">&lt;&lt;</span> <span class="sh_symbol">(</span>windowBits<span class="sh_number">+2</span><span class="sh_symbol">))</span> <span class="sh_symbol">+</span>  <span class="sh_symbol">(</span><span class="sh_number">1</span> <span class="sh_symbol">&lt;&lt;</span> <span class="sh_symbol">(</span>memLevel<span class="sh_number">+9</span><span class="sh_symbol">))</span>
</code></pre><p>That is: 128K for windowBits=15  +  128K for memLevel = 8
(default values) plus a few kilobytes for small objects.</p>
<p>For example, to reduce the default memory requirements from 256K to 128K, the
options shoud be set to:</p>
<pre class="sh_sourceCode"><code><span class="sh_cbracket">{</span> windowBits<span class="sh_symbol">:</span> <span class="sh_number">14</span><span class="sh_symbol">,</span> memLevel<span class="sh_symbol">:</span> <span class="sh_number">7</span> <span class="sh_cbracket">}</span>
</code></pre><p>This will, however, generally degrade compression.</p>
<p>The memory requirements for inflate are (in bytes)</p>
<pre class="sh_sourceCode"><code><span class="sh_number">1</span> <span class="sh_symbol">&lt;&lt;</span> windowBits
</code></pre><p>That is, 32K for windowBits=15 (default value) plus a few kilobytes
for small objects.</p>
<p>This is in addition to a single internal output slab buffer of size
<code>chunkSize</code>, which defaults to 16K.</p>
<p>The speed of <code>zlib</code> compression is affected most dramatically by the
<code>level</code> setting.  A higher level will result in better compression, but
will take longer to complete.  A lower level will result in less
compression, but will be much faster.</p>
<p>In general, greater memory usage options will mean that Node.js has to make
fewer calls to <code>zlib</code> because it will be able to process more data on
each <code>write</code> operation.  So, this is another factor that affects the
speed, at the cost of memory usage.</p>
<h2>Flushing<span><a class="mark" href="#zlib_flushing" id="zlib_flushing">#</a></span></h2>
<p>Calling <a href="#zlib_zlib_flush_kind_callback"><code>.flush()</code></a> on a compression stream will make <code>zlib</code> return as much
output as currently possible. This may come at the cost of degraded compression
quality, but can be useful when data needs to be available as soon as possible.</p>
<p>In the following example, <code>flush()</code> is used to write a compressed partial
HTTP response to the client:</p>
<pre class="sh_sourceCode"><code class="lang-js"><span class="sh_keyword">const</span> zlib <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'zlib'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">const</span> http <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'http'</span><span class="sh_symbol">);</span>

http<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">((</span>request<span class="sh_symbol">,</span> response<span class="sh_symbol">)</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// For the sake of simplicity, the Accept-Encoding checks are omitted.</span>
  response<span class="sh_symbol">.</span><span class="sh_function">writeHead</span><span class="sh_symbol">(</span><span class="sh_number">200</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{</span> <span class="sh_string">'content-encoding'</span><span class="sh_symbol">:</span> <span class="sh_string">'gzip'</span> <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  <span class="sh_keyword">const</span> output <span class="sh_symbol">=</span> zlib<span class="sh_symbol">.</span><span class="sh_function">createGzip</span><span class="sh_symbol">();</span>
  output<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>response<span class="sh_symbol">);</span>

  <span class="sh_function">setInterval</span><span class="sh_symbol">(()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
    output<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span>`The current time is $<span class="sh_cbracket">{</span><span class="sh_predef_func">Date</span><span class="sh_symbol">()</span><span class="sh_cbracket">}</span><span class="sh_symbol">\</span>n`<span class="sh_symbol">,</span> <span class="sh_symbol">()</span> <span class="sh_symbol">=&gt;</span> <span class="sh_cbracket">{</span>
      <span class="sh_comment">// The data has been passed to zlib, but the compression algorithm may</span>
      <span class="sh_comment">// have decided to buffer the data for more efficient compression.</span>
      <span class="sh_comment">// Calling .flush() will make the data available as soon as the client</span>
      <span class="sh_comment">// is ready to receive it.</span>
      output<span class="sh_symbol">.</span><span class="sh_function">flush</span><span class="sh_symbol">();</span>
    <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">1000</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">1337</span><span class="sh_symbol">);</span>
</code></pre>
<h2>Constants<span><a class="mark" href="#zlib_constants" id="zlib_constants">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.8</span>
</div><!--type=misc-->
<p>All of the constants defined in <code>zlib.h</code> are also defined on <code>require('zlib')</code>.
In the normal course of operations, it will not be necessary to use these 
constants. They are documented so that their presence is not surprising. This 
section is taken almost directly from the <a href="http://zlib.net/manual.html#Constants">zlib documentation</a>.  See
<a href="http://zlib.net/manual.html#Constants">http://zlib.net/manual.html#Constants</a> for more details.</p>
<p>Allowed flush values.</p>
<ul>
<li><code>zlib.Z_NO_FLUSH</code></li>
<li><code>zlib.Z_PARTIAL_FLUSH</code></li>
<li><code>zlib.Z_SYNC_FLUSH</code></li>
<li><code>zlib.Z_FULL_FLUSH</code></li>
<li><code>zlib.Z_FINISH</code></li>
<li><code>zlib.Z_BLOCK</code></li>
<li><code>zlib.Z_TREES</code></li>
</ul>
<p>Return codes for the compression/decompression functions. Negative
values are errors, positive values are used for special but normal
events.</p>
<ul>
<li><code>zlib.Z_OK</code></li>
<li><code>zlib.Z_STREAM_END</code></li>
<li><code>zlib.Z_NEED_DICT</code></li>
<li><code>zlib.Z_ERRNO</code></li>
<li><code>zlib.Z_STREAM_ERROR</code></li>
<li><code>zlib.Z_DATA_ERROR</code></li>
<li><code>zlib.Z_MEM_ERROR</code></li>
<li><code>zlib.Z_BUF_ERROR</code></li>
<li><code>zlib.Z_VERSION_ERROR</code></li>
</ul>
<p>Compression levels.</p>
<ul>
<li><code>zlib.Z_NO_COMPRESSION</code></li>
<li><code>zlib.Z_BEST_SPEED</code></li>
<li><code>zlib.Z_BEST_COMPRESSION</code></li>
<li><code>zlib.Z_DEFAULT_COMPRESSION</code></li>
</ul>
<p>Compression strategy.</p>
<ul>
<li><code>zlib.Z_FILTERED</code></li>
<li><code>zlib.Z_HUFFMAN_ONLY</code></li>
<li><code>zlib.Z_RLE</code></li>
<li><code>zlib.Z_FIXED</code></li>
<li><code>zlib.Z_DEFAULT_STRATEGY</code></li>
</ul>
<p>Possible values of the data_type field.</p>
<ul>
<li><code>zlib.Z_BINARY</code></li>
<li><code>zlib.Z_TEXT</code></li>
<li><code>zlib.Z_ASCII</code></li>
<li><code>zlib.Z_UNKNOWN</code></li>
</ul>
<p>The deflate compression method (the only one supported in this version).</p>
<ul>
<li><code>zlib.Z_DEFLATED</code></li>
</ul>
<p>For initializing zalloc, zfree, opaque.</p>
<ul>
<li><code>zlib.Z_NULL</code></li>
</ul>
<h2>Class Options<span><a class="mark" href="#zlib_class_options" id="zlib_class_options">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.11.1</span>
</div><!--type=misc-->
<p>Each class takes an <code>options</code> object.  All options are optional.</p>
<p>Note that some options are only relevant when compressing, and are
ignored by the decompression classes.</p>
<ul>
<li><code>flush</code> (default: <code>zlib.Z_NO_FLUSH</code>)</li>
<li><code>finishFlush</code> (default: <code>zlib.Z_FINISH</code>)</li>
<li><code>chunkSize</code> (default: 16*1024)</li>
<li><code>windowBits</code></li>
<li><code>level</code> (compression only)</li>
<li><code>memLevel</code> (compression only)</li>
<li><code>strategy</code> (compression only)</li>
<li><code>dictionary</code> (deflate/inflate only, empty dictionary by default)</li>
</ul>
<p>See the description of <code>deflateInit2</code> and <code>inflateInit2</code> at
<a href="http://zlib.net/manual.html#Advanced">http://zlib.net/manual.html#Advanced</a> for more information on these.</p>
<h2>Class: zlib.Deflate<span><a class="mark" href="#zlib_class_zlib_deflate" id="zlib_class_zlib_deflate">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.8</span>
</div><p>Compress data using deflate.</p>
<h2>Class: zlib.DeflateRaw<span><a class="mark" href="#zlib_class_zlib_deflateraw" id="zlib_class_zlib_deflateraw">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.8</span>
</div><p>Compress data using deflate, and do not append a <code>zlib</code> header.</p>
<h2>Class: zlib.Gunzip<span><a class="mark" href="#zlib_class_zlib_gunzip" id="zlib_class_zlib_gunzip">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.8</span>
</div><p>Decompress a gzip stream.</p>
<h2>Class: zlib.Gzip<span><a class="mark" href="#zlib_class_zlib_gzip" id="zlib_class_zlib_gzip">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.8</span>
</div><p>Compress data using gzip.</p>
<h2>Class: zlib.Inflate<span><a class="mark" href="#zlib_class_zlib_inflate" id="zlib_class_zlib_inflate">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.8</span>
</div><p>Decompress a deflate stream.</p>
<h2>Class: zlib.InflateRaw<span><a class="mark" href="#zlib_class_zlib_inflateraw" id="zlib_class_zlib_inflateraw">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.8</span>
</div><p>Decompress a raw deflate stream.</p>
<h2>Class: zlib.Unzip<span><a class="mark" href="#zlib_class_zlib_unzip" id="zlib_class_zlib_unzip">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.8</span>
</div><p>Decompress either a Gzip- or Deflate-compressed stream by auto-detecting
the header.</p>
<h2>Class: zlib.Zlib<span><a class="mark" href="#zlib_class_zlib_zlib" id="zlib_class_zlib_zlib">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.8</span>
</div><p>Not exported by the <code>zlib</code> module. It is documented here because it is the base
class of the compressor/decompressor classes.</p>
<h3>zlib.flush([kind], callback)<span><a class="mark" href="#zlib_zlib_flush_kind_callback" id="zlib_zlib_flush_kind_callback">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.5.8</span>
</div><p><code>kind</code> defaults to <code>zlib.Z_FULL_FLUSH</code>.</p>
<p>Flush pending data. Don't call this frivolously, premature flushes negatively
impact the effectiveness of the compression algorithm.</p>
<p>Calling this only flushes data from the internal <code>zlib</code> state, and does not
perform flushing of any kind on the streams level. Rather, it behaves like a
normal call to <code>.write()</code>, i.e. it will be queued up behind other pending
writes and will only produce output when data is being read from the stream.</p>
<h3>zlib.params(level, strategy, callback)<span><a class="mark" href="#zlib_zlib_params_level_strategy_callback" id="zlib_zlib_params_level_strategy_callback">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.11.4</span>
</div><p>Dynamically update the compression level and compression strategy.
Only applicable to deflate algorithm.</p>
<h3>zlib.reset()<span><a class="mark" href="#zlib_zlib_reset" id="zlib_zlib_reset">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.7.0</span>
</div><p>Reset the compressor/decompressor to factory defaults. Only applicable to
the inflate and deflate algorithms.</p>
<h2>zlib.createDeflate(<a href="#zlib_class_options">options</a>)<span><a class="mark" href="#zlib_zlib_createdeflate_options" id="zlib_zlib_createdeflate_options">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.8</span>
</div><p>Returns a new <a href="#zlib_class_zlib_deflate">Deflate</a> object with an <a href="#zlib_class_options">options</a>.</p>
<h2>zlib.createDeflateRaw(<a href="#zlib_class_options">options</a>)<span><a class="mark" href="#zlib_zlib_createdeflateraw_options" id="zlib_zlib_createdeflateraw_options">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.8</span>
</div><p>Returns a new <a href="#zlib_class_zlib_deflateraw">DeflateRaw</a> object with an <a href="#zlib_class_options">options</a>.</p>
<h2>zlib.createGunzip(<a href="#zlib_class_options">options</a>)<span><a class="mark" href="#zlib_zlib_creategunzip_options" id="zlib_zlib_creategunzip_options">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.8</span>
</div><p>Returns a new <a href="#zlib_class_zlib_gunzip">Gunzip</a> object with an <a href="#zlib_class_options">options</a>.</p>
<h2>zlib.createGzip(<a href="#zlib_class_options">options</a>)<span><a class="mark" href="#zlib_zlib_creategzip_options" id="zlib_zlib_creategzip_options">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.8</span>
</div><p>Returns a new <a href="#zlib_class_zlib_gzip">Gzip</a> object with an <a href="#zlib_class_options">options</a>.</p>
<h2>zlib.createInflate(<a href="#zlib_class_options">options</a>)<span><a class="mark" href="#zlib_zlib_createinflate_options" id="zlib_zlib_createinflate_options">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.8</span>
</div><p>Returns a new <a href="#zlib_class_zlib_inflate">Inflate</a> object with an <a href="#zlib_class_options">options</a>.</p>
<h2>zlib.createInflateRaw(<a href="#zlib_class_options">options</a>)<span><a class="mark" href="#zlib_zlib_createinflateraw_options" id="zlib_zlib_createinflateraw_options">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.8</span>
</div><p>Returns a new <a href="#zlib_class_zlib_inflateraw">InflateRaw</a> object with an <a href="#zlib_class_options">options</a>.</p>
<h2>zlib.createUnzip(<a href="#zlib_class_options">options</a>)<span><a class="mark" href="#zlib_zlib_createunzip_options" id="zlib_zlib_createunzip_options">#</a></span></h2>
<div class="api_metadata">
<span>Added in: v0.5.8</span>
</div><p>Returns a new <a href="#zlib_class_zlib_unzip">Unzip</a> object with an <a href="#zlib_class_options">options</a>.</p>
<h2>Convenience Methods<span><a class="mark" href="#zlib_convenience_methods" id="zlib_convenience_methods">#</a></span></h2>
<!--type=misc-->
<p>All of these take a <a href="https://nodejs.org/api/buffer.html">Buffer</a> or string as the first argument, an optional 
second argument to supply options to the <code>zlib</code> classes and will call the 
supplied callback with <code>callback(error, result)</code>.</p>
<p>Every method has a <code>*Sync</code> counterpart, which accept the same arguments, but
without a callback.</p>
<h3>zlib.deflate(buf[, options], callback)<span><a class="mark" href="#zlib_zlib_deflate_buf_options_callback" id="zlib_zlib_deflate_buf_options_callback">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.6.0</span>
</div><h3>zlib.deflateSync(buf[, options])<span><a class="mark" href="#zlib_zlib_deflatesync_buf_options" id="zlib_zlib_deflatesync_buf_options">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.11.12</span>
</div><p>Compress a Buffer or string with Deflate.</p>
<h3>zlib.deflateRaw(buf[, options], callback)<span><a class="mark" href="#zlib_zlib_deflateraw_buf_options_callback" id="zlib_zlib_deflateraw_buf_options_callback">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.6.0</span>
</div><h3>zlib.deflateRawSync(buf[, options])<span><a class="mark" href="#zlib_zlib_deflaterawsync_buf_options" id="zlib_zlib_deflaterawsync_buf_options">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.11.12</span>
</div><p>Compress a Buffer or string with DeflateRaw.</p>
<h3>zlib.gunzip(buf[, options], callback)<span><a class="mark" href="#zlib_zlib_gunzip_buf_options_callback" id="zlib_zlib_gunzip_buf_options_callback">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.6.0</span>
</div><h3>zlib.gunzipSync(buf[, options])<span><a class="mark" href="#zlib_zlib_gunzipsync_buf_options" id="zlib_zlib_gunzipsync_buf_options">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.11.12</span>
</div><p>Decompress a Buffer or string with Gunzip.</p>
<h3>zlib.gzip(buf[, options], callback)<span><a class="mark" href="#zlib_zlib_gzip_buf_options_callback" id="zlib_zlib_gzip_buf_options_callback">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.6.0</span>
</div><h3>zlib.gzipSync(buf[, options])<span><a class="mark" href="#zlib_zlib_gzipsync_buf_options" id="zlib_zlib_gzipsync_buf_options">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.11.12</span>
</div><p>Compress a Buffer or string with Gzip.</p>
<h3>zlib.inflate(buf[, options], callback)<span><a class="mark" href="#zlib_zlib_inflate_buf_options_callback" id="zlib_zlib_inflate_buf_options_callback">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.6.0</span>
</div><h3>zlib.inflateSync(buf[, options])<span><a class="mark" href="#zlib_zlib_inflatesync_buf_options" id="zlib_zlib_inflatesync_buf_options">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.11.12</span>
</div><p>Decompress a Buffer or string with Inflate.</p>
<h3>zlib.inflateRaw(buf[, options], callback)<span><a class="mark" href="#zlib_zlib_inflateraw_buf_options_callback" id="zlib_zlib_inflateraw_buf_options_callback">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.6.0</span>
</div><h3>zlib.inflateRawSync(buf[, options])<span><a class="mark" href="#zlib_zlib_inflaterawsync_buf_options" id="zlib_zlib_inflaterawsync_buf_options">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.11.12</span>
</div><p>Decompress a Buffer or string with InflateRaw.</p>
<h3>zlib.unzip(buf[, options], callback)<span><a class="mark" href="#zlib_zlib_unzip_buf_options_callback" id="zlib_zlib_unzip_buf_options_callback">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.6.0</span>
</div><h3>zlib.unzipSync(buf[, options])<span><a class="mark" href="#zlib_zlib_unzipsync_buf_options" id="zlib_zlib_unzipsync_buf_options">#</a></span></h3>
<div class="api_metadata">
<span>Added in: v0.11.12</span>
</div><p>Decompress a Buffer or string with Unzip.</p>
<!-- [end-include:zlib.md] -->

      </div>
    </div>
  </div>
  <script>/*
SHJS - Syntax Highlighting in JavaScript
Copyright (C) 2007, 2008 gnombat@users.sourceforge.net
License: http://shjs.sourceforge.net/doc/gplv3.html
*/

if (! this.sh_languages) {
  this.sh_languages = {};
}
var sh_requests = {};

function sh_isEmailAddress(url) {
  if (/^mailto:/.test(url)) {
    return false;
  }
  return url.indexOf('@') !== -1;
}

function sh_setHref(tags, numTags, inputString) {
  var url = inputString.substring(tags[numTags - 2].pos, tags[numTags - 1].pos);
  if (url.length >= 2 && url.charAt(0) === '<' && url.charAt(url.length - 1) === '>') {
    url = url.substr(1, url.length - 2);
  }
  if (sh_isEmailAddress(url)) {
    url = 'mailto:' + url;
  }
  tags[numTags - 2].node.href = url;
}

/*
Konqueror has a bug where the regular expression /$/g will not match at the end
of a line more than once:

  var regex = /$/g;
  var match;

  var line = '1234567890';
  regex.lastIndex = 10;
  match = regex.exec(line);

  var line2 = 'abcde';
  regex.lastIndex = 5;
  match = regex.exec(line2);  // fails
*/
function sh_konquerorExec(s) {
  var result = [''];
  result.index = s.length;
  result.input = s;
  return result;
}

/**
Highlights all elements containing source code in a text string.  The return
value is an array of objects, each representing an HTML start or end tag.  Each
object has a property named pos, which is an integer representing the text
offset of the tag. Every start tag also has a property named node, which is the
DOM element started by the tag. End tags do not have this property.
@param  inputString  a text string
@param  language  a language definition object
@return  an array of tag objects
*/
function sh_highlightString(inputString, language) {
  if (/Konqueror/.test(navigator.userAgent)) {
    if (! language.konquered) {
      for (var s = 0; s < language.length; s++) {
        for (var p = 0; p < language[s].length; p++) {
          var r = language[s][p][0];
          if (r.source === '$') {
            r.exec = sh_konquerorExec;
          }
        }
      }
      language.konquered = true;
    }
  }

  var a = document.createElement('a');
  var span = document.createElement('span');

  // the result
  var tags = [];
  var numTags = 0;

  // each element is a pattern object from language
  var patternStack = [];

  // the current position within inputString
  var pos = 0;

  // the name of the current style, or null if there is no current style
  var currentStyle = null;

  var output = function(s, style) {
    var length = s.length;
    // this is more than just an optimization - we don't want to output empty <span></span> elements
    if (length === 0) {
      return;
    }
    if (! style) {
      var stackLength = patternStack.length;
      if (stackLength !== 0) {
        var pattern = patternStack[stackLength - 1];
        // check whether this is a state or an environment
        if (! pattern[3]) {
          // it's not a state - it's an environment; use the style for this environment
          style = pattern[1];
        }
      }
    }
    if (currentStyle !== style) {
      if (currentStyle) {
        tags[numTags++] = {pos: pos};
        if (currentStyle === 'sh_url') {
          sh_setHref(tags, numTags, inputString);
        }
      }
      if (style) {
        var clone;
        if (style === 'sh_url') {
          clone = a.cloneNode(false);
        }
        else {
          clone = span.cloneNode(false);
        }
        clone.className = style;
        tags[numTags++] = {node: clone, pos: pos};
      }
    }
    pos += length;
    currentStyle = style;
  };

  var endOfLinePattern = /\r\n|\r|\n/g;
  endOfLinePattern.lastIndex = 0;
  var inputStringLength = inputString.length;
  while (pos < inputStringLength) {
    var start = pos;
    var end;
    var startOfNextLine;
    var endOfLineMatch = endOfLinePattern.exec(inputString);
    if (endOfLineMatch === null) {
      end = inputStringLength;
      startOfNextLine = inputStringLength;
    }
    else {
      end = endOfLineMatch.index;
      startOfNextLine = endOfLinePattern.lastIndex;
    }

    var line = inputString.substring(start, end);

    var matchCache = [];
    for (;;) {
      var posWithinLine = pos - start;

      var stateIndex;
      var stackLength = patternStack.length;
      if (stackLength === 0) {
        stateIndex = 0;
      }
      else {
        // get the next state
        stateIndex = patternStack[stackLength - 1][2];
      }

      var state = language[stateIndex];
      var numPatterns = state.length;
      var mc = matchCache[stateIndex];
      if (! mc) {
        mc = matchCache[stateIndex] = [];
      }
      var bestMatch = null;
      var bestPatternIndex = -1;
      for (var i = 0; i < numPatterns; i++) {
        var match;
        if (i < mc.length && (mc[i] === null || posWithinLine <= mc[i].index)) {
          match = mc[i];
        }
        else {
          var regex = state[i][0];
          regex.lastIndex = posWithinLine;
          match = regex.exec(line);
          mc[i] = match;
        }
        if (match !== null && (bestMatch === null || match.index < bestMatch.index)) {
          bestMatch = match;
          bestPatternIndex = i;
          if (match.index === posWithinLine) {
            break;
          }
        }
      }

      if (bestMatch === null) {
        output(line.substring(posWithinLine), null);
        break;
      }
      else {
        // got a match
        if (bestMatch.index > posWithinLine) {
          output(line.substring(posWithinLine, bestMatch.index), null);
        }

        var pattern = state[bestPatternIndex];

        var newStyle = pattern[1];
        var matchedString;
        if (newStyle instanceof Array) {
          for (var subexpression = 0; subexpression < newStyle.length; subexpression++) {
            matchedString = bestMatch[subexpression + 1];
            output(matchedString, newStyle[subexpression]);
          }
        }
        else {
          matchedString = bestMatch[0];
          output(matchedString, newStyle);
        }

        switch (pattern[2]) {
        case -1:
          // do nothing
          break;
        case -2:
          // exit
          patternStack.pop();
          break;
        case -3:
          // exitall
          patternStack.length = 0;
          break;
        default:
          // this was the start of a delimited pattern or a state/environment
          patternStack.push(pattern);
          break;
        }
      }
    }

    // end of the line
    if (currentStyle) {
      tags[numTags++] = {pos: pos};
      if (currentStyle === 'sh_url') {
        sh_setHref(tags, numTags, inputString);
      }
      currentStyle = null;
    }
    pos = startOfNextLine;
  }

  return tags;
}

////////////////////////////////////////////////////////////////////////////////
// DOM-dependent functions

function sh_getClasses(element) {
  var result = [];
  var htmlClass = element.className;
  if (htmlClass && htmlClass.length > 0) {
    var htmlClasses = htmlClass.split(' ');
    for (var i = 0; i < htmlClasses.length; i++) {
      if (htmlClasses[i].length > 0) {
        result.push(htmlClasses[i]);
      }
    }
  }
  return result;
}

function sh_addClass(element, name) {
  var htmlClasses = sh_getClasses(element);
  for (var i = 0; i < htmlClasses.length; i++) {
    if (name.toLowerCase() === htmlClasses[i].toLowerCase()) {
      return;
    }
  }
  htmlClasses.push(name);
  element.className = htmlClasses.join(' ');
}

/**
Extracts the tags from an HTML DOM NodeList.
@param  nodeList  a DOM NodeList
@param  result  an object with text, tags and pos properties
*/
function sh_extractTagsFromNodeList(nodeList, result) {
  var length = nodeList.length;
  for (var i = 0; i < length; i++) {
    var node = nodeList.item(i);
    switch (node.nodeType) {
    case 1:
      if (node.nodeName.toLowerCase() === 'br') {
        var terminator;
        if (/MSIE/.test(navigator.userAgent)) {
          terminator = '\r';
        }
        else {
          terminator = '\n';
        }
        result.text.push(terminator);
        result.pos++;
      }
      else {
        result.tags.push({node: node.cloneNode(false), pos: result.pos});
        sh_extractTagsFromNodeList(node.childNodes, result);
        result.tags.push({pos: result.pos});
      }
      break;
    case 3:
    case 4:
      result.text.push(node.data);
      result.pos += node.length;
      break;
    }
  }
}

/**
Extracts the tags from the text of an HTML element. The extracted tags will be
returned as an array of tag objects. See sh_highlightString for the format of
the tag objects.
@param  element  a DOM element
@param  tags  an empty array; the extracted tag objects will be returned in it
@return  the text of the element
@see  sh_highlightString
*/
function sh_extractTags(element, tags) {
  var result = {};
  result.text = [];
  result.tags = tags;
  result.pos = 0;
  sh_extractTagsFromNodeList(element.childNodes, result);
  return result.text.join('');
}

/**
Merges the original tags from an element with the tags produced by highlighting.
@param  originalTags  an array containing the original tags
@param  highlightTags  an array containing the highlighting tags - these must not overlap
@result  an array containing the merged tags
*/
function sh_mergeTags(originalTags, highlightTags) {
  var numOriginalTags = originalTags.length;
  if (numOriginalTags === 0) {
    return highlightTags;
  }

  var numHighlightTags = highlightTags.length;
  if (numHighlightTags === 0) {
    return originalTags;
  }

  var result = [];
  var originalIndex = 0;
  var highlightIndex = 0;

  while (originalIndex < numOriginalTags && highlightIndex < numHighlightTags) {
    var originalTag = originalTags[originalIndex];
    var highlightTag = highlightTags[highlightIndex];

    if (originalTag.pos <= highlightTag.pos) {
      result.push(originalTag);
      originalIndex++;
    }
    else {
      result.push(highlightTag);
      if (highlightTags[highlightIndex + 1].pos <= originalTag.pos) {
        highlightIndex++;
        result.push(highlightTags[highlightIndex]);
        highlightIndex++;
      }
      else {
        // new end tag
        result.push({pos: originalTag.pos});

        // new start tag
        highlightTags[highlightIndex] = {node: highlightTag.node.cloneNode(false), pos: originalTag.pos};
      }
    }
  }

  while (originalIndex < numOriginalTags) {
    result.push(originalTags[originalIndex]);
    originalIndex++;
  }

  while (highlightIndex < numHighlightTags) {
    result.push(highlightTags[highlightIndex]);
    highlightIndex++;
  }

  return result;
}

/**
Inserts tags into text.
@param  tags  an array of tag objects
@param  text  a string representing the text
@return  a DOM DocumentFragment representing the resulting HTML
*/
function sh_insertTags(tags, text) {
  var doc = document;

  var result = document.createDocumentFragment();
  var tagIndex = 0;
  var numTags = tags.length;
  var textPos = 0;
  var textLength = text.length;
  var currentNode = result;

  // output one tag or text node every iteration
  while (textPos < textLength || tagIndex < numTags) {
    var tag;
    var tagPos;
    if (tagIndex < numTags) {
      tag = tags[tagIndex];
      tagPos = tag.pos;
    }
    else {
      tagPos = textLength;
    }

    if (tagPos <= textPos) {
      // output the tag
      if (tag.node) {
        // start tag
        var newNode = tag.node;
        currentNode.appendChild(newNode);
        currentNode = newNode;
      }
      else {
        // end tag
        currentNode = currentNode.parentNode;
      }
      tagIndex++;
    }
    else {
      // output text
      currentNode.appendChild(doc.createTextNode(text.substring(textPos, tagPos)));
      textPos = tagPos;
    }
  }

  return result;
}

/**
Highlights an element containing source code.  Upon completion of this function,
the element will have been placed in the "sh_sourceCode" class.
@param  element  a DOM <pre> element containing the source code to be highlighted
@param  language  a language definition object
*/
function sh_highlightElement(element, language) {
  sh_addClass(element, 'sh_sourceCode');
  var originalTags = [];
  var inputString = sh_extractTags(element, originalTags);
  var highlightTags = sh_highlightString(inputString, language);
  var tags = sh_mergeTags(originalTags, highlightTags);
  var documentFragment = sh_insertTags(tags, inputString);
  while (element.hasChildNodes()) {
    element.removeChild(element.firstChild);
  }
  element.appendChild(documentFragment);
}

function sh_getXMLHttpRequest() {
  if (window.ActiveXObject) {
    return new ActiveXObject('Msxml2.XMLHTTP');
  }
  else if (window.XMLHttpRequest) {
    return new XMLHttpRequest();
  }
  throw 'No XMLHttpRequest implementation available';
}

function sh_load(language, element, prefix, suffix) {
  if (language in sh_requests) {
    sh_requests[language].push(element);
    return;
  }
  sh_requests[language] = [element];
  var request = sh_getXMLHttpRequest();
  var url = prefix + 'sh_' + language + suffix;
  request.open('GET', url, true);
  request.onreadystatechange = function () {
    if (request.readyState === 4) {
      try {
        if (! request.status || request.status === 200) {
          eval(request.responseText);
          var elements = sh_requests[language];
          for (var i = 0; i < elements.length; i++) {
            sh_highlightElement(elements[i], sh_languages[language]);
          }
        }
        else {
          throw 'HTTP error: status ' + request.status;
        }
      }
      finally {
        request = null;
      }
    }
  };
  request.send(null);
}

/**
Highlights all elements containing source code on the current page. Elements
containing source code must be "pre" elements with a "class" attribute of
"sh_LANGUAGE", where LANGUAGE is a valid language identifier; e.g., "sh_java"
identifies the element as containing "java" language source code.
*/
function highlight(prefix, suffix, tag) {
  var nodeList = document.getElementsByTagName(tag);
  for (var i = 0; i < nodeList.length; i++) {
    var element = nodeList.item(i);
    var htmlClasses = sh_getClasses(element);
    var highlighted = false;
    var donthighlight = false;
    for (var j = 0; j < htmlClasses.length; j++) {
      var htmlClass = htmlClasses[j].toLowerCase();
      if (htmlClass === 'sh_none') {
        donthighlight = true
        continue;
      }
      if (htmlClass.substr(0, 3) === 'sh_') {
        var language = htmlClass.substring(3);
        if (language in sh_languages) {
          sh_highlightElement(element, sh_languages[language]);
          highlighted = true;
        }
        else if (typeof(prefix) === 'string' && typeof(suffix) === 'string') {
          sh_load(language, element, prefix, suffix);
        }
        else {
          throw 'Found <' + tag + '> element with class="' + htmlClass + '", but no such language exists';
        }
        break;
      }
    }
    if (highlighted === false && donthighlight == false) {
      sh_highlightElement(element, sh_languages["javascript"]);
    }
  }
}



function sh_highlightDocument(prefix, suffix) {
  highlight(prefix, suffix, 'tt');
  highlight(prefix, suffix, 'code');
  highlight(prefix, suffix, 'pre');
}
</script>
  <script>if(!this.sh_languages){this.sh_languages={}}sh_languages.javascript=[[[/\/\/\//g,"sh_comment",1],[/\/\//g,"sh_comment",7],[/\/\*\*/g,"sh_comment",8],[/\/\*/g,"sh_comment",9],[/\b(?:abstract|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|false|final|finally|for|function|goto|if|implements|in|instanceof|interface|native|new|null|private|protected|prototype|public|return|static|super|switch|synchronized|throw|throws|this|transient|true|try|typeof|var|volatile|while|with)\b/g,"sh_keyword",-1],[/(\+\+|--|\)|\])(\s*)(\/=?(?![*\/]))/g,["sh_symbol","sh_normal","sh_symbol"],-1],[/(0x[A-Fa-f0-9]+|(?:[\d]*\.)?[\d]+(?:[eE][+-]?[\d]+)?)(\s*)(\/(?![*\/]))/g,["sh_number","sh_normal","sh_symbol"],-1],[/([A-Za-z$_][A-Za-z0-9$_]*\s*)(\/=?(?![*\/]))/g,["sh_normal","sh_symbol"],-1],[/\/(?:\\.|[^*\\\/])(?:\\.|[^\\\/])*\/[gim]*/g,"sh_regexp",-1],[/\b[+-]?(?:(?:0x[A-Fa-f0-9]+)|(?:(?:[\d]*\.)?[\d]+(?:[eE][+-]?[\d]+)?))u?(?:(?:int(?:8|16|32|64))|L)?\b/g,"sh_number",-1],[/"/g,"sh_string",10],[/'/g,"sh_string",11],[/~|!|%|\^|\*|\(|\)|-|\+|=|\[|\]|\\|:|;|,|\.|\/|\?|&|<|>|\|/g,"sh_symbol",-1],[/\{|\}/g,"sh_cbracket",-1],[/\b(?:Math|Infinity|NaN|undefined|arguments)\b/g,"sh_predef_var",-1],[/\b(?:Array|Boolean|Date|Error|EvalError|Function|Number|Object|RangeError|ReferenceError|RegExp|String|SyntaxError|TypeError|URIError|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|eval|isFinite|isNaN|parseFloat|parseInt)\b/g,"sh_predef_func",-1],[/(?:[A-Za-z]|_)[A-Za-z0-9_]*(?=[ \t]*\()/g,"sh_function",-1]],[[/$/g,null,-2],[/(?:<?)[A-Za-z0-9_\.\/\-_~]+@[A-Za-z0-9_\.\/\-_~]+(?:>?)|(?:<?)[A-Za-z0-9_]+:\/\/[A-Za-z0-9_\.\/\-_~]+(?:>?)/g,"sh_url",-1],[/<\?xml/g,"sh_preproc",2,1],[/<!DOCTYPE/g,"sh_preproc",4,1],[/<!--/g,"sh_comment",5],[/<(?:\/)?[A-Za-z](?:[A-Za-z0-9_:.-]*)(?:\/)?>/g,"sh_keyword",-1],[/<(?:\/)?[A-Za-z](?:[A-Za-z0-9_:.-]*)/g,"sh_keyword",6,1],[/&(?:[A-Za-z0-9]+);/g,"sh_preproc",-1],[/<(?:\/)?[A-Za-z][A-Za-z0-9]*(?:\/)?>/g,"sh_keyword",-1],[/<(?:\/)?[A-Za-z][A-Za-z0-9]*/g,"sh_keyword",6,1],[/@[A-Za-z]+/g,"sh_type",-1],[/(?:TODO|FIXME|BUG)(?:[:]?)/g,"sh_todo",-1]],[[/\?>/g,"sh_preproc",-2],[/([^=" \t>]+)([ \t]*)(=?)/g,["sh_type","sh_normal","sh_symbol"],-1],[/"/g,"sh_string",3]],[[/\\(?:\\|")/g,null,-1],[/"/g,"sh_string",-2]],[[/>/g,"sh_preproc",-2],[/([^=" \t>]+)([ \t]*)(=?)/g,["sh_type","sh_normal","sh_symbol"],-1],[/"/g,"sh_string",3]],[[/-->/g,"sh_comment",-2],[/<!--/g,"sh_comment",5]],[[/(?:\/)?>/g,"sh_keyword",-2],[/([^=" \t>]+)([ \t]*)(=?)/g,["sh_type","sh_normal","sh_symbol"],-1],[/"/g,"sh_string",3]],[[/$/g,null,-2]],[[/\*\//g,"sh_comment",-2],[/(?:<?)[A-Za-z0-9_\.\/\-_~]+@[A-Za-z0-9_\.\/\-_~]+(?:>?)|(?:<?)[A-Za-z0-9_]+:\/\/[A-Za-z0-9_\.\/\-_~]+(?:>?)/g,"sh_url",-1],[/<\?xml/g,"sh_preproc",2,1],[/<!DOCTYPE/g,"sh_preproc",4,1],[/<!--/g,"sh_comment",5],[/<(?:\/)?[A-Za-z](?:[A-Za-z0-9_:.-]*)(?:\/)?>/g,"sh_keyword",-1],[/<(?:\/)?[A-Za-z](?:[A-Za-z0-9_:.-]*)/g,"sh_keyword",6,1],[/&(?:[A-Za-z0-9]+);/g,"sh_preproc",-1],[/<(?:\/)?[A-Za-z][A-Za-z0-9]*(?:\/)?>/g,"sh_keyword",-1],[/<(?:\/)?[A-Za-z][A-Za-z0-9]*/g,"sh_keyword",6,1],[/@[A-Za-z]+/g,"sh_type",-1],[/(?:TODO|FIXME|BUG)(?:[:]?)/g,"sh_todo",-1]],[[/\*\//g,"sh_comment",-2],[/(?:<?)[A-Za-z0-9_\.\/\-_~]+@[A-Za-z0-9_\.\/\-_~]+(?:>?)|(?:<?)[A-Za-z0-9_]+:\/\/[A-Za-z0-9_\.\/\-_~]+(?:>?)/g,"sh_url",-1],[/(?:TODO|FIXME|BUG)(?:[:]?)/g,"sh_todo",-1]],[[/"/g,"sh_string",-2],[/\\./g,"sh_specialchar",-1]],[[/'/g,"sh_string",-2],[/\\./g,"sh_specialchar",-1]]];</script>
  <script>highlight(undefined, undefined, 'pre');</script>



</body></html>